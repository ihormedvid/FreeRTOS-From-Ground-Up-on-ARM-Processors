
fr_32_TheScheduler_PreemptionOnly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf0  08005cf0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf8  08005cf8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  2000006c  08005d6c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bc4  08005d6c  00024bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016876  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003486  00000000  00000000  00036955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  00039de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff4  00000000  00000000  0003b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ad5  00000000  00000000  0003c26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b72  00000000  00000000  00040d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099ef5  00000000  00000000  000578b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ddc  00000000  00000000  000f17a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f7584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c28 	.word	0x08005c28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005c28 	.word	0x08005c28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
void vOrangeLedControllerTask(void *pvParams);
void vGreenLedControllerTask(void *pvParams);


int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8

  HAL_Init();
 8000582:	f000 fb65 	bl	8000c50 <HAL_Init>

  SystemClock_Config();
 8000586:	f000 f8a5 	bl	80006d4 <SystemClock_Config>


  MX_GPIO_Init();
 800058a:	f000 f901 	bl	8000790 <MX_GPIO_Init>
  USART2_UART_TX_Init();
 800058e:	f000 faed 	bl	8000b6c <USART2_UART_TX_Init>


  printf("System was initialized...\n\r");
 8000592:	4817      	ldr	r0, [pc, #92]	; (80005f0 <main+0x74>)
 8000594:	f004 fcc4 	bl	8004f20 <iprintf>

  xTaskCreate(vOrangeLedControllerTask,
 8000598:	2300      	movs	r3, #0
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2301      	movs	r3, #1
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	2264      	movs	r2, #100	; 0x64
 80005a4:	4913      	ldr	r1, [pc, #76]	; (80005f4 <main+0x78>)
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <main+0x7c>)
 80005a8:	f002 fe07 	bl	80031ba <xTaskCreate>
		  100,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(vBlueLedControllerTask,
 80005ac:	2300      	movs	r3, #0
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	2264      	movs	r2, #100	; 0x64
 80005b8:	4910      	ldr	r1, [pc, #64]	; (80005fc <main+0x80>)
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <main+0x84>)
 80005bc:	f002 fdfd 	bl	80031ba <xTaskCreate>
		  100,
		  NULL,
		  2,
		  NULL);

  xTaskCreate(vRedLedControllerTask,
 80005c0:	2300      	movs	r3, #0
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2264      	movs	r2, #100	; 0x64
 80005cc:	490d      	ldr	r1, [pc, #52]	; (8000604 <main+0x88>)
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <main+0x8c>)
 80005d0:	f002 fdf3 	bl	80031ba <xTaskCreate>
		  100,
		  NULL,
		  2,
		  NULL);

  xTaskCreate(vGreenLedControllerTask,
 80005d4:	2300      	movs	r3, #0
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2301      	movs	r3, #1
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	2264      	movs	r2, #100	; 0x64
 80005e0:	490a      	ldr	r1, [pc, #40]	; (800060c <main+0x90>)
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <main+0x94>)
 80005e4:	f002 fde9 	bl	80031ba <xTaskCreate>
		  100,
		  NULL,
		  1,
		  NULL);

  vTaskStartScheduler();
 80005e8:	f002 ff2c 	bl	8003444 <vTaskStartScheduler>



  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x70>
 80005ee:	bf00      	nop
 80005f0:	08005c40 	.word	0x08005c40
 80005f4:	08005c5c 	.word	0x08005c5c
 80005f8:	08000675 	.word	0x08000675
 80005fc:	08005c68 	.word	0x08005c68
 8000600:	08000615 	.word	0x08000615
 8000604:	08005c74 	.word	0x08005c74
 8000608:	08000645 	.word	0x08000645
 800060c:	08005c80 	.word	0x08005c80
 8000610:	080006a5 	.word	0x080006a5

08000614 <vBlueLedControllerTask>:
}



void vBlueLedControllerTask(void *pvParams)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	int i=0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]

	while(1) {
		Blue_TaskProfiler++;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <vBlueLedControllerTask+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <vBlueLedControllerTask+0x28>)
 8000628:	6013      	str	r3, [r2, #0]
		for(i; i<70000; i++){};
 800062a:	e002      	b.n	8000632 <vBlueLedControllerTask+0x1e>
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4a02      	ldr	r2, [pc, #8]	; (8000640 <vBlueLedControllerTask+0x2c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	ddf8      	ble.n	800062c <vBlueLedControllerTask+0x18>
		Blue_TaskProfiler++;
 800063a:	e7f1      	b.n	8000620 <vBlueLedControllerTask+0xc>
 800063c:	20000094 	.word	0x20000094
 8000640:	0001116f 	.word	0x0001116f

08000644 <vRedLedControllerTask>:
	}

}

void vRedLedControllerTask(void *pvParams)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	int i=0;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]

	while(1) {
		Red_TaskProfiler++;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <vRedLedControllerTask+0x28>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <vRedLedControllerTask+0x28>)
 8000658:	6013      	str	r3, [r2, #0]
		for(i; i<70000; i++){};
 800065a:	e002      	b.n	8000662 <vRedLedControllerTask+0x1e>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4a02      	ldr	r2, [pc, #8]	; (8000670 <vRedLedControllerTask+0x2c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	ddf8      	ble.n	800065c <vRedLedControllerTask+0x18>
		Red_TaskProfiler++;
 800066a:	e7f1      	b.n	8000650 <vRedLedControllerTask+0xc>
 800066c:	2000008c 	.word	0x2000008c
 8000670:	0001116f 	.word	0x0001116f

08000674 <vOrangeLedControllerTask>:
	}

}

void vOrangeLedControllerTask(void *pvParams)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	int i=0;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]

	while(1) {
		Oragne_TaskProfiler++;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <vOrangeLedControllerTask+0x28>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <vOrangeLedControllerTask+0x28>)
 8000688:	6013      	str	r3, [r2, #0]
		for(i; i<70000; i++){};
 800068a:	e002      	b.n	8000692 <vOrangeLedControllerTask+0x1e>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	4a02      	ldr	r2, [pc, #8]	; (80006a0 <vOrangeLedControllerTask+0x2c>)
 8000696:	4293      	cmp	r3, r2
 8000698:	ddf8      	ble.n	800068c <vOrangeLedControllerTask+0x18>
		Oragne_TaskProfiler++;
 800069a:	e7f1      	b.n	8000680 <vOrangeLedControllerTask+0xc>
 800069c:	20000088 	.word	0x20000088
 80006a0:	0001116f 	.word	0x0001116f

080006a4 <vGreenLedControllerTask>:
	}

}

void vGreenLedControllerTask(void *pvParams)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	int i=0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]

	while(1) {
		Green_TaskProfiler++;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <vGreenLedControllerTask+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <vGreenLedControllerTask+0x28>)
 80006b8:	6013      	str	r3, [r2, #0]
		for(i; i<70000; i++){};
 80006ba:	e002      	b.n	80006c2 <vGreenLedControllerTask+0x1e>
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4a02      	ldr	r2, [pc, #8]	; (80006d0 <vGreenLedControllerTask+0x2c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	ddf8      	ble.n	80006bc <vGreenLedControllerTask+0x18>
		Green_TaskProfiler++;
 80006ca:	e7f1      	b.n	80006b0 <vGreenLedControllerTask+0xc>
 80006cc:	20000090 	.word	0x20000090
 80006d0:	0001116f 	.word	0x0001116f

080006d4 <SystemClock_Config>:
	}
}


void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fc71 	bl	8004fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xb4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <SystemClock_Config+0xb4>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemClock_Config+0xb4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemClock_Config+0xb8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1b      	ldr	r2, [pc, #108]	; (800078c <SystemClock_Config+0xb8>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemClock_Config+0xb8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fd2b 	bl	80011a0 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000750:	f000 f84a 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f000 ff8e 	bl	8001690 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800077a:	f000 f835 	bl	80007e8 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_GPIO_Init+0x30>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <MX_GPIO_Init+0x30>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_GPIO_Init+0x30>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 fa5d 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010000 	.word	0x40010000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <HAL_MspInit+0x54>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_MspInit+0x54>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	f06f 0001 	mvn.w	r0, #1
 800083a:	f000 fb03 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0x84>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d12b      	bne.n	80008c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <HAL_UART_MspInit+0x88>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <HAL_UART_MspInit+0x88>)
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_UART_MspInit+0x88>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_UART_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <HAL_UART_MspInit+0x88>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_UART_MspInit+0x88>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008a6:	230c      	movs	r3, #12
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b6:	2307      	movs	r3, #7
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 80008c2:	f000 fae9 	bl	8000e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40004400 	.word	0x40004400
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <HAL_InitTick+0xd0>)
 80008f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f4:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <HAL_InitTick+0xd0>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6453      	str	r3, [r2, #68]	; 0x44
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <HAL_InitTick+0xd0>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000908:	f107 020c 	add.w	r2, r7, #12
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f89c 	bl	8001a50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000918:	f001 f886 	bl	8001a28 <HAL_RCC_GetPCLK2Freq>
 800091c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <HAL_InitTick+0xd4>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <HAL_InitTick+0xd8>)
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_InitTick+0xdc>)
 8000930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <HAL_InitTick+0xd8>)
 8000934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <HAL_InitTick+0xd8>)
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_InitTick+0xd8>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_InitTick+0xd8>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_InitTick+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000952:	4818      	ldr	r0, [pc, #96]	; (80009b4 <HAL_InitTick+0xd8>)
 8000954:	f001 f8ae 	bl	8001ab4 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000962:	2b00      	cmp	r3, #0
 8000964:	d11b      	bne.n	800099e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <HAL_InitTick+0xd8>)
 8000968:	f001 f8fe 	bl	8001b68 <HAL_TIM_Base_Start_IT>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000976:	2b00      	cmp	r3, #0
 8000978:	d111      	bne.n	800099e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800097a:	2019      	movs	r0, #25
 800097c:	f000 fa7e 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b0f      	cmp	r3, #15
 8000984:	d808      	bhi.n	8000998 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000986:	2200      	movs	r2, #0
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	2019      	movs	r0, #25
 800098c:	f000 fa5a 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_InitTick+0xe0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	e002      	b.n	800099e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	20000098 	.word	0x20000098
 80009b8:	40010000 	.word	0x40010000
 80009bc:	20000004 	.word	0x20000004

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009f2:	f001 f91b 	bl	8001c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000098 	.word	0x20000098

08000a00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e00a      	b.n	8000a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a12:	f3af 8000 	nop.w
 8000a16:	4601      	mov	r1, r0
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	b2ca      	uxtb	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbf0      	blt.n	8000a12 <_read+0x12>
  }

  return len;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e009      	b.n	8000a60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f8c5 	bl	8000be4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf1      	blt.n	8000a4c <_write+0x12>
  }
  return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_close>:

int _close(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_isatty>:

int _isatty(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f004 faac 	bl	8005068 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20020000 	.word	0x20020000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	200000e0 	.word	0x200000e0
 8000b44:	20004bc8 	.word	0x20004bc8

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <USART2_UART_TX_Init>:

UART_HandleTypeDef huart2;


void USART2_UART_TX_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <USART2_UART_TX_Init+0x44>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b92:	2208      	movs	r2, #8
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <USART2_UART_TX_Init+0x40>)
 8000ba4:	f001 fa06 	bl	8001fb4 <HAL_UART_Init>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000e4 	.word	0x200000e4
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <USART2_write>:
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
}

int USART2_write(int ch) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	while(!(USART2 -> SR & 0x0080)) {}
 8000bbc:	bf00      	nop
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <USART2_write+0x2c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f9      	beq.n	8000bbe <USART2_write+0xa>
	USART2-> DR = (ch & 0xFF);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <USART2_write+0x2c>)
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	6053      	str	r3, [r2, #4]

	return ch;
 8000bd2:	687b      	ldr	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40004400 	.word	0x40004400

08000be4 <__io_putchar>:


int __io_putchar(int ch){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffe1 	bl	8000bb4 <USART2_write>

	return ch;
 8000bf2:	687b      	ldr	r3, [r7, #4]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ff8f 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f004 fa23 	bl	8005074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fca5 	bl	800057c <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c40:	08005d00 	.word	0x08005d00
  ldr r2, =_sbss
 8000c44:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c48:	20004bc4 	.word	0x20004bc4

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f7ff fe2c 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fdb6 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000128 	.word	0x20000128

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000128 	.word	0x20000128

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e159      	b.n	8001168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8148 	bne.w	8001162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a2 	beq.w	8001162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b57      	ldr	r3, [pc, #348]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a56      	ldr	r2, [pc, #344]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x202>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_GPIO_Init+0x2f4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x1fe>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a47      	ldr	r2, [pc, #284]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x1fa>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_GPIO_Init+0x2fc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x1f6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a45      	ldr	r2, [pc, #276]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x1f2>
 8001086:	2304      	movs	r3, #4
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108a:	2307      	movs	r3, #7
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x204>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_GPIO_Init+0x304>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010de:	4a2f      	ldr	r2, [pc, #188]	; (800119c <HAL_GPIO_Init+0x304>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_GPIO_Init+0x304>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001108:	4a24      	ldr	r2, [pc, #144]	; (800119c <HAL_GPIO_Init+0x304>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_GPIO_Init+0x304>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <HAL_GPIO_Init+0x304>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_GPIO_Init+0x304>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_GPIO_Init+0x304>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f aea2 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e267      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d075      	beq.n	80012aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d00c      	beq.n	80011e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ca:	4b85      	ldr	r3, [pc, #532]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d112      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e2:	d10b      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	4b7e      	ldr	r3, [pc, #504]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d05b      	beq.n	80012a8 <HAL_RCC_OscConfig+0x108>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d157      	bne.n	80012a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e242      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001204:	d106      	bne.n	8001214 <HAL_RCC_OscConfig+0x74>
 8001206:	4b76      	ldr	r3, [pc, #472]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a75      	ldr	r2, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x98>
 800121e:	4b70      	ldr	r3, [pc, #448]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6f      	ldr	r2, [pc, #444]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6c      	ldr	r2, [pc, #432]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001238:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a68      	ldr	r2, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a65      	ldr	r2, [pc, #404]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fd30 	bl	8000cbc <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fd2c 	bl	8000cbc <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e207      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xc0>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fd1c 	bl	8000cbc <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fd18 	bl	8000cbc <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1f3      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0xe8>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1c7      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4937      	ldr	r1, [pc, #220]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e03a      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HAL_RCC_OscConfig+0x244>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fcd1 	bl	8000cbc <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fccd 	bl	8000cbc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1a8      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4925      	ldr	r1, [pc, #148]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x244>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fcb0 	bl	8000cbc <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fcac 	bl	8000cbc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e187      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d036      	beq.n	80013f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d016      	beq.n	80013c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_RCC_OscConfig+0x248>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fc90 	bl	8000cbc <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc8c 	bl	8000cbc <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e167      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x200>
 80013be:	e01b      	b.n	80013f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_OscConfig+0x248>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fc79 	bl	8000cbc <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	e00e      	b.n	80013ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fc75 	bl	8000cbc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d907      	bls.n	80013ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e150      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
 80013e0:	40023800 	.word	0x40023800
 80013e4:	42470000 	.word	0x42470000
 80013e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80013ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ea      	bne.n	80013ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8097 	beq.w	8001534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10f      	bne.n	8001436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b7d      	ldr	r3, [pc, #500]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b77      	ldr	r3, [pc, #476]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001442:	4b74      	ldr	r3, [pc, #464]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a73      	ldr	r2, [pc, #460]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff fc35 	bl	8000cbc <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff fc31 	bl	8000cbc <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e10c      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x474>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x2ea>
 800147c:	4b64      	ldr	r3, [pc, #400]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a63      	ldr	r2, [pc, #396]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	e01c      	b.n	80014c4 <HAL_RCC_OscConfig+0x324>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x30c>
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a5e      	ldr	r2, [pc, #376]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a5b      	ldr	r2, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0x324>
 80014ac:	4b58      	ldr	r3, [pc, #352]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a57      	ldr	r2, [pc, #348]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014be:	f023 0304 	bic.w	r3, r3, #4
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d015      	beq.n	80014f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fbf6 	bl	8000cbc <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff fbf2 	bl	8000cbc <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0cb      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	4b49      	ldr	r3, [pc, #292]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0ee      	beq.n	80014d4 <HAL_RCC_OscConfig+0x334>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fbe0 	bl	8000cbc <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff fbdc 	bl	8000cbc <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e0b5      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1ee      	bne.n	8001500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a38      	ldr	r2, [pc, #224]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 800152e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a1 	beq.w	8001680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b08      	cmp	r3, #8
 8001548:	d05c      	beq.n	8001604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d141      	bne.n	80015d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	4b31      	ldr	r3, [pc, #196]	; (8001618 <HAL_RCC_OscConfig+0x478>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fbb0 	bl	8000cbc <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fbac 	bl	8000cbc <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e087      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	3b01      	subs	r3, #1
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	061b      	lsls	r3, r3, #24
 80015a2:	491b      	ldr	r1, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_RCC_OscConfig+0x478>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fb85 	bl	8000cbc <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff fb81 	bl	8000cbc <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e05c      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x416>
 80015d4:	e054      	b.n	8001680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x478>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb6e 	bl	8000cbc <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fb6a 	bl	8000cbc <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e045      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x470>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x444>
 8001602:	e03d      	b.n	8001680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e038      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000
 8001618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x4ec>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d028      	beq.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d121      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d11a      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001654:	4293      	cmp	r3, r2
 8001656:	d111      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	3b01      	subs	r3, #1
 8001666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0cc      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d90c      	bls.n	80016cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0b8      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e4:	4b59      	ldr	r3, [pc, #356]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	494d      	ldr	r1, [pc, #308]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d044      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d119      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e07f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d003      	beq.n	800174e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e067      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176e:	4b37      	ldr	r3, [pc, #220]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 0203 	bic.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4934      	ldr	r1, [pc, #208]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff fa9c 	bl	8000cbc <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff fa98 	bl	8000cbc <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e04f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 020c 	and.w	r2, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1eb      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d20c      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e032      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4916      	ldr	r1, [pc, #88]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001816:	f000 f821 	bl	800185c <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	490a      	ldr	r1, [pc, #40]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f850 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00
 800184c:	40023800 	.word	0x40023800
 8001850:	08005ca4 	.word	0x08005ca4
 8001854:	20000000 	.word	0x20000000
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001860:	b090      	sub	sp, #64	; 0x40
 8001862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
 8001868:	2300      	movs	r3, #0
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d00d      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x40>
 8001880:	2b08      	cmp	r3, #8
 8001882:	f200 80a1 	bhi.w	80019c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x34>
 800188a:	2b04      	cmp	r3, #4
 800188c:	d003      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0x3a>
 800188e:	e09b      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001894:	e09b      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001896:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800189a:	e098      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800189c:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a6:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d028      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	2200      	movs	r2, #0
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	627a      	str	r2, [r7, #36]	; 0x24
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018c4:	2100      	movs	r1, #0
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c8:	fb03 f201 	mul.w	r2, r3, r1
 80018cc:	2300      	movs	r3, #0
 80018ce:	fb00 f303 	mul.w	r3, r0, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	4a43      	ldr	r2, [pc, #268]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018d6:	fba0 1202 	umull	r1, r2, r0, r2
 80018da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018dc:	460a      	mov	r2, r1
 80018de:	62ba      	str	r2, [r7, #40]	; 0x28
 80018e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e2:	4413      	add	r3, r2
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	2200      	movs	r2, #0
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	61fa      	str	r2, [r7, #28]
 80018ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018f6:	f7fe fcc3 	bl	8000280 <__aeabi_uldivmod>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4613      	mov	r3, r2
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001902:	e053      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	2200      	movs	r2, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	617a      	str	r2, [r7, #20]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001916:	f04f 0b00 	mov.w	fp, #0
 800191a:	4652      	mov	r2, sl
 800191c:	465b      	mov	r3, fp
 800191e:	f04f 0000 	mov.w	r0, #0
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	0159      	lsls	r1, r3, #5
 8001928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800192c:	0150      	lsls	r0, r2, #5
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	ebb2 080a 	subs.w	r8, r2, sl
 8001936:	eb63 090b 	sbc.w	r9, r3, fp
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800194a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800194e:	ebb2 0408 	subs.w	r4, r2, r8
 8001952:	eb63 0509 	sbc.w	r5, r3, r9
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	00eb      	lsls	r3, r5, #3
 8001960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001964:	00e2      	lsls	r2, r4, #3
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	eb14 030a 	adds.w	r3, r4, sl
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	eb45 030b 	adc.w	r3, r5, fp
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001982:	4629      	mov	r1, r5
 8001984:	028b      	lsls	r3, r1, #10
 8001986:	4621      	mov	r1, r4
 8001988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800198c:	4621      	mov	r1, r4
 800198e:	028a      	lsls	r2, r1, #10
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	2200      	movs	r2, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	60fa      	str	r2, [r7, #12]
 800199c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a0:	f7fe fc6e 	bl	8000280 <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4613      	mov	r3, r2
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	3301      	adds	r3, #1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019c6:	e002      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3740      	adds	r7, #64	; 0x40
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	017d7840 	.word	0x017d7840

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08005cb4 	.word	0x08005cb4

08001a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a2c:	f7ff ffdc 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0b5b      	lsrs	r3, r3, #13
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4903      	ldr	r1, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08005cb4 	.word	0x08005cb4

08001a50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <HAL_RCC_GetClockConfig+0x60>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0207 	and.w	r2, r3, #7
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e041      	b.n	8001b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f839 	bl	8001b52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f000 f9ca 	bl	8001e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d001      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e044      	b.n	8001c0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d018      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d013      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <HAL_TIM_Base_Start_IT+0xb4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00e      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d010      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf6:	e007      	b.n	8001c08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40000800 	.word	0x40000800
 8001c24:	40000c00 	.word	0x40000c00
 8001c28:	40014000 	.word	0x40014000

08001c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0202 	mvn.w	r2, #2
 8001c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8ee 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8e0 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8f1 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0204 	mvn.w	r2, #4
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8c4 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8b6 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8c7 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f89a 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f88c 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f89d 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0210 	mvn.w	r2, #16
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f870 	bl	8001e50 <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f862 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f873 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0201 	mvn.w	r2, #1
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fd0a 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b80      	cmp	r3, #128	; 0x80
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8e2 	bl	8001fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df4:	2b40      	cmp	r3, #64	; 0x40
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f838 	bl	8001e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0220 	mvn.w	r2, #32
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8ac 	bl	8001f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a34      	ldr	r2, [pc, #208]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00f      	beq.n	8001ec4 <TIM_Base_SetConfig+0x38>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eaa:	d00b      	beq.n	8001ec4 <TIM_Base_SetConfig+0x38>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <TIM_Base_SetConfig+0xe8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <TIM_Base_SetConfig+0x38>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <TIM_Base_SetConfig+0xec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <TIM_Base_SetConfig+0x38>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <TIM_Base_SetConfig+0xf0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d108      	bne.n	8001ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01b      	beq.n	8001f16 <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d017      	beq.n	8001f16 <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <TIM_Base_SetConfig+0xe8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <TIM_Base_SetConfig+0x8a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <TIM_Base_SetConfig+0xec>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00f      	beq.n	8001f16 <TIM_Base_SetConfig+0x8a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a20      	ldr	r2, [pc, #128]	; (8001f7c <TIM_Base_SetConfig+0xf0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00b      	beq.n	8001f16 <TIM_Base_SetConfig+0x8a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <TIM_Base_SetConfig+0xf4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <TIM_Base_SetConfig+0xf8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d003      	beq.n	8001f16 <TIM_Base_SetConfig+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <TIM_Base_SetConfig+0xfc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d108      	bne.n	8001f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <TIM_Base_SetConfig+0xe4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d103      	bne.n	8001f5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	615a      	str	r2, [r3, #20]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40000c00 	.word	0x40000c00
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40014400 	.word	0x40014400
 8001f88:	40014800 	.word	0x40014800

08001f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e03f      	b.n	8002046 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fc36 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f829 	bl	8002050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800200c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800201c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002054:	b0c0      	sub	sp, #256	; 0x100
 8002056:	af00      	add	r7, sp, #0
 8002058:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206c:	68d9      	ldr	r1, [r3, #12]
 800206e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	ea40 0301 	orr.w	r3, r0, r1
 8002078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800207a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	431a      	orrs	r2, r3
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	431a      	orrs	r2, r3
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020a8:	f021 010c 	bic.w	r1, r1, #12
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020b6:	430b      	orrs	r3, r1
 80020b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ca:	6999      	ldr	r1, [r3, #24]
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	ea40 0301 	orr.w	r3, r0, r1
 80020d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b8f      	ldr	r3, [pc, #572]	; (800231c <UART_SetConfig+0x2cc>)
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d005      	beq.n	80020f0 <UART_SetConfig+0xa0>
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <UART_SetConfig+0x2d0>)
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d104      	bne.n	80020fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020f0:	f7ff fc9a 	bl	8001a28 <HAL_RCC_GetPCLK2Freq>
 80020f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020f8:	e003      	b.n	8002102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020fa:	f7ff fc81 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 80020fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210c:	f040 810c 	bne.w	8002328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002114:	2200      	movs	r2, #0
 8002116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800211a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800211e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002122:	4622      	mov	r2, r4
 8002124:	462b      	mov	r3, r5
 8002126:	1891      	adds	r1, r2, r2
 8002128:	65b9      	str	r1, [r7, #88]	; 0x58
 800212a:	415b      	adcs	r3, r3
 800212c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800212e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002132:	4621      	mov	r1, r4
 8002134:	eb12 0801 	adds.w	r8, r2, r1
 8002138:	4629      	mov	r1, r5
 800213a:	eb43 0901 	adc.w	r9, r3, r1
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800214a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800214e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002152:	4690      	mov	r8, r2
 8002154:	4699      	mov	r9, r3
 8002156:	4623      	mov	r3, r4
 8002158:	eb18 0303 	adds.w	r3, r8, r3
 800215c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002160:	462b      	mov	r3, r5
 8002162:	eb49 0303 	adc.w	r3, r9, r3
 8002166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002176:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800217a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800217e:	460b      	mov	r3, r1
 8002180:	18db      	adds	r3, r3, r3
 8002182:	653b      	str	r3, [r7, #80]	; 0x50
 8002184:	4613      	mov	r3, r2
 8002186:	eb42 0303 	adc.w	r3, r2, r3
 800218a:	657b      	str	r3, [r7, #84]	; 0x54
 800218c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002194:	f7fe f874 	bl	8000280 <__aeabi_uldivmod>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <UART_SetConfig+0x2d4>)
 800219e:	fba3 2302 	umull	r2, r3, r3, r2
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	011c      	lsls	r4, r3, #4
 80021a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021b8:	4642      	mov	r2, r8
 80021ba:	464b      	mov	r3, r9
 80021bc:	1891      	adds	r1, r2, r2
 80021be:	64b9      	str	r1, [r7, #72]	; 0x48
 80021c0:	415b      	adcs	r3, r3
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021c8:	4641      	mov	r1, r8
 80021ca:	eb12 0a01 	adds.w	sl, r2, r1
 80021ce:	4649      	mov	r1, r9
 80021d0:	eb43 0b01 	adc.w	fp, r3, r1
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021e8:	4692      	mov	sl, r2
 80021ea:	469b      	mov	fp, r3
 80021ec:	4643      	mov	r3, r8
 80021ee:	eb1a 0303 	adds.w	r3, sl, r3
 80021f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021f6:	464b      	mov	r3, r9
 80021f8:	eb4b 0303 	adc.w	r3, fp, r3
 80021fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800220c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002214:	460b      	mov	r3, r1
 8002216:	18db      	adds	r3, r3, r3
 8002218:	643b      	str	r3, [r7, #64]	; 0x40
 800221a:	4613      	mov	r3, r2
 800221c:	eb42 0303 	adc.w	r3, r2, r3
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
 8002222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800222a:	f7fe f829 	bl	8000280 <__aeabi_uldivmod>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4611      	mov	r1, r2
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <UART_SetConfig+0x2d4>)
 8002236:	fba3 2301 	umull	r2, r3, r3, r1
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2264      	movs	r2, #100	; 0x64
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	1acb      	subs	r3, r1, r3
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800224a:	4b36      	ldr	r3, [pc, #216]	; (8002324 <UART_SetConfig+0x2d4>)
 800224c:	fba3 2302 	umull	r2, r3, r3, r2
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002258:	441c      	add	r4, r3
 800225a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800225e:	2200      	movs	r2, #0
 8002260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002264:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800226c:	4642      	mov	r2, r8
 800226e:	464b      	mov	r3, r9
 8002270:	1891      	adds	r1, r2, r2
 8002272:	63b9      	str	r1, [r7, #56]	; 0x38
 8002274:	415b      	adcs	r3, r3
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800227c:	4641      	mov	r1, r8
 800227e:	1851      	adds	r1, r2, r1
 8002280:	6339      	str	r1, [r7, #48]	; 0x30
 8002282:	4649      	mov	r1, r9
 8002284:	414b      	adcs	r3, r1
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002294:	4659      	mov	r1, fp
 8002296:	00cb      	lsls	r3, r1, #3
 8002298:	4651      	mov	r1, sl
 800229a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800229e:	4651      	mov	r1, sl
 80022a0:	00ca      	lsls	r2, r1, #3
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	4642      	mov	r2, r8
 80022aa:	189b      	adds	r3, r3, r2
 80022ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022b0:	464b      	mov	r3, r9
 80022b2:	460a      	mov	r2, r1
 80022b4:	eb42 0303 	adc.w	r3, r2, r3
 80022b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022d0:	460b      	mov	r3, r1
 80022d2:	18db      	adds	r3, r3, r3
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d6:	4613      	mov	r3, r2
 80022d8:	eb42 0303 	adc.w	r3, r2, r3
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022e6:	f7fd ffcb 	bl	8000280 <__aeabi_uldivmod>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <UART_SetConfig+0x2d4>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	2164      	movs	r1, #100	; 0x64
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	3332      	adds	r3, #50	; 0x32
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <UART_SetConfig+0x2d4>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	f003 0207 	and.w	r2, r3, #7
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4422      	add	r2, r4
 8002316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002318:	e106      	b.n	8002528 <UART_SetConfig+0x4d8>
 800231a:	bf00      	nop
 800231c:	40011000 	.word	0x40011000
 8002320:	40011400 	.word	0x40011400
 8002324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800232c:	2200      	movs	r2, #0
 800232e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800233a:	4642      	mov	r2, r8
 800233c:	464b      	mov	r3, r9
 800233e:	1891      	adds	r1, r2, r2
 8002340:	6239      	str	r1, [r7, #32]
 8002342:	415b      	adcs	r3, r3
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234a:	4641      	mov	r1, r8
 800234c:	1854      	adds	r4, r2, r1
 800234e:	4649      	mov	r1, r9
 8002350:	eb43 0501 	adc.w	r5, r3, r1
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	00eb      	lsls	r3, r5, #3
 800235e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002362:	00e2      	lsls	r2, r4, #3
 8002364:	4614      	mov	r4, r2
 8002366:	461d      	mov	r5, r3
 8002368:	4643      	mov	r3, r8
 800236a:	18e3      	adds	r3, r4, r3
 800236c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002370:	464b      	mov	r3, r9
 8002372:	eb45 0303 	adc.w	r3, r5, r3
 8002376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002396:	4629      	mov	r1, r5
 8002398:	008b      	lsls	r3, r1, #2
 800239a:	4621      	mov	r1, r4
 800239c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023a0:	4621      	mov	r1, r4
 80023a2:	008a      	lsls	r2, r1, #2
 80023a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023a8:	f7fd ff6a 	bl	8000280 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4b60      	ldr	r3, [pc, #384]	; (8002534 <UART_SetConfig+0x4e4>)
 80023b2:	fba3 2302 	umull	r2, r3, r3, r2
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	011c      	lsls	r4, r3, #4
 80023ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023cc:	4642      	mov	r2, r8
 80023ce:	464b      	mov	r3, r9
 80023d0:	1891      	adds	r1, r2, r2
 80023d2:	61b9      	str	r1, [r7, #24]
 80023d4:	415b      	adcs	r3, r3
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023dc:	4641      	mov	r1, r8
 80023de:	1851      	adds	r1, r2, r1
 80023e0:	6139      	str	r1, [r7, #16]
 80023e2:	4649      	mov	r1, r9
 80023e4:	414b      	adcs	r3, r1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023f4:	4659      	mov	r1, fp
 80023f6:	00cb      	lsls	r3, r1, #3
 80023f8:	4651      	mov	r1, sl
 80023fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023fe:	4651      	mov	r1, sl
 8002400:	00ca      	lsls	r2, r1, #3
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	4603      	mov	r3, r0
 8002408:	4642      	mov	r2, r8
 800240a:	189b      	adds	r3, r3, r2
 800240c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002410:	464b      	mov	r3, r9
 8002412:	460a      	mov	r2, r1
 8002414:	eb42 0303 	adc.w	r3, r2, r3
 8002418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	67bb      	str	r3, [r7, #120]	; 0x78
 8002426:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002434:	4649      	mov	r1, r9
 8002436:	008b      	lsls	r3, r1, #2
 8002438:	4641      	mov	r1, r8
 800243a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800243e:	4641      	mov	r1, r8
 8002440:	008a      	lsls	r2, r1, #2
 8002442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002446:	f7fd ff1b 	bl	8000280 <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4611      	mov	r1, r2
 8002450:	4b38      	ldr	r3, [pc, #224]	; (8002534 <UART_SetConfig+0x4e4>)
 8002452:	fba3 2301 	umull	r2, r3, r3, r1
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2264      	movs	r2, #100	; 0x64
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	1acb      	subs	r3, r1, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	; 0x32
 8002464:	4a33      	ldr	r2, [pc, #204]	; (8002534 <UART_SetConfig+0x4e4>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	441c      	add	r4, r3
 8002472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002476:	2200      	movs	r2, #0
 8002478:	673b      	str	r3, [r7, #112]	; 0x70
 800247a:	677a      	str	r2, [r7, #116]	; 0x74
 800247c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002480:	4642      	mov	r2, r8
 8002482:	464b      	mov	r3, r9
 8002484:	1891      	adds	r1, r2, r2
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	415b      	adcs	r3, r3
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002490:	4641      	mov	r1, r8
 8002492:	1851      	adds	r1, r2, r1
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	4649      	mov	r1, r9
 8002498:	414b      	adcs	r3, r1
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024a8:	4659      	mov	r1, fp
 80024aa:	00cb      	lsls	r3, r1, #3
 80024ac:	4651      	mov	r1, sl
 80024ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b2:	4651      	mov	r1, sl
 80024b4:	00ca      	lsls	r2, r1, #3
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	4642      	mov	r2, r8
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80024c2:	464b      	mov	r3, r9
 80024c4:	460a      	mov	r2, r1
 80024c6:	eb42 0303 	adc.w	r3, r2, r3
 80024ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	663b      	str	r3, [r7, #96]	; 0x60
 80024d6:	667a      	str	r2, [r7, #100]	; 0x64
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024e4:	4649      	mov	r1, r9
 80024e6:	008b      	lsls	r3, r1, #2
 80024e8:	4641      	mov	r1, r8
 80024ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ee:	4641      	mov	r1, r8
 80024f0:	008a      	lsls	r2, r1, #2
 80024f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024f6:	f7fd fec3 	bl	8000280 <__aeabi_uldivmod>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <UART_SetConfig+0x4e4>)
 8002500:	fba3 1302 	umull	r1, r3, r3, r2
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	2164      	movs	r1, #100	; 0x64
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	3332      	adds	r3, #50	; 0x32
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <UART_SetConfig+0x4e4>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	f003 020f 	and.w	r2, r3, #15
 800251e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4422      	add	r2, r4
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800252e:	46bd      	mov	sp, r7
 8002530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002534:	51eb851f 	.word	0x51eb851f

08002538 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Handler+0x1c>)
 800253e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002540:	f001 fbc8 	bl	8003cd4 <xTaskGetSchedulerState>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800254a:	f002 f9ad 	bl	80048a8 <xPortSysTickHandler>
  }
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <vApplicationGetIdleTaskMemory+0x2c>)
 8002568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <vApplicationGetIdleTaskMemory+0x30>)
 800256e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000012c 	.word	0x2000012c
 8002588:	20000188 	.word	0x20000188

0800258c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800259c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <vApplicationGetTimerTaskMemory+0x30>)
 80025a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	20000388 	.word	0x20000388
 80025bc:	200003e4 	.word	0x200003e4

080025c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f103 0208 	add.w	r2, r3, #8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 0208 	add.w	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 0208 	add.w	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d103      	bne.n	8002682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e00c      	b.n	800269c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3308      	adds	r3, #8
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e002      	b.n	8002690 <vListInsert+0x2e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	429a      	cmp	r2, r3
 800269a:	d2f6      	bcs.n	800268a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6852      	ldr	r2, [r2, #4]
 80026f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d103      	bne.n	8002708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1e5a      	subs	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002752:	f002 f817 	bl	8004784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	441a      	add	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	3b01      	subs	r3, #1
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	441a      	add	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d114      	bne.n	80027d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01a      	beq.n	80027e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3310      	adds	r3, #16
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f8cf 	bl	8003958 <xTaskRemoveFromEventList>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d012      	beq.n	80027e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <xQueueGenericReset+0xcc>)
 80027c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	e009      	b.n	80027e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3310      	adds	r3, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fef2 	bl	80025c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff feed 	bl	80025c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027e6:	f001 fffd 	bl	80047e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	e000ed04 	.word	0xe000ed04

080027f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	; 0x38
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
}
 800283a:	bf00      	nop
 800283c:	e7fe      	b.n	800283c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <xQueueGenericCreateStatic+0x52>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <xQueueGenericCreateStatic+0x56>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <xQueueGenericCreateStatic+0x58>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	623b      	str	r3, [r7, #32]
}
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <xQueueGenericCreateStatic+0x7e>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <xQueueGenericCreateStatic+0x82>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <xQueueGenericCreateStatic+0x84>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	61fb      	str	r3, [r7, #28]
}
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002896:	2350      	movs	r3, #80	; 0x50
 8002898:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d00a      	beq.n	80028b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	61bb      	str	r3, [r7, #24]
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f805 	bl	80028e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3730      	adds	r7, #48	; 0x30
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e002      	b.n	800290a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002916:	2101      	movs	r1, #1
 8002918:	69b8      	ldr	r0, [r7, #24]
 800291a:	f7ff ff05 	bl	8002728 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08e      	sub	sp, #56	; 0x38
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueGenericSend+0x32>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <xQueueGenericSend+0x40>
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <xQueueGenericSend+0x44>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <xQueueGenericSend+0x46>
 8002974:	2300      	movs	r3, #0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <xQueueGenericSend+0x60>
	__asm volatile
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800298c:	bf00      	nop
 800298e:	e7fe      	b.n	800298e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d103      	bne.n	800299e <xQueueGenericSend+0x6e>
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <xQueueGenericSend+0x72>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <xQueueGenericSend+0x74>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueGenericSend+0x8e>
	__asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	623b      	str	r3, [r7, #32]
}
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029be:	f001 f989 	bl	8003cd4 <xTaskGetSchedulerState>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <xQueueGenericSend+0x9e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <xQueueGenericSend+0xa2>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <xQueueGenericSend+0xa4>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericSend+0xbe>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	61fb      	str	r3, [r7, #28]
}
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029ee:	f001 fec9 	bl	8004784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <xQueueGenericSend+0xd4>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d129      	bne.n	8002a58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a0a:	f000 fa0b 	bl	8002e24 <prvCopyDataToQueue>
 8002a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	3324      	adds	r3, #36	; 0x24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 ff9b 	bl	8003958 <xTaskRemoveFromEventList>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a28:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <xQueueGenericSend+0x1f8>)
 8002a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	e00a      	b.n	8002a50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <xQueueGenericSend+0x1f8>)
 8002a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a50:	f001 fec8 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e063      	b.n	8002b20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a5e:	f001 fec1 	bl	80047e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e05c      	b.n	8002b20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 ffd5 	bl	8003a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a76:	2301      	movs	r3, #1
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a7a:	f001 feb3 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a7e:	f000 fd47 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a82:	f001 fe7f 	bl	8004784 <vPortEnterCritical>
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d103      	bne.n	8002a9c <xQueueGenericSend+0x16c>
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d103      	bne.n	8002ab2 <xQueueGenericSend+0x182>
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab2:	f001 fe97 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ab6:	1d3a      	adds	r2, r7, #4
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 ffc4 	bl	8003a4c <xTaskCheckForTimeOut>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d124      	bne.n	8002b14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002acc:	f000 faa2 	bl	8003014 <prvIsQueueFull>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	3310      	adds	r3, #16
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 feea 	bl	80038b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ae6:	f000 fa2d 	bl	8002f44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aea:	f000 fd1f 	bl	800352c <xTaskResumeAll>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f af7c 	bne.w	80029ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <xQueueGenericSend+0x1f8>)
 8002af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	e772      	b.n	80029ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0a:	f000 fa1b 	bl	8002f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b0e:	f000 fd0d 	bl	800352c <xTaskResumeAll>
 8002b12:	e76c      	b.n	80029ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b16:	f000 fa15 	bl	8002f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b1a:	f000 fd07 	bl	800352c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3738      	adds	r7, #56	; 0x38
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b090      	sub	sp, #64	; 0x40
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <xQueueGenericSendFromISR+0x3c>
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <xQueueGenericSendFromISR+0x40>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <xQueueGenericSendFromISR+0x42>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b84:	bf00      	nop
 8002b86:	e7fe      	b.n	8002b86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d103      	bne.n	8002b96 <xQueueGenericSendFromISR+0x6a>
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <xQueueGenericSendFromISR+0x6e>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <xQueueGenericSendFromISR+0x70>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	623b      	str	r3, [r7, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bb6:	f001 fec7 	bl	8004948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bba:	f3ef 8211 	mrs	r2, BASEPRI
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	61fa      	str	r2, [r7, #28]
 8002bd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <xQueueGenericSendFromISR+0xbc>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d12f      	bne.n	8002c48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bfe:	f000 f911 	bl	8002e24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0a:	d112      	bne.n	8002c32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	3324      	adds	r3, #36	; 0x24
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fe9d 	bl	8003958 <xTaskRemoveFromEventList>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e007      	b.n	8002c42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c36:	3301      	adds	r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	b25a      	sxtb	r2, r3
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c42:	2301      	movs	r3, #1
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c46:	e001      	b.n	8002c4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3740      	adds	r7, #64	; 0x40
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <xQueueReceive+0x30>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	623b      	str	r3, [r7, #32]
}
 8002c90:	bf00      	nop
 8002c92:	e7fe      	b.n	8002c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <xQueueReceive+0x3e>
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <xQueueReceive+0x42>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <xQueueReceive+0x44>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xQueueReceive+0x5e>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	61fb      	str	r3, [r7, #28]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cc2:	f001 f807 	bl	8003cd4 <xTaskGetSchedulerState>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <xQueueReceive+0x6e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <xQueueReceive+0x72>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueReceive+0x74>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueReceive+0x8e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61bb      	str	r3, [r7, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cf2:	f001 fd47 	bl	8004784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01f      	beq.n	8002d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d06:	f000 f8f7 	bl	8002ef8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00f      	beq.n	8002d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fe1a 	bl	8003958 <xTaskRemoveFromEventList>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <xQueueReceive+0x1bc>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d3a:	f001 fd53 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e069      	b.n	8002e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d48:	f001 fd4c 	bl	80047e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e062      	b.n	8002e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fe60 	bl	8003a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d64:	f001 fd3e 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d68:	f000 fbd2 	bl	8003510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d6c:	f001 fd0a 	bl	8004784 <vPortEnterCritical>
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d103      	bne.n	8002d86 <xQueueReceive+0x122>
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d103      	bne.n	8002d9c <xQueueReceive+0x138>
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d9c:	f001 fd22 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002da0:	1d3a      	adds	r2, r7, #4
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fe4f 	bl	8003a4c <xTaskCheckForTimeOut>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d123      	bne.n	8002dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db6:	f000 f917 	bl	8002fe8 <prvIsQueueEmpty>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d017      	beq.n	8002df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fd75 	bl	80038b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd0:	f000 f8b8 	bl	8002f44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dd4:	f000 fbaa 	bl	800352c <xTaskResumeAll>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d189      	bne.n	8002cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <xQueueReceive+0x1bc>)
 8002de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	e780      	b.n	8002cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df2:	f000 f8a7 	bl	8002f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002df6:	f000 fb99 	bl	800352c <xTaskResumeAll>
 8002dfa:	e77a      	b.n	8002cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfe:	f000 f8a1 	bl	8002f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e02:	f000 fb93 	bl	800352c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e08:	f000 f8ee 	bl	8002fe8 <prvIsQueueEmpty>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f43f af6f 	beq.w	8002cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3730      	adds	r7, #48	; 0x30
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000ed04 	.word	0xe000ed04

08002e24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d14d      	bne.n	8002ee6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ff5e 	bl	8003d10 <xTaskPriorityDisinherit>
 8002e54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e043      	b.n	8002ee6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d119      	bne.n	8002e98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6858      	ldr	r0, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	f002 f927 	bl	80050c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	441a      	add	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d32b      	bcc.n	8002ee6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	e026      	b.n	8002ee6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	68d8      	ldr	r0, [r3, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	f002 f90d 	bl	80050c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	425b      	negs	r3, r3
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d207      	bcs.n	8002ed4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	425b      	negs	r3, r3
 8002ece:	441a      	add	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d105      	bne.n	8002ee6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002eee:	697b      	ldr	r3, [r7, #20]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d018      	beq.n	8002f3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d303      	bcc.n	8002f2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68d9      	ldr	r1, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	461a      	mov	r2, r3
 8002f36:	6838      	ldr	r0, [r7, #0]
 8002f38:	f002 f8c3 	bl	80050c2 <memcpy>
	}
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f4c:	f001 fc1a 	bl	8004784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f58:	e011      	b.n	8002f7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3324      	adds	r3, #36	; 0x24
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fcf6 	bl	8003958 <xTaskRemoveFromEventList>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f72:	f000 fdcd 	bl	8003b10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dce9      	bgt.n	8002f5a <prvUnlockQueue+0x16>
 8002f86:	e000      	b.n	8002f8a <prvUnlockQueue+0x46>
					break;
 8002f88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	22ff      	movs	r2, #255	; 0xff
 8002f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f92:	f001 fc27 	bl	80047e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f96:	f001 fbf5 	bl	8004784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fa2:	e011      	b.n	8002fc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d012      	beq.n	8002fd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3310      	adds	r3, #16
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fcd1 	bl	8003958 <xTaskRemoveFromEventList>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fbc:	f000 fda8 	bl	8003b10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fc0:	7bbb      	ldrb	r3, [r7, #14]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	dce9      	bgt.n	8002fa4 <prvUnlockQueue+0x60>
 8002fd0:	e000      	b.n	8002fd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	22ff      	movs	r2, #255	; 0xff
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fdc:	f001 fc02 	bl	80047e4 <vPortExitCritical>
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ff0:	f001 fbc8 	bl	8004784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e001      	b.n	8003006 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003006:	f001 fbed 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800301c:	f001 fbb2 	bl	8004784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	429a      	cmp	r2, r3
 800302a:	d102      	bne.n	8003032 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800302c:	2301      	movs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e001      	b.n	8003036 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003036:	f001 fbd5 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e014      	b.n	800307e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003054:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <vQueueAddToRegistry+0x50>)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <vQueueAddToRegistry+0x50>)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <vQueueAddToRegistry+0x50>)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003076:	e006      	b.n	8003086 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b07      	cmp	r3, #7
 8003082:	d9e7      	bls.n	8003054 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200007e4 	.word	0x200007e4

08003098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030a8:	f001 fb6c 	bl	8004784 <vPortEnterCritical>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d103      	bne.n	80030c2 <vQueueWaitForMessageRestricted+0x2a>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d103      	bne.n	80030d8 <vQueueWaitForMessageRestricted+0x40>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d8:	f001 fb84 	bl	80047e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3324      	adds	r3, #36	; 0x24
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fc07 	bl	8003900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff ff26 	bl	8002f44 <prvUnlockQueue>
	}
 80030f8:	bf00      	nop
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	af04      	add	r7, sp, #16
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	623b      	str	r3, [r7, #32]
}
 8003126:	bf00      	nop
 8003128:	e7fe      	b.n	8003128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <xTaskCreateStatic+0x46>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	61fb      	str	r3, [r7, #28]
}
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003146:	235c      	movs	r3, #92	; 0x5c
 8003148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b5c      	cmp	r3, #92	; 0x5c
 800314e:	d00a      	beq.n	8003166 <xTaskCreateStatic+0x66>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	61bb      	str	r3, [r7, #24]
}
 8003162:	bf00      	nop
 8003164:	e7fe      	b.n	8003164 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003166:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01e      	beq.n	80031ac <xTaskCreateStatic+0xac>
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800317c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003186:	2300      	movs	r3, #0
 8003188:	9303      	str	r3, [sp, #12]
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	9302      	str	r3, [sp, #8]
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f850 	bl	8003244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031a6:	f000 f8dd 	bl	8003364 <prvAddNewTaskToReadyList>
 80031aa:	e001      	b.n	80031b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031b0:	697b      	ldr	r3, [r7, #20]
	}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3728      	adds	r7, #40	; 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b08c      	sub	sp, #48	; 0x30
 80031be:	af04      	add	r7, sp, #16
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fbfa 	bl	80049c8 <pvPortMalloc>
 80031d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00e      	beq.n	80031fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031dc:	205c      	movs	r0, #92	; 0x5c
 80031de:	f001 fbf3 	bl	80049c8 <pvPortMalloc>
 80031e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
 80031f0:	e005      	b.n	80031fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f001 fcb4 	bl	8004b60 <vPortFree>
 80031f8:	e001      	b.n	80031fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	2300      	movs	r3, #0
 8003210:	9303      	str	r3, [sp, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	9302      	str	r3, [sp, #8]
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f80e 	bl	8003244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003228:	69f8      	ldr	r0, [r7, #28]
 800322a:	f000 f89b 	bl	8003364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800322e:	2301      	movs	r3, #1
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	e002      	b.n	800323a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800323a:	69bb      	ldr	r3, [r7, #24]
	}
 800323c:	4618      	mov	r0, r3
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	21a5      	movs	r1, #165	; 0xa5
 800325e:	f001 feb4 	bl	8004fca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800326c:	3b01      	subs	r3, #1
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f023 0307 	bic.w	r3, r3, #7
 800327a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	617b      	str	r3, [r7, #20]
}
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01f      	beq.n	80032e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e012      	b.n	80032ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	7819      	ldrb	r1, [r3, #0]
 80032b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	3334      	adds	r3, #52	; 0x34
 80032b8:	460a      	mov	r2, r1
 80032ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d9e9      	bls.n	80032a8 <prvInitialiseNewTask+0x64>
 80032d4:	e000      	b.n	80032d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80032d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e0:	e003      	b.n	80032ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	2b37      	cmp	r3, #55	; 0x37
 80032ee:	d901      	bls.n	80032f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032f0:	2337      	movs	r3, #55	; 0x37
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	3304      	adds	r3, #4
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f978 	bl	8002600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	3318      	adds	r3, #24
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f973 	bl	8002600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	2200      	movs	r2, #0
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	69b8      	ldr	r0, [r7, #24]
 8003344:	f001 f8f4 	bl	8004530 <pxPortInitialiseStack>
 8003348:	4602      	mov	r2, r0
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800335a:	bf00      	nop
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800336c:	f001 fa0a 	bl	8004784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003370:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <prvAddNewTaskToReadyList+0xc4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <prvAddNewTaskToReadyList+0xc4>)
 8003378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <prvAddNewTaskToReadyList+0xc8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003382:	4a2a      	ldr	r2, [pc, #168]	; (800342c <prvAddNewTaskToReadyList+0xc8>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003388:	4b27      	ldr	r3, [pc, #156]	; (8003428 <prvAddNewTaskToReadyList+0xc4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d110      	bne.n	80033b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003390:	f000 fbe2 	bl	8003b58 <prvInitialiseTaskLists>
 8003394:	e00d      	b.n	80033b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003396:	4b26      	ldr	r3, [pc, #152]	; (8003430 <prvAddNewTaskToReadyList+0xcc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <prvAddNewTaskToReadyList+0xc8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d802      	bhi.n	80033b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <prvAddNewTaskToReadyList+0xc8>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <prvAddNewTaskToReadyList+0xd0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3301      	adds	r3, #1
 80033b8:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <prvAddNewTaskToReadyList+0xd0>)
 80033ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <prvAddNewTaskToReadyList+0xd0>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <prvAddNewTaskToReadyList+0xd4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d903      	bls.n	80033d8 <prvAddNewTaskToReadyList+0x74>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <prvAddNewTaskToReadyList+0xd4>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4a15      	ldr	r2, [pc, #84]	; (800343c <prvAddNewTaskToReadyList+0xd8>)
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7ff f913 	bl	800261a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033f4:	f001 f9f6 	bl	80047e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <prvAddNewTaskToReadyList+0xcc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <prvAddNewTaskToReadyList+0xc8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	429a      	cmp	r2, r3
 800340c:	d207      	bcs.n	800341e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <prvAddNewTaskToReadyList+0xdc>)
 8003410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000cf8 	.word	0x20000cf8
 800342c:	20000824 	.word	0x20000824
 8003430:	20000d04 	.word	0x20000d04
 8003434:	20000d14 	.word	0x20000d14
 8003438:	20000d00 	.word	0x20000d00
 800343c:	20000828 	.word	0x20000828
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003452:	463a      	mov	r2, r7
 8003454:	1d39      	adds	r1, r7, #4
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f87c 	bl	8002558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	9202      	str	r2, [sp, #8]
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	460a      	mov	r2, r1
 8003472:	4921      	ldr	r1, [pc, #132]	; (80034f8 <vTaskStartScheduler+0xb4>)
 8003474:	4821      	ldr	r0, [pc, #132]	; (80034fc <vTaskStartScheduler+0xb8>)
 8003476:	f7ff fe43 	bl	8003100 <xTaskCreateStatic>
 800347a:	4603      	mov	r3, r0
 800347c:	4a20      	ldr	r2, [pc, #128]	; (8003500 <vTaskStartScheduler+0xbc>)
 800347e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003480:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <vTaskStartScheduler+0xbc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003488:	2301      	movs	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e001      	b.n	8003492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003498:	f000 fcfc 	bl	8003e94 <xTimerCreateTimerTask>
 800349c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d116      	bne.n	80034d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	613b      	str	r3, [r7, #16]
}
 80034b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <vTaskStartScheduler+0xc0>)
 80034ba:	f04f 32ff 	mov.w	r2, #4294967295
 80034be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <vTaskStartScheduler+0xc4>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <vTaskStartScheduler+0xc8>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034cc:	f001 f8b8 	bl	8004640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034d0:	e00e      	b.n	80034f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d10a      	bne.n	80034f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60fb      	str	r3, [r7, #12]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <vTaskStartScheduler+0xaa>
}
 80034f0:	bf00      	nop
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	08005c8c 	.word	0x08005c8c
 80034fc:	08003b29 	.word	0x08003b29
 8003500:	20000d1c 	.word	0x20000d1c
 8003504:	20000d18 	.word	0x20000d18
 8003508:	20000d04 	.word	0x20000d04
 800350c:	20000cfc 	.word	0x20000cfc

08003510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <vTaskSuspendAll+0x18>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a03      	ldr	r2, [pc, #12]	; (8003528 <vTaskSuspendAll+0x18>)
 800351c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000d20 	.word	0x20000d20

0800352c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800353a:	4b42      	ldr	r3, [pc, #264]	; (8003644 <xTaskResumeAll+0x118>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <xTaskResumeAll+0x2c>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	603b      	str	r3, [r7, #0]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003558:	f001 f914 	bl	8004784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800355c:	4b39      	ldr	r3, [pc, #228]	; (8003644 <xTaskResumeAll+0x118>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	4a38      	ldr	r2, [pc, #224]	; (8003644 <xTaskResumeAll+0x118>)
 8003564:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003566:	4b37      	ldr	r3, [pc, #220]	; (8003644 <xTaskResumeAll+0x118>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d162      	bne.n	8003634 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <xTaskResumeAll+0x11c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d05e      	beq.n	8003634 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003576:	e02f      	b.n	80035d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003578:	4b34      	ldr	r3, [pc, #208]	; (800364c <xTaskResumeAll+0x120>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3318      	adds	r3, #24
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f8a5 	bl	80026d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff f8a0 	bl	80026d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <xTaskResumeAll+0x124>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d903      	bls.n	80035a8 <xTaskResumeAll+0x7c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <xTaskResumeAll+0x124>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4a27      	ldr	r2, [pc, #156]	; (8003654 <xTaskResumeAll+0x128>)
 80035b6:	441a      	add	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f7ff f82b 	bl	800261a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4b23      	ldr	r3, [pc, #140]	; (8003658 <xTaskResumeAll+0x12c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <xTaskResumeAll+0x130>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d8:	4b1c      	ldr	r3, [pc, #112]	; (800364c <xTaskResumeAll+0x120>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1cb      	bne.n	8003578 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035e6:	f000 fb55 	bl	8003c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <xTaskResumeAll+0x134>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035f6:	f000 f847 	bl	8003688 <xTaskIncrementTick>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003600:	4b16      	ldr	r3, [pc, #88]	; (800365c <xTaskResumeAll+0x130>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3b01      	subs	r3, #1
 800360a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f1      	bne.n	80035f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <xTaskResumeAll+0x134>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <xTaskResumeAll+0x130>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <xTaskResumeAll+0x138>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003634:	f001 f8d6 	bl	80047e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003638:	68bb      	ldr	r3, [r7, #8]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000d20 	.word	0x20000d20
 8003648:	20000cf8 	.word	0x20000cf8
 800364c:	20000cb8 	.word	0x20000cb8
 8003650:	20000d00 	.word	0x20000d00
 8003654:	20000828 	.word	0x20000828
 8003658:	20000824 	.word	0x20000824
 800365c:	20000d0c 	.word	0x20000d0c
 8003660:	20000d08 	.word	0x20000d08
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <xTaskGetTickCount+0x1c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000cfc 	.word	0x20000cfc

08003688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003692:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <xTaskIncrementTick+0x148>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 808f 	bne.w	80037ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800369c:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <xTaskIncrementTick+0x14c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036a4:	4a4b      	ldr	r2, [pc, #300]	; (80037d4 <xTaskIncrementTick+0x14c>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d120      	bne.n	80036f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036b0:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <xTaskIncrementTick+0x150>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	603b      	str	r3, [r7, #0]
}
 80036cc:	bf00      	nop
 80036ce:	e7fe      	b.n	80036ce <xTaskIncrementTick+0x46>
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <xTaskIncrementTick+0x150>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <xTaskIncrementTick+0x154>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a3f      	ldr	r2, [pc, #252]	; (80037d8 <xTaskIncrementTick+0x150>)
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <xTaskIncrementTick+0x154>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <xTaskIncrementTick+0x158>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a3d      	ldr	r2, [pc, #244]	; (80037e0 <xTaskIncrementTick+0x158>)
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	f000 fad1 	bl	8003c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036f2:	4b3c      	ldr	r3, [pc, #240]	; (80037e4 <xTaskIncrementTick+0x15c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d349      	bcc.n	8003790 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <xTaskIncrementTick+0x150>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <xTaskIncrementTick+0x15c>)
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	601a      	str	r2, [r3, #0]
					break;
 800370e:	e03f      	b.n	8003790 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <xTaskIncrementTick+0x150>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d203      	bcs.n	8003730 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003728:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <xTaskIncrementTick+0x15c>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800372e:	e02f      	b.n	8003790 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	3304      	adds	r3, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe ffcd 	bl	80026d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3318      	adds	r3, #24
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe ffc4 	bl	80026d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <xTaskIncrementTick+0x160>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d903      	bls.n	8003760 <xTaskIncrementTick+0xd8>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <xTaskIncrementTick+0x160>)
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <xTaskIncrementTick+0x164>)
 800376e:	441a      	add	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	3304      	adds	r3, #4
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f7fe ff4f 	bl	800261a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <xTaskIncrementTick+0x168>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	429a      	cmp	r2, r3
 8003788:	d3b8      	bcc.n	80036fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800378a:	2301      	movs	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800378e:	e7b5      	b.n	80036fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003790:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <xTaskIncrementTick+0x168>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4915      	ldr	r1, [pc, #84]	; (80037ec <xTaskIncrementTick+0x164>)
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d901      	bls.n	80037ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037a8:	2301      	movs	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <xTaskIncrementTick+0x16c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e004      	b.n	80037c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <xTaskIncrementTick+0x170>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <xTaskIncrementTick+0x170>)
 80037c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037c4:	697b      	ldr	r3, [r7, #20]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000d20 	.word	0x20000d20
 80037d4:	20000cfc 	.word	0x20000cfc
 80037d8:	20000cb0 	.word	0x20000cb0
 80037dc:	20000cb4 	.word	0x20000cb4
 80037e0:	20000d10 	.word	0x20000d10
 80037e4:	20000d18 	.word	0x20000d18
 80037e8:	20000d00 	.word	0x20000d00
 80037ec:	20000828 	.word	0x20000828
 80037f0:	20000824 	.word	0x20000824
 80037f4:	20000d0c 	.word	0x20000d0c
 80037f8:	20000d08 	.word	0x20000d08

080037fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003802:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <vTaskSwitchContext+0xa8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800380a:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <vTaskSwitchContext+0xac>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003810:	e041      	b.n	8003896 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <vTaskSwitchContext+0xac>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003818:	4b24      	ldr	r3, [pc, #144]	; (80038ac <vTaskSwitchContext+0xb0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e010      	b.n	8003842 <vTaskSwitchContext+0x46>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <vTaskSwitchContext+0x40>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	607b      	str	r3, [r7, #4]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <vTaskSwitchContext+0x3e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3b01      	subs	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	491b      	ldr	r1, [pc, #108]	; (80038b0 <vTaskSwitchContext+0xb4>)
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0e4      	beq.n	8003820 <vTaskSwitchContext+0x24>
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <vTaskSwitchContext+0xb4>)
 8003862:	4413      	add	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3308      	adds	r3, #8
 8003878:	429a      	cmp	r2, r3
 800387a:	d104      	bne.n	8003886 <vTaskSwitchContext+0x8a>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <vTaskSwitchContext+0xb8>)
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <vTaskSwitchContext+0xb0>)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6013      	str	r3, [r2, #0]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000d20 	.word	0x20000d20
 80038a8:	20000d0c 	.word	0x20000d0c
 80038ac:	20000d00 	.word	0x20000d00
 80038b0:	20000828 	.word	0x20000828
 80038b4:	20000824 	.word	0x20000824

080038b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	60fb      	str	r3, [r7, #12]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <vTaskPlaceOnEventList+0x44>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3318      	adds	r3, #24
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe febb 	bl	8002662 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038ec:	2101      	movs	r1, #1
 80038ee:	6838      	ldr	r0, [r7, #0]
 80038f0:	f000 fa7c 	bl	8003dec <prvAddCurrentTaskToDelayedList>
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000824 	.word	0x20000824

08003900 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	617b      	str	r3, [r7, #20]
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <vTaskPlaceOnEventListRestricted+0x54>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3318      	adds	r3, #24
 800392e:	4619      	mov	r1, r3
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7fe fe72 	bl	800261a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
 8003940:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	68b8      	ldr	r0, [r7, #8]
 8003946:	f000 fa51 	bl	8003dec <prvAddCurrentTaskToDelayedList>
	}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000824 	.word	0x20000824

08003958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	60fb      	str	r3, [r7, #12]
}
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	3318      	adds	r3, #24
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fea3 	bl	80026d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <xTaskRemoveFromEventList+0xb0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11d      	bne.n	80039d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	3304      	adds	r3, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fe9a 	bl	80026d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <xTaskRemoveFromEventList+0xb4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d903      	bls.n	80039b4 <xTaskRemoveFromEventList+0x5c>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <xTaskRemoveFromEventList+0xb4>)
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <xTaskRemoveFromEventList+0xb8>)
 80039c2:	441a      	add	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f7fe fe25 	bl	800261a <vListInsertEnd>
 80039d0:	e005      	b.n	80039de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3318      	adds	r3, #24
 80039d6:	4619      	mov	r1, r3
 80039d8:	480e      	ldr	r0, [pc, #56]	; (8003a14 <xTaskRemoveFromEventList+0xbc>)
 80039da:	f7fe fe1e 	bl	800261a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <xTaskRemoveFromEventList+0xc0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d905      	bls.n	80039f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039ec:	2301      	movs	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <xTaskRemoveFromEventList+0xc4>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e001      	b.n	80039fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80039fc:	697b      	ldr	r3, [r7, #20]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000d20 	.word	0x20000d20
 8003a0c:	20000d00 	.word	0x20000d00
 8003a10:	20000828 	.word	0x20000828
 8003a14:	20000cb8 	.word	0x20000cb8
 8003a18:	20000824 	.word	0x20000824
 8003a1c:	20000d0c 	.word	0x20000d0c

08003a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <vTaskInternalSetTimeOutState+0x24>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <vTaskInternalSetTimeOutState+0x28>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	605a      	str	r2, [r3, #4]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	20000d10 	.word	0x20000d10
 8003a48:	20000cfc 	.word	0x20000cfc

08003a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	613b      	str	r3, [r7, #16]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	60fb      	str	r3, [r7, #12]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a8e:	f000 fe79 	bl	8004784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <xTaskCheckForTimeOut+0xbc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d102      	bne.n	8003ab2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e023      	b.n	8003afa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <xTaskCheckForTimeOut+0xc0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d007      	beq.n	8003ace <xTaskCheckForTimeOut+0x82>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e015      	b.n	8003afa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d20b      	bcs.n	8003af0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff9b 	bl	8003a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	e004      	b.n	8003afa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003afa:	f000 fe73 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 8003afe:	69fb      	ldr	r3, [r7, #28]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000cfc 	.word	0x20000cfc
 8003b0c:	20000d10 	.word	0x20000d10

08003b10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <vTaskMissedYield+0x14>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	20000d0c 	.word	0x20000d0c

08003b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b30:	f000 f852 	bl	8003bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <prvIdleTask+0x28>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d9f9      	bls.n	8003b30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <prvIdleTask+0x2c>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b4c:	e7f0      	b.n	8003b30 <prvIdleTask+0x8>
 8003b4e:	bf00      	nop
 8003b50:	20000828 	.word	0x20000828
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	e00c      	b.n	8003b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <prvInitialiseTaskLists+0x60>)
 8003b70:	4413      	add	r3, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fd24 	bl	80025c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b37      	cmp	r3, #55	; 0x37
 8003b82:	d9ef      	bls.n	8003b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b84:	480d      	ldr	r0, [pc, #52]	; (8003bbc <prvInitialiseTaskLists+0x64>)
 8003b86:	f7fe fd1b 	bl	80025c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b8a:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <prvInitialiseTaskLists+0x68>)
 8003b8c:	f7fe fd18 	bl	80025c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b90:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <prvInitialiseTaskLists+0x6c>)
 8003b92:	f7fe fd15 	bl	80025c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b96:	480c      	ldr	r0, [pc, #48]	; (8003bc8 <prvInitialiseTaskLists+0x70>)
 8003b98:	f7fe fd12 	bl	80025c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b9c:	480b      	ldr	r0, [pc, #44]	; (8003bcc <prvInitialiseTaskLists+0x74>)
 8003b9e:	f7fe fd0f 	bl	80025c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <prvInitialiseTaskLists+0x78>)
 8003ba4:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <prvInitialiseTaskLists+0x64>)
 8003ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <prvInitialiseTaskLists+0x7c>)
 8003baa:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <prvInitialiseTaskLists+0x68>)
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000828 	.word	0x20000828
 8003bbc:	20000c88 	.word	0x20000c88
 8003bc0:	20000c9c 	.word	0x20000c9c
 8003bc4:	20000cb8 	.word	0x20000cb8
 8003bc8:	20000ccc 	.word	0x20000ccc
 8003bcc:	20000ce4 	.word	0x20000ce4
 8003bd0:	20000cb0 	.word	0x20000cb0
 8003bd4:	20000cb4 	.word	0x20000cb4

08003bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bde:	e019      	b.n	8003c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003be0:	f000 fdd0 	bl	8004784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <prvCheckTasksWaitingTermination+0x50>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fd6f 	bl	80026d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <prvCheckTasksWaitingTermination+0x54>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <prvCheckTasksWaitingTermination+0x54>)
 8003bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <prvCheckTasksWaitingTermination+0x58>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <prvCheckTasksWaitingTermination+0x58>)
 8003c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c0a:	f000 fdeb 	bl	80047e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f810 	bl	8003c34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <prvCheckTasksWaitingTermination+0x58>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e1      	bne.n	8003be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000ccc 	.word	0x20000ccc
 8003c2c:	20000cf8 	.word	0x20000cf8
 8003c30:	20000ce0 	.word	0x20000ce0

08003c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 ff88 	bl	8004b60 <vPortFree>
				vPortFree( pxTCB );
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 ff85 	bl	8004b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c56:	e018      	b.n	8003c8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d103      	bne.n	8003c6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 ff7c 	bl	8004b60 <vPortFree>
	}
 8003c68:	e00f      	b.n	8003c8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d00a      	beq.n	8003c8a <prvDeleteTCB+0x56>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <prvDeleteTCB+0x54>
	}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <prvResetNextTaskUnblockTime+0x38>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8003caa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cac:	e008      	b.n	8003cc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <prvResetNextTaskUnblockTime+0x38>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	20000cb0 	.word	0x20000cb0
 8003cd0:	20000d18 	.word	0x20000d18

08003cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <xTaskGetSchedulerState+0x34>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	e008      	b.n	8003cfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <xTaskGetSchedulerState+0x38>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	e001      	b.n	8003cfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cfa:	687b      	ldr	r3, [r7, #4]
	}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000d04 	.word	0x20000d04
 8003d0c:	20000d20 	.word	0x20000d20

08003d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d056      	beq.n	8003dd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <xTaskPriorityDisinherit+0xd0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d00a      	beq.n	8003d46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	60fb      	str	r3, [r7, #12]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60bb      	str	r3, [r7, #8]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d02c      	beq.n	8003dd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d128      	bne.n	8003dd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fca4 	bl	80026d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <xTaskPriorityDisinherit+0xd4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d903      	bls.n	8003db4 <xTaskPriorityDisinherit+0xa4>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <xTaskPriorityDisinherit+0xd4>)
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <xTaskPriorityDisinherit+0xd8>)
 8003dc2:	441a      	add	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f7fe fc25 	bl	800261a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dd4:	697b      	ldr	r3, [r7, #20]
	}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000824 	.word	0x20000824
 8003de4:	20000d00 	.word	0x20000d00
 8003de8:	20000828 	.word	0x20000828

08003dec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <prvAddCurrentTaskToDelayedList+0x90>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fc66 	bl	80026d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d10a      	bne.n	8003e26 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4819      	ldr	r0, [pc, #100]	; (8003e84 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e20:	f7fe fbfb 	bl	800261a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e24:	e026      	b.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d209      	bcs.n	8003e52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f7fe fc09 	bl	8002662 <vListInsert>
}
 8003e50:	e010      	b.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7fe fbff 	bl	8002662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d202      	bcs.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000cfc 	.word	0x20000cfc
 8003e80:	20000824 	.word	0x20000824
 8003e84:	20000ce4 	.word	0x20000ce4
 8003e88:	20000cb4 	.word	0x20000cb4
 8003e8c:	20000cb0 	.word	0x20000cb0
 8003e90:	20000d18 	.word	0x20000d18

08003e94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e9e:	f000 fb07 	bl	80044b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <xTimerCreateTimerTask+0x80>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d021      	beq.n	8003eee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eb2:	1d3a      	adds	r2, r7, #4
 8003eb4:	f107 0108 	add.w	r1, r7, #8
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fb65 	bl	800258c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	9202      	str	r2, [sp, #8]
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	2302      	movs	r3, #2
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	460a      	mov	r2, r1
 8003ed4:	4910      	ldr	r1, [pc, #64]	; (8003f18 <xTimerCreateTimerTask+0x84>)
 8003ed6:	4811      	ldr	r0, [pc, #68]	; (8003f1c <xTimerCreateTimerTask+0x88>)
 8003ed8:	f7ff f912 	bl	8003100 <xTaskCreateStatic>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <xTimerCreateTimerTask+0x8c>)
 8003ee0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <xTimerCreateTimerTask+0x8c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003eea:	2301      	movs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	613b      	str	r3, [r7, #16]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f0a:	697b      	ldr	r3, [r7, #20]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000d54 	.word	0x20000d54
 8003f18:	08005c94 	.word	0x08005c94
 8003f1c:	08004059 	.word	0x08004059
 8003f20:	20000d58 	.word	0x20000d58

08003f24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	623b      	str	r3, [r7, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02a      	beq.n	8003fb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	dc18      	bgt.n	8003f9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f6c:	f7ff feb2 	bl	8003cd4 <xTaskGetSchedulerState>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d109      	bne.n	8003f8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	f107 0110 	add.w	r1, r7, #16
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f82:	f7fe fcd5 	bl	8002930 <xQueueGenericSend>
 8003f86:	6278      	str	r0, [r7, #36]	; 0x24
 8003f88:	e012      	b.n	8003fb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	f107 0110 	add.w	r1, r7, #16
 8003f92:	2300      	movs	r3, #0
 8003f94:	2200      	movs	r2, #0
 8003f96:	f7fe fccb 	bl	8002930 <xQueueGenericSend>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003f9c:	e008      	b.n	8003fb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <xTimerGenericCommand+0x98>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f107 0110 	add.w	r1, r7, #16
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	f7fe fdbf 	bl	8002b2c <xQueueGenericSendFromISR>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3728      	adds	r7, #40	; 0x28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000d54 	.word	0x20000d54

08003fc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <prvProcessExpiredTimer+0x94>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fb7b 	bl	80026d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d022      	beq.n	8004032 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	18d1      	adds	r1, r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6978      	ldr	r0, [r7, #20]
 8003ffa:	f000 f8d1 	bl	80041a0 <prvInsertTimerInActiveList>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01f      	beq.n	8004044 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2300      	movs	r3, #0
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	2100      	movs	r1, #0
 800400e:	6978      	ldr	r0, [r7, #20]
 8004010:	f7ff ff88 	bl	8003f24 <xTimerGenericCommand>
 8004014:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d113      	bne.n	8004044 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60fb      	str	r3, [r7, #12]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	6978      	ldr	r0, [r7, #20]
 800404a:	4798      	blx	r3
}
 800404c:	bf00      	nop
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000d4c 	.word	0x20000d4c

08004058 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f857 	bl	8004118 <prvGetNextExpireTime>
 800406a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4619      	mov	r1, r3
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f803 	bl	800407c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004076:	f000 f8d5 	bl	8004224 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800407a:	e7f1      	b.n	8004060 <prvTimerTask+0x8>

0800407c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004086:	f7ff fa43 	bl	8003510 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f866 	bl	8004160 <prvSampleTimeNow>
 8004094:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d130      	bne.n	80040fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <prvProcessTimerOrBlockTask+0x3c>
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d806      	bhi.n	80040b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040aa:	f7ff fa3f 	bl	800352c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff85 	bl	8003fc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040b6:	e024      	b.n	8004102 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <prvProcessTimerOrBlockTask+0x90>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <prvProcessTimerOrBlockTask+0x50>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <prvProcessTimerOrBlockTask+0x52>
 80040cc:	2300      	movs	r3, #0
 80040ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <prvProcessTimerOrBlockTask+0x94>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	f7fe ffdb 	bl	8003098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040e2:	f7ff fa23 	bl	800352c <xTaskResumeAll>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <prvProcessTimerOrBlockTask+0x98>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
}
 80040fc:	e001      	b.n	8004102 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80040fe:	f7ff fa15 	bl	800352c <xTaskResumeAll>
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000d50 	.word	0x20000d50
 8004110:	20000d54 	.word	0x20000d54
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <prvGetNextExpireTime+0x44>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <prvGetNextExpireTime+0x16>
 800412a:	2201      	movs	r2, #1
 800412c:	e000      	b.n	8004130 <prvGetNextExpireTime+0x18>
 800412e:	2200      	movs	r2, #0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800413c:	4b07      	ldr	r3, [pc, #28]	; (800415c <prvGetNextExpireTime+0x44>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e001      	b.n	800414c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000d4c 	.word	0x20000d4c

08004160 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004168:	f7ff fa7e 	bl	8003668 <xTaskGetTickCount>
 800416c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <prvSampleTimeNow+0x3c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d205      	bcs.n	8004184 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004178:	f000 f936 	bl	80043e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e002      	b.n	800418a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800418a:	4a04      	ldr	r2, [pc, #16]	; (800419c <prvSampleTimeNow+0x3c>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004190:	68fb      	ldr	r3, [r7, #12]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000d5c 	.word	0x20000d5c

080041a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d812      	bhi.n	80041ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	1ad2      	subs	r2, r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d302      	bcc.n	80041da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e01b      	b.n	8004212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <prvInsertTimerInActiveList+0x7c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7fe fa3c 	bl	8002662 <vListInsert>
 80041ea:	e012      	b.n	8004212 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d206      	bcs.n	8004202 <prvInsertTimerInActiveList+0x62>
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e007      	b.n	8004212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <prvInsertTimerInActiveList+0x80>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3304      	adds	r3, #4
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f7fe fa28 	bl	8002662 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004212:	697b      	ldr	r3, [r7, #20]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000d50 	.word	0x20000d50
 8004220:	20000d4c 	.word	0x20000d4c

08004224 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800422a:	e0ca      	b.n	80043c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da18      	bge.n	8004264 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	3304      	adds	r3, #4
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	61fb      	str	r3, [r7, #28]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425a:	6850      	ldr	r0, [r2, #4]
 800425c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425e:	6892      	ldr	r2, [r2, #8]
 8004260:	4611      	mov	r1, r2
 8004262:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f2c0 80ab 	blt.w	80043c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	3304      	adds	r3, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fa29 	bl	80026d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004282:	463b      	mov	r3, r7
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff6b 	bl	8004160 <prvSampleTimeNow>
 800428a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b09      	cmp	r3, #9
 8004290:	f200 8096 	bhi.w	80043c0 <prvProcessReceivedCommands+0x19c>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <prvProcessReceivedCommands+0x78>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042c5 	.word	0x080042c5
 80042a8:	08004339 	.word	0x08004339
 80042ac:	0800434d 	.word	0x0800434d
 80042b0:	08004397 	.word	0x08004397
 80042b4:	080042c5 	.word	0x080042c5
 80042b8:	080042c5 	.word	0x080042c5
 80042bc:	08004339 	.word	0x08004339
 80042c0:	0800434d 	.word	0x0800434d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	18d1      	adds	r1, r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e4:	f7ff ff5c 	bl	80041a0 <prvInsertTimerInActiveList>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d069      	beq.n	80043c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d05e      	beq.n	80043c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	441a      	add	r2, r3
 800430c:	2300      	movs	r3, #0
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	2300      	movs	r3, #0
 8004312:	2100      	movs	r1, #0
 8004314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004316:	f7ff fe05 	bl	8003f24 <xTimerGenericCommand>
 800431a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d14f      	bne.n	80043c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	61bb      	str	r3, [r7, #24]
}
 8004334:	bf00      	nop
 8004336:	e7fe      	b.n	8004336 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800434a:	e03a      	b.n	80043c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	617b      	str	r3, [r7, #20]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	18d1      	adds	r1, r2, r3
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004390:	f7ff ff06 	bl	80041a0 <prvInsertTimerInActiveList>
					break;
 8004394:	e015      	b.n	80043c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80043a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a6:	f000 fbdb 	bl	8004b60 <vPortFree>
 80043aa:	e00a      	b.n	80043c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043be:	e000      	b.n	80043c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80043c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <prvProcessReceivedCommands+0x1c0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1d39      	adds	r1, r7, #4
 80043c8:	2200      	movs	r2, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fc4a 	bl	8002c64 <xQueueReceive>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af2a 	bne.w	800422c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3730      	adds	r7, #48	; 0x30
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000d54 	.word	0x20000d54

080043e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ee:	e048      	b.n	8004482 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <prvSwitchTimerLists+0xc0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fa:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <prvSwitchTimerLists+0xc0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe f963 	bl	80026d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02e      	beq.n	8004482 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	429a      	cmp	r2, r3
 8004434:	d90e      	bls.n	8004454 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004442:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <prvSwitchTimerLists+0xc0>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3304      	adds	r3, #4
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f7fe f908 	bl	8002662 <vListInsert>
 8004452:	e016      	b.n	8004482 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2300      	movs	r3, #0
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	2100      	movs	r1, #0
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff fd60 	bl	8003f24 <xTimerGenericCommand>
 8004464:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	603b      	str	r3, [r7, #0]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <prvSwitchTimerLists+0xc0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1b1      	bne.n	80043f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <prvSwitchTimerLists+0xc0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <prvSwitchTimerLists+0xc4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <prvSwitchTimerLists+0xc0>)
 8004498:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800449a:	4a04      	ldr	r2, [pc, #16]	; (80044ac <prvSwitchTimerLists+0xc4>)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000d4c 	.word	0x20000d4c
 80044ac:	20000d50 	.word	0x20000d50

080044b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044b6:	f000 f965 	bl	8004784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d120      	bne.n	8004504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044c2:	4814      	ldr	r0, [pc, #80]	; (8004514 <prvCheckForValidListAndQueue+0x64>)
 80044c4:	f7fe f87c 	bl	80025c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044c8:	4813      	ldr	r0, [pc, #76]	; (8004518 <prvCheckForValidListAndQueue+0x68>)
 80044ca:	f7fe f879 	bl	80025c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044ce:	4b13      	ldr	r3, [pc, #76]	; (800451c <prvCheckForValidListAndQueue+0x6c>)
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <prvCheckForValidListAndQueue+0x64>)
 80044d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <prvCheckForValidListAndQueue+0x70>)
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <prvCheckForValidListAndQueue+0x68>)
 80044d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044da:	2300      	movs	r3, #0
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <prvCheckForValidListAndQueue+0x74>)
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <prvCheckForValidListAndQueue+0x78>)
 80044e2:	2110      	movs	r1, #16
 80044e4:	200a      	movs	r0, #10
 80044e6:	f7fe f987 	bl	80027f8 <xQueueGenericCreateStatic>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	490b      	ldr	r1, [pc, #44]	; (800452c <prvCheckForValidListAndQueue+0x7c>)
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fda0 	bl	8003044 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004504:	f000 f96e 	bl	80047e4 <vPortExitCritical>
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000d54 	.word	0x20000d54
 8004514:	20000d24 	.word	0x20000d24
 8004518:	20000d38 	.word	0x20000d38
 800451c:	20000d4c 	.word	0x20000d4c
 8004520:	20000d50 	.word	0x20000d50
 8004524:	20000e00 	.word	0x20000e00
 8004528:	20000d60 	.word	0x20000d60
 800452c:	08005c9c 	.word	0x08005c9c

08004530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b04      	subs	r3, #4
 8004540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3b04      	subs	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b04      	subs	r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004560:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <pxPortInitialiseStack+0x64>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b14      	subs	r3, #20
 800456a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b04      	subs	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f06f 0202 	mvn.w	r2, #2
 800457e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b20      	subs	r3, #32
 8004584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	08004599 	.word	0x08004599

08004598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <prvTaskExitError+0x54>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d00a      	beq.n	80045c2 <prvTaskExitError+0x2a>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	60fb      	str	r3, [r7, #12]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <prvTaskExitError+0x28>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60bb      	str	r3, [r7, #8]
}
 80045d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045d6:	bf00      	nop
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0fc      	beq.n	80045d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	2000000c 	.word	0x2000000c

080045f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <pxCurrentTCBConst2>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f380 8809 	msr	PSP, r0
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	4770      	bx	lr
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst2>:
 8004610:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004618:	4808      	ldr	r0, [pc, #32]	; (800463c <prvPortStartFirstTask+0x24>)
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f380 8808 	msr	MSP, r0
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8814 	msr	CONTROL, r0
 800462a:	b662      	cpsie	i
 800462c:	b661      	cpsie	f
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	df00      	svc	0
 8004638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800463a:	bf00      	nop
 800463c:	e000ed08 	.word	0xe000ed08

08004640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004646:	4b46      	ldr	r3, [pc, #280]	; (8004760 <xPortStartScheduler+0x120>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a46      	ldr	r2, [pc, #280]	; (8004764 <xPortStartScheduler+0x124>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10a      	bne.n	8004666 <xPortStartScheduler+0x26>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004666:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <xPortStartScheduler+0x120>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a3f      	ldr	r2, [pc, #252]	; (8004768 <xPortStartScheduler+0x128>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10a      	bne.n	8004686 <xPortStartScheduler+0x46>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004686:	4b39      	ldr	r3, [pc, #228]	; (800476c <xPortStartScheduler+0x12c>)
 8004688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <xPortStartScheduler+0x130>)
 80046ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <xPortStartScheduler+0x134>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046b4:	e009      	b.n	80046ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <xPortStartScheduler+0x134>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <xPortStartScheduler+0x134>)
 80046be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b80      	cmp	r3, #128	; 0x80
 80046d4:	d0ef      	beq.n	80046b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046d6:	4b27      	ldr	r3, [pc, #156]	; (8004774 <xPortStartScheduler+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1c3 0307 	rsb	r3, r3, #7
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00a      	beq.n	80046f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60bb      	str	r3, [r7, #8]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <xPortStartScheduler+0x134>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <xPortStartScheduler+0x134>)
 8004700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <xPortStartScheduler+0x134>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800470a:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <xPortStartScheduler+0x134>)
 800470c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <xPortStartScheduler+0x138>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <xPortStartScheduler+0x138>)
 800471c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <xPortStartScheduler+0x138>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <xPortStartScheduler+0x138>)
 8004728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800472c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800472e:	f000 f8dd 	bl	80048ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <xPortStartScheduler+0x13c>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004738:	f000 f8fc 	bl	8004934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xPortStartScheduler+0x140>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <xPortStartScheduler+0x140>)
 8004742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004748:	f7ff ff66 	bl	8004618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800474c:	f7ff f856 	bl	80037fc <vTaskSwitchContext>
	prvTaskExitError();
 8004750:	f7ff ff22 	bl	8004598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000ed00 	.word	0xe000ed00
 8004764:	410fc271 	.word	0x410fc271
 8004768:	410fc270 	.word	0x410fc270
 800476c:	e000e400 	.word	0xe000e400
 8004770:	20000e50 	.word	0x20000e50
 8004774:	20000e54 	.word	0x20000e54
 8004778:	e000ed20 	.word	0xe000ed20
 800477c:	2000000c 	.word	0x2000000c
 8004780:	e000ef34 	.word	0xe000ef34

08004784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	607b      	str	r3, [r7, #4]
}
 800479c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <vPortEnterCritical+0x58>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <vPortEnterCritical+0x58>)
 80047a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <vPortEnterCritical+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10f      	bne.n	80047d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortEnterCritical+0x5c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	603b      	str	r3, [r7, #0]
}
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <vPortEnterCritical+0x4a>
	}
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <vPortExitCritical+0x50>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <vPortExitCritical+0x24>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <vPortExitCritical+0x50>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <vPortExitCritical+0x50>)
 8004810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <vPortExitCritical+0x50>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <vPortExitCritical+0x42>
 800481a:	2300      	movs	r3, #0
 800481c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f383 8811 	msr	BASEPRI, r3
}
 8004824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000000c 	.word	0x2000000c
	...

08004840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004840:	f3ef 8009 	mrs	r0, PSP
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <pxCurrentTCBConst>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	f01e 0f10 	tst.w	lr, #16
 8004850:	bf08      	it	eq
 8004852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004864:	f380 8811 	msr	BASEPRI, r0
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f7fe ffc4 	bl	80037fc <vTaskSwitchContext>
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f380 8811 	msr	BASEPRI, r0
 800487c:	bc09      	pop	{r0, r3}
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	6808      	ldr	r0, [r1, #0]
 8004882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004886:	f01e 0f10 	tst.w	lr, #16
 800488a:	bf08      	it	eq
 800488c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004890:	f380 8809 	msr	PSP, r0
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst>:
 80048a0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
}
 80048c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048c2:	f7fe fee1 	bl	8003688 <xTaskIncrementTick>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <xPortSysTickHandler+0x40>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	2300      	movs	r3, #0
 80048d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f383 8811 	msr	BASEPRI, r3
}
 80048de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <vPortSetupTimerInterrupt+0x34>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <vPortSetupTimerInterrupt+0x38>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <vPortSetupTimerInterrupt+0x3c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <vPortSetupTimerInterrupt+0x40>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	4a09      	ldr	r2, [pc, #36]	; (8004930 <vPortSetupTimerInterrupt+0x44>)
 800490a:	3b01      	subs	r3, #1
 800490c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <vPortSetupTimerInterrupt+0x34>)
 8004910:	2207      	movs	r2, #7
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	e000e010 	.word	0xe000e010
 8004924:	e000e018 	.word	0xe000e018
 8004928:	20000000 	.word	0x20000000
 800492c:	10624dd3 	.word	0x10624dd3
 8004930:	e000e014 	.word	0xe000e014

08004934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004944 <vPortEnableVFP+0x10>
 8004938:	6801      	ldr	r1, [r0, #0]
 800493a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800493e:	6001      	str	r1, [r0, #0]
 8004940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004942:	bf00      	nop
 8004944:	e000ed88 	.word	0xe000ed88

08004948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800494e:	f3ef 8305 	mrs	r3, IPSR
 8004952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d914      	bls.n	8004984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <vPortValidateInterruptPriority+0x70>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <vPortValidateInterruptPriority+0x74>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	7afa      	ldrb	r2, [r7, #11]
 800496a:	429a      	cmp	r2, r3
 800496c:	d20a      	bcs.n	8004984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <vPortValidateInterruptPriority+0x78>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <vPortValidateInterruptPriority+0x7c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d90a      	bls.n	80049aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	603b      	str	r3, [r7, #0]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <vPortValidateInterruptPriority+0x60>
	}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	e000e3f0 	.word	0xe000e3f0
 80049bc:	20000e50 	.word	0x20000e50
 80049c0:	e000ed0c 	.word	0xe000ed0c
 80049c4:	20000e54 	.word	0x20000e54

080049c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049d4:	f7fe fd9c 	bl	8003510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049d8:	4b5b      	ldr	r3, [pc, #364]	; (8004b48 <pvPortMalloc+0x180>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049e0:	f000 f920 	bl	8004c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049e4:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <pvPortMalloc+0x184>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8093 	bne.w	8004b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01d      	beq.n	8004a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80049f8:	2208      	movs	r2, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d014      	beq.n	8004a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f023 0307 	bic.w	r3, r3, #7
 8004a10:	3308      	adds	r3, #8
 8004a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <pvPortMalloc+0x6c>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	617b      	str	r3, [r7, #20]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d06e      	beq.n	8004b18 <pvPortMalloc+0x150>
 8004a3a:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <pvPortMalloc+0x188>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d869      	bhi.n	8004b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a44:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <pvPortMalloc+0x18c>)
 8004a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a48:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <pvPortMalloc+0x18c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a4e:	e004      	b.n	8004a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d903      	bls.n	8004a6c <pvPortMalloc+0xa4>
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f1      	bne.n	8004a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a6c:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <pvPortMalloc+0x180>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d050      	beq.n	8004b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	4413      	add	r3, r2
 8004a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	2308      	movs	r3, #8
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d91f      	bls.n	8004ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	613b      	str	r3, [r7, #16]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ad2:	69b8      	ldr	r0, [r7, #24]
 8004ad4:	f000 f908 	bl	8004ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <pvPortMalloc+0x188>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <pvPortMalloc+0x188>)
 8004ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <pvPortMalloc+0x188>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <pvPortMalloc+0x190>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d203      	bcs.n	8004afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <pvPortMalloc+0x188>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <pvPortMalloc+0x190>)
 8004af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <pvPortMalloc+0x184>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <pvPortMalloc+0x194>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <pvPortMalloc+0x194>)
 8004b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b18:	f7fe fd08 	bl	800352c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <pvPortMalloc+0x174>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60fb      	str	r3, [r7, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <pvPortMalloc+0x172>
	return pvReturn;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3728      	adds	r7, #40	; 0x28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20004a60 	.word	0x20004a60
 8004b4c:	20004a74 	.word	0x20004a74
 8004b50:	20004a64 	.word	0x20004a64
 8004b54:	20004a58 	.word	0x20004a58
 8004b58:	20004a68 	.word	0x20004a68
 8004b5c:	20004a6c 	.word	0x20004a6c

08004b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d04d      	beq.n	8004c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b72:	2308      	movs	r3, #8
 8004b74:	425b      	negs	r3, r3
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4413      	add	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <vPortFree+0xb8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <vPortFree+0x44>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	60fb      	str	r3, [r7, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <vPortFree+0x62>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60bb      	str	r3, [r7, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <vPortFree+0xb8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01e      	beq.n	8004c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d11a      	bne.n	8004c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <vPortFree+0xb8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	401a      	ands	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004be8:	f7fe fc92 	bl	8003510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <vPortFree+0xbc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <vPortFree+0xbc>)
 8004bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bfa:	6938      	ldr	r0, [r7, #16]
 8004bfc:	f000 f874 	bl	8004ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <vPortFree+0xc0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <vPortFree+0xc0>)
 8004c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c0a:	f7fe fc8f 	bl	800352c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20004a74 	.word	0x20004a74
 8004c1c:	20004a64 	.word	0x20004a64
 8004c20:	20004a70 	.word	0x20004a70

08004c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <prvHeapInit+0xac>)
 8004c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3307      	adds	r3, #7
 8004c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <prvHeapInit+0xac>)
 8004c54:	4413      	add	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <prvHeapInit+0xb0>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c62:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <prvHeapInit+0xb0>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c70:	2208      	movs	r2, #8
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <prvHeapInit+0xb4>)
 8004c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c86:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <prvHeapInit+0xb4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <prvHeapInit+0xb4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <prvHeapInit+0xb4>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <prvHeapInit+0xb8>)
 8004cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <prvHeapInit+0xbc>)
 8004cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <prvHeapInit+0xc0>)
 8004cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20000e58 	.word	0x20000e58
 8004cd4:	20004a58 	.word	0x20004a58
 8004cd8:	20004a60 	.word	0x20004a60
 8004cdc:	20004a68 	.word	0x20004a68
 8004ce0:	20004a64 	.word	0x20004a64
 8004ce4:	20004a74 	.word	0x20004a74

08004ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cf0:	4b28      	ldr	r3, [pc, #160]	; (8004d94 <prvInsertBlockIntoFreeList+0xac>)
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e002      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x14>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d8f7      	bhi.n	8004cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4413      	add	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d108      	bne.n	8004d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	441a      	add	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	441a      	add	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d118      	bne.n	8004d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <prvInsertBlockIntoFreeList+0xb0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d00d      	beq.n	8004d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e008      	b.n	8004d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <prvInsertBlockIntoFreeList+0xb0>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e003      	b.n	8004d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d002      	beq.n	8004d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20004a58 	.word	0x20004a58
 8004d98:	20004a60 	.word	0x20004a60

08004d9c <std>:
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	4604      	mov	r4, r0
 8004da2:	e9c0 3300 	strd	r3, r3, [r0]
 8004da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004daa:	6083      	str	r3, [r0, #8]
 8004dac:	8181      	strh	r1, [r0, #12]
 8004dae:	6643      	str	r3, [r0, #100]	; 0x64
 8004db0:	81c2      	strh	r2, [r0, #14]
 8004db2:	6183      	str	r3, [r0, #24]
 8004db4:	4619      	mov	r1, r3
 8004db6:	2208      	movs	r2, #8
 8004db8:	305c      	adds	r0, #92	; 0x5c
 8004dba:	f000 f906 	bl	8004fca <memset>
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <std+0x58>)
 8004dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <std+0x5c>)
 8004dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <std+0x60>)
 8004dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <std+0x64>)
 8004dcc:	6323      	str	r3, [r4, #48]	; 0x30
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <std+0x68>)
 8004dd0:	6224      	str	r4, [r4, #32]
 8004dd2:	429c      	cmp	r4, r3
 8004dd4:	d006      	beq.n	8004de4 <std+0x48>
 8004dd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004dda:	4294      	cmp	r4, r2
 8004ddc:	d002      	beq.n	8004de4 <std+0x48>
 8004dde:	33d0      	adds	r3, #208	; 0xd0
 8004de0:	429c      	cmp	r4, r3
 8004de2:	d105      	bne.n	8004df0 <std+0x54>
 8004de4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dec:	f000 b966 	b.w	80050bc <__retarget_lock_init_recursive>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	bf00      	nop
 8004df4:	08004f45 	.word	0x08004f45
 8004df8:	08004f67 	.word	0x08004f67
 8004dfc:	08004f9f 	.word	0x08004f9f
 8004e00:	08004fc3 	.word	0x08004fc3
 8004e04:	20004a78 	.word	0x20004a78

08004e08 <stdio_exit_handler>:
 8004e08:	4a02      	ldr	r2, [pc, #8]	; (8004e14 <stdio_exit_handler+0xc>)
 8004e0a:	4903      	ldr	r1, [pc, #12]	; (8004e18 <stdio_exit_handler+0x10>)
 8004e0c:	4803      	ldr	r0, [pc, #12]	; (8004e1c <stdio_exit_handler+0x14>)
 8004e0e:	f000 b869 	b.w	8004ee4 <_fwalk_sglue>
 8004e12:	bf00      	nop
 8004e14:	20000010 	.word	0x20000010
 8004e18:	08005985 	.word	0x08005985
 8004e1c:	2000001c 	.word	0x2000001c

08004e20 <cleanup_stdio>:
 8004e20:	6841      	ldr	r1, [r0, #4]
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <cleanup_stdio+0x34>)
 8004e24:	4299      	cmp	r1, r3
 8004e26:	b510      	push	{r4, lr}
 8004e28:	4604      	mov	r4, r0
 8004e2a:	d001      	beq.n	8004e30 <cleanup_stdio+0x10>
 8004e2c:	f000 fdaa 	bl	8005984 <_fflush_r>
 8004e30:	68a1      	ldr	r1, [r4, #8]
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <cleanup_stdio+0x38>)
 8004e34:	4299      	cmp	r1, r3
 8004e36:	d002      	beq.n	8004e3e <cleanup_stdio+0x1e>
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 fda3 	bl	8005984 <_fflush_r>
 8004e3e:	68e1      	ldr	r1, [r4, #12]
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <cleanup_stdio+0x3c>)
 8004e42:	4299      	cmp	r1, r3
 8004e44:	d004      	beq.n	8004e50 <cleanup_stdio+0x30>
 8004e46:	4620      	mov	r0, r4
 8004e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e4c:	f000 bd9a 	b.w	8005984 <_fflush_r>
 8004e50:	bd10      	pop	{r4, pc}
 8004e52:	bf00      	nop
 8004e54:	20004a78 	.word	0x20004a78
 8004e58:	20004ae0 	.word	0x20004ae0
 8004e5c:	20004b48 	.word	0x20004b48

08004e60 <global_stdio_init.part.0>:
 8004e60:	b510      	push	{r4, lr}
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <global_stdio_init.part.0+0x30>)
 8004e64:	4c0b      	ldr	r4, [pc, #44]	; (8004e94 <global_stdio_init.part.0+0x34>)
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <global_stdio_init.part.0+0x38>)
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2104      	movs	r1, #4
 8004e70:	f7ff ff94 	bl	8004d9c <std>
 8004e74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2109      	movs	r1, #9
 8004e7c:	f7ff ff8e 	bl	8004d9c <std>
 8004e80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e84:	2202      	movs	r2, #2
 8004e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8a:	2112      	movs	r1, #18
 8004e8c:	f7ff bf86 	b.w	8004d9c <std>
 8004e90:	20004bb0 	.word	0x20004bb0
 8004e94:	20004a78 	.word	0x20004a78
 8004e98:	08004e09 	.word	0x08004e09

08004e9c <__sfp_lock_acquire>:
 8004e9c:	4801      	ldr	r0, [pc, #4]	; (8004ea4 <__sfp_lock_acquire+0x8>)
 8004e9e:	f000 b90e 	b.w	80050be <__retarget_lock_acquire_recursive>
 8004ea2:	bf00      	nop
 8004ea4:	20004bb9 	.word	0x20004bb9

08004ea8 <__sfp_lock_release>:
 8004ea8:	4801      	ldr	r0, [pc, #4]	; (8004eb0 <__sfp_lock_release+0x8>)
 8004eaa:	f000 b909 	b.w	80050c0 <__retarget_lock_release_recursive>
 8004eae:	bf00      	nop
 8004eb0:	20004bb9 	.word	0x20004bb9

08004eb4 <__sinit>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	f7ff fff0 	bl	8004e9c <__sfp_lock_acquire>
 8004ebc:	6a23      	ldr	r3, [r4, #32]
 8004ebe:	b11b      	cbz	r3, 8004ec8 <__sinit+0x14>
 8004ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec4:	f7ff bff0 	b.w	8004ea8 <__sfp_lock_release>
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <__sinit+0x28>)
 8004eca:	6223      	str	r3, [r4, #32]
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <__sinit+0x2c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f5      	bne.n	8004ec0 <__sinit+0xc>
 8004ed4:	f7ff ffc4 	bl	8004e60 <global_stdio_init.part.0>
 8004ed8:	e7f2      	b.n	8004ec0 <__sinit+0xc>
 8004eda:	bf00      	nop
 8004edc:	08004e21 	.word	0x08004e21
 8004ee0:	20004bb0 	.word	0x20004bb0

08004ee4 <_fwalk_sglue>:
 8004ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	4607      	mov	r7, r0
 8004eea:	4688      	mov	r8, r1
 8004eec:	4614      	mov	r4, r2
 8004eee:	2600      	movs	r6, #0
 8004ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ef8:	d505      	bpl.n	8004f06 <_fwalk_sglue+0x22>
 8004efa:	6824      	ldr	r4, [r4, #0]
 8004efc:	2c00      	cmp	r4, #0
 8004efe:	d1f7      	bne.n	8004ef0 <_fwalk_sglue+0xc>
 8004f00:	4630      	mov	r0, r6
 8004f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d907      	bls.n	8004f1c <_fwalk_sglue+0x38>
 8004f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f10:	3301      	adds	r3, #1
 8004f12:	d003      	beq.n	8004f1c <_fwalk_sglue+0x38>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4638      	mov	r0, r7
 8004f18:	47c0      	blx	r8
 8004f1a:	4306      	orrs	r6, r0
 8004f1c:	3568      	adds	r5, #104	; 0x68
 8004f1e:	e7e9      	b.n	8004ef4 <_fwalk_sglue+0x10>

08004f20 <iprintf>:
 8004f20:	b40f      	push	{r0, r1, r2, r3}
 8004f22:	b507      	push	{r0, r1, r2, lr}
 8004f24:	4906      	ldr	r1, [pc, #24]	; (8004f40 <iprintf+0x20>)
 8004f26:	ab04      	add	r3, sp, #16
 8004f28:	6808      	ldr	r0, [r1, #0]
 8004f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2e:	6881      	ldr	r1, [r0, #8]
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	f000 f9f7 	bl	8005324 <_vfiprintf_r>
 8004f36:	b003      	add	sp, #12
 8004f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f3c:	b004      	add	sp, #16
 8004f3e:	4770      	bx	lr
 8004f40:	20000068 	.word	0x20000068

08004f44 <__sread>:
 8004f44:	b510      	push	{r4, lr}
 8004f46:	460c      	mov	r4, r1
 8004f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4c:	f000 f868 	bl	8005020 <_read_r>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	bfab      	itete	ge
 8004f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f56:	89a3      	ldrhlt	r3, [r4, #12]
 8004f58:	181b      	addge	r3, r3, r0
 8004f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f5e:	bfac      	ite	ge
 8004f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f62:	81a3      	strhlt	r3, [r4, #12]
 8004f64:	bd10      	pop	{r4, pc}

08004f66 <__swrite>:
 8004f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6a:	461f      	mov	r7, r3
 8004f6c:	898b      	ldrh	r3, [r1, #12]
 8004f6e:	05db      	lsls	r3, r3, #23
 8004f70:	4605      	mov	r5, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	4616      	mov	r6, r2
 8004f76:	d505      	bpl.n	8004f84 <__swrite+0x1e>
 8004f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f000 f83c 	bl	8004ffc <_lseek_r>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	4632      	mov	r2, r6
 8004f92:	463b      	mov	r3, r7
 8004f94:	4628      	mov	r0, r5
 8004f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9a:	f000 b853 	b.w	8005044 <_write_r>

08004f9e <__sseek>:
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa6:	f000 f829 	bl	8004ffc <_lseek_r>
 8004faa:	1c43      	adds	r3, r0, #1
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	bf15      	itete	ne
 8004fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fba:	81a3      	strheq	r3, [r4, #12]
 8004fbc:	bf18      	it	ne
 8004fbe:	81a3      	strhne	r3, [r4, #12]
 8004fc0:	bd10      	pop	{r4, pc}

08004fc2 <__sclose>:
 8004fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc6:	f000 b809 	b.w	8004fdc <_close_r>

08004fca <memset>:
 8004fca:	4402      	add	r2, r0
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d100      	bne.n	8004fd4 <memset+0xa>
 8004fd2:	4770      	bx	lr
 8004fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd8:	e7f9      	b.n	8004fce <memset+0x4>
	...

08004fdc <_close_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d06      	ldr	r5, [pc, #24]	; (8004ff8 <_close_r+0x1c>)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fb fd43 	bl	8000a72 <_close>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_close_r+0x1a>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_close_r+0x1a>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	20004bb4 	.word	0x20004bb4

08004ffc <_lseek_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d07      	ldr	r5, [pc, #28]	; (800501c <_lseek_r+0x20>)
 8005000:	4604      	mov	r4, r0
 8005002:	4608      	mov	r0, r1
 8005004:	4611      	mov	r1, r2
 8005006:	2200      	movs	r2, #0
 8005008:	602a      	str	r2, [r5, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f7fb fd58 	bl	8000ac0 <_lseek>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_lseek_r+0x1e>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_lseek_r+0x1e>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	20004bb4 	.word	0x20004bb4

08005020 <_read_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4d07      	ldr	r5, [pc, #28]	; (8005040 <_read_r+0x20>)
 8005024:	4604      	mov	r4, r0
 8005026:	4608      	mov	r0, r1
 8005028:	4611      	mov	r1, r2
 800502a:	2200      	movs	r2, #0
 800502c:	602a      	str	r2, [r5, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f7fb fce6 	bl	8000a00 <_read>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_read_r+0x1e>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_read_r+0x1e>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	20004bb4 	.word	0x20004bb4

08005044 <_write_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d07      	ldr	r5, [pc, #28]	; (8005064 <_write_r+0x20>)
 8005048:	4604      	mov	r4, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	602a      	str	r2, [r5, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fb fcf1 	bl	8000a3a <_write>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_write_r+0x1e>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_write_r+0x1e>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20004bb4 	.word	0x20004bb4

08005068 <__errno>:
 8005068:	4b01      	ldr	r3, [pc, #4]	; (8005070 <__errno+0x8>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000068 	.word	0x20000068

08005074 <__libc_init_array>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4d0d      	ldr	r5, [pc, #52]	; (80050ac <__libc_init_array+0x38>)
 8005078:	4c0d      	ldr	r4, [pc, #52]	; (80050b0 <__libc_init_array+0x3c>)
 800507a:	1b64      	subs	r4, r4, r5
 800507c:	10a4      	asrs	r4, r4, #2
 800507e:	2600      	movs	r6, #0
 8005080:	42a6      	cmp	r6, r4
 8005082:	d109      	bne.n	8005098 <__libc_init_array+0x24>
 8005084:	4d0b      	ldr	r5, [pc, #44]	; (80050b4 <__libc_init_array+0x40>)
 8005086:	4c0c      	ldr	r4, [pc, #48]	; (80050b8 <__libc_init_array+0x44>)
 8005088:	f000 fdce 	bl	8005c28 <_init>
 800508c:	1b64      	subs	r4, r4, r5
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	2600      	movs	r6, #0
 8005092:	42a6      	cmp	r6, r4
 8005094:	d105      	bne.n	80050a2 <__libc_init_array+0x2e>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	f855 3b04 	ldr.w	r3, [r5], #4
 800509c:	4798      	blx	r3
 800509e:	3601      	adds	r6, #1
 80050a0:	e7ee      	b.n	8005080 <__libc_init_array+0xc>
 80050a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a6:	4798      	blx	r3
 80050a8:	3601      	adds	r6, #1
 80050aa:	e7f2      	b.n	8005092 <__libc_init_array+0x1e>
 80050ac:	08005cf8 	.word	0x08005cf8
 80050b0:	08005cf8 	.word	0x08005cf8
 80050b4:	08005cf8 	.word	0x08005cf8
 80050b8:	08005cfc 	.word	0x08005cfc

080050bc <__retarget_lock_init_recursive>:
 80050bc:	4770      	bx	lr

080050be <__retarget_lock_acquire_recursive>:
 80050be:	4770      	bx	lr

080050c0 <__retarget_lock_release_recursive>:
 80050c0:	4770      	bx	lr

080050c2 <memcpy>:
 80050c2:	440a      	add	r2, r1
 80050c4:	4291      	cmp	r1, r2
 80050c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80050ca:	d100      	bne.n	80050ce <memcpy+0xc>
 80050cc:	4770      	bx	lr
 80050ce:	b510      	push	{r4, lr}
 80050d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d8:	4291      	cmp	r1, r2
 80050da:	d1f9      	bne.n	80050d0 <memcpy+0xe>
 80050dc:	bd10      	pop	{r4, pc}
	...

080050e0 <_free_r>:
 80050e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050e2:	2900      	cmp	r1, #0
 80050e4:	d044      	beq.n	8005170 <_free_r+0x90>
 80050e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ea:	9001      	str	r0, [sp, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f1a1 0404 	sub.w	r4, r1, #4
 80050f2:	bfb8      	it	lt
 80050f4:	18e4      	addlt	r4, r4, r3
 80050f6:	f000 f8df 	bl	80052b8 <__malloc_lock>
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <_free_r+0x94>)
 80050fc:	9801      	ldr	r0, [sp, #4]
 80050fe:	6813      	ldr	r3, [r2, #0]
 8005100:	b933      	cbnz	r3, 8005110 <_free_r+0x30>
 8005102:	6063      	str	r3, [r4, #4]
 8005104:	6014      	str	r4, [r2, #0]
 8005106:	b003      	add	sp, #12
 8005108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800510c:	f000 b8da 	b.w	80052c4 <__malloc_unlock>
 8005110:	42a3      	cmp	r3, r4
 8005112:	d908      	bls.n	8005126 <_free_r+0x46>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	1961      	adds	r1, r4, r5
 8005118:	428b      	cmp	r3, r1
 800511a:	bf01      	itttt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	1949      	addeq	r1, r1, r5
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	e7ed      	b.n	8005102 <_free_r+0x22>
 8005126:	461a      	mov	r2, r3
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b10b      	cbz	r3, 8005130 <_free_r+0x50>
 800512c:	42a3      	cmp	r3, r4
 800512e:	d9fa      	bls.n	8005126 <_free_r+0x46>
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	1855      	adds	r5, r2, r1
 8005134:	42a5      	cmp	r5, r4
 8005136:	d10b      	bne.n	8005150 <_free_r+0x70>
 8005138:	6824      	ldr	r4, [r4, #0]
 800513a:	4421      	add	r1, r4
 800513c:	1854      	adds	r4, r2, r1
 800513e:	42a3      	cmp	r3, r4
 8005140:	6011      	str	r1, [r2, #0]
 8005142:	d1e0      	bne.n	8005106 <_free_r+0x26>
 8005144:	681c      	ldr	r4, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	6053      	str	r3, [r2, #4]
 800514a:	440c      	add	r4, r1
 800514c:	6014      	str	r4, [r2, #0]
 800514e:	e7da      	b.n	8005106 <_free_r+0x26>
 8005150:	d902      	bls.n	8005158 <_free_r+0x78>
 8005152:	230c      	movs	r3, #12
 8005154:	6003      	str	r3, [r0, #0]
 8005156:	e7d6      	b.n	8005106 <_free_r+0x26>
 8005158:	6825      	ldr	r5, [r4, #0]
 800515a:	1961      	adds	r1, r4, r5
 800515c:	428b      	cmp	r3, r1
 800515e:	bf04      	itt	eq
 8005160:	6819      	ldreq	r1, [r3, #0]
 8005162:	685b      	ldreq	r3, [r3, #4]
 8005164:	6063      	str	r3, [r4, #4]
 8005166:	bf04      	itt	eq
 8005168:	1949      	addeq	r1, r1, r5
 800516a:	6021      	streq	r1, [r4, #0]
 800516c:	6054      	str	r4, [r2, #4]
 800516e:	e7ca      	b.n	8005106 <_free_r+0x26>
 8005170:	b003      	add	sp, #12
 8005172:	bd30      	pop	{r4, r5, pc}
 8005174:	20004bbc 	.word	0x20004bbc

08005178 <sbrk_aligned>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	4e0e      	ldr	r6, [pc, #56]	; (80051b4 <sbrk_aligned+0x3c>)
 800517c:	460c      	mov	r4, r1
 800517e:	6831      	ldr	r1, [r6, #0]
 8005180:	4605      	mov	r5, r0
 8005182:	b911      	cbnz	r1, 800518a <sbrk_aligned+0x12>
 8005184:	f000 fcbc 	bl	8005b00 <_sbrk_r>
 8005188:	6030      	str	r0, [r6, #0]
 800518a:	4621      	mov	r1, r4
 800518c:	4628      	mov	r0, r5
 800518e:	f000 fcb7 	bl	8005b00 <_sbrk_r>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	d00a      	beq.n	80051ac <sbrk_aligned+0x34>
 8005196:	1cc4      	adds	r4, r0, #3
 8005198:	f024 0403 	bic.w	r4, r4, #3
 800519c:	42a0      	cmp	r0, r4
 800519e:	d007      	beq.n	80051b0 <sbrk_aligned+0x38>
 80051a0:	1a21      	subs	r1, r4, r0
 80051a2:	4628      	mov	r0, r5
 80051a4:	f000 fcac 	bl	8005b00 <_sbrk_r>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d101      	bne.n	80051b0 <sbrk_aligned+0x38>
 80051ac:	f04f 34ff 	mov.w	r4, #4294967295
 80051b0:	4620      	mov	r0, r4
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	20004bc0 	.word	0x20004bc0

080051b8 <_malloc_r>:
 80051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	1ccd      	adds	r5, r1, #3
 80051be:	f025 0503 	bic.w	r5, r5, #3
 80051c2:	3508      	adds	r5, #8
 80051c4:	2d0c      	cmp	r5, #12
 80051c6:	bf38      	it	cc
 80051c8:	250c      	movcc	r5, #12
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	4607      	mov	r7, r0
 80051ce:	db01      	blt.n	80051d4 <_malloc_r+0x1c>
 80051d0:	42a9      	cmp	r1, r5
 80051d2:	d905      	bls.n	80051e0 <_malloc_r+0x28>
 80051d4:	230c      	movs	r3, #12
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	2600      	movs	r6, #0
 80051da:	4630      	mov	r0, r6
 80051dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052b4 <_malloc_r+0xfc>
 80051e4:	f000 f868 	bl	80052b8 <__malloc_lock>
 80051e8:	f8d8 3000 	ldr.w	r3, [r8]
 80051ec:	461c      	mov	r4, r3
 80051ee:	bb5c      	cbnz	r4, 8005248 <_malloc_r+0x90>
 80051f0:	4629      	mov	r1, r5
 80051f2:	4638      	mov	r0, r7
 80051f4:	f7ff ffc0 	bl	8005178 <sbrk_aligned>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	4604      	mov	r4, r0
 80051fc:	d155      	bne.n	80052aa <_malloc_r+0xf2>
 80051fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005202:	4626      	mov	r6, r4
 8005204:	2e00      	cmp	r6, #0
 8005206:	d145      	bne.n	8005294 <_malloc_r+0xdc>
 8005208:	2c00      	cmp	r4, #0
 800520a:	d048      	beq.n	800529e <_malloc_r+0xe6>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	4631      	mov	r1, r6
 8005210:	4638      	mov	r0, r7
 8005212:	eb04 0903 	add.w	r9, r4, r3
 8005216:	f000 fc73 	bl	8005b00 <_sbrk_r>
 800521a:	4581      	cmp	r9, r0
 800521c:	d13f      	bne.n	800529e <_malloc_r+0xe6>
 800521e:	6821      	ldr	r1, [r4, #0]
 8005220:	1a6d      	subs	r5, r5, r1
 8005222:	4629      	mov	r1, r5
 8005224:	4638      	mov	r0, r7
 8005226:	f7ff ffa7 	bl	8005178 <sbrk_aligned>
 800522a:	3001      	adds	r0, #1
 800522c:	d037      	beq.n	800529e <_malloc_r+0xe6>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	442b      	add	r3, r5
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	f8d8 3000 	ldr.w	r3, [r8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d038      	beq.n	80052ae <_malloc_r+0xf6>
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	42a2      	cmp	r2, r4
 8005240:	d12b      	bne.n	800529a <_malloc_r+0xe2>
 8005242:	2200      	movs	r2, #0
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	e00f      	b.n	8005268 <_malloc_r+0xb0>
 8005248:	6822      	ldr	r2, [r4, #0]
 800524a:	1b52      	subs	r2, r2, r5
 800524c:	d41f      	bmi.n	800528e <_malloc_r+0xd6>
 800524e:	2a0b      	cmp	r2, #11
 8005250:	d917      	bls.n	8005282 <_malloc_r+0xca>
 8005252:	1961      	adds	r1, r4, r5
 8005254:	42a3      	cmp	r3, r4
 8005256:	6025      	str	r5, [r4, #0]
 8005258:	bf18      	it	ne
 800525a:	6059      	strne	r1, [r3, #4]
 800525c:	6863      	ldr	r3, [r4, #4]
 800525e:	bf08      	it	eq
 8005260:	f8c8 1000 	streq.w	r1, [r8]
 8005264:	5162      	str	r2, [r4, r5]
 8005266:	604b      	str	r3, [r1, #4]
 8005268:	4638      	mov	r0, r7
 800526a:	f104 060b 	add.w	r6, r4, #11
 800526e:	f000 f829 	bl	80052c4 <__malloc_unlock>
 8005272:	f026 0607 	bic.w	r6, r6, #7
 8005276:	1d23      	adds	r3, r4, #4
 8005278:	1af2      	subs	r2, r6, r3
 800527a:	d0ae      	beq.n	80051da <_malloc_r+0x22>
 800527c:	1b9b      	subs	r3, r3, r6
 800527e:	50a3      	str	r3, [r4, r2]
 8005280:	e7ab      	b.n	80051da <_malloc_r+0x22>
 8005282:	42a3      	cmp	r3, r4
 8005284:	6862      	ldr	r2, [r4, #4]
 8005286:	d1dd      	bne.n	8005244 <_malloc_r+0x8c>
 8005288:	f8c8 2000 	str.w	r2, [r8]
 800528c:	e7ec      	b.n	8005268 <_malloc_r+0xb0>
 800528e:	4623      	mov	r3, r4
 8005290:	6864      	ldr	r4, [r4, #4]
 8005292:	e7ac      	b.n	80051ee <_malloc_r+0x36>
 8005294:	4634      	mov	r4, r6
 8005296:	6876      	ldr	r6, [r6, #4]
 8005298:	e7b4      	b.n	8005204 <_malloc_r+0x4c>
 800529a:	4613      	mov	r3, r2
 800529c:	e7cc      	b.n	8005238 <_malloc_r+0x80>
 800529e:	230c      	movs	r3, #12
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4638      	mov	r0, r7
 80052a4:	f000 f80e 	bl	80052c4 <__malloc_unlock>
 80052a8:	e797      	b.n	80051da <_malloc_r+0x22>
 80052aa:	6025      	str	r5, [r4, #0]
 80052ac:	e7dc      	b.n	8005268 <_malloc_r+0xb0>
 80052ae:	605b      	str	r3, [r3, #4]
 80052b0:	deff      	udf	#255	; 0xff
 80052b2:	bf00      	nop
 80052b4:	20004bbc 	.word	0x20004bbc

080052b8 <__malloc_lock>:
 80052b8:	4801      	ldr	r0, [pc, #4]	; (80052c0 <__malloc_lock+0x8>)
 80052ba:	f7ff bf00 	b.w	80050be <__retarget_lock_acquire_recursive>
 80052be:	bf00      	nop
 80052c0:	20004bb8 	.word	0x20004bb8

080052c4 <__malloc_unlock>:
 80052c4:	4801      	ldr	r0, [pc, #4]	; (80052cc <__malloc_unlock+0x8>)
 80052c6:	f7ff befb 	b.w	80050c0 <__retarget_lock_release_recursive>
 80052ca:	bf00      	nop
 80052cc:	20004bb8 	.word	0x20004bb8

080052d0 <__sfputc_r>:
 80052d0:	6893      	ldr	r3, [r2, #8]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	b410      	push	{r4}
 80052d8:	6093      	str	r3, [r2, #8]
 80052da:	da08      	bge.n	80052ee <__sfputc_r+0x1e>
 80052dc:	6994      	ldr	r4, [r2, #24]
 80052de:	42a3      	cmp	r3, r4
 80052e0:	db01      	blt.n	80052e6 <__sfputc_r+0x16>
 80052e2:	290a      	cmp	r1, #10
 80052e4:	d103      	bne.n	80052ee <__sfputc_r+0x1e>
 80052e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ea:	f000 bb73 	b.w	80059d4 <__swbuf_r>
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	1c58      	adds	r0, r3, #1
 80052f2:	6010      	str	r0, [r2, #0]
 80052f4:	7019      	strb	r1, [r3, #0]
 80052f6:	4608      	mov	r0, r1
 80052f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <__sfputs_r>:
 80052fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	4614      	mov	r4, r2
 8005306:	18d5      	adds	r5, r2, r3
 8005308:	42ac      	cmp	r4, r5
 800530a:	d101      	bne.n	8005310 <__sfputs_r+0x12>
 800530c:	2000      	movs	r0, #0
 800530e:	e007      	b.n	8005320 <__sfputs_r+0x22>
 8005310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005314:	463a      	mov	r2, r7
 8005316:	4630      	mov	r0, r6
 8005318:	f7ff ffda 	bl	80052d0 <__sfputc_r>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d1f3      	bne.n	8005308 <__sfputs_r+0xa>
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005324 <_vfiprintf_r>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	460d      	mov	r5, r1
 800532a:	b09d      	sub	sp, #116	; 0x74
 800532c:	4614      	mov	r4, r2
 800532e:	4698      	mov	r8, r3
 8005330:	4606      	mov	r6, r0
 8005332:	b118      	cbz	r0, 800533c <_vfiprintf_r+0x18>
 8005334:	6a03      	ldr	r3, [r0, #32]
 8005336:	b90b      	cbnz	r3, 800533c <_vfiprintf_r+0x18>
 8005338:	f7ff fdbc 	bl	8004eb4 <__sinit>
 800533c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800533e:	07d9      	lsls	r1, r3, #31
 8005340:	d405      	bmi.n	800534e <_vfiprintf_r+0x2a>
 8005342:	89ab      	ldrh	r3, [r5, #12]
 8005344:	059a      	lsls	r2, r3, #22
 8005346:	d402      	bmi.n	800534e <_vfiprintf_r+0x2a>
 8005348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800534a:	f7ff feb8 	bl	80050be <__retarget_lock_acquire_recursive>
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	071b      	lsls	r3, r3, #28
 8005352:	d501      	bpl.n	8005358 <_vfiprintf_r+0x34>
 8005354:	692b      	ldr	r3, [r5, #16]
 8005356:	b99b      	cbnz	r3, 8005380 <_vfiprintf_r+0x5c>
 8005358:	4629      	mov	r1, r5
 800535a:	4630      	mov	r0, r6
 800535c:	f000 fb78 	bl	8005a50 <__swsetup_r>
 8005360:	b170      	cbz	r0, 8005380 <_vfiprintf_r+0x5c>
 8005362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005364:	07dc      	lsls	r4, r3, #31
 8005366:	d504      	bpl.n	8005372 <_vfiprintf_r+0x4e>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	b01d      	add	sp, #116	; 0x74
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	89ab      	ldrh	r3, [r5, #12]
 8005374:	0598      	lsls	r0, r3, #22
 8005376:	d4f7      	bmi.n	8005368 <_vfiprintf_r+0x44>
 8005378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800537a:	f7ff fea1 	bl	80050c0 <__retarget_lock_release_recursive>
 800537e:	e7f3      	b.n	8005368 <_vfiprintf_r+0x44>
 8005380:	2300      	movs	r3, #0
 8005382:	9309      	str	r3, [sp, #36]	; 0x24
 8005384:	2320      	movs	r3, #32
 8005386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800538a:	f8cd 800c 	str.w	r8, [sp, #12]
 800538e:	2330      	movs	r3, #48	; 0x30
 8005390:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005544 <_vfiprintf_r+0x220>
 8005394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005398:	f04f 0901 	mov.w	r9, #1
 800539c:	4623      	mov	r3, r4
 800539e:	469a      	mov	sl, r3
 80053a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053a4:	b10a      	cbz	r2, 80053aa <_vfiprintf_r+0x86>
 80053a6:	2a25      	cmp	r2, #37	; 0x25
 80053a8:	d1f9      	bne.n	800539e <_vfiprintf_r+0x7a>
 80053aa:	ebba 0b04 	subs.w	fp, sl, r4
 80053ae:	d00b      	beq.n	80053c8 <_vfiprintf_r+0xa4>
 80053b0:	465b      	mov	r3, fp
 80053b2:	4622      	mov	r2, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff ffa1 	bl	80052fe <__sfputs_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	f000 80a9 	beq.w	8005514 <_vfiprintf_r+0x1f0>
 80053c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c4:	445a      	add	r2, fp
 80053c6:	9209      	str	r2, [sp, #36]	; 0x24
 80053c8:	f89a 3000 	ldrb.w	r3, [sl]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80a1 	beq.w	8005514 <_vfiprintf_r+0x1f0>
 80053d2:	2300      	movs	r3, #0
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295
 80053d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053dc:	f10a 0a01 	add.w	sl, sl, #1
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	9307      	str	r3, [sp, #28]
 80053e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053e8:	931a      	str	r3, [sp, #104]	; 0x68
 80053ea:	4654      	mov	r4, sl
 80053ec:	2205      	movs	r2, #5
 80053ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f2:	4854      	ldr	r0, [pc, #336]	; (8005544 <_vfiprintf_r+0x220>)
 80053f4:	f7fa fef4 	bl	80001e0 <memchr>
 80053f8:	9a04      	ldr	r2, [sp, #16]
 80053fa:	b9d8      	cbnz	r0, 8005434 <_vfiprintf_r+0x110>
 80053fc:	06d1      	lsls	r1, r2, #27
 80053fe:	bf44      	itt	mi
 8005400:	2320      	movmi	r3, #32
 8005402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005406:	0713      	lsls	r3, r2, #28
 8005408:	bf44      	itt	mi
 800540a:	232b      	movmi	r3, #43	; 0x2b
 800540c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005410:	f89a 3000 	ldrb.w	r3, [sl]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d015      	beq.n	8005444 <_vfiprintf_r+0x120>
 8005418:	9a07      	ldr	r2, [sp, #28]
 800541a:	4654      	mov	r4, sl
 800541c:	2000      	movs	r0, #0
 800541e:	f04f 0c0a 	mov.w	ip, #10
 8005422:	4621      	mov	r1, r4
 8005424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005428:	3b30      	subs	r3, #48	; 0x30
 800542a:	2b09      	cmp	r3, #9
 800542c:	d94d      	bls.n	80054ca <_vfiprintf_r+0x1a6>
 800542e:	b1b0      	cbz	r0, 800545e <_vfiprintf_r+0x13a>
 8005430:	9207      	str	r2, [sp, #28]
 8005432:	e014      	b.n	800545e <_vfiprintf_r+0x13a>
 8005434:	eba0 0308 	sub.w	r3, r0, r8
 8005438:	fa09 f303 	lsl.w	r3, r9, r3
 800543c:	4313      	orrs	r3, r2
 800543e:	9304      	str	r3, [sp, #16]
 8005440:	46a2      	mov	sl, r4
 8005442:	e7d2      	b.n	80053ea <_vfiprintf_r+0xc6>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	1d19      	adds	r1, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	9103      	str	r1, [sp, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfbb      	ittet	lt
 8005450:	425b      	neglt	r3, r3
 8005452:	f042 0202 	orrlt.w	r2, r2, #2
 8005456:	9307      	strge	r3, [sp, #28]
 8005458:	9307      	strlt	r3, [sp, #28]
 800545a:	bfb8      	it	lt
 800545c:	9204      	strlt	r2, [sp, #16]
 800545e:	7823      	ldrb	r3, [r4, #0]
 8005460:	2b2e      	cmp	r3, #46	; 0x2e
 8005462:	d10c      	bne.n	800547e <_vfiprintf_r+0x15a>
 8005464:	7863      	ldrb	r3, [r4, #1]
 8005466:	2b2a      	cmp	r3, #42	; 0x2a
 8005468:	d134      	bne.n	80054d4 <_vfiprintf_r+0x1b0>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	1d1a      	adds	r2, r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	9203      	str	r2, [sp, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	bfb8      	it	lt
 8005476:	f04f 33ff 	movlt.w	r3, #4294967295
 800547a:	3402      	adds	r4, #2
 800547c:	9305      	str	r3, [sp, #20]
 800547e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005554 <_vfiprintf_r+0x230>
 8005482:	7821      	ldrb	r1, [r4, #0]
 8005484:	2203      	movs	r2, #3
 8005486:	4650      	mov	r0, sl
 8005488:	f7fa feaa 	bl	80001e0 <memchr>
 800548c:	b138      	cbz	r0, 800549e <_vfiprintf_r+0x17a>
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	eba0 000a 	sub.w	r0, r0, sl
 8005494:	2240      	movs	r2, #64	; 0x40
 8005496:	4082      	lsls	r2, r0
 8005498:	4313      	orrs	r3, r2
 800549a:	3401      	adds	r4, #1
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a2:	4829      	ldr	r0, [pc, #164]	; (8005548 <_vfiprintf_r+0x224>)
 80054a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054a8:	2206      	movs	r2, #6
 80054aa:	f7fa fe99 	bl	80001e0 <memchr>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d03f      	beq.n	8005532 <_vfiprintf_r+0x20e>
 80054b2:	4b26      	ldr	r3, [pc, #152]	; (800554c <_vfiprintf_r+0x228>)
 80054b4:	bb1b      	cbnz	r3, 80054fe <_vfiprintf_r+0x1da>
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	3307      	adds	r3, #7
 80054ba:	f023 0307 	bic.w	r3, r3, #7
 80054be:	3308      	adds	r3, #8
 80054c0:	9303      	str	r3, [sp, #12]
 80054c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c4:	443b      	add	r3, r7
 80054c6:	9309      	str	r3, [sp, #36]	; 0x24
 80054c8:	e768      	b.n	800539c <_vfiprintf_r+0x78>
 80054ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ce:	460c      	mov	r4, r1
 80054d0:	2001      	movs	r0, #1
 80054d2:	e7a6      	b.n	8005422 <_vfiprintf_r+0xfe>
 80054d4:	2300      	movs	r3, #0
 80054d6:	3401      	adds	r4, #1
 80054d8:	9305      	str	r3, [sp, #20]
 80054da:	4619      	mov	r1, r3
 80054dc:	f04f 0c0a 	mov.w	ip, #10
 80054e0:	4620      	mov	r0, r4
 80054e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e6:	3a30      	subs	r2, #48	; 0x30
 80054e8:	2a09      	cmp	r2, #9
 80054ea:	d903      	bls.n	80054f4 <_vfiprintf_r+0x1d0>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0c6      	beq.n	800547e <_vfiprintf_r+0x15a>
 80054f0:	9105      	str	r1, [sp, #20]
 80054f2:	e7c4      	b.n	800547e <_vfiprintf_r+0x15a>
 80054f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f8:	4604      	mov	r4, r0
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7f0      	b.n	80054e0 <_vfiprintf_r+0x1bc>
 80054fe:	ab03      	add	r3, sp, #12
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	462a      	mov	r2, r5
 8005504:	4b12      	ldr	r3, [pc, #72]	; (8005550 <_vfiprintf_r+0x22c>)
 8005506:	a904      	add	r1, sp, #16
 8005508:	4630      	mov	r0, r6
 800550a:	f3af 8000 	nop.w
 800550e:	4607      	mov	r7, r0
 8005510:	1c78      	adds	r0, r7, #1
 8005512:	d1d6      	bne.n	80054c2 <_vfiprintf_r+0x19e>
 8005514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005516:	07d9      	lsls	r1, r3, #31
 8005518:	d405      	bmi.n	8005526 <_vfiprintf_r+0x202>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	059a      	lsls	r2, r3, #22
 800551e:	d402      	bmi.n	8005526 <_vfiprintf_r+0x202>
 8005520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005522:	f7ff fdcd 	bl	80050c0 <__retarget_lock_release_recursive>
 8005526:	89ab      	ldrh	r3, [r5, #12]
 8005528:	065b      	lsls	r3, r3, #25
 800552a:	f53f af1d 	bmi.w	8005368 <_vfiprintf_r+0x44>
 800552e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005530:	e71c      	b.n	800536c <_vfiprintf_r+0x48>
 8005532:	ab03      	add	r3, sp, #12
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	462a      	mov	r2, r5
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <_vfiprintf_r+0x22c>)
 800553a:	a904      	add	r1, sp, #16
 800553c:	4630      	mov	r0, r6
 800553e:	f000 f879 	bl	8005634 <_printf_i>
 8005542:	e7e4      	b.n	800550e <_vfiprintf_r+0x1ea>
 8005544:	08005cbc 	.word	0x08005cbc
 8005548:	08005cc6 	.word	0x08005cc6
 800554c:	00000000 	.word	0x00000000
 8005550:	080052ff 	.word	0x080052ff
 8005554:	08005cc2 	.word	0x08005cc2

08005558 <_printf_common>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	4616      	mov	r6, r2
 800555e:	4699      	mov	r9, r3
 8005560:	688a      	ldr	r2, [r1, #8]
 8005562:	690b      	ldr	r3, [r1, #16]
 8005564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005568:	4293      	cmp	r3, r2
 800556a:	bfb8      	it	lt
 800556c:	4613      	movlt	r3, r2
 800556e:	6033      	str	r3, [r6, #0]
 8005570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005574:	4607      	mov	r7, r0
 8005576:	460c      	mov	r4, r1
 8005578:	b10a      	cbz	r2, 800557e <_printf_common+0x26>
 800557a:	3301      	adds	r3, #1
 800557c:	6033      	str	r3, [r6, #0]
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	0699      	lsls	r1, r3, #26
 8005582:	bf42      	ittt	mi
 8005584:	6833      	ldrmi	r3, [r6, #0]
 8005586:	3302      	addmi	r3, #2
 8005588:	6033      	strmi	r3, [r6, #0]
 800558a:	6825      	ldr	r5, [r4, #0]
 800558c:	f015 0506 	ands.w	r5, r5, #6
 8005590:	d106      	bne.n	80055a0 <_printf_common+0x48>
 8005592:	f104 0a19 	add.w	sl, r4, #25
 8005596:	68e3      	ldr	r3, [r4, #12]
 8005598:	6832      	ldr	r2, [r6, #0]
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	42ab      	cmp	r3, r5
 800559e:	dc26      	bgt.n	80055ee <_printf_common+0x96>
 80055a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055a4:	1e13      	subs	r3, r2, #0
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	bf18      	it	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	0692      	lsls	r2, r2, #26
 80055ae:	d42b      	bmi.n	8005608 <_printf_common+0xb0>
 80055b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055b4:	4649      	mov	r1, r9
 80055b6:	4638      	mov	r0, r7
 80055b8:	47c0      	blx	r8
 80055ba:	3001      	adds	r0, #1
 80055bc:	d01e      	beq.n	80055fc <_printf_common+0xa4>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	6922      	ldr	r2, [r4, #16]
 80055c2:	f003 0306 	and.w	r3, r3, #6
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	bf02      	ittt	eq
 80055ca:	68e5      	ldreq	r5, [r4, #12]
 80055cc:	6833      	ldreq	r3, [r6, #0]
 80055ce:	1aed      	subeq	r5, r5, r3
 80055d0:	68a3      	ldr	r3, [r4, #8]
 80055d2:	bf0c      	ite	eq
 80055d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d8:	2500      	movne	r5, #0
 80055da:	4293      	cmp	r3, r2
 80055dc:	bfc4      	itt	gt
 80055de:	1a9b      	subgt	r3, r3, r2
 80055e0:	18ed      	addgt	r5, r5, r3
 80055e2:	2600      	movs	r6, #0
 80055e4:	341a      	adds	r4, #26
 80055e6:	42b5      	cmp	r5, r6
 80055e8:	d11a      	bne.n	8005620 <_printf_common+0xc8>
 80055ea:	2000      	movs	r0, #0
 80055ec:	e008      	b.n	8005600 <_printf_common+0xa8>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4652      	mov	r2, sl
 80055f2:	4649      	mov	r1, r9
 80055f4:	4638      	mov	r0, r7
 80055f6:	47c0      	blx	r8
 80055f8:	3001      	adds	r0, #1
 80055fa:	d103      	bne.n	8005604 <_printf_common+0xac>
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005604:	3501      	adds	r5, #1
 8005606:	e7c6      	b.n	8005596 <_printf_common+0x3e>
 8005608:	18e1      	adds	r1, r4, r3
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	2030      	movs	r0, #48	; 0x30
 800560e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005612:	4422      	add	r2, r4
 8005614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800561c:	3302      	adds	r3, #2
 800561e:	e7c7      	b.n	80055b0 <_printf_common+0x58>
 8005620:	2301      	movs	r3, #1
 8005622:	4622      	mov	r2, r4
 8005624:	4649      	mov	r1, r9
 8005626:	4638      	mov	r0, r7
 8005628:	47c0      	blx	r8
 800562a:	3001      	adds	r0, #1
 800562c:	d0e6      	beq.n	80055fc <_printf_common+0xa4>
 800562e:	3601      	adds	r6, #1
 8005630:	e7d9      	b.n	80055e6 <_printf_common+0x8e>
	...

08005634 <_printf_i>:
 8005634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	7e0f      	ldrb	r7, [r1, #24]
 800563a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800563c:	2f78      	cmp	r7, #120	; 0x78
 800563e:	4691      	mov	r9, r2
 8005640:	4680      	mov	r8, r0
 8005642:	460c      	mov	r4, r1
 8005644:	469a      	mov	sl, r3
 8005646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800564a:	d807      	bhi.n	800565c <_printf_i+0x28>
 800564c:	2f62      	cmp	r7, #98	; 0x62
 800564e:	d80a      	bhi.n	8005666 <_printf_i+0x32>
 8005650:	2f00      	cmp	r7, #0
 8005652:	f000 80d4 	beq.w	80057fe <_printf_i+0x1ca>
 8005656:	2f58      	cmp	r7, #88	; 0x58
 8005658:	f000 80c0 	beq.w	80057dc <_printf_i+0x1a8>
 800565c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005664:	e03a      	b.n	80056dc <_printf_i+0xa8>
 8005666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800566a:	2b15      	cmp	r3, #21
 800566c:	d8f6      	bhi.n	800565c <_printf_i+0x28>
 800566e:	a101      	add	r1, pc, #4	; (adr r1, 8005674 <_printf_i+0x40>)
 8005670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005674:	080056cd 	.word	0x080056cd
 8005678:	080056e1 	.word	0x080056e1
 800567c:	0800565d 	.word	0x0800565d
 8005680:	0800565d 	.word	0x0800565d
 8005684:	0800565d 	.word	0x0800565d
 8005688:	0800565d 	.word	0x0800565d
 800568c:	080056e1 	.word	0x080056e1
 8005690:	0800565d 	.word	0x0800565d
 8005694:	0800565d 	.word	0x0800565d
 8005698:	0800565d 	.word	0x0800565d
 800569c:	0800565d 	.word	0x0800565d
 80056a0:	080057e5 	.word	0x080057e5
 80056a4:	0800570d 	.word	0x0800570d
 80056a8:	0800579f 	.word	0x0800579f
 80056ac:	0800565d 	.word	0x0800565d
 80056b0:	0800565d 	.word	0x0800565d
 80056b4:	08005807 	.word	0x08005807
 80056b8:	0800565d 	.word	0x0800565d
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	0800565d 	.word	0x0800565d
 80056c4:	0800565d 	.word	0x0800565d
 80056c8:	080057a7 	.word	0x080057a7
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	1d1a      	adds	r2, r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	602a      	str	r2, [r5, #0]
 80056d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056dc:	2301      	movs	r3, #1
 80056de:	e09f      	b.n	8005820 <_printf_i+0x1ec>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	0607      	lsls	r7, r0, #24
 80056e6:	f103 0104 	add.w	r1, r3, #4
 80056ea:	6029      	str	r1, [r5, #0]
 80056ec:	d501      	bpl.n	80056f2 <_printf_i+0xbe>
 80056ee:	681e      	ldr	r6, [r3, #0]
 80056f0:	e003      	b.n	80056fa <_printf_i+0xc6>
 80056f2:	0646      	lsls	r6, r0, #25
 80056f4:	d5fb      	bpl.n	80056ee <_printf_i+0xba>
 80056f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	da03      	bge.n	8005706 <_printf_i+0xd2>
 80056fe:	232d      	movs	r3, #45	; 0x2d
 8005700:	4276      	negs	r6, r6
 8005702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005706:	485a      	ldr	r0, [pc, #360]	; (8005870 <_printf_i+0x23c>)
 8005708:	230a      	movs	r3, #10
 800570a:	e012      	b.n	8005732 <_printf_i+0xfe>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1d19      	adds	r1, r3, #4
 8005712:	6029      	str	r1, [r5, #0]
 8005714:	0605      	lsls	r5, r0, #24
 8005716:	d501      	bpl.n	800571c <_printf_i+0xe8>
 8005718:	681e      	ldr	r6, [r3, #0]
 800571a:	e002      	b.n	8005722 <_printf_i+0xee>
 800571c:	0641      	lsls	r1, r0, #25
 800571e:	d5fb      	bpl.n	8005718 <_printf_i+0xe4>
 8005720:	881e      	ldrh	r6, [r3, #0]
 8005722:	4853      	ldr	r0, [pc, #332]	; (8005870 <_printf_i+0x23c>)
 8005724:	2f6f      	cmp	r7, #111	; 0x6f
 8005726:	bf0c      	ite	eq
 8005728:	2308      	moveq	r3, #8
 800572a:	230a      	movne	r3, #10
 800572c:	2100      	movs	r1, #0
 800572e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005732:	6865      	ldr	r5, [r4, #4]
 8005734:	60a5      	str	r5, [r4, #8]
 8005736:	2d00      	cmp	r5, #0
 8005738:	bfa2      	ittt	ge
 800573a:	6821      	ldrge	r1, [r4, #0]
 800573c:	f021 0104 	bicge.w	r1, r1, #4
 8005740:	6021      	strge	r1, [r4, #0]
 8005742:	b90e      	cbnz	r6, 8005748 <_printf_i+0x114>
 8005744:	2d00      	cmp	r5, #0
 8005746:	d04b      	beq.n	80057e0 <_printf_i+0x1ac>
 8005748:	4615      	mov	r5, r2
 800574a:	fbb6 f1f3 	udiv	r1, r6, r3
 800574e:	fb03 6711 	mls	r7, r3, r1, r6
 8005752:	5dc7      	ldrb	r7, [r0, r7]
 8005754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005758:	4637      	mov	r7, r6
 800575a:	42bb      	cmp	r3, r7
 800575c:	460e      	mov	r6, r1
 800575e:	d9f4      	bls.n	800574a <_printf_i+0x116>
 8005760:	2b08      	cmp	r3, #8
 8005762:	d10b      	bne.n	800577c <_printf_i+0x148>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	07de      	lsls	r6, r3, #31
 8005768:	d508      	bpl.n	800577c <_printf_i+0x148>
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	6861      	ldr	r1, [r4, #4]
 800576e:	4299      	cmp	r1, r3
 8005770:	bfde      	ittt	le
 8005772:	2330      	movle	r3, #48	; 0x30
 8005774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800577c:	1b52      	subs	r2, r2, r5
 800577e:	6122      	str	r2, [r4, #16]
 8005780:	f8cd a000 	str.w	sl, [sp]
 8005784:	464b      	mov	r3, r9
 8005786:	aa03      	add	r2, sp, #12
 8005788:	4621      	mov	r1, r4
 800578a:	4640      	mov	r0, r8
 800578c:	f7ff fee4 	bl	8005558 <_printf_common>
 8005790:	3001      	adds	r0, #1
 8005792:	d14a      	bne.n	800582a <_printf_i+0x1f6>
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	b004      	add	sp, #16
 800579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f043 0320 	orr.w	r3, r3, #32
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	4833      	ldr	r0, [pc, #204]	; (8005874 <_printf_i+0x240>)
 80057a8:	2778      	movs	r7, #120	; 0x78
 80057aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6829      	ldr	r1, [r5, #0]
 80057b2:	061f      	lsls	r7, r3, #24
 80057b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b8:	d402      	bmi.n	80057c0 <_printf_i+0x18c>
 80057ba:	065f      	lsls	r7, r3, #25
 80057bc:	bf48      	it	mi
 80057be:	b2b6      	uxthmi	r6, r6
 80057c0:	07df      	lsls	r7, r3, #31
 80057c2:	bf48      	it	mi
 80057c4:	f043 0320 	orrmi.w	r3, r3, #32
 80057c8:	6029      	str	r1, [r5, #0]
 80057ca:	bf48      	it	mi
 80057cc:	6023      	strmi	r3, [r4, #0]
 80057ce:	b91e      	cbnz	r6, 80057d8 <_printf_i+0x1a4>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	2310      	movs	r3, #16
 80057da:	e7a7      	b.n	800572c <_printf_i+0xf8>
 80057dc:	4824      	ldr	r0, [pc, #144]	; (8005870 <_printf_i+0x23c>)
 80057de:	e7e4      	b.n	80057aa <_printf_i+0x176>
 80057e0:	4615      	mov	r5, r2
 80057e2:	e7bd      	b.n	8005760 <_printf_i+0x12c>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	6826      	ldr	r6, [r4, #0]
 80057e8:	6961      	ldr	r1, [r4, #20]
 80057ea:	1d18      	adds	r0, r3, #4
 80057ec:	6028      	str	r0, [r5, #0]
 80057ee:	0635      	lsls	r5, r6, #24
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	d501      	bpl.n	80057f8 <_printf_i+0x1c4>
 80057f4:	6019      	str	r1, [r3, #0]
 80057f6:	e002      	b.n	80057fe <_printf_i+0x1ca>
 80057f8:	0670      	lsls	r0, r6, #25
 80057fa:	d5fb      	bpl.n	80057f4 <_printf_i+0x1c0>
 80057fc:	8019      	strh	r1, [r3, #0]
 80057fe:	2300      	movs	r3, #0
 8005800:	6123      	str	r3, [r4, #16]
 8005802:	4615      	mov	r5, r2
 8005804:	e7bc      	b.n	8005780 <_printf_i+0x14c>
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	2100      	movs	r1, #0
 8005812:	4628      	mov	r0, r5
 8005814:	f7fa fce4 	bl	80001e0 <memchr>
 8005818:	b108      	cbz	r0, 800581e <_printf_i+0x1ea>
 800581a:	1b40      	subs	r0, r0, r5
 800581c:	6060      	str	r0, [r4, #4]
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	2300      	movs	r3, #0
 8005824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005828:	e7aa      	b.n	8005780 <_printf_i+0x14c>
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	462a      	mov	r2, r5
 800582e:	4649      	mov	r1, r9
 8005830:	4640      	mov	r0, r8
 8005832:	47d0      	blx	sl
 8005834:	3001      	adds	r0, #1
 8005836:	d0ad      	beq.n	8005794 <_printf_i+0x160>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	079b      	lsls	r3, r3, #30
 800583c:	d413      	bmi.n	8005866 <_printf_i+0x232>
 800583e:	68e0      	ldr	r0, [r4, #12]
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	4298      	cmp	r0, r3
 8005844:	bfb8      	it	lt
 8005846:	4618      	movlt	r0, r3
 8005848:	e7a6      	b.n	8005798 <_printf_i+0x164>
 800584a:	2301      	movs	r3, #1
 800584c:	4632      	mov	r2, r6
 800584e:	4649      	mov	r1, r9
 8005850:	4640      	mov	r0, r8
 8005852:	47d0      	blx	sl
 8005854:	3001      	adds	r0, #1
 8005856:	d09d      	beq.n	8005794 <_printf_i+0x160>
 8005858:	3501      	adds	r5, #1
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	9903      	ldr	r1, [sp, #12]
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	42ab      	cmp	r3, r5
 8005862:	dcf2      	bgt.n	800584a <_printf_i+0x216>
 8005864:	e7eb      	b.n	800583e <_printf_i+0x20a>
 8005866:	2500      	movs	r5, #0
 8005868:	f104 0619 	add.w	r6, r4, #25
 800586c:	e7f5      	b.n	800585a <_printf_i+0x226>
 800586e:	bf00      	nop
 8005870:	08005ccd 	.word	0x08005ccd
 8005874:	08005cde 	.word	0x08005cde

08005878 <__sflush_r>:
 8005878:	898a      	ldrh	r2, [r1, #12]
 800587a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	4605      	mov	r5, r0
 8005880:	0710      	lsls	r0, r2, #28
 8005882:	460c      	mov	r4, r1
 8005884:	d458      	bmi.n	8005938 <__sflush_r+0xc0>
 8005886:	684b      	ldr	r3, [r1, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	dc05      	bgt.n	8005898 <__sflush_r+0x20>
 800588c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	dc02      	bgt.n	8005898 <__sflush_r+0x20>
 8005892:	2000      	movs	r0, #0
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800589a:	2e00      	cmp	r6, #0
 800589c:	d0f9      	beq.n	8005892 <__sflush_r+0x1a>
 800589e:	2300      	movs	r3, #0
 80058a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058a4:	682f      	ldr	r7, [r5, #0]
 80058a6:	6a21      	ldr	r1, [r4, #32]
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	d032      	beq.n	8005912 <__sflush_r+0x9a>
 80058ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	075a      	lsls	r2, r3, #29
 80058b2:	d505      	bpl.n	80058c0 <__sflush_r+0x48>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	1ac0      	subs	r0, r0, r3
 80058b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058ba:	b10b      	cbz	r3, 80058c0 <__sflush_r+0x48>
 80058bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058be:	1ac0      	subs	r0, r0, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	4602      	mov	r2, r0
 80058c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c6:	6a21      	ldr	r1, [r4, #32]
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b0      	blx	r6
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	d106      	bne.n	80058e0 <__sflush_r+0x68>
 80058d2:	6829      	ldr	r1, [r5, #0]
 80058d4:	291d      	cmp	r1, #29
 80058d6:	d82b      	bhi.n	8005930 <__sflush_r+0xb8>
 80058d8:	4a29      	ldr	r2, [pc, #164]	; (8005980 <__sflush_r+0x108>)
 80058da:	410a      	asrs	r2, r1
 80058dc:	07d6      	lsls	r6, r2, #31
 80058de:	d427      	bmi.n	8005930 <__sflush_r+0xb8>
 80058e0:	2200      	movs	r2, #0
 80058e2:	6062      	str	r2, [r4, #4]
 80058e4:	04d9      	lsls	r1, r3, #19
 80058e6:	6922      	ldr	r2, [r4, #16]
 80058e8:	6022      	str	r2, [r4, #0]
 80058ea:	d504      	bpl.n	80058f6 <__sflush_r+0x7e>
 80058ec:	1c42      	adds	r2, r0, #1
 80058ee:	d101      	bne.n	80058f4 <__sflush_r+0x7c>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b903      	cbnz	r3, 80058f6 <__sflush_r+0x7e>
 80058f4:	6560      	str	r0, [r4, #84]	; 0x54
 80058f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058f8:	602f      	str	r7, [r5, #0]
 80058fa:	2900      	cmp	r1, #0
 80058fc:	d0c9      	beq.n	8005892 <__sflush_r+0x1a>
 80058fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005902:	4299      	cmp	r1, r3
 8005904:	d002      	beq.n	800590c <__sflush_r+0x94>
 8005906:	4628      	mov	r0, r5
 8005908:	f7ff fbea 	bl	80050e0 <_free_r>
 800590c:	2000      	movs	r0, #0
 800590e:	6360      	str	r0, [r4, #52]	; 0x34
 8005910:	e7c0      	b.n	8005894 <__sflush_r+0x1c>
 8005912:	2301      	movs	r3, #1
 8005914:	4628      	mov	r0, r5
 8005916:	47b0      	blx	r6
 8005918:	1c41      	adds	r1, r0, #1
 800591a:	d1c8      	bne.n	80058ae <__sflush_r+0x36>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0c5      	beq.n	80058ae <__sflush_r+0x36>
 8005922:	2b1d      	cmp	r3, #29
 8005924:	d001      	beq.n	800592a <__sflush_r+0xb2>
 8005926:	2b16      	cmp	r3, #22
 8005928:	d101      	bne.n	800592e <__sflush_r+0xb6>
 800592a:	602f      	str	r7, [r5, #0]
 800592c:	e7b1      	b.n	8005892 <__sflush_r+0x1a>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	e7ad      	b.n	8005894 <__sflush_r+0x1c>
 8005938:	690f      	ldr	r7, [r1, #16]
 800593a:	2f00      	cmp	r7, #0
 800593c:	d0a9      	beq.n	8005892 <__sflush_r+0x1a>
 800593e:	0793      	lsls	r3, r2, #30
 8005940:	680e      	ldr	r6, [r1, #0]
 8005942:	bf08      	it	eq
 8005944:	694b      	ldreq	r3, [r1, #20]
 8005946:	600f      	str	r7, [r1, #0]
 8005948:	bf18      	it	ne
 800594a:	2300      	movne	r3, #0
 800594c:	eba6 0807 	sub.w	r8, r6, r7
 8005950:	608b      	str	r3, [r1, #8]
 8005952:	f1b8 0f00 	cmp.w	r8, #0
 8005956:	dd9c      	ble.n	8005892 <__sflush_r+0x1a>
 8005958:	6a21      	ldr	r1, [r4, #32]
 800595a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800595c:	4643      	mov	r3, r8
 800595e:	463a      	mov	r2, r7
 8005960:	4628      	mov	r0, r5
 8005962:	47b0      	blx	r6
 8005964:	2800      	cmp	r0, #0
 8005966:	dc06      	bgt.n	8005976 <__sflush_r+0xfe>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	e78e      	b.n	8005894 <__sflush_r+0x1c>
 8005976:	4407      	add	r7, r0
 8005978:	eba8 0800 	sub.w	r8, r8, r0
 800597c:	e7e9      	b.n	8005952 <__sflush_r+0xda>
 800597e:	bf00      	nop
 8005980:	dfbffffe 	.word	0xdfbffffe

08005984 <_fflush_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	690b      	ldr	r3, [r1, #16]
 8005988:	4605      	mov	r5, r0
 800598a:	460c      	mov	r4, r1
 800598c:	b913      	cbnz	r3, 8005994 <_fflush_r+0x10>
 800598e:	2500      	movs	r5, #0
 8005990:	4628      	mov	r0, r5
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	b118      	cbz	r0, 800599e <_fflush_r+0x1a>
 8005996:	6a03      	ldr	r3, [r0, #32]
 8005998:	b90b      	cbnz	r3, 800599e <_fflush_r+0x1a>
 800599a:	f7ff fa8b 	bl	8004eb4 <__sinit>
 800599e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f3      	beq.n	800598e <_fflush_r+0xa>
 80059a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059a8:	07d0      	lsls	r0, r2, #31
 80059aa:	d404      	bmi.n	80059b6 <_fflush_r+0x32>
 80059ac:	0599      	lsls	r1, r3, #22
 80059ae:	d402      	bmi.n	80059b6 <_fflush_r+0x32>
 80059b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059b2:	f7ff fb84 	bl	80050be <__retarget_lock_acquire_recursive>
 80059b6:	4628      	mov	r0, r5
 80059b8:	4621      	mov	r1, r4
 80059ba:	f7ff ff5d 	bl	8005878 <__sflush_r>
 80059be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c0:	07da      	lsls	r2, r3, #31
 80059c2:	4605      	mov	r5, r0
 80059c4:	d4e4      	bmi.n	8005990 <_fflush_r+0xc>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	059b      	lsls	r3, r3, #22
 80059ca:	d4e1      	bmi.n	8005990 <_fflush_r+0xc>
 80059cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ce:	f7ff fb77 	bl	80050c0 <__retarget_lock_release_recursive>
 80059d2:	e7dd      	b.n	8005990 <_fflush_r+0xc>

080059d4 <__swbuf_r>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	460e      	mov	r6, r1
 80059d8:	4614      	mov	r4, r2
 80059da:	4605      	mov	r5, r0
 80059dc:	b118      	cbz	r0, 80059e6 <__swbuf_r+0x12>
 80059de:	6a03      	ldr	r3, [r0, #32]
 80059e0:	b90b      	cbnz	r3, 80059e6 <__swbuf_r+0x12>
 80059e2:	f7ff fa67 	bl	8004eb4 <__sinit>
 80059e6:	69a3      	ldr	r3, [r4, #24]
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	071a      	lsls	r2, r3, #28
 80059ee:	d525      	bpl.n	8005a3c <__swbuf_r+0x68>
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	b31b      	cbz	r3, 8005a3c <__swbuf_r+0x68>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	6922      	ldr	r2, [r4, #16]
 80059f8:	1a98      	subs	r0, r3, r2
 80059fa:	6963      	ldr	r3, [r4, #20]
 80059fc:	b2f6      	uxtb	r6, r6
 80059fe:	4283      	cmp	r3, r0
 8005a00:	4637      	mov	r7, r6
 8005a02:	dc04      	bgt.n	8005a0e <__swbuf_r+0x3a>
 8005a04:	4621      	mov	r1, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	f7ff ffbc 	bl	8005984 <_fflush_r>
 8005a0c:	b9e0      	cbnz	r0, 8005a48 <__swbuf_r+0x74>
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	60a3      	str	r3, [r4, #8]
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	6022      	str	r2, [r4, #0]
 8005a1a:	701e      	strb	r6, [r3, #0]
 8005a1c:	6962      	ldr	r2, [r4, #20]
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d004      	beq.n	8005a2e <__swbuf_r+0x5a>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	07db      	lsls	r3, r3, #31
 8005a28:	d506      	bpl.n	8005a38 <__swbuf_r+0x64>
 8005a2a:	2e0a      	cmp	r6, #10
 8005a2c:	d104      	bne.n	8005a38 <__swbuf_r+0x64>
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	f7ff ffa7 	bl	8005984 <_fflush_r>
 8005a36:	b938      	cbnz	r0, 8005a48 <__swbuf_r+0x74>
 8005a38:	4638      	mov	r0, r7
 8005a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f806 	bl	8005a50 <__swsetup_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d0d5      	beq.n	80059f4 <__swbuf_r+0x20>
 8005a48:	f04f 37ff 	mov.w	r7, #4294967295
 8005a4c:	e7f4      	b.n	8005a38 <__swbuf_r+0x64>
	...

08005a50 <__swsetup_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <__swsetup_r+0xac>)
 8005a54:	4605      	mov	r5, r0
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	460c      	mov	r4, r1
 8005a5a:	b118      	cbz	r0, 8005a64 <__swsetup_r+0x14>
 8005a5c:	6a03      	ldr	r3, [r0, #32]
 8005a5e:	b90b      	cbnz	r3, 8005a64 <__swsetup_r+0x14>
 8005a60:	f7ff fa28 	bl	8004eb4 <__sinit>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a6a:	0718      	lsls	r0, r3, #28
 8005a6c:	d422      	bmi.n	8005ab4 <__swsetup_r+0x64>
 8005a6e:	06d9      	lsls	r1, r3, #27
 8005a70:	d407      	bmi.n	8005a82 <__swsetup_r+0x32>
 8005a72:	2309      	movs	r3, #9
 8005a74:	602b      	str	r3, [r5, #0]
 8005a76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	e034      	b.n	8005aec <__swsetup_r+0x9c>
 8005a82:	0758      	lsls	r0, r3, #29
 8005a84:	d512      	bpl.n	8005aac <__swsetup_r+0x5c>
 8005a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a88:	b141      	cbz	r1, 8005a9c <__swsetup_r+0x4c>
 8005a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	d002      	beq.n	8005a98 <__swsetup_r+0x48>
 8005a92:	4628      	mov	r0, r5
 8005a94:	f7ff fb24 	bl	80050e0 <_free_r>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6363      	str	r3, [r4, #52]	; 0x34
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6063      	str	r3, [r4, #4]
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	f043 0308 	orr.w	r3, r3, #8
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	b94b      	cbnz	r3, 8005acc <__swsetup_r+0x7c>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac2:	d003      	beq.n	8005acc <__swsetup_r+0x7c>
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f850 	bl	8005b6c <__smakebuf_r>
 8005acc:	89a0      	ldrh	r0, [r4, #12]
 8005ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ad2:	f010 0301 	ands.w	r3, r0, #1
 8005ad6:	d00a      	beq.n	8005aee <__swsetup_r+0x9e>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60a3      	str	r3, [r4, #8]
 8005adc:	6963      	ldr	r3, [r4, #20]
 8005ade:	425b      	negs	r3, r3
 8005ae0:	61a3      	str	r3, [r4, #24]
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	b943      	cbnz	r3, 8005af8 <__swsetup_r+0xa8>
 8005ae6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005aea:	d1c4      	bne.n	8005a76 <__swsetup_r+0x26>
 8005aec:	bd38      	pop	{r3, r4, r5, pc}
 8005aee:	0781      	lsls	r1, r0, #30
 8005af0:	bf58      	it	pl
 8005af2:	6963      	ldrpl	r3, [r4, #20]
 8005af4:	60a3      	str	r3, [r4, #8]
 8005af6:	e7f4      	b.n	8005ae2 <__swsetup_r+0x92>
 8005af8:	2000      	movs	r0, #0
 8005afa:	e7f7      	b.n	8005aec <__swsetup_r+0x9c>
 8005afc:	20000068 	.word	0x20000068

08005b00 <_sbrk_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d06      	ldr	r5, [pc, #24]	; (8005b1c <_sbrk_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	f7fa ffe6 	bl	8000adc <_sbrk>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_sbrk_r+0x1a>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_sbrk_r+0x1a>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	20004bb4 	.word	0x20004bb4

08005b20 <__swhatbuf_r>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	460c      	mov	r4, r1
 8005b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	b096      	sub	sp, #88	; 0x58
 8005b2c:	4615      	mov	r5, r2
 8005b2e:	461e      	mov	r6, r3
 8005b30:	da0d      	bge.n	8005b4e <__swhatbuf_r+0x2e>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	bf0c      	ite	eq
 8005b3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b42:	2340      	movne	r3, #64	; 0x40
 8005b44:	2000      	movs	r0, #0
 8005b46:	6031      	str	r1, [r6, #0]
 8005b48:	602b      	str	r3, [r5, #0]
 8005b4a:	b016      	add	sp, #88	; 0x58
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	466a      	mov	r2, sp
 8005b50:	f000 f848 	bl	8005be4 <_fstat_r>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	dbec      	blt.n	8005b32 <__swhatbuf_r+0x12>
 8005b58:	9901      	ldr	r1, [sp, #4]
 8005b5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b62:	4259      	negs	r1, r3
 8005b64:	4159      	adcs	r1, r3
 8005b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6a:	e7eb      	b.n	8005b44 <__swhatbuf_r+0x24>

08005b6c <__smakebuf_r>:
 8005b6c:	898b      	ldrh	r3, [r1, #12]
 8005b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b70:	079d      	lsls	r5, r3, #30
 8005b72:	4606      	mov	r6, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	d507      	bpl.n	8005b88 <__smakebuf_r+0x1c>
 8005b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	6123      	str	r3, [r4, #16]
 8005b80:	2301      	movs	r3, #1
 8005b82:	6163      	str	r3, [r4, #20]
 8005b84:	b002      	add	sp, #8
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	ab01      	add	r3, sp, #4
 8005b8a:	466a      	mov	r2, sp
 8005b8c:	f7ff ffc8 	bl	8005b20 <__swhatbuf_r>
 8005b90:	9900      	ldr	r1, [sp, #0]
 8005b92:	4605      	mov	r5, r0
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff fb0f 	bl	80051b8 <_malloc_r>
 8005b9a:	b948      	cbnz	r0, 8005bb0 <__smakebuf_r+0x44>
 8005b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba0:	059a      	lsls	r2, r3, #22
 8005ba2:	d4ef      	bmi.n	8005b84 <__smakebuf_r+0x18>
 8005ba4:	f023 0303 	bic.w	r3, r3, #3
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	e7e3      	b.n	8005b78 <__smakebuf_r+0xc>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	6020      	str	r0, [r4, #0]
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	9b00      	ldr	r3, [sp, #0]
 8005bbc:	6163      	str	r3, [r4, #20]
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	6120      	str	r0, [r4, #16]
 8005bc2:	b15b      	cbz	r3, 8005bdc <__smakebuf_r+0x70>
 8005bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f81d 	bl	8005c08 <_isatty_r>
 8005bce:	b128      	cbz	r0, 8005bdc <__smakebuf_r+0x70>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	431d      	orrs	r5, r3
 8005be0:	81a5      	strh	r5, [r4, #12]
 8005be2:	e7cf      	b.n	8005b84 <__smakebuf_r+0x18>

08005be4 <_fstat_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d07      	ldr	r5, [pc, #28]	; (8005c04 <_fstat_r+0x20>)
 8005be8:	2300      	movs	r3, #0
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	f7fa ff4a 	bl	8000a8a <_fstat>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d102      	bne.n	8005c00 <_fstat_r+0x1c>
 8005bfa:	682b      	ldr	r3, [r5, #0]
 8005bfc:	b103      	cbz	r3, 8005c00 <_fstat_r+0x1c>
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop
 8005c04:	20004bb4 	.word	0x20004bb4

08005c08 <_isatty_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d06      	ldr	r5, [pc, #24]	; (8005c24 <_isatty_r+0x1c>)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	602b      	str	r3, [r5, #0]
 8005c14:	f7fa ff49 	bl	8000aaa <_isatty>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d102      	bne.n	8005c22 <_isatty_r+0x1a>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	b103      	cbz	r3, 8005c22 <_isatty_r+0x1a>
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
 8005c24:	20004bb4 	.word	0x20004bb4

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
