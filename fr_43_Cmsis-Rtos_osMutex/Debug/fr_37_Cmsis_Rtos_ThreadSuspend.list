
fr_37_Cmsis_Rtos_ThreadSuspend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800505c  0800505c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a20  20000010  08005074  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a30  08005074  00024a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fa6  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c9  00000000  00000000  00036029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  000390f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f55  00000000  00000000  0003a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000039ff  00000000  00000000  0003b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001561f  00000000  00000000  0003edfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098031  00000000  00000000  0005441b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000534c  00000000  00000000  000ec44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f1798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fe0 	.word	0x08004fe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004fe0 	.word	0x08004fe0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
void vBlueLedControllerTask(void *pvParameters);

osThreadId_t red_id, green_id, blue_id, orange_id;

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0

  HAL_Init();
 80004e2:	f000 faf1 	bl	8000ac8 <HAL_Init>

  SystemClock_Config();
 80004e6:	f000 f8f3 	bl	80006d0 <SystemClock_Config>


  MX_GPIO_Init();
 80004ea:	f000 f979 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f94d 	bl	800078c <MX_USART2_UART_Init>

  // Initial Kernal
  osKernelInitialize();
 80004f2:	f001 ffa1 	bl	8002438 <osKernelInitialize>

  // Create Threads
  osThreadAttr_t greenThreadAtrribs = {
 80004f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004fa:	2224      	movs	r2, #36	; 0x24
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fd34 	bl	8004f6c <memset>
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <main+0xe0>)
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000510:	2318      	movs	r3, #24
 8000512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "GreenTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAtrribs);
 8000516:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051a:	461a      	mov	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <main+0xe4>)
 8000520:	f001 ffd4 	bl	80024cc <osThreadNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <main+0xe8>)
 8000528:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAtrribs = {
 800052a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800052e:	2224      	movs	r2, #36	; 0x24
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fd1a 	bl	8004f6c <memset>
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <main+0xec>)
 800053a:	64bb      	str	r3, [r7, #72]	; 0x48
 800053c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000542:	2318      	movs	r3, #24
 8000544:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "RedTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAtrribs);
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0xf0>)
 8000550:	f001 ffbc 	bl	80024cc <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <main+0xf4>)
 8000558:	6013      	str	r3, [r2, #0]

  osThreadAttr_t oragneThreadAtrribs = {
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	2224      	movs	r2, #36	; 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fd02 	bl	8004f6c <memset>
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xf8>)
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
 800056c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
 8000572:	2318      	movs	r3, #24
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "OrangeTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &oragneThreadAtrribs);
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	461a      	mov	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	4816      	ldr	r0, [pc, #88]	; (80005d8 <main+0xfc>)
 8000580:	f001 ffa4 	bl	80024cc <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0x100>)
 8000588:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAtrribs = {
 800058a:	463b      	mov	r3, r7
 800058c:	2224      	movs	r2, #36	; 0x24
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fceb 	bl	8004f6c <memset>
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0x104>)
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	2318      	movs	r3, #24
 80005a2:	61bb      	str	r3, [r7, #24]
		  .name = "BlueTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAtrribs);
 80005a4:	463b      	mov	r3, r7
 80005a6:	461a      	mov	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x108>)
 80005ac:	f001 ff8e 	bl	80024cc <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <main+0x10c>)
 80005b4:	6013      	str	r3, [r2, #0]


  // Start Kernal
  osKernelStart();
 80005b6:	f001 ff63 	bl	8002480 <osKernelStart>

  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0xde>
 80005bc:	08004ff8 	.word	0x08004ff8
 80005c0:	08000671 	.word	0x08000671
 80005c4:	20000084 	.word	0x20000084
 80005c8:	08005004 	.word	0x08005004
 80005cc:	080005ed 	.word	0x080005ed
 80005d0:	20000080 	.word	0x20000080
 80005d4:	0800500c 	.word	0x0800500c
 80005d8:	08000641 	.word	0x08000641
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	08005018 	.word	0x08005018
 80005e4:	080006a1 	.word	0x080006a1
 80005e8:	20000088 	.word	0x20000088

080005ec <vRedLedControllerTask>:

}

uint32_t suspend_monitor;

void vRedLedControllerTask(void *pvParameters) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Red_TaskProfiler++;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <vRedLedControllerTask+0x48>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <vRedLedControllerTask+0x48>)
 80005fc:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e002      	b.n	800060a <vRedLedControllerTask+0x1e>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000610:	4293      	cmp	r3, r2
 8000612:	ddf7      	ble.n	8000604 <vRedLedControllerTask+0x18>
		suspend_monitor++;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <vRedLedControllerTask+0x4c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <vRedLedControllerTask+0x4c>)
 800061c:	6013      	str	r3, [r2, #0]

		if(suspend_monitor >= 49) {
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <vRedLedControllerTask+0x4c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b30      	cmp	r3, #48	; 0x30
 8000624:	d9e6      	bls.n	80005f4 <vRedLedControllerTask+0x8>
			osThreadSuspend(blue_id);
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <vRedLedControllerTask+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f001 ffe0 	bl	80025f0 <osThreadSuspend>
		Red_TaskProfiler++;
 8000630:	e7e0      	b.n	80005f4 <vRedLedControllerTask+0x8>
 8000632:	bf00      	nop
 8000634:	20000074 	.word	0x20000074
 8000638:	20000090 	.word	0x20000090
 800063c:	20000088 	.word	0x20000088

08000640 <vOrangeLedControllerTask>:
		}
	}
}

void vOrangeLedControllerTask(void *pvParameters) {
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Orange_TaskProfiler++;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <vOrangeLedControllerTask+0x2c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <vOrangeLedControllerTask+0x2c>)
 8000650:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <vOrangeLedControllerTask+0x1e>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000664:	4293      	cmp	r3, r2
 8000666:	ddf7      	ble.n	8000658 <vOrangeLedControllerTask+0x18>
		Orange_TaskProfiler++;
 8000668:	e7ee      	b.n	8000648 <vOrangeLedControllerTask+0x8>
 800066a:	bf00      	nop
 800066c:	20000070 	.word	0x20000070

08000670 <vGreenLedControllerTask>:
	}
}

void vGreenLedControllerTask(void *pvParameters) {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Green_TaskProfiler++;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <vGreenLedControllerTask+0x2c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <vGreenLedControllerTask+0x2c>)
 8000680:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	e002      	b.n	800068e <vGreenLedControllerTask+0x1e>
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000694:	4293      	cmp	r3, r2
 8000696:	ddf7      	ble.n	8000688 <vGreenLedControllerTask+0x18>
		Green_TaskProfiler++;
 8000698:	e7ee      	b.n	8000678 <vGreenLedControllerTask+0x8>
 800069a:	bf00      	nop
 800069c:	20000078 	.word	0x20000078

080006a0 <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters) {
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Blue_TaskProfiler++;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <vBlueLedControllerTask+0x2c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <vBlueLedControllerTask+0x2c>)
 80006b0:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	e002      	b.n	80006be <vBlueLedControllerTask+0x1e>
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006c4:	4293      	cmp	r3, r2
 80006c6:	ddf7      	ble.n	80006b8 <vBlueLedControllerTask+0x18>
		Blue_TaskProfiler++;
 80006c8:	e7ee      	b.n	80006a8 <vBlueLedControllerTask+0x8>
 80006ca:	bf00      	nop
 80006cc:	2000007c 	.word	0x2000007c

080006d0 <SystemClock_Config>:
	return ch;
}


void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fc44 	bl	8004f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xb4>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xb4>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xb4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <SystemClock_Config+0xb8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <SystemClock_Config+0xb8>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <SystemClock_Config+0xb8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fc69 	bl	8001018 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800074c:	f000 f874 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fecc 	bl	8001508 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000776:	f000 f85f 	bl	8000838 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f001 fb32 	bl	8001e2c <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f833 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000002c 	.word	0x2000002c
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_GPIO_Init+0x30>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <MX_GPIO_Init+0x30>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_GPIO_Init+0x30>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f971 	bl	8000b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010000 	.word	0x40010000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_MspInit+0x54>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_MspInit+0x54>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa17 	bl	8000cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12b      	bne.n	8000916 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_UART_MspInit+0x8c>)
 8000912:	f000 f9fd 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <HAL_InitTick+0xd0>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <HAL_InitTick+0xd0>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6453      	str	r3, [r2, #68]	; 0x44
 800094c:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_InitTick+0xd0>)
 800094e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 ffb0 	bl	80018c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000968:	f000 ff9a 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 800096c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000970:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <HAL_InitTick+0xd4>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <HAL_InitTick+0xd8>)
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <HAL_InitTick+0xdc>)
 8000980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_InitTick+0xd8>)
 8000984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800098a:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <HAL_InitTick+0xd8>)
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_InitTick+0xd8>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_InitTick+0xd8>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_InitTick+0xd8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <HAL_InitTick+0xd8>)
 80009a4:	f000 ffc2 	bl	800192c <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d11b      	bne.n	80009ee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <HAL_InitTick+0xd8>)
 80009b8:	f001 f812 	bl	80019e0 <HAL_TIM_Base_Start_IT>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d111      	bne.n	80009ee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ca:	2019      	movs	r0, #25
 80009cc:	f000 f992 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d808      	bhi.n	80009e8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009d6:	2200      	movs	r2, #0
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 f96e 	bl	8000cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_InitTick+0xe0>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e002      	b.n	80009ee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3730      	adds	r7, #48	; 0x30
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	20000094 	.word	0x20000094
 8000a08:	40010000 	.word	0x40010000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a42:	f001 f82f 	bl	8001aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000094 	.word	0x20000094

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a90:	4c0b      	ldr	r4, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffd7 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f004 fa6b 	bl	8004f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd19 	bl	80004dc <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ab8:	08005064 	.word	0x08005064
  ldr r2, =_sbss
 8000abc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ac0:	20004a30 	.word	0x20004a30

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f8d8 	bl	8000ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f7ff ff18 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fea2 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	200000dc 	.word	0x200000dc

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200000dc 	.word	0x200000dc

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff4c 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff61 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ffb1 	bl	8000c40 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff80 	bl	8000bec <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff54 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e159      	b.n	8000fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8148 	bne.w	8000fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a2 	beq.w	8000fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a52      	ldr	r2, [pc, #328]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a49      	ldr	r2, [pc, #292]	; (8001000 <HAL_GPIO_Init+0x2f0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x202>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a48      	ldr	r2, [pc, #288]	; (8001004 <HAL_GPIO_Init+0x2f4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1fe>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	; (8001008 <HAL_GPIO_Init+0x2f8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a45      	ldr	r2, [pc, #276]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1f2>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f56:	4a2f      	ldr	r2, [pc, #188]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f80:	4a24      	ldr	r2, [pc, #144]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000faa:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f aea2 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400
 8001008:	40020800 	.word	0x40020800
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40021000 	.word	0x40021000
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e267      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d075      	beq.n	8001122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001036:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b04      	cmp	r3, #4
 8001040:	d00c      	beq.n	800105c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001042:	4b85      	ldr	r3, [pc, #532]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104a:	2b08      	cmp	r3, #8
 800104c:	d112      	bne.n	8001074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104e:	4b82      	ldr	r3, [pc, #520]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800105a:	d10b      	bne.n	8001074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d05b      	beq.n	8001120 <HAL_RCC_OscConfig+0x108>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d157      	bne.n	8001120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e242      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d106      	bne.n	800108c <HAL_RCC_OscConfig+0x74>
 800107e:	4b76      	ldr	r3, [pc, #472]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a75      	ldr	r2, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e01d      	b.n	80010c8 <HAL_RCC_OscConfig+0xb0>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x98>
 8001096:	4b70      	ldr	r3, [pc, #448]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a6f      	ldr	r2, [pc, #444]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a6c      	ldr	r2, [pc, #432]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0xb0>
 80010b0:	4b69      	ldr	r3, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a68      	ldr	r2, [pc, #416]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b66      	ldr	r3, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a65      	ldr	r2, [pc, #404]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fd30 	bl	8000b34 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fd2c 	bl	8000b34 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e207      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0xc0>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fd1c 	bl	8000b34 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fd18 	bl	8000b34 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e1f3      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	4b51      	ldr	r3, [pc, #324]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0xe8>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d063      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d11c      	bne.n	8001180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_RCC_OscConfig+0x152>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e1c7      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4937      	ldr	r1, [pc, #220]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	e03a      	b.n	80011f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <HAL_RCC_OscConfig+0x244>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fcd1 	bl	8000b34 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fccd 	bl	8000b34 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1a8      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4925      	ldr	r1, [pc, #148]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	600b      	str	r3, [r1, #0]
 80011c8:	e015      	b.n	80011f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_RCC_OscConfig+0x244>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcb0 	bl	8000b34 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fcac 	bl	8000b34 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e187      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d036      	beq.n	8001270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d016      	beq.n	8001238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_RCC_OscConfig+0x248>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fc90 	bl	8000b34 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff fc8c 	bl	8000b34 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e167      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_OscConfig+0x240>)
 800122c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x200>
 8001236:	e01b      	b.n	8001270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_RCC_OscConfig+0x248>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fc79 	bl	8000b34 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	e00e      	b.n	8001264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff fc75 	bl	8000b34 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d907      	bls.n	8001264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e150      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
 8001258:	40023800 	.word	0x40023800
 800125c:	42470000 	.word	0x42470000
 8001260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ea      	bne.n	8001246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8097 	beq.w	80013ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001282:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b7d      	ldr	r3, [pc, #500]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a7c      	ldr	r2, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a73      	ldr	r2, [pc, #460]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fc35 	bl	8000b34 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ce:	f7ff fc31 	bl	8000b34 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e10c      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_OscConfig+0x474>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x2ea>
 80012f4:	4b64      	ldr	r3, [pc, #400]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a63      	ldr	r2, [pc, #396]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001300:	e01c      	b.n	800133c <HAL_RCC_OscConfig+0x324>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b05      	cmp	r3, #5
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x30c>
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a5e      	ldr	r2, [pc, #376]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a5b      	ldr	r2, [pc, #364]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0x324>
 8001324:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a57      	ldr	r2, [pc, #348]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001336:	f023 0304 	bic.w	r3, r3, #4
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d015      	beq.n	8001370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fbf6 	bl	8000b34 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fbf2 	bl	8000b34 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0cb      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0ee      	beq.n	800134c <HAL_RCC_OscConfig+0x334>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001370:	f7ff fbe0 	bl	8000b34 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001376:	e00a      	b.n	800138e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f7ff fbdc 	bl	8000b34 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e0b5      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1ee      	bne.n	8001378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a38      	ldr	r2, [pc, #224]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a1 	beq.w	80014f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d05c      	beq.n	800147c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d141      	bne.n	800144e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_RCC_OscConfig+0x478>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fbb0 	bl	8000b34 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fbac 	bl	8000b34 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e087      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	3b01      	subs	r3, #1
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	491b      	ldr	r1, [pc, #108]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x478>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fb85 	bl	8000b34 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142e:	f7ff fb81 	bl	8000b34 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e05c      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x416>
 800144c:	e054      	b.n	80014f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_RCC_OscConfig+0x478>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb6e 	bl	8000b34 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fb6a 	bl	8000b34 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e045      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_RCC_OscConfig+0x470>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x444>
 800147a:	e03d      	b.n	80014f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e038      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000
 8001490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x4ec>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d028      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d121      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d11a      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014c4:	4013      	ands	r3, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d111      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	3b01      	subs	r3, #1
 80014de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0cc      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d90c      	bls.n	8001544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0b8      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a52      	ldr	r2, [pc, #328]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800157e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	494d      	ldr	r1, [pc, #308]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d044      	beq.n	8001628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d119      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e07f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d003      	beq.n	80015c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e06f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e067      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4934      	ldr	r1, [pc, #208]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff fa9c 	bl	8000b34 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff fa98 	bl	8000b34 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e04f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 020c 	and.w	r2, r3, #12
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1eb      	bne.n	8001600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d20c      	bcs.n	8001650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e032      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4916      	ldr	r1, [pc, #88]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800168e:	f000 f821 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 8001692:	4602      	mov	r2, r0
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	490a      	ldr	r1, [pc, #40]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	5ccb      	ldrb	r3, [r1, r3]
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f93c 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00
 80016c4:	40023800 	.word	0x40023800
 80016c8:	0800503c 	.word	0x0800503c
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d8:	b090      	sub	sp, #64	; 0x40
 80016da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d00d      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x40>
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	f200 80a1 	bhi.w	8001840 <HAL_RCC_GetSysClockFreq+0x16c>
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x34>
 8001702:	2b04      	cmp	r3, #4
 8001704:	d003      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0x3a>
 8001706:	e09b      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_GetSysClockFreq+0x184>)
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800170c:	e09b      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_GetSysClockFreq+0x188>)
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001712:	e098      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171e:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d028      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	099b      	lsrs	r3, r3, #6
 8001730:	2200      	movs	r2, #0
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	627a      	str	r2, [r7, #36]	; 0x24
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800173c:	2100      	movs	r1, #0
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_GetSysClockFreq+0x188>)
 8001740:	fb03 f201 	mul.w	r2, r3, r1
 8001744:	2300      	movs	r3, #0
 8001746:	fb00 f303 	mul.w	r3, r0, r3
 800174a:	4413      	add	r3, r2
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <HAL_RCC_GetSysClockFreq+0x188>)
 800174e:	fba0 1202 	umull	r1, r2, r0, r2
 8001752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001754:	460a      	mov	r2, r1
 8001756:	62ba      	str	r2, [r7, #40]	; 0x28
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175a:	4413      	add	r3, r2
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	2200      	movs	r2, #0
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	61fa      	str	r2, [r7, #28]
 8001766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800176e:	f7fe fd37 	bl	80001e0 <__aeabi_uldivmod>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4613      	mov	r3, r2
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177a:	e053      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	617a      	str	r2, [r7, #20]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800178e:	f04f 0b00 	mov.w	fp, #0
 8001792:	4652      	mov	r2, sl
 8001794:	465b      	mov	r3, fp
 8001796:	f04f 0000 	mov.w	r0, #0
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	0159      	lsls	r1, r3, #5
 80017a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a4:	0150      	lsls	r0, r2, #5
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	ebb2 080a 	subs.w	r8, r2, sl
 80017ae:	eb63 090b 	sbc.w	r9, r3, fp
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017c6:	ebb2 0408 	subs.w	r4, r2, r8
 80017ca:	eb63 0509 	sbc.w	r5, r3, r9
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	00eb      	lsls	r3, r5, #3
 80017d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017dc:	00e2      	lsls	r2, r4, #3
 80017de:	4614      	mov	r4, r2
 80017e0:	461d      	mov	r5, r3
 80017e2:	eb14 030a 	adds.w	r3, r4, sl
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	eb45 030b 	adc.w	r3, r5, fp
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fa:	4629      	mov	r1, r5
 80017fc:	028b      	lsls	r3, r1, #10
 80017fe:	4621      	mov	r1, r4
 8001800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001804:	4621      	mov	r1, r4
 8001806:	028a      	lsls	r2, r1, #10
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	2200      	movs	r2, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	60fa      	str	r2, [r7, #12]
 8001814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001818:	f7fe fce2 	bl	80001e0 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_GetSysClockFreq+0x180>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	3301      	adds	r3, #1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800183e:	e002      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_RCC_GetSysClockFreq+0x184>)
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001848:	4618      	mov	r0, r3
 800184a:	3740      	adds	r7, #64	; 0x40
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	00f42400 	.word	0x00f42400
 800185c:	017d7840 	.word	0x017d7840

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_RCC_GetHCLKFreq+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff0 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	0a9b      	lsrs	r3, r3, #10
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	0800504c 	.word	0x0800504c

080018a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018a4:	f7ff ffdc 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	0b5b      	lsrs	r3, r3, #13
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4903      	ldr	r1, [pc, #12]	; (80018c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	0800504c 	.word	0x0800504c

080018c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	220f      	movs	r2, #15
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <HAL_RCC_GetClockConfig+0x60>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40023c00 	.word	0x40023c00

0800192c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e041      	b.n	80019c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f839 	bl	80019ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f000 f9ca 	bl	8001d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e044      	b.n	8001a82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x6c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d013      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x6c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x6c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x6c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_TIM_Base_Start_IT+0xbc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x6c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d010      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6e:	e007      	b.n	8001a80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40000400 	.word	0x40000400
 8001a98:	40000800 	.word	0x40000800
 8001a9c:	40000c00 	.word	0x40000c00
 8001aa0:	40014000 	.word	0x40014000

08001aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d122      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d11b      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0202 	mvn.w	r2, #2
 8001ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8ee 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8e0 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8f1 	bl	8001cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d122      	bne.n	8001b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d11b      	bne.n	8001b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0204 	mvn.w	r2, #4
 8001b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8c4 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8001b40:	e005      	b.n	8001b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8b6 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8c7 	bl	8001cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d122      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d11b      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0208 	mvn.w	r2, #8
 8001b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f89a 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8001b94:	e005      	b.n	8001ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f88c 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f89d 	bl	8001cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d122      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d11b      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0210 	mvn.w	r2, #16
 8001bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f870 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f862 	bl	8001cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f873 	bl	8001cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10e      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d107      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0201 	mvn.w	r2, #1
 8001c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fdf6 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	2b80      	cmp	r3, #128	; 0x80
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8e2 	bl	8001e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f838 	bl	8001cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0220 	mvn.w	r2, #32
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8ac 	bl	8001e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00f      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d22:	d00b      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a31      	ldr	r2, [pc, #196]	; (8001dec <TIM_Base_SetConfig+0xe8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a30      	ldr	r2, [pc, #192]	; (8001df0 <TIM_Base_SetConfig+0xec>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d003      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <TIM_Base_SetConfig+0xf0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d108      	bne.n	8001d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01b      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d017      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <TIM_Base_SetConfig+0xe8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <TIM_Base_SetConfig+0xec>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00f      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <TIM_Base_SetConfig+0xf0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <TIM_Base_SetConfig+0xf4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <TIM_Base_SetConfig+0xf8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <TIM_Base_SetConfig+0xfc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	615a      	str	r2, [r3, #20]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	40014400 	.word	0x40014400
 8001e00:	40014800 	.word	0x40014800

08001e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e03f      	b.n	8001ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fd22 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	; 0x24
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f829 	bl	8001ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ecc:	b0c0      	sub	sp, #256	; 0x100
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee4:	68d9      	ldr	r1, [r3, #12]
 8001ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	ea40 0301 	orr.w	r3, r0, r1
 8001ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f20:	f021 010c 	bic.w	r1, r1, #12
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f42:	6999      	ldr	r1, [r3, #24]
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	ea40 0301 	orr.w	r3, r0, r1
 8001f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <UART_SetConfig+0x2cc>)
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d005      	beq.n	8001f68 <UART_SetConfig+0xa0>
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <UART_SetConfig+0x2d0>)
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d104      	bne.n	8001f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f68:	f7ff fc9a 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 8001f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f70:	e003      	b.n	8001f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f72:	f7ff fc81 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8001f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f84:	f040 810c 	bne.w	80021a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	1891      	adds	r1, r2, r2
 8001fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fa2:	415b      	adcs	r3, r3
 8001fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001faa:	4621      	mov	r1, r4
 8001fac:	eb12 0801 	adds.w	r8, r2, r1
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	eb43 0901 	adc.w	r9, r3, r1
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fca:	4690      	mov	r8, r2
 8001fcc:	4699      	mov	r9, r3
 8001fce:	4623      	mov	r3, r4
 8001fd0:	eb18 0303 	adds.w	r3, r8, r3
 8001fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fd8:	462b      	mov	r3, r5
 8001fda:	eb49 0303 	adc.w	r3, r9, r3
 8001fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	18db      	adds	r3, r3, r3
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	eb42 0303 	adc.w	r3, r2, r3
 8002002:	657b      	str	r3, [r7, #84]	; 0x54
 8002004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800200c:	f7fe f8e8 	bl	80001e0 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4b61      	ldr	r3, [pc, #388]	; (800219c <UART_SetConfig+0x2d4>)
 8002016:	fba3 2302 	umull	r2, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	011c      	lsls	r4, r3, #4
 800201e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002022:	2200      	movs	r2, #0
 8002024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800202c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002030:	4642      	mov	r2, r8
 8002032:	464b      	mov	r3, r9
 8002034:	1891      	adds	r1, r2, r2
 8002036:	64b9      	str	r1, [r7, #72]	; 0x48
 8002038:	415b      	adcs	r3, r3
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800203c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002040:	4641      	mov	r1, r8
 8002042:	eb12 0a01 	adds.w	sl, r2, r1
 8002046:	4649      	mov	r1, r9
 8002048:	eb43 0b01 	adc.w	fp, r3, r1
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800205c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002060:	4692      	mov	sl, r2
 8002062:	469b      	mov	fp, r3
 8002064:	4643      	mov	r3, r8
 8002066:	eb1a 0303 	adds.w	r3, sl, r3
 800206a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800206e:	464b      	mov	r3, r9
 8002070:	eb4b 0303 	adc.w	r3, fp, r3
 8002074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800208c:	460b      	mov	r3, r1
 800208e:	18db      	adds	r3, r3, r3
 8002090:	643b      	str	r3, [r7, #64]	; 0x40
 8002092:	4613      	mov	r3, r2
 8002094:	eb42 0303 	adc.w	r3, r2, r3
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
 800209a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800209e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020a2:	f7fe f89d 	bl	80001e0 <__aeabi_uldivmod>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <UART_SetConfig+0x2d4>)
 80020ae:	fba3 2301 	umull	r2, r3, r3, r1
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2264      	movs	r2, #100	; 0x64
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <UART_SetConfig+0x2d4>)
 80020c4:	fba3 2302 	umull	r2, r3, r3, r2
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020d0:	441c      	add	r4, r3
 80020d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	1891      	adds	r1, r2, r2
 80020ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80020ec:	415b      	adcs	r3, r3
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020f4:	4641      	mov	r1, r8
 80020f6:	1851      	adds	r1, r2, r1
 80020f8:	6339      	str	r1, [r7, #48]	; 0x30
 80020fa:	4649      	mov	r1, r9
 80020fc:	414b      	adcs	r3, r1
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800210c:	4659      	mov	r1, fp
 800210e:	00cb      	lsls	r3, r1, #3
 8002110:	4651      	mov	r1, sl
 8002112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002116:	4651      	mov	r1, sl
 8002118:	00ca      	lsls	r2, r1, #3
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4603      	mov	r3, r0
 8002120:	4642      	mov	r2, r8
 8002122:	189b      	adds	r3, r3, r2
 8002124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002128:	464b      	mov	r3, r9
 800212a:	460a      	mov	r2, r1
 800212c:	eb42 0303 	adc.w	r3, r2, r3
 8002130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002148:	460b      	mov	r3, r1
 800214a:	18db      	adds	r3, r3, r3
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
 800214e:	4613      	mov	r3, r2
 8002150:	eb42 0303 	adc.w	r3, r2, r3
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800215a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800215e:	f7fe f83f 	bl	80001e0 <__aeabi_uldivmod>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <UART_SetConfig+0x2d4>)
 8002168:	fba3 1302 	umull	r1, r3, r3, r2
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	2164      	movs	r1, #100	; 0x64
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	3332      	adds	r3, #50	; 0x32
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <UART_SetConfig+0x2d4>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	f003 0207 	and.w	r2, r3, #7
 8002186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4422      	add	r2, r4
 800218e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002190:	e106      	b.n	80023a0 <UART_SetConfig+0x4d8>
 8002192:	bf00      	nop
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a4:	2200      	movs	r2, #0
 80021a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021b2:	4642      	mov	r2, r8
 80021b4:	464b      	mov	r3, r9
 80021b6:	1891      	adds	r1, r2, r2
 80021b8:	6239      	str	r1, [r7, #32]
 80021ba:	415b      	adcs	r3, r3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021c2:	4641      	mov	r1, r8
 80021c4:	1854      	adds	r4, r2, r1
 80021c6:	4649      	mov	r1, r9
 80021c8:	eb43 0501 	adc.w	r5, r3, r1
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	00eb      	lsls	r3, r5, #3
 80021d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021da:	00e2      	lsls	r2, r4, #3
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	18e3      	adds	r3, r4, r3
 80021e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021e8:	464b      	mov	r3, r9
 80021ea:	eb45 0303 	adc.w	r3, r5, r3
 80021ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800220e:	4629      	mov	r1, r5
 8002210:	008b      	lsls	r3, r1, #2
 8002212:	4621      	mov	r1, r4
 8002214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002218:	4621      	mov	r1, r4
 800221a:	008a      	lsls	r2, r1, #2
 800221c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002220:	f7fd ffde 	bl	80001e0 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4b60      	ldr	r3, [pc, #384]	; (80023ac <UART_SetConfig+0x4e4>)
 800222a:	fba3 2302 	umull	r2, r3, r3, r2
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	011c      	lsls	r4, r3, #4
 8002232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002236:	2200      	movs	r2, #0
 8002238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800223c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002244:	4642      	mov	r2, r8
 8002246:	464b      	mov	r3, r9
 8002248:	1891      	adds	r1, r2, r2
 800224a:	61b9      	str	r1, [r7, #24]
 800224c:	415b      	adcs	r3, r3
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002254:	4641      	mov	r1, r8
 8002256:	1851      	adds	r1, r2, r1
 8002258:	6139      	str	r1, [r7, #16]
 800225a:	4649      	mov	r1, r9
 800225c:	414b      	adcs	r3, r1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800226c:	4659      	mov	r1, fp
 800226e:	00cb      	lsls	r3, r1, #3
 8002270:	4651      	mov	r1, sl
 8002272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002276:	4651      	mov	r1, sl
 8002278:	00ca      	lsls	r2, r1, #3
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	4603      	mov	r3, r0
 8002280:	4642      	mov	r2, r8
 8002282:	189b      	adds	r3, r3, r2
 8002284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002288:	464b      	mov	r3, r9
 800228a:	460a      	mov	r2, r1
 800228c:	eb42 0303 	adc.w	r3, r2, r3
 8002290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	67bb      	str	r3, [r7, #120]	; 0x78
 800229e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022ac:	4649      	mov	r1, r9
 80022ae:	008b      	lsls	r3, r1, #2
 80022b0:	4641      	mov	r1, r8
 80022b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b6:	4641      	mov	r1, r8
 80022b8:	008a      	lsls	r2, r1, #2
 80022ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022be:	f7fd ff8f 	bl	80001e0 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <UART_SetConfig+0x4e4>)
 80022ca:	fba3 2301 	umull	r2, r3, r3, r1
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2264      	movs	r2, #100	; 0x64
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	1acb      	subs	r3, r1, r3
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	3332      	adds	r3, #50	; 0x32
 80022dc:	4a33      	ldr	r2, [pc, #204]	; (80023ac <UART_SetConfig+0x4e4>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e8:	441c      	add	r4, r3
 80022ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ee:	2200      	movs	r2, #0
 80022f0:	673b      	str	r3, [r7, #112]	; 0x70
 80022f2:	677a      	str	r2, [r7, #116]	; 0x74
 80022f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022f8:	4642      	mov	r2, r8
 80022fa:	464b      	mov	r3, r9
 80022fc:	1891      	adds	r1, r2, r2
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	415b      	adcs	r3, r3
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002308:	4641      	mov	r1, r8
 800230a:	1851      	adds	r1, r2, r1
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	4649      	mov	r1, r9
 8002310:	414b      	adcs	r3, r1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002320:	4659      	mov	r1, fp
 8002322:	00cb      	lsls	r3, r1, #3
 8002324:	4651      	mov	r1, sl
 8002326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800232a:	4651      	mov	r1, sl
 800232c:	00ca      	lsls	r2, r1, #3
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	4603      	mov	r3, r0
 8002334:	4642      	mov	r2, r8
 8002336:	189b      	adds	r3, r3, r2
 8002338:	66bb      	str	r3, [r7, #104]	; 0x68
 800233a:	464b      	mov	r3, r9
 800233c:	460a      	mov	r2, r1
 800233e:	eb42 0303 	adc.w	r3, r2, r3
 8002342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
 800234e:	667a      	str	r2, [r7, #100]	; 0x64
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800235c:	4649      	mov	r1, r9
 800235e:	008b      	lsls	r3, r1, #2
 8002360:	4641      	mov	r1, r8
 8002362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002366:	4641      	mov	r1, r8
 8002368:	008a      	lsls	r2, r1, #2
 800236a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800236e:	f7fd ff37 	bl	80001e0 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <UART_SetConfig+0x4e4>)
 8002378:	fba3 1302 	umull	r1, r3, r3, r2
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	2164      	movs	r1, #100	; 0x64
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	3332      	adds	r3, #50	; 0x32
 800238a:	4a08      	ldr	r2, [pc, #32]	; (80023ac <UART_SetConfig+0x4e4>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	f003 020f 	and.w	r2, r3, #15
 8002396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4422      	add	r2, r4
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	bf00      	nop
 80023a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023a6:	46bd      	mov	sp, r7
 80023a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ac:	51eb851f 	.word	0x51eb851f

080023b0 <__NVIC_SetPriority>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Handler+0x1c>)
 800240a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800240c:	f001 fd46 	bl	8003e9c <xTaskGetSchedulerState>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002416:	f002 fb2f 	bl	8004a78 <xPortSysTickHandler>
  }
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002428:	2100      	movs	r1, #0
 800242a:	f06f 0004 	mvn.w	r0, #4
 800242e:	f7ff ffbf 	bl	80023b0 <__NVIC_SetPriority>
#endif
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800243e:	f3ef 8305 	mrs	r3, IPSR
 8002442:	603b      	str	r3, [r7, #0]
  return(result);
 8002444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800244a:	f06f 0305 	mvn.w	r3, #5
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	e00c      	b.n	800246c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <osKernelInitialize+0x44>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <osKernelInitialize+0x44>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	e002      	b.n	800246c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200000e0 	.word	0x200000e0

08002480 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002486:	f3ef 8305 	mrs	r3, IPSR
 800248a:	603b      	str	r3, [r7, #0]
  return(result);
 800248c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002492:	f06f 0305 	mvn.w	r3, #5
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e010      	b.n	80024bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <osKernelStart+0x48>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d109      	bne.n	80024b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024a2:	f7ff ffbf 	bl	8002424 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <osKernelStart+0x48>)
 80024a8:	2202      	movs	r2, #2
 80024aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024ac:	f001 f8ae 	bl	800360c <vTaskStartScheduler>
      stat = osOK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	e002      	b.n	80024bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200000e0 	.word	0x200000e0

080024cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08e      	sub	sp, #56	; 0x38
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024dc:	f3ef 8305 	mrs	r3, IPSR
 80024e0:	617b      	str	r3, [r7, #20]
  return(result);
 80024e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d17e      	bne.n	80025e6 <osThreadNew+0x11a>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d07b      	beq.n	80025e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80024f2:	2318      	movs	r3, #24
 80024f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d045      	beq.n	8002592 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <osThreadNew+0x48>
        name = attr->name;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <osThreadNew+0x6e>
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b38      	cmp	r3, #56	; 0x38
 800252c:	d805      	bhi.n	800253a <osThreadNew+0x6e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <osThreadNew+0x72>
        return (NULL);
 800253a:	2300      	movs	r3, #0
 800253c:	e054      	b.n	80025e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00e      	beq.n	8002574 <osThreadNew+0xa8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b5b      	cmp	r3, #91	; 0x5b
 800255c:	d90a      	bls.n	8002574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <osThreadNew+0xa8>
        mem = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e010      	b.n	8002596 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10c      	bne.n	8002596 <osThreadNew+0xca>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <osThreadNew+0xca>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <osThreadNew+0xca>
          mem = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	e001      	b.n	8002596 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d110      	bne.n	80025be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025a4:	9202      	str	r2, [sp, #8]
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fe12 	bl	80031dc <xTaskCreateStatic>
 80025b8:	4603      	mov	r3, r0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e013      	b.n	80025e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d110      	bne.n	80025e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	f107 0310 	add.w	r3, r7, #16
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fe5d 	bl	8003296 <xTaskCreate>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <osThreadNew+0x11a>
            hTask = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025e6:	693b      	ldr	r3, [r7, #16]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3728      	adds	r7, #40	; 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025fc:	f3ef 8305 	mrs	r3, IPSR
 8002600:	60fb      	str	r3, [r7, #12]
  return(result);
 8002602:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8002608:	f06f 0305 	mvn.w	r3, #5
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e00b      	b.n	8002628 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8002616:	f06f 0303 	mvn.w	r3, #3
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e004      	b.n	8002628 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8002622:	6938      	ldr	r0, [r7, #16]
 8002624:	f000 ff7c 	bl	8003520 <vTaskSuspend>
  }

  return (stat);
 8002628:	697b      	ldr	r3, [r7, #20]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <vApplicationGetIdleTaskMemory+0x2c>)
 8002644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <vApplicationGetIdleTaskMemory+0x30>)
 800264a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	200000e4 	.word	0x200000e4
 8002664:	20000140 	.word	0x20000140

08002668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <vApplicationGetTimerTaskMemory+0x2c>)
 8002678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <vApplicationGetTimerTaskMemory+0x30>)
 800267e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000340 	.word	0x20000340
 8002698:	2000039c 	.word	0x2000039c

0800269c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0208 	add.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f103 0208 	add.w	r2, r3, #8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 0208 	add.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d103      	bne.n	800275e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e00c      	b.n	8002778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3308      	adds	r3, #8
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e002      	b.n	800276c <vListInsert+0x2e>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d2f6      	bcs.n	8002766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6892      	ldr	r2, [r2, #8]
 80027c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6852      	ldr	r2, [r2, #4]
 80027d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d103      	bne.n	80027e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800282e:	f002 f891 	bl	8004954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	441a      	add	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	3b01      	subs	r3, #1
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	441a      	add	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d114      	bne.n	80028ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01a      	beq.n	80028c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3310      	adds	r3, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f001 f945 	bl	8003b20 <xTaskRemoveFromEventList>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <xQueueGenericReset+0xcc>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	e009      	b.n	80028c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3310      	adds	r3, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fef2 	bl	800269c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3324      	adds	r3, #36	; 0x24
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff feed 	bl	800269c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028c2:	f002 f877 	bl	80049b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	; 0x38
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <xQueueGenericCreateStatic+0x52>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <xQueueGenericCreateStatic+0x56>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <xQueueGenericCreateStatic+0x58>
 800292a:	2300      	movs	r3, #0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	623b      	str	r3, [r7, #32]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <xQueueGenericCreateStatic+0x7e>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <xQueueGenericCreateStatic+0x82>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <xQueueGenericCreateStatic+0x84>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	61fb      	str	r3, [r7, #28]
}
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002972:	2350      	movs	r3, #80	; 0x50
 8002974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b50      	cmp	r3, #80	; 0x50
 800297a:	d00a      	beq.n	8002992 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	61bb      	str	r3, [r7, #24]
}
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002992:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f805 	bl	80029c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029bc:	4618      	mov	r0, r3
 80029be:	3730      	adds	r7, #48	; 0x30
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e002      	b.n	80029e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029f2:	2101      	movs	r1, #1
 80029f4:	69b8      	ldr	r0, [r7, #24]
 80029f6:	f7ff ff05 	bl	8002804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	; 0x38
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <xQueueGenericSend+0x32>
	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <xQueueGenericSend+0x40>
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <xQueueGenericSend+0x44>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <xQueueGenericSend+0x46>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <xQueueGenericSend+0x60>
	__asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a68:	bf00      	nop
 8002a6a:	e7fe      	b.n	8002a6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d103      	bne.n	8002a7a <xQueueGenericSend+0x6e>
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <xQueueGenericSend+0x72>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <xQueueGenericSend+0x74>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xQueueGenericSend+0x8e>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	623b      	str	r3, [r7, #32]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a9a:	f001 f9ff 	bl	8003e9c <xTaskGetSchedulerState>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <xQueueGenericSend+0x9e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <xQueueGenericSend+0xa2>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <xQueueGenericSend+0xa4>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <xQueueGenericSend+0xbe>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	61fb      	str	r3, [r7, #28]
}
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aca:	f001 ff43 	bl	8004954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <xQueueGenericSend+0xd4>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d129      	bne.n	8002b34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ae6:	f000 fa0b 	bl	8002f00 <prvCopyDataToQueue>
 8002aea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	3324      	adds	r3, #36	; 0x24
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f811 	bl	8003b20 <xTaskRemoveFromEventList>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b04:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <xQueueGenericSend+0x1f8>)
 8002b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	e00a      	b.n	8002b2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <xQueueGenericSend+0x1f8>)
 8002b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b2c:	f001 ff42 	bl	80049b4 <vPortExitCritical>
				return pdPASS;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e063      	b.n	8002bfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b3a:	f001 ff3b 	bl	80049b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e05c      	b.n	8002bfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f84b 	bl	8003be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b56:	f001 ff2d 	bl	80049b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b5a:	f000 fdbd 	bl	80036d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b5e:	f001 fef9 	bl	8004954 <vPortEnterCritical>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d103      	bne.n	8002b78 <xQueueGenericSend+0x16c>
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d103      	bne.n	8002b8e <xQueueGenericSend+0x182>
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b8e:	f001 ff11 	bl	80049b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b92:	1d3a      	adds	r2, r7, #4
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 f83a 	bl	8003c14 <xTaskCheckForTimeOut>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d124      	bne.n	8002bf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba8:	f000 faa2 	bl	80030f0 <prvIsQueueFull>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 ff60 	bl	8003a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc2:	f000 fa2d 	bl	8003020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bc6:	f000 fd95 	bl	80036f4 <xTaskResumeAll>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f af7c 	bne.w	8002aca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <xQueueGenericSend+0x1f8>)
 8002bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	e772      	b.n	8002aca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be6:	f000 fa1b 	bl	8003020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bea:	f000 fd83 	bl	80036f4 <xTaskResumeAll>
 8002bee:	e76c      	b.n	8002aca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf2:	f000 fa15 	bl	8003020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bf6:	f000 fd7d 	bl	80036f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3738      	adds	r7, #56	; 0x38
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b090      	sub	sp, #64	; 0x40
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c32:	bf00      	nop
 8002c34:	e7fe      	b.n	8002c34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <xQueueGenericSendFromISR+0x3c>
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <xQueueGenericSendFromISR+0x40>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <xQueueGenericSendFromISR+0x42>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c60:	bf00      	nop
 8002c62:	e7fe      	b.n	8002c62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d103      	bne.n	8002c72 <xQueueGenericSendFromISR+0x6a>
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <xQueueGenericSendFromISR+0x6e>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <xQueueGenericSendFromISR+0x70>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	623b      	str	r3, [r7, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c92:	f001 ff41 	bl	8004b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c96:	f3ef 8211 	mrs	r2, BASEPRI
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	61fa      	str	r2, [r7, #28]
 8002cac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <xQueueGenericSendFromISR+0xbc>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d12f      	bne.n	8002d24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cda:	f000 f911 	bl	8002f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d112      	bne.n	8002d0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d016      	beq.n	8002d1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	3324      	adds	r3, #36	; 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 ff13 	bl	8003b20 <xTaskRemoveFromEventList>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	b25a      	sxtb	r2, r3
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d22:	e001      	b.n	8002d28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3740      	adds	r7, #64	; 0x40
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	; 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <xQueueReceive+0x30>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	623b      	str	r3, [r7, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueReceive+0x3e>
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueReceive+0x42>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueReceive+0x44>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xQueueReceive+0x5e>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	61fb      	str	r3, [r7, #28]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d9e:	f001 f87d 	bl	8003e9c <xTaskGetSchedulerState>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <xQueueReceive+0x6e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <xQueueReceive+0x72>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueReceive+0x74>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueReceive+0x8e>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	61bb      	str	r3, [r7, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dce:	f001 fdc1 	bl	8004954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01f      	beq.n	8002e1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002de2:	f000 f8f7 	bl	8002fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1e5a      	subs	r2, r3, #1
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00f      	beq.n	8002e16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	3310      	adds	r3, #16
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fe90 	bl	8003b20 <xTaskRemoveFromEventList>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <xQueueReceive+0x1bc>)
 8002e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e16:	f001 fdcd 	bl	80049b4 <vPortExitCritical>
				return pdPASS;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e069      	b.n	8002ef2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e24:	f001 fdc6 	bl	80049b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e062      	b.n	8002ef2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fed6 	bl	8003be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e40:	f001 fdb8 	bl	80049b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e44:	f000 fc48 	bl	80036d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e48:	f001 fd84 	bl	8004954 <vPortEnterCritical>
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d103      	bne.n	8002e62 <xQueueReceive+0x122>
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d103      	bne.n	8002e78 <xQueueReceive+0x138>
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e78:	f001 fd9c 	bl	80049b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e7c:	1d3a      	adds	r2, r7, #4
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fec5 	bl	8003c14 <xTaskCheckForTimeOut>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d123      	bne.n	8002ed8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e92:	f000 f917 	bl	80030c4 <prvIsQueueEmpty>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fdeb 	bl	8003a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eac:	f000 f8b8 	bl	8003020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eb0:	f000 fc20 	bl	80036f4 <xTaskResumeAll>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d189      	bne.n	8002dce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <xQueueReceive+0x1bc>)
 8002ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	e780      	b.n	8002dce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ece:	f000 f8a7 	bl	8003020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ed2:	f000 fc0f 	bl	80036f4 <xTaskResumeAll>
 8002ed6:	e77a      	b.n	8002dce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 f8a1 	bl	8003020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ede:	f000 fc09 	bl	80036f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee4:	f000 f8ee 	bl	80030c4 <prvIsQueueEmpty>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f43f af6f 	beq.w	8002dce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3730      	adds	r7, #48	; 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d14d      	bne.n	8002fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 ffd4 	bl	8003ed8 <xTaskPriorityDisinherit>
 8002f30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e043      	b.n	8002fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d119      	bne.n	8002f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6858      	ldr	r0, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	f002 f83a 	bl	8004fc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	441a      	add	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d32b      	bcc.n	8002fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	e026      	b.n	8002fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68d8      	ldr	r0, [r3, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	f002 f820 	bl	8004fc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	425b      	negs	r3, r3
 8002f8e:	441a      	add	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	425b      	negs	r3, r3
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d105      	bne.n	8002fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fca:	697b      	ldr	r3, [r7, #20]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d018      	beq.n	8003018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	441a      	add	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d303      	bcc.n	8003008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	461a      	mov	r2, r3
 8003012:	6838      	ldr	r0, [r7, #0]
 8003014:	f001 ffd6 	bl	8004fc4 <memcpy>
	}
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003028:	f001 fc94 	bl	8004954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003034:	e011      	b.n	800305a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3324      	adds	r3, #36	; 0x24
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fd6c 	bl	8003b20 <xTaskRemoveFromEventList>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800304e:	f000 fe43 	bl	8003cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	3b01      	subs	r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	dce9      	bgt.n	8003036 <prvUnlockQueue+0x16>
 8003062:	e000      	b.n	8003066 <prvUnlockQueue+0x46>
					break;
 8003064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	22ff      	movs	r2, #255	; 0xff
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800306e:	f001 fca1 	bl	80049b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003072:	f001 fc6f 	bl	8004954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800307c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800307e:	e011      	b.n	80030a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3310      	adds	r3, #16
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fd47 	bl	8003b20 <xTaskRemoveFromEventList>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003098:	f000 fe1e 	bl	8003cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800309c:	7bbb      	ldrb	r3, [r7, #14]
 800309e:	3b01      	subs	r3, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	dce9      	bgt.n	8003080 <prvUnlockQueue+0x60>
 80030ac:	e000      	b.n	80030b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030b8:	f001 fc7c 	bl	80049b4 <vPortExitCritical>
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030cc:	f001 fc42 	bl	8004954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e001      	b.n	80030e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030e2:	f001 fc67 	bl	80049b4 <vPortExitCritical>

	return xReturn;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f8:	f001 fc2c 	bl	8004954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	429a      	cmp	r2, r3
 8003106:	d102      	bne.n	800310e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003108:	2301      	movs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e001      	b.n	8003112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003112:	f001 fc4f 	bl	80049b4 <vPortExitCritical>

	return xReturn;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e014      	b.n	800315a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <vQueueAddToRegistry+0x50>)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <vQueueAddToRegistry+0x50>)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <vQueueAddToRegistry+0x50>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003152:	e006      	b.n	8003162 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b07      	cmp	r3, #7
 800315e:	d9e7      	bls.n	8003130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	2000079c 	.word	0x2000079c

08003174 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003184:	f001 fbe6 	bl	8004954 <vPortEnterCritical>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800318e:	b25b      	sxtb	r3, r3
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d103      	bne.n	800319e <vQueueWaitForMessageRestricted+0x2a>
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a4:	b25b      	sxtb	r3, r3
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d103      	bne.n	80031b4 <vQueueWaitForMessageRestricted+0x40>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b4:	f001 fbfe 	bl	80049b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3324      	adds	r3, #36	; 0x24
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fc7d 	bl	8003ac8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff26 	bl	8003020 <prvUnlockQueue>
	}
 80031d4:	bf00      	nop
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <xTaskCreateStatic+0x2a>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	623b      	str	r3, [r7, #32]
}
 8003202:	bf00      	nop
 8003204:	e7fe      	b.n	8003204 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xTaskCreateStatic+0x46>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	61fb      	str	r3, [r7, #28]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003222:	235c      	movs	r3, #92	; 0x5c
 8003224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b5c      	cmp	r3, #92	; 0x5c
 800322a:	d00a      	beq.n	8003242 <xTaskCreateStatic+0x66>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61bb      	str	r3, [r7, #24]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003242:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01e      	beq.n	8003288 <xTaskCreateStatic+0xac>
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01b      	beq.n	8003288 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003258:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003262:	2300      	movs	r3, #0
 8003264:	9303      	str	r3, [sp, #12]
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	9302      	str	r3, [sp, #8]
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f850 	bl	8003320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003282:	f000 f8dd 	bl	8003440 <prvAddNewTaskToReadyList>
 8003286:	e001      	b.n	800328c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800328c:	697b      	ldr	r3, [r7, #20]
	}
 800328e:	4618      	mov	r0, r3
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003296:	b580      	push	{r7, lr}
 8003298:	b08c      	sub	sp, #48	; 0x30
 800329a:	af04      	add	r7, sp, #16
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 fc74 	bl	8004b98 <pvPortMalloc>
 80032b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032b8:	205c      	movs	r0, #92	; 0x5c
 80032ba:	f001 fc6d 	bl	8004b98 <pvPortMalloc>
 80032be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
 80032cc:	e005      	b.n	80032da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f001 fd2e 	bl	8004d30 <vPortFree>
 80032d4:	e001      	b.n	80032da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9303      	str	r3, [sp, #12]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	9302      	str	r3, [sp, #8]
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f80e 	bl	8003320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003304:	69f8      	ldr	r0, [r7, #28]
 8003306:	f000 f89b 	bl	8003440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800330a:	2301      	movs	r3, #1
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e002      	b.n	8003316 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003310:	f04f 33ff 	mov.w	r3, #4294967295
 8003314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003316:	69bb      	ldr	r3, [r7, #24]
	}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	461a      	mov	r2, r3
 8003338:	21a5      	movs	r1, #165	; 0xa5
 800333a:	f001 fe17 	bl	8004f6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003348:	3b01      	subs	r3, #1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f023 0307 	bic.w	r3, r3, #7
 8003356:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	617b      	str	r3, [r7, #20]
}
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01f      	beq.n	80033be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e012      	b.n	80033aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	7819      	ldrb	r1, [r3, #0]
 800338c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	3334      	adds	r3, #52	; 0x34
 8003394:	460a      	mov	r2, r1
 8003396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	3301      	adds	r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d9e9      	bls.n	8003384 <prvInitialiseNewTask+0x64>
 80033b0:	e000      	b.n	80033b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80033b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033bc:	e003      	b.n	80033c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	2b37      	cmp	r3, #55	; 0x37
 80033ca:	d901      	bls.n	80033d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033cc:	2337      	movs	r3, #55	; 0x37
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	2200      	movs	r2, #0
 80033e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	3304      	adds	r3, #4
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f978 	bl	80026dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	3318      	adds	r3, #24
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff f973 	bl	80026dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	2200      	movs	r2, #0
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	68f9      	ldr	r1, [r7, #12]
 800341e:	69b8      	ldr	r0, [r7, #24]
 8003420:	f001 f96a 	bl	80046f8 <pxPortInitialiseStack>
 8003424:	4602      	mov	r2, r0
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003436:	bf00      	nop
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003448:	f001 fa84 	bl	8004954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <prvAddNewTaskToReadyList+0xc4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <prvAddNewTaskToReadyList+0xc4>)
 8003454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <prvAddNewTaskToReadyList+0xc8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800345e:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <prvAddNewTaskToReadyList+0xc8>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <prvAddNewTaskToReadyList+0xc4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d110      	bne.n	800348e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800346c:	f000 fc58 	bl	8003d20 <prvInitialiseTaskLists>
 8003470:	e00d      	b.n	800348e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003472:	4b26      	ldr	r3, [pc, #152]	; (800350c <prvAddNewTaskToReadyList+0xcc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800347a:	4b23      	ldr	r3, [pc, #140]	; (8003508 <prvAddNewTaskToReadyList+0xc8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	429a      	cmp	r2, r3
 8003486:	d802      	bhi.n	800348e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <prvAddNewTaskToReadyList+0xc8>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <prvAddNewTaskToReadyList+0xd0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <prvAddNewTaskToReadyList+0xd0>)
 8003496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <prvAddNewTaskToReadyList+0xd0>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <prvAddNewTaskToReadyList+0xd4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d903      	bls.n	80034b4 <prvAddNewTaskToReadyList+0x74>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <prvAddNewTaskToReadyList+0xd4>)
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4a15      	ldr	r2, [pc, #84]	; (8003518 <prvAddNewTaskToReadyList+0xd8>)
 80034c2:	441a      	add	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f7ff f913 	bl	80026f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034d0:	f001 fa70 	bl	80049b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <prvAddNewTaskToReadyList+0xcc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00e      	beq.n	80034fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <prvAddNewTaskToReadyList+0xc8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d207      	bcs.n	80034fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <prvAddNewTaskToReadyList+0xdc>)
 80034ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000cb0 	.word	0x20000cb0
 8003508:	200007dc 	.word	0x200007dc
 800350c:	20000cbc 	.word	0x20000cbc
 8003510:	20000ccc 	.word	0x20000ccc
 8003514:	20000cb8 	.word	0x20000cb8
 8003518:	200007e0 	.word	0x200007e0
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003528:	f001 fa14 	bl	8004954 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <vTaskSuspend+0x18>
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <vTaskSuspend+0xd4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e000      	b.n	800353a <vTaskSuspend+0x1a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3304      	adds	r3, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f935 	bl	80027b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3318      	adds	r3, #24
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f92c 	bl	80027b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4826      	ldr	r0, [pc, #152]	; (80035f8 <vTaskSuspend+0xd8>)
 8003560:	f7ff f8c9 	bl	80026f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d103      	bne.n	8003578 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003578:	f001 fa1c 	bl	80049b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <vTaskSuspend+0xdc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003584:	f001 f9e6 	bl	8004954 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003588:	f000 fc68 	bl	8003e5c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800358c:	f001 fa12 	bl	80049b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <vTaskSuspend+0xd4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	429a      	cmp	r2, r3
 8003598:	d127      	bne.n	80035ea <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <vTaskSuspend+0xdc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <vTaskSuspend+0xe0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <vTaskSuspend+0xa0>
	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60bb      	str	r3, [r7, #8]
}
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <vTaskSuspend+0xe4>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d0:	e00b      	b.n	80035ea <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <vTaskSuspend+0xd8>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <vTaskSuspend+0xe8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d103      	bne.n	80035e6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <vTaskSuspend+0xd4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
	}
 80035e4:	e001      	b.n	80035ea <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80035e6:	f000 f9ed 	bl	80039c4 <vTaskSwitchContext>
	}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200007dc 	.word	0x200007dc
 80035f8:	20000c9c 	.word	0x20000c9c
 80035fc:	20000cbc 	.word	0x20000cbc
 8003600:	20000cd8 	.word	0x20000cd8
 8003604:	e000ed04 	.word	0xe000ed04
 8003608:	20000cb0 	.word	0x20000cb0

0800360c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800361a:	463a      	mov	r2, r7
 800361c:	1d39      	adds	r1, r7, #4
 800361e:	f107 0308 	add.w	r3, r7, #8
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff f806 	bl	8002634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	9202      	str	r2, [sp, #8]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	2300      	movs	r3, #0
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	460a      	mov	r2, r1
 800363a:	4921      	ldr	r1, [pc, #132]	; (80036c0 <vTaskStartScheduler+0xb4>)
 800363c:	4821      	ldr	r0, [pc, #132]	; (80036c4 <vTaskStartScheduler+0xb8>)
 800363e:	f7ff fdcd 	bl	80031dc <xTaskCreateStatic>
 8003642:	4603      	mov	r3, r0
 8003644:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <vTaskStartScheduler+0xbc>)
 8003646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003648:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <vTaskStartScheduler+0xbc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e001      	b.n	800365a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d102      	bne.n	8003666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003660:	f000 fcfc 	bl	800405c <xTimerCreateTimerTask>
 8003664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d116      	bne.n	800369a <vTaskStartScheduler+0x8e>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	613b      	str	r3, [r7, #16]
}
 800367e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <vTaskStartScheduler+0xc0>)
 8003682:	f04f 32ff 	mov.w	r2, #4294967295
 8003686:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003688:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <vTaskStartScheduler+0xc4>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <vTaskStartScheduler+0xc8>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003694:	f001 f8bc 	bl	8004810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003698:	e00e      	b.n	80036b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d10a      	bne.n	80036b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	60fb      	str	r3, [r7, #12]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <vTaskStartScheduler+0xaa>
}
 80036b8:	bf00      	nop
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	08005024 	.word	0x08005024
 80036c4:	08003cf1 	.word	0x08003cf1
 80036c8:	20000cd4 	.word	0x20000cd4
 80036cc:	20000cd0 	.word	0x20000cd0
 80036d0:	20000cbc 	.word	0x20000cbc
 80036d4:	20000cb4 	.word	0x20000cb4

080036d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <vTaskSuspendAll+0x18>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a03      	ldr	r2, [pc, #12]	; (80036f0 <vTaskSuspendAll+0x18>)
 80036e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	20000cd8 	.word	0x20000cd8

080036f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003702:	4b42      	ldr	r3, [pc, #264]	; (800380c <xTaskResumeAll+0x118>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <xTaskResumeAll+0x2c>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	603b      	str	r3, [r7, #0]
}
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003720:	f001 f918 	bl	8004954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003724:	4b39      	ldr	r3, [pc, #228]	; (800380c <xTaskResumeAll+0x118>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3b01      	subs	r3, #1
 800372a:	4a38      	ldr	r2, [pc, #224]	; (800380c <xTaskResumeAll+0x118>)
 800372c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <xTaskResumeAll+0x118>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d162      	bne.n	80037fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003736:	4b36      	ldr	r3, [pc, #216]	; (8003810 <xTaskResumeAll+0x11c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d05e      	beq.n	80037fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800373e:	e02f      	b.n	80037a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <xTaskResumeAll+0x120>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3318      	adds	r3, #24
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f82f 	bl	80027b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f82a 	bl	80027b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <xTaskResumeAll+0x124>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d903      	bls.n	8003770 <xTaskResumeAll+0x7c>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <xTaskResumeAll+0x124>)
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4a27      	ldr	r2, [pc, #156]	; (800381c <xTaskResumeAll+0x128>)
 800377e:	441a      	add	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7fe ffb5 	bl	80026f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4b23      	ldr	r3, [pc, #140]	; (8003820 <xTaskResumeAll+0x12c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <xTaskResumeAll+0x130>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037a0:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <xTaskResumeAll+0x120>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1cb      	bne.n	8003740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ae:	f000 fb55 	bl	8003e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <xTaskResumeAll+0x134>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037be:	f000 f847 	bl	8003850 <xTaskIncrementTick>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <xTaskResumeAll+0x130>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f1      	bne.n	80037be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <xTaskResumeAll+0x134>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <xTaskResumeAll+0x130>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d009      	beq.n	80037fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <xTaskResumeAll+0x138>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037fc:	f001 f8da 	bl	80049b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003800:	68bb      	ldr	r3, [r7, #8]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000cd8 	.word	0x20000cd8
 8003810:	20000cb0 	.word	0x20000cb0
 8003814:	20000c70 	.word	0x20000c70
 8003818:	20000cb8 	.word	0x20000cb8
 800381c:	200007e0 	.word	0x200007e0
 8003820:	200007dc 	.word	0x200007dc
 8003824:	20000cc4 	.word	0x20000cc4
 8003828:	20000cc0 	.word	0x20000cc0
 800382c:	e000ed04 	.word	0xe000ed04

08003830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <xTaskGetTickCount+0x1c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800383c:	687b      	ldr	r3, [r7, #4]
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000cb4 	.word	0x20000cb4

08003850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800385a:	4b4f      	ldr	r3, [pc, #316]	; (8003998 <xTaskIncrementTick+0x148>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 808f 	bne.w	8003982 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <xTaskIncrementTick+0x14c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <xTaskIncrementTick+0x14c>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d120      	bne.n	80038ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003878:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <xTaskIncrementTick+0x150>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <xTaskIncrementTick+0x48>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	603b      	str	r3, [r7, #0]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <xTaskIncrementTick+0x46>
 8003898:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <xTaskIncrementTick+0x150>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <xTaskIncrementTick+0x154>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3f      	ldr	r2, [pc, #252]	; (80039a0 <xTaskIncrementTick+0x150>)
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4a3f      	ldr	r2, [pc, #252]	; (80039a4 <xTaskIncrementTick+0x154>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <xTaskIncrementTick+0x158>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a3d      	ldr	r2, [pc, #244]	; (80039a8 <xTaskIncrementTick+0x158>)
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	f000 fad1 	bl	8003e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038ba:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <xTaskIncrementTick+0x15c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d349      	bcc.n	8003958 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <xTaskIncrementTick+0x150>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <xTaskIncrementTick+0x15c>)
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	601a      	str	r2, [r3, #0]
					break;
 80038d6:	e03f      	b.n	8003958 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d8:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <xTaskIncrementTick+0x150>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d203      	bcs.n	80038f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038f0:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <xTaskIncrementTick+0x15c>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038f6:	e02f      	b.n	8003958 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe ff57 	bl	80027b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3318      	adds	r3, #24
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe ff4e 	bl	80027b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <xTaskIncrementTick+0x160>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d903      	bls.n	8003928 <xTaskIncrementTick+0xd8>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <xTaskIncrementTick+0x160>)
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <xTaskIncrementTick+0x164>)
 8003936:	441a      	add	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f7fe fed9 	bl	80026f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <xTaskIncrementTick+0x168>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	429a      	cmp	r2, r3
 8003950:	d3b8      	bcc.n	80038c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003952:	2301      	movs	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003956:	e7b5      	b.n	80038c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <xTaskIncrementTick+0x168>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395e:	4915      	ldr	r1, [pc, #84]	; (80039b4 <xTaskIncrementTick+0x164>)
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d901      	bls.n	8003974 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <xTaskIncrementTick+0x16c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e004      	b.n	800398c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <xTaskIncrementTick+0x170>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <xTaskIncrementTick+0x170>)
 800398a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800398c:	697b      	ldr	r3, [r7, #20]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000cd8 	.word	0x20000cd8
 800399c:	20000cb4 	.word	0x20000cb4
 80039a0:	20000c68 	.word	0x20000c68
 80039a4:	20000c6c 	.word	0x20000c6c
 80039a8:	20000cc8 	.word	0x20000cc8
 80039ac:	20000cd0 	.word	0x20000cd0
 80039b0:	20000cb8 	.word	0x20000cb8
 80039b4:	200007e0 	.word	0x200007e0
 80039b8:	200007dc 	.word	0x200007dc
 80039bc:	20000cc4 	.word	0x20000cc4
 80039c0:	20000cc0 	.word	0x20000cc0

080039c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ca:	4b28      	ldr	r3, [pc, #160]	; (8003a6c <vTaskSwitchContext+0xa8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039d2:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <vTaskSwitchContext+0xac>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039d8:	e041      	b.n	8003a5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <vTaskSwitchContext+0xac>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <vTaskSwitchContext+0xb0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e010      	b.n	8003a0a <vTaskSwitchContext+0x46>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <vTaskSwitchContext+0x40>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	607b      	str	r3, [r7, #4]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <vTaskSwitchContext+0x3e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	491b      	ldr	r1, [pc, #108]	; (8003a78 <vTaskSwitchContext+0xb4>)
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0e4      	beq.n	80039e8 <vTaskSwitchContext+0x24>
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <vTaskSwitchContext+0xb4>)
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d104      	bne.n	8003a4e <vTaskSwitchContext+0x8a>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <vTaskSwitchContext+0xb8>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4a06      	ldr	r2, [pc, #24]	; (8003a74 <vTaskSwitchContext+0xb0>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6013      	str	r3, [r2, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000cd8 	.word	0x20000cd8
 8003a70:	20000cc4 	.word	0x20000cc4
 8003a74:	20000cb8 	.word	0x20000cb8
 8003a78:	200007e0 	.word	0x200007e0
 8003a7c:	200007dc 	.word	0x200007dc

08003a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60fb      	str	r3, [r7, #12]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <vTaskPlaceOnEventList+0x44>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3318      	adds	r3, #24
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe fe45 	bl	800273e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	6838      	ldr	r0, [r7, #0]
 8003ab8:	f000 fa7c 	bl	8003fb4 <prvAddCurrentTaskToDelayedList>
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200007dc 	.word	0x200007dc

08003ac8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	617b      	str	r3, [r7, #20]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <vTaskPlaceOnEventListRestricted+0x54>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3318      	adds	r3, #24
 8003af6:	4619      	mov	r1, r3
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7fe fdfc 	bl	80026f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f000 fa51 	bl	8003fb4 <prvAddCurrentTaskToDelayedList>
	}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200007dc 	.word	0x200007dc

08003b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	60fb      	str	r3, [r7, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fe2d 	bl	80027b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <xTaskRemoveFromEventList+0xb0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11d      	bne.n	8003b9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fe24 	bl	80027b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <xTaskRemoveFromEventList+0xb4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d903      	bls.n	8003b7c <xTaskRemoveFromEventList+0x5c>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <xTaskRemoveFromEventList+0xb4>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <xTaskRemoveFromEventList+0xb8>)
 8003b8a:	441a      	add	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe fdaf 	bl	80026f6 <vListInsertEnd>
 8003b98:	e005      	b.n	8003ba6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	480e      	ldr	r0, [pc, #56]	; (8003bdc <xTaskRemoveFromEventList+0xbc>)
 8003ba2:	f7fe fda8 	bl	80026f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <xTaskRemoveFromEventList+0xc0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d905      	bls.n	8003bc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <xTaskRemoveFromEventList+0xc4>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e001      	b.n	8003bc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bc4:	697b      	ldr	r3, [r7, #20]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000cd8 	.word	0x20000cd8
 8003bd4:	20000cb8 	.word	0x20000cb8
 8003bd8:	200007e0 	.word	0x200007e0
 8003bdc:	20000c70 	.word	0x20000c70
 8003be0:	200007dc 	.word	0x200007dc
 8003be4:	20000cc4 	.word	0x20000cc4

08003be8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <vTaskInternalSetTimeOutState+0x24>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <vTaskInternalSetTimeOutState+0x28>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	605a      	str	r2, [r3, #4]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	20000cc8 	.word	0x20000cc8
 8003c10:	20000cb4 	.word	0x20000cb4

08003c14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	613b      	str	r3, [r7, #16]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	60fb      	str	r3, [r7, #12]
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c56:	f000 fe7d 	bl	8004954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <xTaskCheckForTimeOut+0xbc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d102      	bne.n	8003c7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	e023      	b.n	8003cc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <xTaskCheckForTimeOut+0xc0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d007      	beq.n	8003c96 <xTaskCheckForTimeOut+0x82>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d302      	bcc.n	8003c96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e015      	b.n	8003cc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d20b      	bcs.n	8003cb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad2      	subs	r2, r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff9b 	bl	8003be8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e004      	b.n	8003cc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cc2:	f000 fe77 	bl	80049b4 <vPortExitCritical>

	return xReturn;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000cb4 	.word	0x20000cb4
 8003cd4:	20000cc8 	.word	0x20000cc8

08003cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <vTaskMissedYield+0x14>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	20000cc4 	.word	0x20000cc4

08003cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cf8:	f000 f852 	bl	8003da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <prvIdleTask+0x28>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d9f9      	bls.n	8003cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <prvIdleTask+0x2c>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d14:	e7f0      	b.n	8003cf8 <prvIdleTask+0x8>
 8003d16:	bf00      	nop
 8003d18:	200007e0 	.word	0x200007e0
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	e00c      	b.n	8003d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <prvInitialiseTaskLists+0x60>)
 8003d38:	4413      	add	r3, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fcae 	bl	800269c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3301      	adds	r3, #1
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b37      	cmp	r3, #55	; 0x37
 8003d4a:	d9ef      	bls.n	8003d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d4c:	480d      	ldr	r0, [pc, #52]	; (8003d84 <prvInitialiseTaskLists+0x64>)
 8003d4e:	f7fe fca5 	bl	800269c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d52:	480d      	ldr	r0, [pc, #52]	; (8003d88 <prvInitialiseTaskLists+0x68>)
 8003d54:	f7fe fca2 	bl	800269c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d58:	480c      	ldr	r0, [pc, #48]	; (8003d8c <prvInitialiseTaskLists+0x6c>)
 8003d5a:	f7fe fc9f 	bl	800269c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d5e:	480c      	ldr	r0, [pc, #48]	; (8003d90 <prvInitialiseTaskLists+0x70>)
 8003d60:	f7fe fc9c 	bl	800269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d64:	480b      	ldr	r0, [pc, #44]	; (8003d94 <prvInitialiseTaskLists+0x74>)
 8003d66:	f7fe fc99 	bl	800269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvInitialiseTaskLists+0x78>)
 8003d6c:	4a05      	ldr	r2, [pc, #20]	; (8003d84 <prvInitialiseTaskLists+0x64>)
 8003d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <prvInitialiseTaskLists+0x7c>)
 8003d72:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <prvInitialiseTaskLists+0x68>)
 8003d74:	601a      	str	r2, [r3, #0]
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200007e0 	.word	0x200007e0
 8003d84:	20000c40 	.word	0x20000c40
 8003d88:	20000c54 	.word	0x20000c54
 8003d8c:	20000c70 	.word	0x20000c70
 8003d90:	20000c84 	.word	0x20000c84
 8003d94:	20000c9c 	.word	0x20000c9c
 8003d98:	20000c68 	.word	0x20000c68
 8003d9c:	20000c6c 	.word	0x20000c6c

08003da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003da6:	e019      	b.n	8003ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003da8:	f000 fdd4 	bl	8004954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <prvCheckTasksWaitingTermination+0x50>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fcf9 	bl	80027b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <prvCheckTasksWaitingTermination+0x54>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <prvCheckTasksWaitingTermination+0x54>)
 8003dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <prvCheckTasksWaitingTermination+0x58>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <prvCheckTasksWaitingTermination+0x58>)
 8003dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dd2:	f000 fdef 	bl	80049b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f810 	bl	8003dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <prvCheckTasksWaitingTermination+0x58>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e1      	bne.n	8003da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000c84 	.word	0x20000c84
 8003df4:	20000cb0 	.word	0x20000cb0
 8003df8:	20000c98 	.word	0x20000c98

08003dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 ff8c 	bl	8004d30 <vPortFree>
				vPortFree( pxTCB );
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 ff89 	bl	8004d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e1e:	e018      	b.n	8003e52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d103      	bne.n	8003e32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 ff80 	bl	8004d30 <vPortFree>
	}
 8003e30:	e00f      	b.n	8003e52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d00a      	beq.n	8003e52 <prvDeleteTCB+0x56>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	60fb      	str	r3, [r7, #12]
}
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <prvDeleteTCB+0x54>
	}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <prvResetNextTaskUnblockTime+0x38>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <prvResetNextTaskUnblockTime+0x3c>)
 8003e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e74:	e008      	b.n	8003e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <prvResetNextTaskUnblockTime+0x38>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <prvResetNextTaskUnblockTime+0x3c>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	20000c68 	.word	0x20000c68
 8003e98:	20000cd0 	.word	0x20000cd0

08003e9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <xTaskGetSchedulerState+0x34>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	e008      	b.n	8003ec2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <xTaskGetSchedulerState+0x38>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	e001      	b.n	8003ec2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ec2:	687b      	ldr	r3, [r7, #4]
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000cbc 	.word	0x20000cbc
 8003ed4:	20000cd8 	.word	0x20000cd8

08003ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d056      	beq.n	8003f9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <xTaskPriorityDisinherit+0xd0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d00a      	beq.n	8003f0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60fb      	str	r3, [r7, #12]
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60bb      	str	r3, [r7, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d02c      	beq.n	8003f9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d128      	bne.n	8003f9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fc2e 	bl	80027b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <xTaskPriorityDisinherit+0xd4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d903      	bls.n	8003f7c <xTaskPriorityDisinherit+0xa4>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <xTaskPriorityDisinherit+0xd4>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <xTaskPriorityDisinherit+0xd8>)
 8003f8a:	441a      	add	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f7fe fbaf 	bl	80026f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f9c:	697b      	ldr	r3, [r7, #20]
	}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200007dc 	.word	0x200007dc
 8003fac:	20000cb8 	.word	0x20000cb8
 8003fb0:	200007e0 	.word	0x200007e0

08003fb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fbf0 	bl	80027b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d10a      	bne.n	8003fee <prvAddCurrentTaskToDelayedList+0x3a>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4819      	ldr	r0, [pc, #100]	; (800404c <prvAddCurrentTaskToDelayedList+0x98>)
 8003fe8:	f7fe fb85 	bl	80026f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fec:	e026      	b.n	800403c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	429a      	cmp	r2, r3
 8004004:	d209      	bcs.n	800401a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fe fb93 	bl	800273e <vListInsert>
}
 8004018:	e010      	b.n	800403c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <prvAddCurrentTaskToDelayedList+0xa0>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f7fe fb89 	bl	800273e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <prvAddCurrentTaskToDelayedList+0xa4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	d202      	bcs.n	800403c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6013      	str	r3, [r2, #0]
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000cb4 	.word	0x20000cb4
 8004048:	200007dc 	.word	0x200007dc
 800404c:	20000c9c 	.word	0x20000c9c
 8004050:	20000c6c 	.word	0x20000c6c
 8004054:	20000c68 	.word	0x20000c68
 8004058:	20000cd0 	.word	0x20000cd0

0800405c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004066:	f000 fb07 	bl	8004678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <xTimerCreateTimerTask+0x80>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d021      	beq.n	80040b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800407a:	1d3a      	adds	r2, r7, #4
 800407c:	f107 0108 	add.w	r1, r7, #8
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe faef 	bl	8002668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	9202      	str	r2, [sp, #8]
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	2302      	movs	r3, #2
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	460a      	mov	r2, r1
 800409c:	4910      	ldr	r1, [pc, #64]	; (80040e0 <xTimerCreateTimerTask+0x84>)
 800409e:	4811      	ldr	r0, [pc, #68]	; (80040e4 <xTimerCreateTimerTask+0x88>)
 80040a0:	f7ff f89c 	bl	80031dc <xTaskCreateStatic>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <xTimerCreateTimerTask+0x8c>)
 80040a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <xTimerCreateTimerTask+0x8c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040b2:	2301      	movs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	613b      	str	r3, [r7, #16]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000d0c 	.word	0x20000d0c
 80040e0:	0800502c 	.word	0x0800502c
 80040e4:	08004221 	.word	0x08004221
 80040e8:	20000d10 	.word	0x20000d10

080040ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	623b      	str	r3, [r7, #32]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <xTimerGenericCommand+0x98>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02a      	beq.n	8004178 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b05      	cmp	r3, #5
 8004132:	dc18      	bgt.n	8004166 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004134:	f7ff feb2 	bl	8003e9c <xTaskGetSchedulerState>
 8004138:	4603      	mov	r3, r0
 800413a:	2b02      	cmp	r3, #2
 800413c:	d109      	bne.n	8004152 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <xTimerGenericCommand+0x98>)
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f107 0110 	add.w	r1, r7, #16
 8004146:	2300      	movs	r3, #0
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	f7fe fc5f 	bl	8002a0c <xQueueGenericSend>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24
 8004150:	e012      	b.n	8004178 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <xTimerGenericCommand+0x98>)
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	f107 0110 	add.w	r1, r7, #16
 800415a:	2300      	movs	r3, #0
 800415c:	2200      	movs	r2, #0
 800415e:	f7fe fc55 	bl	8002a0c <xQueueGenericSend>
 8004162:	6278      	str	r0, [r7, #36]	; 0x24
 8004164:	e008      	b.n	8004178 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <xTimerGenericCommand+0x98>)
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f107 0110 	add.w	r1, r7, #16
 800416e:	2300      	movs	r3, #0
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	f7fe fd49 	bl	8002c08 <xQueueGenericSendFromISR>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000d0c 	.word	0x20000d0c

08004188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <prvProcessExpiredTimer+0x94>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fb05 	bl	80027b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d022      	beq.n	80041fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	18d1      	adds	r1, r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f000 f8d1 	bl	8004368 <prvInsertTimerInActiveList>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01f      	beq.n	800420c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041cc:	2300      	movs	r3, #0
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2300      	movs	r3, #0
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	2100      	movs	r1, #0
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ff88 	bl	80040ec <xTimerGenericCommand>
 80041dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d113      	bne.n	800420c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	60fb      	str	r3, [r7, #12]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	6978      	ldr	r0, [r7, #20]
 8004212:	4798      	blx	r3
}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000d04 	.word	0x20000d04

08004220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004228:	f107 0308 	add.w	r3, r7, #8
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f857 	bl	80042e0 <prvGetNextExpireTime>
 8004232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4619      	mov	r1, r3
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f803 	bl	8004244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800423e:	f000 f8d5 	bl	80043ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004242:	e7f1      	b.n	8004228 <prvTimerTask+0x8>

08004244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800424e:	f7ff fa43 	bl	80036d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f866 	bl	8004328 <prvSampleTimeNow>
 800425c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d130      	bne.n	80042c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <prvProcessTimerOrBlockTask+0x3c>
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	429a      	cmp	r2, r3
 8004270:	d806      	bhi.n	8004280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004272:	f7ff fa3f 	bl	80036f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff85 	bl	8004188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800427e:	e024      	b.n	80042ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <prvProcessTimerOrBlockTask+0x90>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <prvProcessTimerOrBlockTask+0x50>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <prvProcessTimerOrBlockTask+0x52>
 8004294:	2300      	movs	r3, #0
 8004296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <prvProcessTimerOrBlockTask+0x94>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	f7fe ff65 	bl	8003174 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042aa:	f7ff fa23 	bl	80036f4 <xTaskResumeAll>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <prvProcessTimerOrBlockTask+0x98>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
}
 80042c4:	e001      	b.n	80042ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042c6:	f7ff fa15 	bl	80036f4 <xTaskResumeAll>
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000d08 	.word	0x20000d08
 80042d8:	20000d0c 	.word	0x20000d0c
 80042dc:	e000ed04 	.word	0xe000ed04

080042e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <prvGetNextExpireTime+0x44>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <prvGetNextExpireTime+0x16>
 80042f2:	2201      	movs	r2, #1
 80042f4:	e000      	b.n	80042f8 <prvGetNextExpireTime+0x18>
 80042f6:	2200      	movs	r2, #0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <prvGetNextExpireTime+0x44>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e001      	b.n	8004314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004314:	68fb      	ldr	r3, [r7, #12]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000d04 	.word	0x20000d04

08004328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004330:	f7ff fa7e 	bl	8003830 <xTaskGetTickCount>
 8004334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <prvSampleTimeNow+0x3c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d205      	bcs.n	800434c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004340:	f000 f936 	bl	80045b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e002      	b.n	8004352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004352:	4a04      	ldr	r2, [pc, #16]	; (8004364 <prvSampleTimeNow+0x3c>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000d14 	.word	0x20000d14

08004368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d812      	bhi.n	80043b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	d302      	bcc.n	80043a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e01b      	b.n	80043da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <prvInsertTimerInActiveList+0x7c>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f7fe f9c6 	bl	800273e <vListInsert>
 80043b2:	e012      	b.n	80043da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d206      	bcs.n	80043ca <prvInsertTimerInActiveList+0x62>
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e007      	b.n	80043da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <prvInsertTimerInActiveList+0x80>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fe f9b2 	bl	800273e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043da:	697b      	ldr	r3, [r7, #20]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000d08 	.word	0x20000d08
 80043e8:	20000d04 	.word	0x20000d04

080043ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043f2:	e0ca      	b.n	800458a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da18      	bge.n	800442c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	3304      	adds	r3, #4
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	61fb      	str	r3, [r7, #28]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004422:	6850      	ldr	r0, [r2, #4]
 8004424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	4611      	mov	r1, r2
 800442a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f2c0 80ab 	blt.w	800458a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe f9b3 	bl	80027b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800444a:	463b      	mov	r3, r7
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff6b 	bl	8004328 <prvSampleTimeNow>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b09      	cmp	r3, #9
 8004458:	f200 8096 	bhi.w	8004588 <prvProcessReceivedCommands+0x19c>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <prvProcessReceivedCommands+0x78>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	0800448d 	.word	0x0800448d
 8004468:	0800448d 	.word	0x0800448d
 800446c:	0800448d 	.word	0x0800448d
 8004470:	08004501 	.word	0x08004501
 8004474:	08004515 	.word	0x08004515
 8004478:	0800455f 	.word	0x0800455f
 800447c:	0800448d 	.word	0x0800448d
 8004480:	0800448d 	.word	0x0800448d
 8004484:	08004501 	.word	0x08004501
 8004488:	08004515 	.word	0x08004515
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	18d1      	adds	r1, r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ac:	f7ff ff5c 	bl	8004368 <prvInsertTimerInActiveList>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d069      	beq.n	800458a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d05e      	beq.n	800458a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	441a      	add	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	2100      	movs	r1, #0
 80044dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044de:	f7ff fe05 	bl	80040ec <xTimerGenericCommand>
 80044e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d14f      	bne.n	800458a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61bb      	str	r3, [r7, #24]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	b2da      	uxtb	r2, r3
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004512:	e03a      	b.n	800458a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	617b      	str	r3, [r7, #20]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	18d1      	adds	r1, r2, r3
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004558:	f7ff ff06 	bl	8004368 <prvInsertTimerInActiveList>
					break;
 800455c:	e015      	b.n	800458a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800456c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456e:	f000 fbdf 	bl	8004d30 <vPortFree>
 8004572:	e00a      	b.n	800458a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004586:	e000      	b.n	800458a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <prvProcessReceivedCommands+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1d39      	adds	r1, r7, #4
 8004590:	2200      	movs	r2, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fbd4 	bl	8002d40 <xQueueReceive>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	f47f af2a 	bne.w	80043f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	3730      	adds	r7, #48	; 0x30
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000d0c 	.word	0x20000d0c

080045b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045b6:	e048      	b.n	800464a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <prvSwitchTimerLists+0xc0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c2:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <prvSwitchTimerLists+0xc0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe f8ed 	bl	80027b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02e      	beq.n	800464a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d90e      	bls.n	800461c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <prvSwitchTimerLists+0xc0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fe f892 	bl	800273e <vListInsert>
 800461a:	e016      	b.n	800464a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800461c:	2300      	movs	r3, #0
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	2100      	movs	r1, #0
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff fd60 	bl	80040ec <xTimerGenericCommand>
 800462c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	603b      	str	r3, [r7, #0]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <prvSwitchTimerLists+0xc0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1b1      	bne.n	80045b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <prvSwitchTimerLists+0xc0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <prvSwitchTimerLists+0xc4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <prvSwitchTimerLists+0xc0>)
 8004660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004662:	4a04      	ldr	r2, [pc, #16]	; (8004674 <prvSwitchTimerLists+0xc4>)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000d04 	.word	0x20000d04
 8004674:	20000d08 	.word	0x20000d08

08004678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800467e:	f000 f969 	bl	8004954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d120      	bne.n	80046cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800468a:	4814      	ldr	r0, [pc, #80]	; (80046dc <prvCheckForValidListAndQueue+0x64>)
 800468c:	f7fe f806 	bl	800269c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004690:	4813      	ldr	r0, [pc, #76]	; (80046e0 <prvCheckForValidListAndQueue+0x68>)
 8004692:	f7fe f803 	bl	800269c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <prvCheckForValidListAndQueue+0x6c>)
 8004698:	4a10      	ldr	r2, [pc, #64]	; (80046dc <prvCheckForValidListAndQueue+0x64>)
 800469a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <prvCheckForValidListAndQueue+0x70>)
 800469e:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <prvCheckForValidListAndQueue+0x68>)
 80046a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046a2:	2300      	movs	r3, #0
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <prvCheckForValidListAndQueue+0x74>)
 80046a8:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <prvCheckForValidListAndQueue+0x78>)
 80046aa:	2110      	movs	r1, #16
 80046ac:	200a      	movs	r0, #10
 80046ae:	f7fe f911 	bl	80028d4 <xQueueGenericCreateStatic>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 80046b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046b8:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	490b      	ldr	r1, [pc, #44]	; (80046f4 <prvCheckForValidListAndQueue+0x7c>)
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fd2a 	bl	8003120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046cc:	f000 f972 	bl	80049b4 <vPortExitCritical>
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000d0c 	.word	0x20000d0c
 80046dc:	20000cdc 	.word	0x20000cdc
 80046e0:	20000cf0 	.word	0x20000cf0
 80046e4:	20000d04 	.word	0x20000d04
 80046e8:	20000d08 	.word	0x20000d08
 80046ec:	20000db8 	.word	0x20000db8
 80046f0:	20000d18 	.word	0x20000d18
 80046f4:	08005034 	.word	0x08005034

080046f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3b04      	subs	r3, #4
 8004708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3b04      	subs	r3, #4
 8004716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b04      	subs	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004728:	4a0c      	ldr	r2, [pc, #48]	; (800475c <pxPortInitialiseStack+0x64>)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3b14      	subs	r3, #20
 8004732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3b04      	subs	r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f06f 0202 	mvn.w	r2, #2
 8004746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3b20      	subs	r3, #32
 800474c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	08004761 	.word	0x08004761

08004760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <prvTaskExitError+0x54>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d00a      	beq.n	800478a <prvTaskExitError+0x2a>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	60fb      	str	r3, [r7, #12]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <prvTaskExitError+0x28>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60bb      	str	r3, [r7, #8]
}
 800479c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800479e:	bf00      	nop
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0fc      	beq.n	80047a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	2000000c 	.word	0x2000000c
	...

080047c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <pxCurrentTCBConst2>)
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	f380 8809 	msr	PSP, r0
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f380 8811 	msr	BASEPRI, r0
 80047da:	4770      	bx	lr
 80047dc:	f3af 8000 	nop.w

080047e0 <pxCurrentTCBConst2>:
 80047e0:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047e8:	4808      	ldr	r0, [pc, #32]	; (800480c <prvPortStartFirstTask+0x24>)
 80047ea:	6800      	ldr	r0, [r0, #0]
 80047ec:	6800      	ldr	r0, [r0, #0]
 80047ee:	f380 8808 	msr	MSP, r0
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f380 8814 	msr	CONTROL, r0
 80047fa:	b662      	cpsie	i
 80047fc:	b661      	cpsie	f
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	df00      	svc	0
 8004808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800480a:	bf00      	nop
 800480c:	e000ed08 	.word	0xe000ed08

08004810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004816:	4b46      	ldr	r3, [pc, #280]	; (8004930 <xPortStartScheduler+0x120>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a46      	ldr	r2, [pc, #280]	; (8004934 <xPortStartScheduler+0x124>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10a      	bne.n	8004836 <xPortStartScheduler+0x26>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	613b      	str	r3, [r7, #16]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004836:	4b3e      	ldr	r3, [pc, #248]	; (8004930 <xPortStartScheduler+0x120>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3f      	ldr	r2, [pc, #252]	; (8004938 <xPortStartScheduler+0x128>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10a      	bne.n	8004856 <xPortStartScheduler+0x46>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	60fb      	str	r3, [r7, #12]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004856:	4b39      	ldr	r3, [pc, #228]	; (800493c <xPortStartScheduler+0x12c>)
 8004858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	22ff      	movs	r2, #255	; 0xff
 8004866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <xPortStartScheduler+0x130>)
 800487c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800487e:	4b31      	ldr	r3, [pc, #196]	; (8004944 <xPortStartScheduler+0x134>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004884:	e009      	b.n	800489a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004886:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <xPortStartScheduler+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <xPortStartScheduler+0x134>)
 800488e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	b2db      	uxtb	r3, r3
 8004898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d0ef      	beq.n	8004886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048a6:	4b27      	ldr	r3, [pc, #156]	; (8004944 <xPortStartScheduler+0x134>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1c3 0307 	rsb	r3, r3, #7
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d00a      	beq.n	80048c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	60bb      	str	r3, [r7, #8]
}
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <xPortStartScheduler+0x134>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <xPortStartScheduler+0x134>)
 80048d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <xPortStartScheduler+0x134>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <xPortStartScheduler+0x134>)
 80048dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <xPortStartScheduler+0x138>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <xPortStartScheduler+0x138>)
 80048ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <xPortStartScheduler+0x138>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a14      	ldr	r2, [pc, #80]	; (8004948 <xPortStartScheduler+0x138>)
 80048f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048fe:	f000 f8dd 	bl	8004abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <xPortStartScheduler+0x13c>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004908:	f000 f8fc 	bl	8004b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <xPortStartScheduler+0x140>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <xPortStartScheduler+0x140>)
 8004912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004918:	f7ff ff66 	bl	80047e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800491c:	f7ff f852 	bl	80039c4 <vTaskSwitchContext>
	prvTaskExitError();
 8004920:	f7ff ff1e 	bl	8004760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	e000ed00 	.word	0xe000ed00
 8004934:	410fc271 	.word	0x410fc271
 8004938:	410fc270 	.word	0x410fc270
 800493c:	e000e400 	.word	0xe000e400
 8004940:	20000e08 	.word	0x20000e08
 8004944:	20000e0c 	.word	0x20000e0c
 8004948:	e000ed20 	.word	0xe000ed20
 800494c:	2000000c 	.word	0x2000000c
 8004950:	e000ef34 	.word	0xe000ef34

08004954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	607b      	str	r3, [r7, #4]
}
 800496c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <vPortEnterCritical+0x58>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	4a0d      	ldr	r2, [pc, #52]	; (80049ac <vPortEnterCritical+0x58>)
 8004976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <vPortEnterCritical+0x58>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10f      	bne.n	80049a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <vPortEnterCritical+0x5c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	603b      	str	r3, [r7, #0]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <vPortEnterCritical+0x4a>
	}
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	2000000c 	.word	0x2000000c
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <vPortExitCritical+0x50>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <vPortExitCritical+0x24>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <vPortExitCritical+0x50>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3b01      	subs	r3, #1
 80049de:	4a09      	ldr	r2, [pc, #36]	; (8004a04 <vPortExitCritical+0x50>)
 80049e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <vPortExitCritical+0x50>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <vPortExitCritical+0x42>
 80049ea:	2300      	movs	r3, #0
 80049ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f383 8811 	msr	BASEPRI, r3
}
 80049f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	2000000c 	.word	0x2000000c
	...

08004a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a10:	f3ef 8009 	mrs	r0, PSP
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <pxCurrentTCBConst>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	f01e 0f10 	tst.w	lr, #16
 8004a20:	bf08      	it	eq
 8004a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	6010      	str	r0, [r2, #0]
 8004a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a34:	f380 8811 	msr	BASEPRI, r0
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f7fe ffc0 	bl	80039c4 <vTaskSwitchContext>
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f380 8811 	msr	BASEPRI, r0
 8004a4c:	bc09      	pop	{r0, r3}
 8004a4e:	6819      	ldr	r1, [r3, #0]
 8004a50:	6808      	ldr	r0, [r1, #0]
 8004a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a56:	f01e 0f10 	tst.w	lr, #16
 8004a5a:	bf08      	it	eq
 8004a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a60:	f380 8809 	msr	PSP, r0
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	f3af 8000 	nop.w

08004a70 <pxCurrentTCBConst>:
 8004a70:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	607b      	str	r3, [r7, #4]
}
 8004a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a92:	f7fe fedd 	bl	8003850 <xTaskIncrementTick>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <xPortSysTickHandler+0x40>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f383 8811 	msr	BASEPRI, r3
}
 8004aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <vPortSetupTimerInterrupt+0x34>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <vPortSetupTimerInterrupt+0x38>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <vPortSetupTimerInterrupt+0x3c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <vPortSetupTimerInterrupt+0x40>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <vPortSetupTimerInterrupt+0x44>)
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ade:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <vPortSetupTimerInterrupt+0x34>)
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e000e010 	.word	0xe000e010
 8004af4:	e000e018 	.word	0xe000e018
 8004af8:	20000000 	.word	0x20000000
 8004afc:	10624dd3 	.word	0x10624dd3
 8004b00:	e000e014 	.word	0xe000e014

08004b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b14 <vPortEnableVFP+0x10>
 8004b08:	6801      	ldr	r1, [r0, #0]
 8004b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b0e:	6001      	str	r1, [r0, #0]
 8004b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b12:	bf00      	nop
 8004b14:	e000ed88 	.word	0xe000ed88

08004b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b1e:	f3ef 8305 	mrs	r3, IPSR
 8004b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d914      	bls.n	8004b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <vPortValidateInterruptPriority+0x70>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <vPortValidateInterruptPriority+0x74>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	7afa      	ldrb	r2, [r7, #11]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d20a      	bcs.n	8004b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	607b      	str	r3, [r7, #4]
}
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <vPortValidateInterruptPriority+0x78>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b5c:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <vPortValidateInterruptPriority+0x7c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d90a      	bls.n	8004b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	603b      	str	r3, [r7, #0]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <vPortValidateInterruptPriority+0x60>
	}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000e3f0 	.word	0xe000e3f0
 8004b8c:	20000e08 	.word	0x20000e08
 8004b90:	e000ed0c 	.word	0xe000ed0c
 8004b94:	20000e0c 	.word	0x20000e0c

08004b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ba4:	f7fe fd98 	bl	80036d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ba8:	4b5b      	ldr	r3, [pc, #364]	; (8004d18 <pvPortMalloc+0x180>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bb0:	f000 f920 	bl	8004df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bb4:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <pvPortMalloc+0x184>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 8093 	bne.w	8004ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01d      	beq.n	8004c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004bc8:	2208      	movs	r2, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d014      	beq.n	8004c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f023 0307 	bic.w	r3, r3, #7
 8004be0:	3308      	adds	r3, #8
 8004be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <pvPortMalloc+0x6c>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	617b      	str	r3, [r7, #20]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d06e      	beq.n	8004ce8 <pvPortMalloc+0x150>
 8004c0a:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <pvPortMalloc+0x188>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d869      	bhi.n	8004ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c14:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <pvPortMalloc+0x18c>)
 8004c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <pvPortMalloc+0x18c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c1e:	e004      	b.n	8004c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d903      	bls.n	8004c3c <pvPortMalloc+0xa4>
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f1      	bne.n	8004c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c3c:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <pvPortMalloc+0x180>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d050      	beq.n	8004ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	4413      	add	r3, r2
 8004c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	1ad2      	subs	r2, r2, r3
 8004c60:	2308      	movs	r3, #8
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d91f      	bls.n	8004ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <pvPortMalloc+0xf8>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	613b      	str	r3, [r7, #16]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ca2:	69b8      	ldr	r0, [r7, #24]
 8004ca4:	f000 f908 	bl	8004eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <pvPortMalloc+0x188>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <pvPortMalloc+0x188>)
 8004cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <pvPortMalloc+0x188>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <pvPortMalloc+0x190>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d203      	bcs.n	8004cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cc2:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <pvPortMalloc+0x188>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <pvPortMalloc+0x190>)
 8004cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <pvPortMalloc+0x184>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <pvPortMalloc+0x194>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <pvPortMalloc+0x194>)
 8004ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ce8:	f7fe fd04 	bl	80036f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <pvPortMalloc+0x174>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60fb      	str	r3, [r7, #12]
}
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <pvPortMalloc+0x172>
	return pvReturn;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3728      	adds	r7, #40	; 0x28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20004a18 	.word	0x20004a18
 8004d1c:	20004a2c 	.word	0x20004a2c
 8004d20:	20004a1c 	.word	0x20004a1c
 8004d24:	20004a10 	.word	0x20004a10
 8004d28:	20004a20 	.word	0x20004a20
 8004d2c:	20004a24 	.word	0x20004a24

08004d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04d      	beq.n	8004dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d42:	2308      	movs	r3, #8
 8004d44:	425b      	negs	r3, r3
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <vPortFree+0xb8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <vPortFree+0x44>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60fb      	str	r3, [r7, #12]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <vPortFree+0x62>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60bb      	str	r3, [r7, #8]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <vPortFree+0xb8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11a      	bne.n	8004dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <vPortFree+0xb8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	401a      	ands	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004db8:	f7fe fc8e 	bl	80036d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <vPortFree+0xbc>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <vPortFree+0xbc>)
 8004dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dca:	6938      	ldr	r0, [r7, #16]
 8004dcc:	f000 f874 	bl	8004eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <vPortFree+0xc0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a06      	ldr	r2, [pc, #24]	; (8004df0 <vPortFree+0xc0>)
 8004dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dda:	f7fe fc8b 	bl	80036f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20004a2c 	.word	0x20004a2c
 8004dec:	20004a1c 	.word	0x20004a1c
 8004df0:	20004a28 	.word	0x20004a28

08004df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e00:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <prvHeapInit+0xac>)
 8004e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3307      	adds	r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0307 	bic.w	r3, r3, #7
 8004e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <prvHeapInit+0xac>)
 8004e24:	4413      	add	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <prvHeapInit+0xb0>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e32:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <prvHeapInit+0xb0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e40:	2208      	movs	r2, #8
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0307 	bic.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e56:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <prvHeapInit+0xb4>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <prvHeapInit+0xb8>)
 8004e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <prvHeapInit+0xbc>)
 8004e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <prvHeapInit+0xc0>)
 8004e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e92:	601a      	str	r2, [r3, #0]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	20000e10 	.word	0x20000e10
 8004ea4:	20004a10 	.word	0x20004a10
 8004ea8:	20004a18 	.word	0x20004a18
 8004eac:	20004a20 	.word	0x20004a20
 8004eb0:	20004a1c 	.word	0x20004a1c
 8004eb4:	20004a2c 	.word	0x20004a2c

08004eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ec0:	4b28      	ldr	r3, [pc, #160]	; (8004f64 <prvInsertBlockIntoFreeList+0xac>)
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e002      	b.n	8004ecc <prvInsertBlockIntoFreeList+0x14>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d8f7      	bhi.n	8004ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d108      	bne.n	8004efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	441a      	add	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	441a      	add	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d118      	bne.n	8004f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <prvInsertBlockIntoFreeList+0xb0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d00d      	beq.n	8004f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e008      	b.n	8004f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <prvInsertBlockIntoFreeList+0xb0>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e003      	b.n	8004f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d002      	beq.n	8004f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20004a10 	.word	0x20004a10
 8004f68:	20004a18 	.word	0x20004a18

08004f6c <memset>:
 8004f6c:	4402      	add	r2, r0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d100      	bne.n	8004f76 <memset+0xa>
 8004f74:	4770      	bx	lr
 8004f76:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7a:	e7f9      	b.n	8004f70 <memset+0x4>

08004f7c <__libc_init_array>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4d0d      	ldr	r5, [pc, #52]	; (8004fb4 <__libc_init_array+0x38>)
 8004f80:	4c0d      	ldr	r4, [pc, #52]	; (8004fb8 <__libc_init_array+0x3c>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	2600      	movs	r6, #0
 8004f88:	42a6      	cmp	r6, r4
 8004f8a:	d109      	bne.n	8004fa0 <__libc_init_array+0x24>
 8004f8c:	4d0b      	ldr	r5, [pc, #44]	; (8004fbc <__libc_init_array+0x40>)
 8004f8e:	4c0c      	ldr	r4, [pc, #48]	; (8004fc0 <__libc_init_array+0x44>)
 8004f90:	f000 f826 	bl	8004fe0 <_init>
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	2600      	movs	r6, #0
 8004f9a:	42a6      	cmp	r6, r4
 8004f9c:	d105      	bne.n	8004faa <__libc_init_array+0x2e>
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa4:	4798      	blx	r3
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7ee      	b.n	8004f88 <__libc_init_array+0xc>
 8004faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fae:	4798      	blx	r3
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	e7f2      	b.n	8004f9a <__libc_init_array+0x1e>
 8004fb4:	0800505c 	.word	0x0800505c
 8004fb8:	0800505c 	.word	0x0800505c
 8004fbc:	0800505c 	.word	0x0800505c
 8004fc0:	08005060 	.word	0x08005060

08004fc4 <memcpy>:
 8004fc4:	440a      	add	r2, r1
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fcc:	d100      	bne.n	8004fd0 <memcpy+0xc>
 8004fce:	4770      	bx	lr
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	d1f9      	bne.n	8004fd2 <memcpy+0xe>
 8004fde:	bd10      	pop	{r4, pc}

08004fe0 <_init>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	bf00      	nop
 8004fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe6:	bc08      	pop	{r3}
 8004fe8:	469e      	mov	lr, r3
 8004fea:	4770      	bx	lr

08004fec <_fini>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	bf00      	nop
 8004ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff2:	bc08      	pop	{r3}
 8004ff4:	469e      	mov	lr, r3
 8004ff6:	4770      	bx	lr
