
fr_39_Cmsis-Rtos_ThreadTerminate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a28  20000010  080052f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a38  080052f4  00024a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015feb  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f5  00000000  00000000  0003606e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00039168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f55  00000000  00000000  0003a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a2a  00000000  00000000  0003b46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001564e  00000000  00000000  0003ee97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098098  00000000  00000000  000544e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005350  00000000  00000000  000ec580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f18d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005260 	.word	0x08005260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005260 	.word	0x08005260

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
uint32_t execution_monitor=0;
uint32_t resume_monitor=0;
bool isKilled = false;

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0

  HAL_Init();
 80004e2:	f000 fb17 	bl	8000b14 <HAL_Init>

  SystemClock_Config();
 80004e6:	f000 f919 	bl	800071c <SystemClock_Config>


  MX_GPIO_Init();
 80004ea:	f000 f99f 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f973 	bl	80007d8 <MX_USART2_UART_Init>

  // Initial Kernal
  osKernelInitialize();
 80004f2:	f001 ffc7 	bl	8002484 <osKernelInitialize>

  // Create Threads
  osThreadAttr_t greenThreadAtrribs = {
 80004f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004fa:	2224      	movs	r2, #36	; 0x24
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fe74 	bl	80051ec <memset>
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <main+0xe0>)
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000510:	2318      	movs	r3, #24
 8000512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "GreenTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAtrribs);
 8000516:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051a:	461a      	mov	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <main+0xe4>)
 8000520:	f001 fffa 	bl	8002518 <osThreadNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <main+0xe8>)
 8000528:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAtrribs = {
 800052a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800052e:	2224      	movs	r2, #36	; 0x24
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fe5a 	bl	80051ec <memset>
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <main+0xec>)
 800053a:	64bb      	str	r3, [r7, #72]	; 0x48
 800053c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000542:	2318      	movs	r3, #24
 8000544:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "RedTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAtrribs);
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0xf0>)
 8000550:	f001 ffe2 	bl	8002518 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <main+0xf4>)
 8000558:	6013      	str	r3, [r2, #0]

  osThreadAttr_t oragneThreadAtrribs = {
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	2224      	movs	r2, #36	; 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fe42 	bl	80051ec <memset>
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xf8>)
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
 800056c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
 8000572:	2318      	movs	r3, #24
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "OrangeTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &oragneThreadAtrribs);
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	461a      	mov	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	4816      	ldr	r0, [pc, #88]	; (80005d8 <main+0xfc>)
 8000580:	f001 ffca 	bl	8002518 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0x100>)
 8000588:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAtrribs = {
 800058a:	463b      	mov	r3, r7
 800058c:	2224      	movs	r2, #36	; 0x24
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fe2b 	bl	80051ec <memset>
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0x104>)
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	2318      	movs	r3, #24
 80005a2:	61bb      	str	r3, [r7, #24]
		  .name = "BlueTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAtrribs);
 80005a4:	463b      	mov	r3, r7
 80005a6:	461a      	mov	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x108>)
 80005ac:	f001 ffb4 	bl	8002518 <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <main+0x10c>)
 80005b4:	6013      	str	r3, [r2, #0]


  // Start Kernal
  osKernelStart();
 80005b6:	f001 ff89 	bl	80024cc <osKernelStart>

  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0xde>
 80005bc:	08005278 	.word	0x08005278
 80005c0:	0800064d 	.word	0x0800064d
 80005c4:	20000084 	.word	0x20000084
 80005c8:	08005284 	.word	0x08005284
 80005cc:	080005ed 	.word	0x080005ed
 80005d0:	20000080 	.word	0x20000080
 80005d4:	0800528c 	.word	0x0800528c
 80005d8:	0800061d 	.word	0x0800061d
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	08005298 	.word	0x08005298
 80005e4:	080006b9 	.word	0x080006b9
 80005e8:	20000088 	.word	0x20000088

080005ec <vRedLedControllerTask>:

}



void vRedLedControllerTask(void *pvParameters) {
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Red_TaskProfiler++;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <vRedLedControllerTask+0x2c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <vRedLedControllerTask+0x2c>)
 80005fc:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e002      	b.n	800060a <vRedLedControllerTask+0x1e>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000610:	4293      	cmp	r3, r2
 8000612:	ddf7      	ble.n	8000604 <vRedLedControllerTask+0x18>
		Red_TaskProfiler++;
 8000614:	e7ee      	b.n	80005f4 <vRedLedControllerTask+0x8>
 8000616:	bf00      	nop
 8000618:	20000074 	.word	0x20000074

0800061c <vOrangeLedControllerTask>:


	}
}

void vOrangeLedControllerTask(void *pvParameters) {
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Orange_TaskProfiler++;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <vOrangeLedControllerTask+0x2c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <vOrangeLedControllerTask+0x2c>)
 800062c:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e002      	b.n	800063a <vOrangeLedControllerTask+0x1e>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3301      	adds	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000640:	4293      	cmp	r3, r2
 8000642:	ddf7      	ble.n	8000634 <vOrangeLedControllerTask+0x18>
		Orange_TaskProfiler++;
 8000644:	e7ee      	b.n	8000624 <vOrangeLedControllerTask+0x8>
 8000646:	bf00      	nop
 8000648:	20000070 	.word	0x20000070

0800064c <vGreenLedControllerTask>:
	}
}

void vGreenLedControllerTask(void *pvParameters) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Green_TaskProfiler++;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <vGreenLedControllerTask+0x5c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <vGreenLedControllerTask+0x5c>)
 800065c:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e002      	b.n	800066a <vGreenLedControllerTask+0x1e>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000670:	4293      	cmp	r3, r2
 8000672:	ddf7      	ble.n	8000664 <vGreenLedControllerTask+0x18>
		if(isKilled)
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <vGreenLedControllerTask+0x60>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0eb      	beq.n	8000654 <vGreenLedControllerTask+0x8>
		{
			resume_monitor++;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <vGreenLedControllerTask+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <vGreenLedControllerTask+0x64>)
 8000684:	6013      	str	r3, [r2, #0]

			if(resume_monitor==400)
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <vGreenLedControllerTask+0x64>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800068e:	d1e1      	bne.n	8000654 <vGreenLedControllerTask+0x8>
			{
				osThreadResume(red_id);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <vGreenLedControllerTask+0x68>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f001 ffd1 	bl	800263c <osThreadResume>
				isKilled=false;
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <vGreenLedControllerTask+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
				resume_monitor=0;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <vGreenLedControllerTask+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
		Green_TaskProfiler++;
 80006a6:	e7d5      	b.n	8000654 <vGreenLedControllerTask+0x8>
 80006a8:	20000078 	.word	0x20000078
 80006ac:	20000098 	.word	0x20000098
 80006b0:	20000094 	.word	0x20000094
 80006b4:	20000080 	.word	0x20000080

080006b8 <vBlueLedControllerTask>:
			}
		}
	}
}

void vBlueLedControllerTask(void *pvParameters) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	int i;
	while(1) {
		Blue_TaskProfiler++;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <vBlueLedControllerTask+0x54>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <vBlueLedControllerTask+0x54>)
 80006c8:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 7000; i++) {}
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e002      	b.n	80006d6 <vBlueLedControllerTask+0x1e>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006dc:	4293      	cmp	r3, r2
 80006de:	ddf7      	ble.n	80006d0 <vBlueLedControllerTask+0x18>
		execution_monitor++;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <vBlueLedControllerTask+0x58>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <vBlueLedControllerTask+0x58>)
 80006e8:	6013      	str	r3, [r2, #0]

			if(execution_monitor == 49)
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <vBlueLedControllerTask+0x58>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b31      	cmp	r3, #49	; 0x31
 80006f0:	d1e6      	bne.n	80006c0 <vBlueLedControllerTask+0x8>
			{
				osThreadTerminate(red_id);
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <vBlueLedControllerTask+0x5c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 ffc1 	bl	800267e <osThreadTerminate>
				isKilled=true;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <vBlueLedControllerTask+0x60>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
				execution_monitor=0;
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <vBlueLedControllerTask+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
		Blue_TaskProfiler++;
 8000708:	e7da      	b.n	80006c0 <vBlueLedControllerTask+0x8>
 800070a:	bf00      	nop
 800070c:	2000007c 	.word	0x2000007c
 8000710:	20000090 	.word	0x20000090
 8000714:	20000080 	.word	0x20000080
 8000718:	20000098 	.word	0x20000098

0800071c <SystemClock_Config>:
	return ch;
}


void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 fd5e 	bl	80051ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <SystemClock_Config+0xb4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xb4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xb4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <SystemClock_Config+0xb8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <SystemClock_Config+0xb8>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <SystemClock_Config+0xb8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fc69 	bl	8001064 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000798:	f000 f874 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fecc 	bl	8001554 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007c2:	f000 f85f 	bl	8000884 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f001 fb32 	bl	8001e78 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f833 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000002c 	.word	0x2000002c
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_GPIO_Init+0x30>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <MX_GPIO_Init+0x30>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_GPIO_Init+0x30>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000872:	f000 f971 	bl	8000b58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010000 	.word	0x40010000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_MspInit+0x54>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x54>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_MspInit+0x54>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_MspInit+0x54>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 fa17 	bl	8000d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12b      	bne.n	8000962 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0x8c>)
 800095e:	f000 f9fd 	bl	8000d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <HAL_InitTick+0xd0>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <HAL_InitTick+0xd0>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6453      	str	r3, [r2, #68]	; 0x44
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <HAL_InitTick+0xd0>)
 800099a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a4:	f107 020c 	add.w	r2, r7, #12
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 ffb0 	bl	8001914 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009b4:	f000 ff9a 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 80009b8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <HAL_InitTick+0xd4>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9b      	lsrs	r3, r3, #18
 80009c4:	3b01      	subs	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <HAL_InitTick+0xd8>)
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_InitTick+0xdc>)
 80009cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_InitTick+0xd8>)
 80009d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_InitTick+0xd8>)
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_InitTick+0xd8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_InitTick+0xd8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_InitTick+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <HAL_InitTick+0xd8>)
 80009f0:	f000 ffc2 	bl	8001978 <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d11b      	bne.n	8000a3a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <HAL_InitTick+0xd8>)
 8000a04:	f001 f812 	bl	8001a2c <HAL_TIM_Base_Start_IT>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d111      	bne.n	8000a3a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a16:	2019      	movs	r0, #25
 8000a18:	f000 f992 	bl	8000d40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d808      	bhi.n	8000a34 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a22:	2200      	movs	r2, #0
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	2019      	movs	r0, #25
 8000a28:	f000 f96e 	bl	8000d08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_InitTick+0xe0>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e002      	b.n	8000a3a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	431bde83 	.word	0x431bde83
 8000a50:	2000009c 	.word	0x2000009c
 8000a54:	40010000 	.word	0x40010000
 8000a58:	20000004 	.word	0x20000004

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a8e:	f001 f82f 	bl	8001af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000009c 	.word	0x2000009c

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ffd7 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f004 fb85 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fcf3 	bl	80004dc <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b04:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8000b08:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b0c:	20004a38 	.word	0x20004a38

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_Init+0x40>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_Init+0x40>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x40>)
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f8d8 	bl	8000cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f7ff ff18 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fea2 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023c00 	.word	0x40023c00

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	200000e4 	.word	0x200000e4

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200000e4 	.word	0x200000e4

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0b      	blt.n	8000c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <__NVIC_EnableIRQ+0x38>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ff4c 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1a:	f7ff ff61 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	6978      	ldr	r0, [r7, #20]
 8000d26:	f7ff ffb1 	bl	8000c8c <NVIC_EncodePriority>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff80 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff54 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e159      	b.n	800102c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8148 	bne.w	8001026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d130      	bne.n	8000e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	f003 0201 	and.w	r2, r3, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d017      	beq.n	8000e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a2 	beq.w	8001026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a56      	ldr	r2, [pc, #344]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b54      	ldr	r3, [pc, #336]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efe:	4a52      	ldr	r2, [pc, #328]	; (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a49      	ldr	r2, [pc, #292]	; (800104c <HAL_GPIO_Init+0x2f0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x202>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a48      	ldr	r2, [pc, #288]	; (8001050 <HAL_GPIO_Init+0x2f4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1fe>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a47      	ldr	r2, [pc, #284]	; (8001054 <HAL_GPIO_Init+0x2f8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a46      	ldr	r2, [pc, #280]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1f6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a45      	ldr	r2, [pc, #276]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1f2>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f70:	4935      	ldr	r1, [pc, #212]	; (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fcc:	4a24      	ldr	r2, [pc, #144]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_GPIO_Init+0x304>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	f67f aea2 	bls.w	8000d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40013800 	.word	0x40013800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400
 8001054:	40020800 	.word	0x40020800
 8001058:	40020c00 	.word	0x40020c00
 800105c:	40021000 	.word	0x40021000
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e267      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d075      	beq.n	800116e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001082:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b04      	cmp	r3, #4
 800108c:	d00c      	beq.n	80010a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108e:	4b85      	ldr	r3, [pc, #532]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001096:	2b08      	cmp	r3, #8
 8001098:	d112      	bne.n	80010c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a6:	d10b      	bne.n	80010c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4b7e      	ldr	r3, [pc, #504]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d05b      	beq.n	800116c <HAL_RCC_OscConfig+0x108>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d157      	bne.n	800116c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e242      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d106      	bne.n	80010d8 <HAL_RCC_OscConfig+0x74>
 80010ca:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a75      	ldr	r2, [pc, #468]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e01d      	b.n	8001114 <HAL_RCC_OscConfig+0xb0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x98>
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a6f      	ldr	r2, [pc, #444]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6c      	ldr	r2, [pc, #432]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e00b      	b.n	8001114 <HAL_RCC_OscConfig+0xb0>
 80010fc:	4b69      	ldr	r3, [pc, #420]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a68      	ldr	r2, [pc, #416]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a65      	ldr	r2, [pc, #404]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d013      	beq.n	8001144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fd30 	bl	8000b80 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fd2c 	bl	8000b80 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e207      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0xc0>
 8001142:	e014      	b.n	800116e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fd1c 	bl	8000b80 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fd18 	bl	8000b80 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e1f3      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0xe8>
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d063      	beq.n	8001242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118e:	2b08      	cmp	r3, #8
 8001190:	d11c      	bne.n	80011cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d116      	bne.n	80011cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_RCC_OscConfig+0x152>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e1c7      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4937      	ldr	r1, [pc, #220]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e03a      	b.n	8001242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d020      	beq.n	8001216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <HAL_RCC_OscConfig+0x244>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011da:	f7ff fcd1 	bl	8000b80 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fccd 	bl	8000b80 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e1a8      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4925      	ldr	r1, [pc, #148]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e015      	b.n	8001242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_RCC_OscConfig+0x244>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fcb0 	bl	8000b80 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fcac 	bl	8000b80 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e187      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d036      	beq.n	80012bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d016      	beq.n	8001284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_RCC_OscConfig+0x248>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fc90 	bl	8000b80 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fc8c 	bl	8000b80 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e167      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_OscConfig+0x240>)
 8001278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x200>
 8001282:	e01b      	b.n	80012bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_RCC_OscConfig+0x248>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fc79 	bl	8000b80 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	e00e      	b.n	80012b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fc75 	bl	8000b80 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d907      	bls.n	80012b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e150      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
 80012a4:	40023800 	.word	0x40023800
 80012a8:	42470000 	.word	0x42470000
 80012ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ea      	bne.n	8001292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8097 	beq.w	80013f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ce:	4b81      	ldr	r3, [pc, #516]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10f      	bne.n	80012fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b7d      	ldr	r3, [pc, #500]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a7c      	ldr	r2, [pc, #496]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b7a      	ldr	r3, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	4b77      	ldr	r3, [pc, #476]	; (80014d8 <HAL_RCC_OscConfig+0x474>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d118      	bne.n	8001338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001306:	4b74      	ldr	r3, [pc, #464]	; (80014d8 <HAL_RCC_OscConfig+0x474>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a73      	ldr	r2, [pc, #460]	; (80014d8 <HAL_RCC_OscConfig+0x474>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001312:	f7ff fc35 	bl	8000b80 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff fc31 	bl	8000b80 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e10c      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x474>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x2ea>
 8001340:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6713      	str	r3, [r2, #112]	; 0x70
 800134c:	e01c      	b.n	8001388 <HAL_RCC_OscConfig+0x324>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b05      	cmp	r3, #5
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x30c>
 8001356:	4b5f      	ldr	r3, [pc, #380]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	4a5e      	ldr	r2, [pc, #376]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6713      	str	r3, [r2, #112]	; 0x70
 8001362:	4b5c      	ldr	r3, [pc, #368]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a5b      	ldr	r2, [pc, #364]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	e00b      	b.n	8001388 <HAL_RCC_OscConfig+0x324>
 8001370:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a57      	ldr	r2, [pc, #348]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
 800137c:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a54      	ldr	r2, [pc, #336]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001382:	f023 0304 	bic.w	r3, r3, #4
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d015      	beq.n	80013bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fbf6 	bl	8000b80 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fbf2 	bl	8000b80 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0cb      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0ee      	beq.n	8001398 <HAL_RCC_OscConfig+0x334>
 80013ba:	e014      	b.n	80013e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013bc:	f7ff fbe0 	bl	8000b80 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c2:	e00a      	b.n	80013da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c4:	f7ff fbdc 	bl	8000b80 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0b5      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013da:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ee      	bne.n	80013c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a38      	ldr	r2, [pc, #224]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80013f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a1 	beq.w	8001544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d05c      	beq.n	80014c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d141      	bne.n	800149a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_RCC_OscConfig+0x478>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fbb0 	bl	8000b80 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff fbac 	bl	8000b80 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e087      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69da      	ldr	r2, [r3, #28]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	019b      	lsls	r3, r3, #6
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	3b01      	subs	r3, #1
 800145c:	041b      	lsls	r3, r3, #16
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	491b      	ldr	r1, [pc, #108]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x478>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb85 	bl	8000b80 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb81 	bl	8000b80 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e05c      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x416>
 8001498:	e054      	b.n	8001544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_RCC_OscConfig+0x478>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb6e 	bl	8000b80 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fb6a 	bl	8000b80 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e045      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x444>
 80014c6:	e03d      	b.n	8001544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e038      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d028      	beq.n	8001540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d121      	bne.n	8001540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d11a      	bne.n	8001540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001510:	4013      	ands	r3, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001518:	4293      	cmp	r3, r2
 800151a:	d111      	bne.n	8001540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	085b      	lsrs	r3, r3, #1
 8001528:	3b01      	subs	r3, #1
 800152a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0cc      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b68      	ldr	r3, [pc, #416]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d90c      	bls.n	8001590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d044      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d119      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d003      	beq.n	8001612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	2b03      	cmp	r3, #3
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e067      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 0203 	bic.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4934      	ldr	r1, [pc, #208]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7ff fa9c 	bl	8000b80 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff fa98 	bl	8000b80 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d20c      	bcs.n	800169c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f93c 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00
 8001710:	40023800 	.word	0x40023800
 8001714:	080052bc 	.word	0x080052bc
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001724:	b090      	sub	sp, #64	; 0x40
 8001726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
 800172c:	2300      	movs	r3, #0
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d00d      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x40>
 8001744:	2b08      	cmp	r3, #8
 8001746:	f200 80a1 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x16c>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x34>
 800174e:	2b04      	cmp	r3, #4
 8001750:	d003      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x3a>
 8001752:	e09b      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001756:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001758:	e09b      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175a:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800175e:	e098      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001760:	4b4f      	ldr	r3, [pc, #316]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176a:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d028      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001776:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	2200      	movs	r2, #0
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	627a      	str	r2, [r7, #36]	; 0x24
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001788:	2100      	movs	r1, #0
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800178c:	fb03 f201 	mul.w	r2, r3, r1
 8001790:	2300      	movs	r3, #0
 8001792:	fb00 f303 	mul.w	r3, r0, r3
 8001796:	4413      	add	r3, r2
 8001798:	4a43      	ldr	r2, [pc, #268]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800179a:	fba0 1202 	umull	r1, r2, r0, r2
 800179e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017a0:	460a      	mov	r2, r1
 80017a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80017a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a6:	4413      	add	r3, r2
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ac:	2200      	movs	r2, #0
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	61fa      	str	r2, [r7, #28]
 80017b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017ba:	f7fe fd11 	bl	80001e0 <__aeabi_uldivmod>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4613      	mov	r3, r2
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c6:	e053      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	2200      	movs	r2, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	617a      	str	r2, [r7, #20]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017da:	f04f 0b00 	mov.w	fp, #0
 80017de:	4652      	mov	r2, sl
 80017e0:	465b      	mov	r3, fp
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	0159      	lsls	r1, r3, #5
 80017ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f0:	0150      	lsls	r0, r2, #5
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ebb2 080a 	subs.w	r8, r2, sl
 80017fa:	eb63 090b 	sbc.w	r9, r3, fp
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800180a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800180e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001812:	ebb2 0408 	subs.w	r4, r2, r8
 8001816:	eb63 0509 	sbc.w	r5, r3, r9
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	00eb      	lsls	r3, r5, #3
 8001824:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001828:	00e2      	lsls	r2, r4, #3
 800182a:	4614      	mov	r4, r2
 800182c:	461d      	mov	r5, r3
 800182e:	eb14 030a 	adds.w	r3, r4, sl
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	eb45 030b 	adc.w	r3, r5, fp
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001846:	4629      	mov	r1, r5
 8001848:	028b      	lsls	r3, r1, #10
 800184a:	4621      	mov	r1, r4
 800184c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001850:	4621      	mov	r1, r4
 8001852:	028a      	lsls	r2, r1, #10
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	2200      	movs	r2, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	60fa      	str	r2, [r7, #12]
 8001860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001864:	f7fe fcbc 	bl	80001e0 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	3301      	adds	r3, #1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001894:	4618      	mov	r0, r3
 8001896:	3740      	adds	r7, #64	; 0x40
 8001898:	46bd      	mov	sp, r7
 800189a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	017d7840 	.word	0x017d7840

080018ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff0 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0a9b      	lsrs	r3, r3, #10
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	080052cc 	.word	0x080052cc

080018ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f0:	f7ff ffdc 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0b5b      	lsrs	r3, r3, #13
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	080052cc 	.word	0x080052cc

08001914 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	220f      	movs	r2, #15
 8001922:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_RCC_GetClockConfig+0x60>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0207 	and.w	r2, r3, #7
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e041      	b.n	8001a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f839 	bl	8001a16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 f9ca 	bl	8001d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d001      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e044      	b.n	8001ace <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_TIM_Base_Start_IT+0xb0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d018      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x6c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6e:	d013      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x6c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00e      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x6c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x6c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x6c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_TIM_Base_Start_IT+0xc0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d010      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aba:	e007      	b.n	8001acc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40000800 	.word	0x40000800
 8001ae8:	40000c00 	.word	0x40000c00
 8001aec:	40014000 	.word	0x40014000

08001af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0202 	mvn.w	r2, #2
 8001b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8ee 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8e0 	bl	8001d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8f1 	bl	8001d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0204 	mvn.w	r2, #4
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8c4 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f8b6 	bl	8001d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8c7 	bl	8001d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d122      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d11b      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0208 	mvn.w	r2, #8
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f89a 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f88c 	bl	8001d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f89d 	bl	8001d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0210 	mvn.w	r2, #16
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f870 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f862 	bl	8001d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f873 	bl	8001d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10e      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0201 	mvn.w	r2, #1
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe fdf6 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	2b80      	cmp	r3, #128	; 0x80
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8c:	2b80      	cmp	r3, #128	; 0x80
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8e2 	bl	8001e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	2b40      	cmp	r3, #64	; 0x40
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb8:	2b40      	cmp	r3, #64	; 0x40
 8001cba:	d107      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f838 	bl	8001d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d107      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0220 	mvn.w	r2, #32
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8ac 	bl	8001e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a34      	ldr	r2, [pc, #208]	; (8001e34 <TIM_Base_SetConfig+0xe4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00f      	beq.n	8001d88 <TIM_Base_SetConfig+0x38>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6e:	d00b      	beq.n	8001d88 <TIM_Base_SetConfig+0x38>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <TIM_Base_SetConfig+0xe8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <TIM_Base_SetConfig+0x38>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a30      	ldr	r2, [pc, #192]	; (8001e3c <TIM_Base_SetConfig+0xec>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <TIM_Base_SetConfig+0x38>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <TIM_Base_SetConfig+0xf0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d108      	bne.n	8001d9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <TIM_Base_SetConfig+0xe4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01b      	beq.n	8001dda <TIM_Base_SetConfig+0x8a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d017      	beq.n	8001dda <TIM_Base_SetConfig+0x8a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <TIM_Base_SetConfig+0xe8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <TIM_Base_SetConfig+0x8a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <TIM_Base_SetConfig+0xec>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00f      	beq.n	8001dda <TIM_Base_SetConfig+0x8a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <TIM_Base_SetConfig+0xf0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00b      	beq.n	8001dda <TIM_Base_SetConfig+0x8a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <TIM_Base_SetConfig+0xf4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <TIM_Base_SetConfig+0x8a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <TIM_Base_SetConfig+0xf8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d003      	beq.n	8001dda <TIM_Base_SetConfig+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <TIM_Base_SetConfig+0xfc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d108      	bne.n	8001dec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <TIM_Base_SetConfig+0xe4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d103      	bne.n	8001e20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	615a      	str	r2, [r3, #20]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40000800 	.word	0x40000800
 8001e40:	40000c00 	.word	0x40000c00
 8001e44:	40014000 	.word	0x40014000
 8001e48:	40014400 	.word	0x40014400
 8001e4c:	40014800 	.word	0x40014800

08001e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e03f      	b.n	8001f0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fd22 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f829 	bl	8001f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f18:	b0c0      	sub	sp, #256	; 0x100
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	ea40 0301 	orr.w	r3, r0, r1
 8001f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f6c:	f021 010c 	bic.w	r1, r1, #12
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8e:	6999      	ldr	r1, [r3, #24]
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	ea40 0301 	orr.w	r3, r0, r1
 8001f9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <UART_SetConfig+0x2cc>)
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d005      	beq.n	8001fb4 <UART_SetConfig+0xa0>
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b8d      	ldr	r3, [pc, #564]	; (80021e4 <UART_SetConfig+0x2d0>)
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d104      	bne.n	8001fbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fb4:	f7ff fc9a 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 8001fb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fbc:	e003      	b.n	8001fc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fbe:	f7ff fc81 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8001fc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd0:	f040 810c 	bne.w	80021ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fe2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	462b      	mov	r3, r5
 8001fea:	1891      	adds	r1, r2, r2
 8001fec:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fee:	415b      	adcs	r3, r3
 8001ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	eb12 0801 	adds.w	r8, r2, r1
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	eb43 0901 	adc.w	r9, r3, r1
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800200e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002016:	4690      	mov	r8, r2
 8002018:	4699      	mov	r9, r3
 800201a:	4623      	mov	r3, r4
 800201c:	eb18 0303 	adds.w	r3, r8, r3
 8002020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002024:	462b      	mov	r3, r5
 8002026:	eb49 0303 	adc.w	r3, r9, r3
 800202a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800203a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800203e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002042:	460b      	mov	r3, r1
 8002044:	18db      	adds	r3, r3, r3
 8002046:	653b      	str	r3, [r7, #80]	; 0x50
 8002048:	4613      	mov	r3, r2
 800204a:	eb42 0303 	adc.w	r3, r2, r3
 800204e:	657b      	str	r3, [r7, #84]	; 0x54
 8002050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002058:	f7fe f8c2 	bl	80001e0 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <UART_SetConfig+0x2d4>)
 8002062:	fba3 2302 	umull	r2, r3, r3, r2
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	011c      	lsls	r4, r3, #4
 800206a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800206e:	2200      	movs	r2, #0
 8002070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002074:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800207c:	4642      	mov	r2, r8
 800207e:	464b      	mov	r3, r9
 8002080:	1891      	adds	r1, r2, r2
 8002082:	64b9      	str	r1, [r7, #72]	; 0x48
 8002084:	415b      	adcs	r3, r3
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800208c:	4641      	mov	r1, r8
 800208e:	eb12 0a01 	adds.w	sl, r2, r1
 8002092:	4649      	mov	r1, r9
 8002094:	eb43 0b01 	adc.w	fp, r3, r1
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ac:	4692      	mov	sl, r2
 80020ae:	469b      	mov	fp, r3
 80020b0:	4643      	mov	r3, r8
 80020b2:	eb1a 0303 	adds.w	r3, sl, r3
 80020b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020ba:	464b      	mov	r3, r9
 80020bc:	eb4b 0303 	adc.w	r3, fp, r3
 80020c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020d8:	460b      	mov	r3, r1
 80020da:	18db      	adds	r3, r3, r3
 80020dc:	643b      	str	r3, [r7, #64]	; 0x40
 80020de:	4613      	mov	r3, r2
 80020e0:	eb42 0303 	adc.w	r3, r2, r3
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
 80020e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020ee:	f7fe f877 	bl	80001e0 <__aeabi_uldivmod>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4611      	mov	r1, r2
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <UART_SetConfig+0x2d4>)
 80020fa:	fba3 2301 	umull	r2, r3, r3, r1
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2264      	movs	r2, #100	; 0x64
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	1acb      	subs	r3, r1, r3
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <UART_SetConfig+0x2d4>)
 8002110:	fba3 2302 	umull	r2, r3, r3, r2
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800211c:	441c      	add	r4, r3
 800211e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002122:	2200      	movs	r2, #0
 8002124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002128:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800212c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002130:	4642      	mov	r2, r8
 8002132:	464b      	mov	r3, r9
 8002134:	1891      	adds	r1, r2, r2
 8002136:	63b9      	str	r1, [r7, #56]	; 0x38
 8002138:	415b      	adcs	r3, r3
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002140:	4641      	mov	r1, r8
 8002142:	1851      	adds	r1, r2, r1
 8002144:	6339      	str	r1, [r7, #48]	; 0x30
 8002146:	4649      	mov	r1, r9
 8002148:	414b      	adcs	r3, r1
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002158:	4659      	mov	r1, fp
 800215a:	00cb      	lsls	r3, r1, #3
 800215c:	4651      	mov	r1, sl
 800215e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002162:	4651      	mov	r1, sl
 8002164:	00ca      	lsls	r2, r1, #3
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	4603      	mov	r3, r0
 800216c:	4642      	mov	r2, r8
 800216e:	189b      	adds	r3, r3, r2
 8002170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002174:	464b      	mov	r3, r9
 8002176:	460a      	mov	r2, r1
 8002178:	eb42 0303 	adc.w	r3, r2, r3
 800217c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800218c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002194:	460b      	mov	r3, r1
 8002196:	18db      	adds	r3, r3, r3
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
 800219a:	4613      	mov	r3, r2
 800219c:	eb42 0303 	adc.w	r3, r2, r3
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021aa:	f7fe f819 	bl	80001e0 <__aeabi_uldivmod>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <UART_SetConfig+0x2d4>)
 80021b4:	fba3 1302 	umull	r1, r3, r3, r2
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	2164      	movs	r1, #100	; 0x64
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	3332      	adds	r3, #50	; 0x32
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <UART_SetConfig+0x2d4>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	f003 0207 	and.w	r2, r3, #7
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4422      	add	r2, r4
 80021da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021dc:	e106      	b.n	80023ec <UART_SetConfig+0x4d8>
 80021de:	bf00      	nop
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40011400 	.word	0x40011400
 80021e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f0:	2200      	movs	r2, #0
 80021f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021fe:	4642      	mov	r2, r8
 8002200:	464b      	mov	r3, r9
 8002202:	1891      	adds	r1, r2, r2
 8002204:	6239      	str	r1, [r7, #32]
 8002206:	415b      	adcs	r3, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
 800220a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220e:	4641      	mov	r1, r8
 8002210:	1854      	adds	r4, r2, r1
 8002212:	4649      	mov	r1, r9
 8002214:	eb43 0501 	adc.w	r5, r3, r1
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	00eb      	lsls	r3, r5, #3
 8002222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002226:	00e2      	lsls	r2, r4, #3
 8002228:	4614      	mov	r4, r2
 800222a:	461d      	mov	r5, r3
 800222c:	4643      	mov	r3, r8
 800222e:	18e3      	adds	r3, r4, r3
 8002230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002234:	464b      	mov	r3, r9
 8002236:	eb45 0303 	adc.w	r3, r5, r3
 800223a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800223e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800224a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800225a:	4629      	mov	r1, r5
 800225c:	008b      	lsls	r3, r1, #2
 800225e:	4621      	mov	r1, r4
 8002260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002264:	4621      	mov	r1, r4
 8002266:	008a      	lsls	r2, r1, #2
 8002268:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800226c:	f7fd ffb8 	bl	80001e0 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4b60      	ldr	r3, [pc, #384]	; (80023f8 <UART_SetConfig+0x4e4>)
 8002276:	fba3 2302 	umull	r2, r3, r3, r2
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	011c      	lsls	r4, r3, #4
 800227e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002282:	2200      	movs	r2, #0
 8002284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800228c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002290:	4642      	mov	r2, r8
 8002292:	464b      	mov	r3, r9
 8002294:	1891      	adds	r1, r2, r2
 8002296:	61b9      	str	r1, [r7, #24]
 8002298:	415b      	adcs	r3, r3
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a0:	4641      	mov	r1, r8
 80022a2:	1851      	adds	r1, r2, r1
 80022a4:	6139      	str	r1, [r7, #16]
 80022a6:	4649      	mov	r1, r9
 80022a8:	414b      	adcs	r3, r1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b8:	4659      	mov	r1, fp
 80022ba:	00cb      	lsls	r3, r1, #3
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022c2:	4651      	mov	r1, sl
 80022c4:	00ca      	lsls	r2, r1, #3
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	4642      	mov	r2, r8
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022d4:	464b      	mov	r3, r9
 80022d6:	460a      	mov	r2, r1
 80022d8:	eb42 0303 	adc.w	r3, r2, r3
 80022dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022f8:	4649      	mov	r1, r9
 80022fa:	008b      	lsls	r3, r1, #2
 80022fc:	4641      	mov	r1, r8
 80022fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002302:	4641      	mov	r1, r8
 8002304:	008a      	lsls	r2, r1, #2
 8002306:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800230a:	f7fd ff69 	bl	80001e0 <__aeabi_uldivmod>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4611      	mov	r1, r2
 8002314:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <UART_SetConfig+0x4e4>)
 8002316:	fba3 2301 	umull	r2, r3, r3, r1
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2264      	movs	r2, #100	; 0x64
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	1acb      	subs	r3, r1, r3
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	3332      	adds	r3, #50	; 0x32
 8002328:	4a33      	ldr	r2, [pc, #204]	; (80023f8 <UART_SetConfig+0x4e4>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002334:	441c      	add	r4, r3
 8002336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800233a:	2200      	movs	r2, #0
 800233c:	673b      	str	r3, [r7, #112]	; 0x70
 800233e:	677a      	str	r2, [r7, #116]	; 0x74
 8002340:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002344:	4642      	mov	r2, r8
 8002346:	464b      	mov	r3, r9
 8002348:	1891      	adds	r1, r2, r2
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	415b      	adcs	r3, r3
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002354:	4641      	mov	r1, r8
 8002356:	1851      	adds	r1, r2, r1
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	4649      	mov	r1, r9
 800235c:	414b      	adcs	r3, r1
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800236c:	4659      	mov	r1, fp
 800236e:	00cb      	lsls	r3, r1, #3
 8002370:	4651      	mov	r1, sl
 8002372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002376:	4651      	mov	r1, sl
 8002378:	00ca      	lsls	r2, r1, #3
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	4603      	mov	r3, r0
 8002380:	4642      	mov	r2, r8
 8002382:	189b      	adds	r3, r3, r2
 8002384:	66bb      	str	r3, [r7, #104]	; 0x68
 8002386:	464b      	mov	r3, r9
 8002388:	460a      	mov	r2, r1
 800238a:	eb42 0303 	adc.w	r3, r2, r3
 800238e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	663b      	str	r3, [r7, #96]	; 0x60
 800239a:	667a      	str	r2, [r7, #100]	; 0x64
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023a8:	4649      	mov	r1, r9
 80023aa:	008b      	lsls	r3, r1, #2
 80023ac:	4641      	mov	r1, r8
 80023ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023b2:	4641      	mov	r1, r8
 80023b4:	008a      	lsls	r2, r1, #2
 80023b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023ba:	f7fd ff11 	bl	80001e0 <__aeabi_uldivmod>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <UART_SetConfig+0x4e4>)
 80023c4:	fba3 1302 	umull	r1, r3, r3, r2
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	2164      	movs	r1, #100	; 0x64
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	3332      	adds	r3, #50	; 0x32
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <UART_SetConfig+0x4e4>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	f003 020f 	and.w	r2, r3, #15
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4422      	add	r2, r4
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023f2:	46bd      	mov	sp, r7
 80023f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f8:	51eb851f 	.word	0x51eb851f

080023fc <__NVIC_SetPriority>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	; (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	; (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SysTick_Handler+0x1c>)
 8002456:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002458:	f001 fe64 	bl	8004124 <xTaskGetSchedulerState>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002462:	f002 fc49 	bl	8004cf8 <xPortSysTickHandler>
  }
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002474:	2100      	movs	r1, #0
 8002476:	f06f 0004 	mvn.w	r0, #4
 800247a:	f7ff ffbf 	bl	80023fc <__NVIC_SetPriority>
#endif
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800248a:	f3ef 8305 	mrs	r3, IPSR
 800248e:	603b      	str	r3, [r7, #0]
  return(result);
 8002490:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002496:	f06f 0305 	mvn.w	r3, #5
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	e00c      	b.n	80024b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <osKernelInitialize+0x44>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <osKernelInitialize+0x44>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	e002      	b.n	80024b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200000e8 	.word	0x200000e8

080024cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d2:	f3ef 8305 	mrs	r3, IPSR
 80024d6:	603b      	str	r3, [r7, #0]
  return(result);
 80024d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80024de:	f06f 0305 	mvn.w	r3, #5
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	e010      	b.n	8002508 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <osKernelStart+0x48>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d109      	bne.n	8002502 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024ee:	f7ff ffbf 	bl	8002470 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <osKernelStart+0x48>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024f8:	f001 f9cc 	bl	8003894 <vTaskStartScheduler>
      stat = osOK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	e002      	b.n	8002508 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200000e8 	.word	0x200000e8

08002518 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	; 0x38
 800251c:	af04      	add	r7, sp, #16
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002528:	f3ef 8305 	mrs	r3, IPSR
 800252c:	617b      	str	r3, [r7, #20]
  return(result);
 800252e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002530:	2b00      	cmp	r3, #0
 8002532:	d17e      	bne.n	8002632 <osThreadNew+0x11a>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d07b      	beq.n	8002632 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800253e:	2318      	movs	r3, #24
 8002540:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d045      	beq.n	80025de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <osThreadNew+0x48>
        name = attr->name;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <osThreadNew+0x6e>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b38      	cmp	r3, #56	; 0x38
 8002578:	d805      	bhi.n	8002586 <osThreadNew+0x6e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <osThreadNew+0x72>
        return (NULL);
 8002586:	2300      	movs	r3, #0
 8002588:	e054      	b.n	8002634 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <osThreadNew+0xa8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b5b      	cmp	r3, #91	; 0x5b
 80025a8:	d90a      	bls.n	80025c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <osThreadNew+0xa8>
        mem = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e010      	b.n	80025e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10c      	bne.n	80025e2 <osThreadNew+0xca>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <osThreadNew+0xca>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <osThreadNew+0xca>
          mem = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e001      	b.n	80025e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d110      	bne.n	800260a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025f0:	9202      	str	r2, [sp, #8]
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fe3e 	bl	8003280 <xTaskCreateStatic>
 8002604:	4603      	mov	r3, r0
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e013      	b.n	8002632 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d110      	bne.n	8002632 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	b29a      	uxth	r2, r3
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fe89 	bl	800333a <xTaskCreate>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <osThreadNew+0x11a>
            hTask = NULL;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002632:	693b      	ldr	r3, [r7, #16]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002648:	f3ef 8305 	mrs	r3, IPSR
 800264c:	60fb      	str	r3, [r7, #12]
  return(result);
 800264e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <osThreadResume+0x20>
    stat = osErrorISR;
 8002654:	f06f 0305 	mvn.w	r3, #5
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00b      	b.n	8002674 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <osThreadResume+0x2e>
    stat = osErrorParameter;
 8002662:	f06f 0303 	mvn.w	r3, #3
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e004      	b.n	8002674 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800266e:	6938      	ldr	r0, [r7, #16]
 8002670:	f001 f8b2 	bl	80037d8 <vTaskResume>
  }

  return (stat);
 8002674:	697b      	ldr	r3, [r7, #20]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800268a:	f3ef 8305 	mrs	r3, IPSR
 800268e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002690:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <osThreadTerminate+0x20>
    stat = osErrorISR;
 8002696:	f06f 0305 	mvn.w	r3, #5
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e017      	b.n	80026ce <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80026a4:	f06f 0303 	mvn.w	r3, #3
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e010      	b.n	80026ce <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80026ac:	6938      	ldr	r0, [r7, #16]
 80026ae:	f000 fffb 	bl	80036a8 <eTaskGetState>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d005      	beq.n	80026c8 <osThreadTerminate+0x4a>
      stat = osOK;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80026c0:	6938      	ldr	r0, [r7, #16]
 80026c2:	f000 ff7f 	bl	80035c4 <vTaskDelete>
 80026c6:	e002      	b.n	80026ce <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80026c8:	f06f 0302 	mvn.w	r3, #2
 80026cc:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80026ce:	697b      	ldr	r3, [r7, #20]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <vApplicationGetIdleTaskMemory+0x2c>)
 80026e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <vApplicationGetIdleTaskMemory+0x30>)
 80026ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	601a      	str	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200000ec 	.word	0x200000ec
 8002708:	20000148 	.word	0x20000148

0800270c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <vApplicationGetTimerTaskMemory+0x2c>)
 800271c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <vApplicationGetTimerTaskMemory+0x30>)
 8002722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20000348 	.word	0x20000348
 800273c:	200003a4 	.word	0x200003a4

08002740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 0208 	add.w	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f103 0208 	add.w	r2, r3, #8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 0208 	add.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d103      	bne.n	8002802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e00c      	b.n	800281c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3308      	adds	r3, #8
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e002      	b.n	8002810 <vListInsert+0x2e>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	429a      	cmp	r2, r3
 800281a:	d2f6      	bcs.n	800280a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6892      	ldr	r2, [r2, #8]
 800286a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6852      	ldr	r2, [r2, #4]
 8002874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d103      	bne.n	8002888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028d2:	f002 f97f 	bl	8004bd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	68f9      	ldr	r1, [r7, #12]
 80028e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	441a      	add	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	3b01      	subs	r3, #1
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	441a      	add	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d114      	bne.n	8002952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01a      	beq.n	8002966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3310      	adds	r3, #16
 8002934:	4618      	mov	r0, r3
 8002936:	f001 fa37 	bl	8003da8 <xTaskRemoveFromEventList>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <xQueueGenericReset+0xcc>)
 8002942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	e009      	b.n	8002966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3310      	adds	r3, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fef2 	bl	8002740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3324      	adds	r3, #36	; 0x24
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff feed 	bl	8002740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002966:	f002 f965 	bl	8004c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08e      	sub	sp, #56	; 0x38
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <xQueueGenericCreateStatic+0x52>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <xQueueGenericCreateStatic+0x56>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <xQueueGenericCreateStatic+0x58>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	623b      	str	r3, [r7, #32]
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <xQueueGenericCreateStatic+0x7e>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <xQueueGenericCreateStatic+0x82>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <xQueueGenericCreateStatic+0x84>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	61fb      	str	r3, [r7, #28]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a16:	2350      	movs	r3, #80	; 0x50
 8002a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b50      	cmp	r3, #80	; 0x50
 8002a1e:	d00a      	beq.n	8002a36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61bb      	str	r3, [r7, #24]
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f805 	bl	8002a68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3730      	adds	r7, #48	; 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e002      	b.n	8002a8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a96:	2101      	movs	r1, #1
 8002a98:	69b8      	ldr	r0, [r7, #24]
 8002a9a:	f7ff ff05 	bl	80028a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ade:	bf00      	nop
 8002ae0:	e7fe      	b.n	8002ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d103      	bne.n	8002af0 <xQueueGenericSend+0x40>
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <xQueueGenericSend+0x44>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <xQueueGenericSend+0x46>
 8002af4:	2300      	movs	r3, #0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <xQueueGenericSend+0x60>
	__asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d103      	bne.n	8002b1e <xQueueGenericSend+0x6e>
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <xQueueGenericSend+0x72>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <xQueueGenericSend+0x74>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	623b      	str	r3, [r7, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b3e:	f001 faf1 	bl	8004124 <xTaskGetSchedulerState>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <xQueueGenericSend+0x9e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xQueueGenericSend+0xa2>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <xQueueGenericSend+0xa4>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	61fb      	str	r3, [r7, #28]
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b6e:	f002 f831 	bl	8004bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <xQueueGenericSend+0xd4>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d129      	bne.n	8002bd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b8a:	f000 fa0b 	bl	8002fa4 <prvCopyDataToQueue>
 8002b8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 f903 	bl	8003da8 <xTaskRemoveFromEventList>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <xQueueGenericSend+0x1f8>)
 8002baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	e00a      	b.n	8002bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bc0:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <xQueueGenericSend+0x1f8>)
 8002bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bd0:	f002 f830 	bl	8004c34 <vPortExitCritical>
				return pdPASS;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e063      	b.n	8002ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bde:	f002 f829 	bl	8004c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e05c      	b.n	8002ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f93d 	bl	8003e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bfa:	f002 f81b 	bl	8004c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bfe:	f000 feaf 	bl	8003960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c02:	f001 ffe7 	bl	8004bd4 <vPortEnterCritical>
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d103      	bne.n	8002c1c <xQueueGenericSend+0x16c>
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d103      	bne.n	8002c32 <xQueueGenericSend+0x182>
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c32:	f001 ffff 	bl	8004c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c36:	1d3a      	adds	r2, r7, #4
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f92c 	bl	8003e9c <xTaskCheckForTimeOut>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d124      	bne.n	8002c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4c:	f000 faa2 	bl	8003194 <prvIsQueueFull>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d018      	beq.n	8002c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	3310      	adds	r3, #16
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f852 	bl	8003d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c66:	f000 fa2d 	bl	80030c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c6a:	f000 fe87 	bl	800397c <xTaskResumeAll>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f47f af7c 	bne.w	8002b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <xQueueGenericSend+0x1f8>)
 8002c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	e772      	b.n	8002b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8a:	f000 fa1b 	bl	80030c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c8e:	f000 fe75 	bl	800397c <xTaskResumeAll>
 8002c92:	e76c      	b.n	8002b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c96:	f000 fa15 	bl	80030c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c9a:	f000 fe6f 	bl	800397c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3738      	adds	r7, #56	; 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b090      	sub	sp, #64	; 0x40
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <xQueueGenericSendFromISR+0x3c>
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <xQueueGenericSendFromISR+0x40>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <xQueueGenericSendFromISR+0x42>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d04:	bf00      	nop
 8002d06:	e7fe      	b.n	8002d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d103      	bne.n	8002d16 <xQueueGenericSendFromISR+0x6a>
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <xQueueGenericSendFromISR+0x6e>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <xQueueGenericSendFromISR+0x70>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	623b      	str	r3, [r7, #32]
}
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d36:	f002 f82f 	bl	8004d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	61fa      	str	r2, [r7, #28]
 8002d50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <xQueueGenericSendFromISR+0xbc>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d12f      	bne.n	8002dc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d7e:	f000 f911 	bl	8002fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d112      	bne.n	8002db2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	3324      	adds	r3, #36	; 0x24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 f805 	bl	8003da8 <xTaskRemoveFromEventList>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e007      	b.n	8002dc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002db6:	3301      	adds	r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	b25a      	sxtb	r2, r3
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002dc6:	e001      	b.n	8002dcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3740      	adds	r7, #64	; 0x40
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <xQueueReceive+0x30>
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	623b      	str	r3, [r7, #32]
}
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <xQueueReceive+0x3e>
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <xQueueReceive+0x42>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <xQueueReceive+0x44>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <xQueueReceive+0x5e>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	61fb      	str	r3, [r7, #28]
}
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e42:	f001 f96f 	bl	8004124 <xTaskGetSchedulerState>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <xQueueReceive+0x6e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueReceive+0x72>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueReceive+0x74>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueReceive+0x8e>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	61bb      	str	r3, [r7, #24]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e72:	f001 feaf 	bl	8004bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01f      	beq.n	8002ec2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e86:	f000 f8f7 	bl	8003078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1e5a      	subs	r2, r3, #1
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00f      	beq.n	8002eba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ff82 	bl	8003da8 <xTaskRemoveFromEventList>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <xQueueReceive+0x1bc>)
 8002eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eba:	f001 febb 	bl	8004c34 <vPortExitCritical>
				return pdPASS;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e069      	b.n	8002f96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ec8:	f001 feb4 	bl	8004c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e062      	b.n	8002f96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 ffc8 	bl	8003e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ee4:	f001 fea6 	bl	8004c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ee8:	f000 fd3a 	bl	8003960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eec:	f001 fe72 	bl	8004bd4 <vPortEnterCritical>
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d103      	bne.n	8002f06 <xQueueReceive+0x122>
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d103      	bne.n	8002f1c <xQueueReceive+0x138>
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f1c:	f001 fe8a 	bl	8004c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f20:	1d3a      	adds	r2, r7, #4
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 ffb7 	bl	8003e9c <xTaskCheckForTimeOut>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d123      	bne.n	8002f7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f36:	f000 f917 	bl	8003168 <prvIsQueueEmpty>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d017      	beq.n	8002f70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	3324      	adds	r3, #36	; 0x24
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fedd 	bl	8003d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f50:	f000 f8b8 	bl	80030c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f54:	f000 fd12 	bl	800397c <xTaskResumeAll>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d189      	bne.n	8002e72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <xQueueReceive+0x1bc>)
 8002f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	e780      	b.n	8002e72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f72:	f000 f8a7 	bl	80030c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f76:	f000 fd01 	bl	800397c <xTaskResumeAll>
 8002f7a:	e77a      	b.n	8002e72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7e:	f000 f8a1 	bl	80030c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f82:	f000 fcfb 	bl	800397c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f88:	f000 f8ee 	bl	8003168 <prvIsQueueEmpty>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f43f af6f 	beq.w	8002e72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3730      	adds	r7, #48	; 0x30
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d14d      	bne.n	8003066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 f8c6 	bl	8004160 <xTaskPriorityDisinherit>
 8002fd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e043      	b.n	8003066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d119      	bne.n	8003018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6858      	ldr	r0, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	461a      	mov	r2, r3
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	f002 f928 	bl	8005244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d32b      	bcc.n	8003066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	e026      	b.n	8003066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68d8      	ldr	r0, [r3, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	461a      	mov	r2, r3
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	f002 f90e 	bl	8005244 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	425b      	negs	r3, r3
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d207      	bcs.n	8003054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	425b      	negs	r3, r3
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d105      	bne.n	8003066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	3b01      	subs	r3, #1
 8003064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800306e:	697b      	ldr	r3, [r7, #20]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	441a      	add	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d303      	bcc.n	80030ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68d9      	ldr	r1, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	461a      	mov	r2, r3
 80030b6:	6838      	ldr	r0, [r7, #0]
 80030b8:	f002 f8c4 	bl	8005244 <memcpy>
	}
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030cc:	f001 fd82 	bl	8004bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030d8:	e011      	b.n	80030fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3324      	adds	r3, #36	; 0x24
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fe5e 	bl	8003da8 <xTaskRemoveFromEventList>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030f2:	f000 ff35 	bl	8003f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	dce9      	bgt.n	80030da <prvUnlockQueue+0x16>
 8003106:	e000      	b.n	800310a <prvUnlockQueue+0x46>
					break;
 8003108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	22ff      	movs	r2, #255	; 0xff
 800310e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003112:	f001 fd8f 	bl	8004c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003116:	f001 fd5d 	bl	8004bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003122:	e011      	b.n	8003148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d012      	beq.n	8003152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3310      	adds	r3, #16
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fe39 	bl	8003da8 <xTaskRemoveFromEventList>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800313c:	f000 ff10 	bl	8003f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003140:	7bbb      	ldrb	r3, [r7, #14]
 8003142:	3b01      	subs	r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800314c:	2b00      	cmp	r3, #0
 800314e:	dce9      	bgt.n	8003124 <prvUnlockQueue+0x60>
 8003150:	e000      	b.n	8003154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800315c:	f001 fd6a 	bl	8004c34 <vPortExitCritical>
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003170:	f001 fd30 	bl	8004bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e001      	b.n	8003186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003186:	f001 fd55 	bl	8004c34 <vPortExitCritical>

	return xReturn;
 800318a:	68fb      	ldr	r3, [r7, #12]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800319c:	f001 fd1a 	bl	8004bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d102      	bne.n	80031b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e001      	b.n	80031b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031b6:	f001 fd3d 	bl	8004c34 <vPortExitCritical>

	return xReturn;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e014      	b.n	80031fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031d4:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <vQueueAddToRegistry+0x50>)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031e0:	490c      	ldr	r1, [pc, #48]	; (8003214 <vQueueAddToRegistry+0x50>)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <vQueueAddToRegistry+0x50>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031f6:	e006      	b.n	8003206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b07      	cmp	r3, #7
 8003202:	d9e7      	bls.n	80031d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	200007a4 	.word	0x200007a4

08003218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003228:	f001 fcd4 	bl	8004bd4 <vPortEnterCritical>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <vQueueWaitForMessageRestricted+0x2a>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d103      	bne.n	8003258 <vQueueWaitForMessageRestricted+0x40>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003258:	f001 fcec 	bl	8004c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3324      	adds	r3, #36	; 0x24
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fd6f 	bl	8003d50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff26 	bl	80030c4 <prvUnlockQueue>
	}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	; 0x38
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	623b      	str	r3, [r7, #32]
}
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	61fb      	str	r3, [r7, #28]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032c6:	235c      	movs	r3, #92	; 0x5c
 80032c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b5c      	cmp	r3, #92	; 0x5c
 80032ce:	d00a      	beq.n	80032e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	61bb      	str	r3, [r7, #24]
}
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01e      	beq.n	800332c <xTaskCreateStatic+0xac>
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01b      	beq.n	800332c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003306:	2300      	movs	r3, #0
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f850 	bl	80033c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003326:	f000 f8dd 	bl	80034e4 <prvAddNewTaskToReadyList>
 800332a:	e001      	b.n	8003330 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003330:	697b      	ldr	r3, [r7, #20]
	}
 8003332:	4618      	mov	r0, r3
 8003334:	3728      	adds	r7, #40	; 0x28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08c      	sub	sp, #48	; 0x30
 800333e:	af04      	add	r7, sp, #16
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f001 fd62 	bl	8004e18 <pvPortMalloc>
 8003354:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800335c:	205c      	movs	r0, #92	; 0x5c
 800335e:	f001 fd5b 	bl	8004e18 <pvPortMalloc>
 8003362:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	e005      	b.n	800337e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f001 fe1c 	bl	8004fb0 <vPortFree>
 8003378:	e001      	b.n	800337e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d017      	beq.n	80033b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	2300      	movs	r3, #0
 8003390:	9303      	str	r3, [sp, #12]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	9302      	str	r3, [sp, #8]
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f80e 	bl	80033c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033a8:	69f8      	ldr	r0, [r7, #28]
 80033aa:	f000 f89b 	bl	80034e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e002      	b.n	80033ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033ba:	69bb      	ldr	r3, [r7, #24]
	}
 80033bc:	4618      	mov	r0, r3
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	21a5      	movs	r1, #165	; 0xa5
 80033de:	f001 ff05 	bl	80051ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033ec:	3b01      	subs	r3, #1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	617b      	str	r3, [r7, #20]
}
 8003418:	bf00      	nop
 800341a:	e7fe      	b.n	800341a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01f      	beq.n	8003462 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	e012      	b.n	800344e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	7819      	ldrb	r1, [r3, #0]
 8003430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	3334      	adds	r3, #52	; 0x34
 8003438:	460a      	mov	r2, r1
 800343a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d006      	beq.n	8003456 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	3301      	adds	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d9e9      	bls.n	8003428 <prvInitialiseNewTask+0x64>
 8003454:	e000      	b.n	8003458 <prvInitialiseNewTask+0x94>
			{
				break;
 8003456:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003460:	e003      	b.n	800346a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	2b37      	cmp	r3, #55	; 0x37
 800346e:	d901      	bls.n	8003474 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003470:	2337      	movs	r3, #55	; 0x37
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800347e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2200      	movs	r2, #0
 8003484:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	3304      	adds	r3, #4
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f978 	bl	8002780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	3318      	adds	r3, #24
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff f973 	bl	8002780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	2200      	movs	r2, #0
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	69b8      	ldr	r0, [r7, #24]
 80034c4:	f001 fa5c 	bl	8004980 <pxPortInitialiseStack>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034da:	bf00      	nop
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034ec:	f001 fb72 	bl	8004bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034f0:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <prvAddNewTaskToReadyList+0xc4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <prvAddNewTaskToReadyList+0xc4>)
 80034f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <prvAddNewTaskToReadyList+0xc8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003502:	4a2a      	ldr	r2, [pc, #168]	; (80035ac <prvAddNewTaskToReadyList+0xc8>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <prvAddNewTaskToReadyList+0xc4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d110      	bne.n	8003532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003510:	f000 fd4a 	bl	8003fa8 <prvInitialiseTaskLists>
 8003514:	e00d      	b.n	8003532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <prvAddNewTaskToReadyList+0xcc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <prvAddNewTaskToReadyList+0xc8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	429a      	cmp	r2, r3
 800352a:	d802      	bhi.n	8003532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800352c:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <prvAddNewTaskToReadyList+0xc8>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <prvAddNewTaskToReadyList+0xd0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3301      	adds	r3, #1
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <prvAddNewTaskToReadyList+0xd0>)
 800353a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <prvAddNewTaskToReadyList+0xd0>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <prvAddNewTaskToReadyList+0xd4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d903      	bls.n	8003558 <prvAddNewTaskToReadyList+0x74>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <prvAddNewTaskToReadyList+0xd4>)
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4a15      	ldr	r2, [pc, #84]	; (80035bc <prvAddNewTaskToReadyList+0xd8>)
 8003566:	441a      	add	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f7ff f913 	bl	800279a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003574:	f001 fb5e 	bl	8004c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <prvAddNewTaskToReadyList+0xcc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <prvAddNewTaskToReadyList+0xc8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	429a      	cmp	r2, r3
 800358c:	d207      	bcs.n	800359e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <prvAddNewTaskToReadyList+0xdc>)
 8003590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000cb8 	.word	0x20000cb8
 80035ac:	200007e4 	.word	0x200007e4
 80035b0:	20000cc4 	.word	0x20000cc4
 80035b4:	20000cd4 	.word	0x20000cd4
 80035b8:	20000cc0 	.word	0x20000cc0
 80035bc:	200007e8 	.word	0x200007e8
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80035cc:	f001 fb02 	bl	8004bd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <vTaskDelete+0x18>
 80035d6:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <vTaskDelete+0xc4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	e000      	b.n	80035de <vTaskDelete+0x1a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff f935 	bl	8002854 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3318      	adds	r3, #24
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f92c 	bl	8002854 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <vTaskDelete+0xc8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <vTaskDelete+0xc8>)
 8003604:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <vTaskDelete+0xc4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	429a      	cmp	r2, r3
 800360e:	d10b      	bne.n	8003628 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3304      	adds	r3, #4
 8003614:	4619      	mov	r1, r3
 8003616:	481e      	ldr	r0, [pc, #120]	; (8003690 <vTaskDelete+0xcc>)
 8003618:	f7ff f8bf 	bl	800279a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <vTaskDelete+0xd0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <vTaskDelete+0xd0>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e009      	b.n	800363c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <vTaskDelete+0xd4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3b01      	subs	r3, #1
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <vTaskDelete+0xd4>)
 8003630:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fd26 	bl	8004084 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003638:	f000 fd54 	bl	80040e4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800363c:	f001 fafa 	bl	8004c34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003640:	4b16      	ldr	r3, [pc, #88]	; (800369c <vTaskDelete+0xd8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <vTaskDelete+0xc4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	429a      	cmp	r2, r3
 8003650:	d116      	bne.n	8003680 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <vTaskDelete+0xdc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <vTaskDelete+0xac>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60bb      	str	r3, [r7, #8]
}
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <vTaskDelete+0xe0>)
 8003672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200007e4 	.word	0x200007e4
 800368c:	20000cd4 	.word	0x20000cd4
 8003690:	20000c8c 	.word	0x20000c8c
 8003694:	20000ca0 	.word	0x20000ca0
 8003698:	20000cb8 	.word	0x20000cb8
 800369c:	20000cc4 	.word	0x20000cc4
 80036a0:	20000ce0 	.word	0x20000ce0
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <eTaskGetState+0x28>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	60bb      	str	r3, [r7, #8]
}
 80036cc:	bf00      	nop
 80036ce:	e7fe      	b.n	80036ce <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <eTaskGetState+0xb8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d102      	bne.n	80036e0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80036da:	2300      	movs	r3, #0
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e03a      	b.n	8003756 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80036e0:	f001 fa78 	bl	8004bd4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <eTaskGetState+0xbc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <eTaskGetState+0xc0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80036f6:	f001 fa9d 	bl	8004c34 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d003      	beq.n	800370a <eTaskGetState+0x62>
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	429a      	cmp	r2, r3
 8003708:	d102      	bne.n	8003710 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800370a:	2302      	movs	r3, #2
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e022      	b.n	8003756 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <eTaskGetState+0xc4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d112      	bne.n	800373e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800372c:	2302      	movs	r3, #2
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e011      	b.n	8003756 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8003732:	2303      	movs	r3, #3
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e00e      	b.n	8003756 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003738:	2302      	movs	r3, #2
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e00b      	b.n	8003756 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <eTaskGetState+0xc8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d002      	beq.n	800374c <eTaskGetState+0xa4>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800374c:	2304      	movs	r3, #4
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e001      	b.n	8003756 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003752:	2301      	movs	r3, #1
 8003754:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003756:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200007e4 	.word	0x200007e4
 8003764:	20000c70 	.word	0x20000c70
 8003768:	20000c74 	.word	0x20000c74
 800376c:	20000ca4 	.word	0x20000ca4
 8003770:	20000c8c 	.word	0x20000c8c

08003774 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	60fb      	str	r3, [r7, #12]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <prvTaskIsTaskSuspended+0x5c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10a      	bne.n	80037c0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <prvTaskIsTaskSuspended+0x60>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d005      	beq.n	80037c0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037c0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80037c2:	4618      	mov	r0, r3
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000ca4 	.word	0x20000ca4
 80037d4:	20000c78 	.word	0x20000c78

080037d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <vTaskResume+0x28>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	60bb      	str	r3, [r7, #8]
}
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003800:	4b20      	ldr	r3, [pc, #128]	; (8003884 <vTaskResume+0xac>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	429a      	cmp	r2, r3
 8003808:	d038      	beq.n	800387c <vTaskResume+0xa4>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d035      	beq.n	800387c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8003810:	f001 f9e0 	bl	8004bd4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff ffad 	bl	8003774 <prvTaskIsTaskSuspended>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02b      	beq.n	8003878 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3304      	adds	r3, #4
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f815 	bl	8002854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <vTaskResume+0xb0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d903      	bls.n	800383e <vTaskResume+0x66>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <vTaskResume+0xb0>)
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4a10      	ldr	r2, [pc, #64]	; (800388c <vTaskResume+0xb4>)
 800384c:	441a      	add	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7fe ffa0 	bl	800279a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <vTaskResume+0xac>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d307      	bcc.n	8003878 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <vTaskResume+0xb8>)
 800386a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003878:	f001 f9dc 	bl	8004c34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200007e4 	.word	0x200007e4
 8003888:	20000cc0 	.word	0x20000cc0
 800388c:	200007e8 	.word	0x200007e8
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038a2:	463a      	mov	r2, r7
 80038a4:	1d39      	adds	r1, r7, #4
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ff14 	bl	80026d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	460a      	mov	r2, r1
 80038c2:	4921      	ldr	r1, [pc, #132]	; (8003948 <vTaskStartScheduler+0xb4>)
 80038c4:	4821      	ldr	r0, [pc, #132]	; (800394c <vTaskStartScheduler+0xb8>)
 80038c6:	f7ff fcdb 	bl	8003280 <xTaskCreateStatic>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <vTaskStartScheduler+0xbc>)
 80038ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <vTaskStartScheduler+0xbc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e001      	b.n	80038e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038e8:	f000 fcfc 	bl	80042e4 <xTimerCreateTimerTask>
 80038ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d116      	bne.n	8003922 <vTaskStartScheduler+0x8e>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	613b      	str	r3, [r7, #16]
}
 8003906:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003908:	4b12      	ldr	r3, [pc, #72]	; (8003954 <vTaskStartScheduler+0xc0>)
 800390a:	f04f 32ff 	mov.w	r2, #4294967295
 800390e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <vTaskStartScheduler+0xc4>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <vTaskStartScheduler+0xc8>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800391c:	f001 f8b8 	bl	8004a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003920:	e00e      	b.n	8003940 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d10a      	bne.n	8003940 <vTaskStartScheduler+0xac>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	60fb      	str	r3, [r7, #12]
}
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <vTaskStartScheduler+0xaa>
}
 8003940:	bf00      	nop
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	080052a4 	.word	0x080052a4
 800394c:	08003f79 	.word	0x08003f79
 8003950:	20000cdc 	.word	0x20000cdc
 8003954:	20000cd8 	.word	0x20000cd8
 8003958:	20000cc4 	.word	0x20000cc4
 800395c:	20000cbc 	.word	0x20000cbc

08003960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <vTaskSuspendAll+0x18>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	4a03      	ldr	r2, [pc, #12]	; (8003978 <vTaskSuspendAll+0x18>)
 800396c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	20000ce0 	.word	0x20000ce0

0800397c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800398a:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <xTaskResumeAll+0x118>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	603b      	str	r3, [r7, #0]
}
 80039a4:	bf00      	nop
 80039a6:	e7fe      	b.n	80039a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039a8:	f001 f914 	bl	8004bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039ac:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <xTaskResumeAll+0x118>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	4a38      	ldr	r2, [pc, #224]	; (8003a94 <xTaskResumeAll+0x118>)
 80039b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <xTaskResumeAll+0x118>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d162      	bne.n	8003a84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039be:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <xTaskResumeAll+0x11c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d05e      	beq.n	8003a84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c6:	e02f      	b.n	8003a28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <xTaskResumeAll+0x120>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3318      	adds	r3, #24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe ff3d 	bl	8002854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3304      	adds	r3, #4
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe ff38 	bl	8002854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <xTaskResumeAll+0x124>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d903      	bls.n	80039f8 <xTaskResumeAll+0x7c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <xTaskResumeAll+0x124>)
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <xTaskResumeAll+0x128>)
 8003a06:	441a      	add	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7fe fec3 	bl	800279a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <xTaskResumeAll+0x12c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <xTaskResumeAll+0x130>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <xTaskResumeAll+0x120>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1cb      	bne.n	80039c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a36:	f000 fb55 	bl	80040e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <xTaskResumeAll+0x134>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a46:	f000 f847 	bl	8003ad8 <xTaskIncrementTick>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <xTaskResumeAll+0x130>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f1      	bne.n	8003a46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <xTaskResumeAll+0x134>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <xTaskResumeAll+0x130>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <xTaskResumeAll+0x138>)
 8003a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a84:	f001 f8d6 	bl	8004c34 <vPortExitCritical>

	return xAlreadyYielded;
 8003a88:	68bb      	ldr	r3, [r7, #8]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000ce0 	.word	0x20000ce0
 8003a98:	20000cb8 	.word	0x20000cb8
 8003a9c:	20000c78 	.word	0x20000c78
 8003aa0:	20000cc0 	.word	0x20000cc0
 8003aa4:	200007e8 	.word	0x200007e8
 8003aa8:	200007e4 	.word	0x200007e4
 8003aac:	20000ccc 	.word	0x20000ccc
 8003ab0:	20000cc8 	.word	0x20000cc8
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <xTaskGetTickCount+0x1c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ac4:	687b      	ldr	r3, [r7, #4]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000cbc 	.word	0x20000cbc

08003ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae2:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <xTaskIncrementTick+0x148>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 808f 	bne.w	8003c0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003aec:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <xTaskIncrementTick+0x14c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3301      	adds	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003af4:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <xTaskIncrementTick+0x14c>)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d120      	bne.n	8003b42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b00:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <xTaskIncrementTick+0x150>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	603b      	str	r3, [r7, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	e7fe      	b.n	8003b1e <xTaskIncrementTick+0x46>
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <xTaskIncrementTick+0x150>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <xTaskIncrementTick+0x154>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <xTaskIncrementTick+0x150>)
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4a3f      	ldr	r2, [pc, #252]	; (8003c2c <xTaskIncrementTick+0x154>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <xTaskIncrementTick+0x158>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	4a3d      	ldr	r2, [pc, #244]	; (8003c30 <xTaskIncrementTick+0x158>)
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	f000 fad1 	bl	80040e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b42:	4b3c      	ldr	r3, [pc, #240]	; (8003c34 <xTaskIncrementTick+0x15c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d349      	bcc.n	8003be0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4c:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <xTaskIncrementTick+0x150>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b56:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <xTaskIncrementTick+0x15c>)
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	601a      	str	r2, [r3, #0]
					break;
 8003b5e:	e03f      	b.n	8003be0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b60:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <xTaskIncrementTick+0x150>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d203      	bcs.n	8003b80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b78:	4a2e      	ldr	r2, [pc, #184]	; (8003c34 <xTaskIncrementTick+0x15c>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b7e:	e02f      	b.n	8003be0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe fe65 	bl	8002854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	3318      	adds	r3, #24
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fe5c 	bl	8002854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <xTaskIncrementTick+0x160>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d903      	bls.n	8003bb0 <xTaskIncrementTick+0xd8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <xTaskIncrementTick+0x160>)
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <xTaskIncrementTick+0x164>)
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe fde7 	bl	800279a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <xTaskIncrementTick+0x168>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d3b8      	bcc.n	8003b4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bde:	e7b5      	b.n	8003b4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <xTaskIncrementTick+0x168>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	4915      	ldr	r1, [pc, #84]	; (8003c3c <xTaskIncrementTick+0x164>)
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d901      	bls.n	8003bfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <xTaskIncrementTick+0x16c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c04:	2301      	movs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e004      	b.n	8003c14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <xTaskIncrementTick+0x170>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <xTaskIncrementTick+0x170>)
 8003c12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c14:	697b      	ldr	r3, [r7, #20]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000ce0 	.word	0x20000ce0
 8003c24:	20000cbc 	.word	0x20000cbc
 8003c28:	20000c70 	.word	0x20000c70
 8003c2c:	20000c74 	.word	0x20000c74
 8003c30:	20000cd0 	.word	0x20000cd0
 8003c34:	20000cd8 	.word	0x20000cd8
 8003c38:	20000cc0 	.word	0x20000cc0
 8003c3c:	200007e8 	.word	0x200007e8
 8003c40:	200007e4 	.word	0x200007e4
 8003c44:	20000ccc 	.word	0x20000ccc
 8003c48:	20000cc8 	.word	0x20000cc8

08003c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c52:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <vTaskSwitchContext+0xa8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <vTaskSwitchContext+0xac>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c60:	e041      	b.n	8003ce6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c62:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <vTaskSwitchContext+0xac>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <vTaskSwitchContext+0xb0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	e010      	b.n	8003c92 <vTaskSwitchContext+0x46>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <vTaskSwitchContext+0x40>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	607b      	str	r3, [r7, #4]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <vTaskSwitchContext+0x3e>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	491b      	ldr	r1, [pc, #108]	; (8003d00 <vTaskSwitchContext+0xb4>)
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0e4      	beq.n	8003c70 <vTaskSwitchContext+0x24>
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <vTaskSwitchContext+0xb4>)
 8003cb2:	4413      	add	r3, r2
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d104      	bne.n	8003cd6 <vTaskSwitchContext+0x8a>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <vTaskSwitchContext+0xb8>)
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4a06      	ldr	r2, [pc, #24]	; (8003cfc <vTaskSwitchContext+0xb0>)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6013      	str	r3, [r2, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000ce0 	.word	0x20000ce0
 8003cf8:	20000ccc 	.word	0x20000ccc
 8003cfc:	20000cc0 	.word	0x20000cc0
 8003d00:	200007e8 	.word	0x200007e8
 8003d04:	200007e4 	.word	0x200007e4

08003d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60fb      	str	r3, [r7, #12]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <vTaskPlaceOnEventList+0x44>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3318      	adds	r3, #24
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fe fd53 	bl	80027e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	6838      	ldr	r0, [r7, #0]
 8003d40:	f000 fa7c 	bl	800423c <prvAddCurrentTaskToDelayedList>
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	200007e4 	.word	0x200007e4

08003d50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	617b      	str	r3, [r7, #20]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	4619      	mov	r1, r3
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7fe fd0a 	bl	800279a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	68b8      	ldr	r0, [r7, #8]
 8003d96:	f000 fa51 	bl	800423c <prvAddCurrentTaskToDelayedList>
	}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200007e4 	.word	0x200007e4

08003da8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	60fb      	str	r3, [r7, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3318      	adds	r3, #24
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fd3b 	bl	8002854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <xTaskRemoveFromEventList+0xb0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11d      	bne.n	8003e22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fd32 	bl	8002854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <xTaskRemoveFromEventList+0xb4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d903      	bls.n	8003e04 <xTaskRemoveFromEventList+0x5c>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <xTaskRemoveFromEventList+0xb4>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <xTaskRemoveFromEventList+0xb8>)
 8003e12:	441a      	add	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f7fe fcbd 	bl	800279a <vListInsertEnd>
 8003e20:	e005      	b.n	8003e2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3318      	adds	r3, #24
 8003e26:	4619      	mov	r1, r3
 8003e28:	480e      	ldr	r0, [pc, #56]	; (8003e64 <xTaskRemoveFromEventList+0xbc>)
 8003e2a:	f7fe fcb6 	bl	800279a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <xTaskRemoveFromEventList+0xc0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d905      	bls.n	8003e48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <xTaskRemoveFromEventList+0xc4>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e001      	b.n	8003e4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e4c:	697b      	ldr	r3, [r7, #20]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000ce0 	.word	0x20000ce0
 8003e5c:	20000cc0 	.word	0x20000cc0
 8003e60:	200007e8 	.word	0x200007e8
 8003e64:	20000c78 	.word	0x20000c78
 8003e68:	200007e4 	.word	0x200007e4
 8003e6c:	20000ccc 	.word	0x20000ccc

08003e70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <vTaskInternalSetTimeOutState+0x24>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <vTaskInternalSetTimeOutState+0x28>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	605a      	str	r2, [r3, #4]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	20000cd0 	.word	0x20000cd0
 8003e98:	20000cbc 	.word	0x20000cbc

08003e9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	613b      	str	r3, [r7, #16]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	60fb      	str	r3, [r7, #12]
}
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ede:	f000 fe79 	bl	8004bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ee2:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <xTaskCheckForTimeOut+0xbc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d102      	bne.n	8003f02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	e023      	b.n	8003f4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <xTaskCheckForTimeOut+0xc0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d007      	beq.n	8003f1e <xTaskCheckForTimeOut+0x82>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	e015      	b.n	8003f4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d20b      	bcs.n	8003f40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad2      	subs	r2, r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff9b 	bl	8003e70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e004      	b.n	8003f4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f4a:	f000 fe73 	bl	8004c34 <vPortExitCritical>

	return xReturn;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000cbc 	.word	0x20000cbc
 8003f5c:	20000cd0 	.word	0x20000cd0

08003f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <vTaskMissedYield+0x14>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000ccc 	.word	0x20000ccc

08003f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f80:	f000 f852 	bl	8004028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <prvIdleTask+0x28>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d9f9      	bls.n	8003f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <prvIdleTask+0x2c>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f9c:	e7f0      	b.n	8003f80 <prvIdleTask+0x8>
 8003f9e:	bf00      	nop
 8003fa0:	200007e8 	.word	0x200007e8
 8003fa4:	e000ed04 	.word	0xe000ed04

08003fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fae:	2300      	movs	r3, #0
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	e00c      	b.n	8003fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4a12      	ldr	r2, [pc, #72]	; (8004008 <prvInitialiseTaskLists+0x60>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fbbc 	bl	8002740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b37      	cmp	r3, #55	; 0x37
 8003fd2:	d9ef      	bls.n	8003fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fd4:	480d      	ldr	r0, [pc, #52]	; (800400c <prvInitialiseTaskLists+0x64>)
 8003fd6:	f7fe fbb3 	bl	8002740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fda:	480d      	ldr	r0, [pc, #52]	; (8004010 <prvInitialiseTaskLists+0x68>)
 8003fdc:	f7fe fbb0 	bl	8002740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <prvInitialiseTaskLists+0x6c>)
 8003fe2:	f7fe fbad 	bl	8002740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fe6:	480c      	ldr	r0, [pc, #48]	; (8004018 <prvInitialiseTaskLists+0x70>)
 8003fe8:	f7fe fbaa 	bl	8002740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fec:	480b      	ldr	r0, [pc, #44]	; (800401c <prvInitialiseTaskLists+0x74>)
 8003fee:	f7fe fba7 	bl	8002740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <prvInitialiseTaskLists+0x78>)
 8003ff4:	4a05      	ldr	r2, [pc, #20]	; (800400c <prvInitialiseTaskLists+0x64>)
 8003ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <prvInitialiseTaskLists+0x7c>)
 8003ffa:	4a05      	ldr	r2, [pc, #20]	; (8004010 <prvInitialiseTaskLists+0x68>)
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200007e8 	.word	0x200007e8
 800400c:	20000c48 	.word	0x20000c48
 8004010:	20000c5c 	.word	0x20000c5c
 8004014:	20000c78 	.word	0x20000c78
 8004018:	20000c8c 	.word	0x20000c8c
 800401c:	20000ca4 	.word	0x20000ca4
 8004020:	20000c70 	.word	0x20000c70
 8004024:	20000c74 	.word	0x20000c74

08004028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800402e:	e019      	b.n	8004064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004030:	f000 fdd0 	bl	8004bd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004034:	4b10      	ldr	r3, [pc, #64]	; (8004078 <prvCheckTasksWaitingTermination+0x50>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe fc07 	bl	8002854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <prvCheckTasksWaitingTermination+0x54>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3b01      	subs	r3, #1
 800404c:	4a0b      	ldr	r2, [pc, #44]	; (800407c <prvCheckTasksWaitingTermination+0x54>)
 800404e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <prvCheckTasksWaitingTermination+0x58>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <prvCheckTasksWaitingTermination+0x58>)
 8004058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800405a:	f000 fdeb 	bl	8004c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f810 	bl	8004084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <prvCheckTasksWaitingTermination+0x58>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e1      	bne.n	8004030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000c8c 	.word	0x20000c8c
 800407c:	20000cb8 	.word	0x20000cb8
 8004080:	20000ca0 	.word	0x20000ca0

08004084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004092:	2b00      	cmp	r3, #0
 8004094:	d108      	bne.n	80040a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	4618      	mov	r0, r3
 800409c:	f000 ff88 	bl	8004fb0 <vPortFree>
				vPortFree( pxTCB );
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 ff85 	bl	8004fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040a6:	e018      	b.n	80040da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d103      	bne.n	80040ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 ff7c 	bl	8004fb0 <vPortFree>
	}
 80040b8:	e00f      	b.n	80040da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d00a      	beq.n	80040da <prvDeleteTCB+0x56>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
}
 80040d6:	bf00      	nop
 80040d8:	e7fe      	b.n	80040d8 <prvDeleteTCB+0x54>
	}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <prvResetNextTaskUnblockTime+0x38>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <prvResetNextTaskUnblockTime+0x3c>)
 80040f6:	f04f 32ff 	mov.w	r2, #4294967295
 80040fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040fc:	e008      	b.n	8004110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <prvResetNextTaskUnblockTime+0x38>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <prvResetNextTaskUnblockTime+0x3c>)
 800410e:	6013      	str	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000c70 	.word	0x20000c70
 8004120:	20000cd8 	.word	0x20000cd8

08004124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <xTaskGetSchedulerState+0x34>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004132:	2301      	movs	r3, #1
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	e008      	b.n	800414a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004138:	4b08      	ldr	r3, [pc, #32]	; (800415c <xTaskGetSchedulerState+0x38>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d102      	bne.n	8004146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004140:	2302      	movs	r3, #2
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	e001      	b.n	800414a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800414a:	687b      	ldr	r3, [r7, #4]
	}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000cc4 	.word	0x20000cc4
 800415c:	20000ce0 	.word	0x20000ce0

08004160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d056      	beq.n	8004224 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <xTaskPriorityDisinherit+0xd0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	429a      	cmp	r2, r3
 800417e:	d00a      	beq.n	8004196 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	60fb      	str	r3, [r7, #12]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	60bb      	str	r3, [r7, #8]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b8:	1e5a      	subs	r2, r3, #1
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d02c      	beq.n	8004224 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d128      	bne.n	8004224 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fb3c 	bl	8002854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <xTaskPriorityDisinherit+0xd4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d903      	bls.n	8004204 <xTaskPriorityDisinherit+0xa4>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <xTaskPriorityDisinherit+0xd4>)
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4a09      	ldr	r2, [pc, #36]	; (8004238 <xTaskPriorityDisinherit+0xd8>)
 8004212:	441a      	add	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f7fe fabd 	bl	800279a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004224:	697b      	ldr	r3, [r7, #20]
	}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200007e4 	.word	0x200007e4
 8004234:	20000cc0 	.word	0x20000cc0
 8004238:	200007e8 	.word	0x200007e8

0800423c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <prvAddCurrentTaskToDelayedList+0x90>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424c:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fafe 	bl	8002854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d10a      	bne.n	8004276 <prvAddCurrentTaskToDelayedList+0x3a>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4819      	ldr	r0, [pc, #100]	; (80042d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004270:	f7fe fa93 	bl	800279a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004274:	e026      	b.n	80042c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4413      	add	r3, r2
 800427c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800427e:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	429a      	cmp	r2, r3
 800428c:	d209      	bcs.n	80042a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe faa1 	bl	80027e2 <vListInsert>
}
 80042a0:	e010      	b.n	80042c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f7fe fa97 	bl	80027e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d202      	bcs.n	80042c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042be:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000cbc 	.word	0x20000cbc
 80042d0:	200007e4 	.word	0x200007e4
 80042d4:	20000ca4 	.word	0x20000ca4
 80042d8:	20000c74 	.word	0x20000c74
 80042dc:	20000c70 	.word	0x20000c70
 80042e0:	20000cd8 	.word	0x20000cd8

080042e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042ee:	f000 fb07 	bl	8004900 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <xTimerCreateTimerTask+0x80>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d021      	beq.n	800433e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004302:	1d3a      	adds	r2, r7, #4
 8004304:	f107 0108 	add.w	r1, r7, #8
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe f9fd 	bl	800270c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	9202      	str	r2, [sp, #8]
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	2302      	movs	r3, #2
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2300      	movs	r3, #0
 8004322:	460a      	mov	r2, r1
 8004324:	4910      	ldr	r1, [pc, #64]	; (8004368 <xTimerCreateTimerTask+0x84>)
 8004326:	4811      	ldr	r0, [pc, #68]	; (800436c <xTimerCreateTimerTask+0x88>)
 8004328:	f7fe ffaa 	bl	8003280 <xTaskCreateStatic>
 800432c:	4603      	mov	r3, r0
 800432e:	4a10      	ldr	r2, [pc, #64]	; (8004370 <xTimerCreateTimerTask+0x8c>)
 8004330:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <xTimerCreateTimerTask+0x8c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800433a:	2301      	movs	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	613b      	str	r3, [r7, #16]
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800435a:	697b      	ldr	r3, [r7, #20]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000d14 	.word	0x20000d14
 8004368:	080052ac 	.word	0x080052ac
 800436c:	080044a9 	.word	0x080044a9
 8004370:	20000d18 	.word	0x20000d18

08004374 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	623b      	str	r3, [r7, #32]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <xTimerGenericCommand+0x98>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02a      	beq.n	8004400 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	dc18      	bgt.n	80043ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043bc:	f7ff feb2 	bl	8004124 <xTaskGetSchedulerState>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d109      	bne.n	80043da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <xTimerGenericCommand+0x98>)
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	f107 0110 	add.w	r1, r7, #16
 80043ce:	2300      	movs	r3, #0
 80043d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d2:	f7fe fb6d 	bl	8002ab0 <xQueueGenericSend>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24
 80043d8:	e012      	b.n	8004400 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <xTimerGenericCommand+0x98>)
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	f107 0110 	add.w	r1, r7, #16
 80043e2:	2300      	movs	r3, #0
 80043e4:	2200      	movs	r2, #0
 80043e6:	f7fe fb63 	bl	8002ab0 <xQueueGenericSend>
 80043ea:	6278      	str	r0, [r7, #36]	; 0x24
 80043ec:	e008      	b.n	8004400 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <xTimerGenericCommand+0x98>)
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	f107 0110 	add.w	r1, r7, #16
 80043f6:	2300      	movs	r3, #0
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	f7fe fc57 	bl	8002cac <xQueueGenericSendFromISR>
 80043fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004402:	4618      	mov	r0, r3
 8004404:	3728      	adds	r7, #40	; 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000d14 	.word	0x20000d14

08004410 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af02      	add	r7, sp, #8
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <prvProcessExpiredTimer+0x94>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3304      	adds	r3, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe fa13 	bl	8002854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d022      	beq.n	8004482 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	18d1      	adds	r1, r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f000 f8d1 	bl	80045f0 <prvInsertTimerInActiveList>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01f      	beq.n	8004494 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2300      	movs	r3, #0
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	2100      	movs	r1, #0
 800445e:	6978      	ldr	r0, [r7, #20]
 8004460:	f7ff ff88 	bl	8004374 <xTimerGenericCommand>
 8004464:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d113      	bne.n	8004494 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	60fb      	str	r3, [r7, #12]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	b2da      	uxtb	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	4798      	blx	r3
}
 800449c:	bf00      	nop
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000d0c 	.word	0x20000d0c

080044a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044b0:	f107 0308 	add.w	r3, r7, #8
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f857 	bl	8004568 <prvGetNextExpireTime>
 80044ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4619      	mov	r1, r3
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f803 	bl	80044cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044c6:	f000 f8d5 	bl	8004674 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ca:	e7f1      	b.n	80044b0 <prvTimerTask+0x8>

080044cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044d6:	f7ff fa43 	bl	8003960 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f866 	bl	80045b0 <prvSampleTimeNow>
 80044e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d130      	bne.n	800454e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <prvProcessTimerOrBlockTask+0x3c>
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d806      	bhi.n	8004508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044fa:	f7ff fa3f 	bl	800397c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff85 	bl	8004410 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004506:	e024      	b.n	8004552 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <prvProcessTimerOrBlockTask+0x90>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <prvProcessTimerOrBlockTask+0x50>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <prvProcessTimerOrBlockTask+0x52>
 800451c:	2300      	movs	r3, #0
 800451e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <prvProcessTimerOrBlockTask+0x94>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	f7fe fe73 	bl	8003218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004532:	f7ff fa23 	bl	800397c <xTaskResumeAll>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <prvProcessTimerOrBlockTask+0x98>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
}
 800454c:	e001      	b.n	8004552 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800454e:	f7ff fa15 	bl	800397c <xTaskResumeAll>
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000d10 	.word	0x20000d10
 8004560:	20000d14 	.word	0x20000d14
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004570:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <prvGetNextExpireTime+0x44>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <prvGetNextExpireTime+0x16>
 800457a:	2201      	movs	r2, #1
 800457c:	e000      	b.n	8004580 <prvGetNextExpireTime+0x18>
 800457e:	2200      	movs	r2, #0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <prvGetNextExpireTime+0x44>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e001      	b.n	800459c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000d0c 	.word	0x20000d0c

080045b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045b8:	f7ff fa7e 	bl	8003ab8 <xTaskGetTickCount>
 80045bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <prvSampleTimeNow+0x3c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d205      	bcs.n	80045d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045c8:	f000 f936 	bl	8004838 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e002      	b.n	80045da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <prvSampleTimeNow+0x3c>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045e0:	68fb      	ldr	r3, [r7, #12]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000d1c 	.word	0x20000d1c

080045f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d812      	bhi.n	800463c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	429a      	cmp	r2, r3
 8004622:	d302      	bcc.n	800462a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e01b      	b.n	8004662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <prvInsertTimerInActiveList+0x7c>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fe f8d4 	bl	80027e2 <vListInsert>
 800463a:	e012      	b.n	8004662 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d206      	bcs.n	8004652 <prvInsertTimerInActiveList+0x62>
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d302      	bcc.n	8004652 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e007      	b.n	8004662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <prvInsertTimerInActiveList+0x80>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3304      	adds	r3, #4
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f7fe f8c0 	bl	80027e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004662:	697b      	ldr	r3, [r7, #20]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000d10 	.word	0x20000d10
 8004670:	20000d0c 	.word	0x20000d0c

08004674 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08e      	sub	sp, #56	; 0x38
 8004678:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800467a:	e0ca      	b.n	8004812 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	da18      	bge.n	80046b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	3304      	adds	r3, #4
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	61fb      	str	r3, [r7, #28]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046aa:	6850      	ldr	r0, [r2, #4]
 80046ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ae:	6892      	ldr	r2, [r2, #8]
 80046b0:	4611      	mov	r1, r2
 80046b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f2c0 80ab 	blt.w	8004812 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	3304      	adds	r3, #4
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe f8c1 	bl	8002854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046d2:	463b      	mov	r3, r7
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff6b 	bl	80045b0 <prvSampleTimeNow>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b09      	cmp	r3, #9
 80046e0:	f200 8096 	bhi.w	8004810 <prvProcessReceivedCommands+0x19c>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <prvProcessReceivedCommands+0x78>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004715 	.word	0x08004715
 80046f0:	08004715 	.word	0x08004715
 80046f4:	08004715 	.word	0x08004715
 80046f8:	08004789 	.word	0x08004789
 80046fc:	0800479d 	.word	0x0800479d
 8004700:	080047e7 	.word	0x080047e7
 8004704:	08004715 	.word	0x08004715
 8004708:	08004715 	.word	0x08004715
 800470c:	08004789 	.word	0x08004789
 8004710:	0800479d 	.word	0x0800479d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	18d1      	adds	r1, r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004734:	f7ff ff5c 	bl	80045f0 <prvInsertTimerInActiveList>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d069      	beq.n	8004812 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004744:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05e      	beq.n	8004812 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	441a      	add	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	2100      	movs	r1, #0
 8004764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004766:	f7ff fe05 	bl	8004374 <xTimerGenericCommand>
 800476a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d14f      	bne.n	8004812 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	61bb      	str	r3, [r7, #24]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800479a:	e03a      	b.n	8004812 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	617b      	str	r3, [r7, #20]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	18d1      	adds	r1, r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e0:	f7ff ff06 	bl	80045f0 <prvInsertTimerInActiveList>
					break;
 80047e4:	e015      	b.n	8004812 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80047f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f6:	f000 fbdb 	bl	8004fb0 <vPortFree>
 80047fa:	e00a      	b.n	8004812 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800480e:	e000      	b.n	8004812 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004810:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <prvProcessReceivedCommands+0x1c0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1d39      	adds	r1, r7, #4
 8004818:	2200      	movs	r2, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fae2 	bl	8002de4 <xQueueReceive>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	f47f af2a 	bne.w	800467c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	3730      	adds	r7, #48	; 0x30
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000d14 	.word	0x20000d14

08004838 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800483e:	e048      	b.n	80048d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004840:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <prvSwitchTimerLists+0xc0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <prvSwitchTimerLists+0xc0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3304      	adds	r3, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd fffb 	bl	8002854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d02e      	beq.n	80048d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d90e      	bls.n	80048a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <prvSwitchTimerLists+0xc0>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3304      	adds	r3, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7fd ffa0 	bl	80027e2 <vListInsert>
 80048a2:	e016      	b.n	80048d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a4:	2300      	movs	r3, #0
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	2100      	movs	r1, #0
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff fd60 	bl	8004374 <xTimerGenericCommand>
 80048b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	603b      	str	r3, [r7, #0]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <prvSwitchTimerLists+0xc0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1b1      	bne.n	8004840 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <prvSwitchTimerLists+0xc0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <prvSwitchTimerLists+0xc4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <prvSwitchTimerLists+0xc0>)
 80048e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048ea:	4a04      	ldr	r2, [pc, #16]	; (80048fc <prvSwitchTimerLists+0xc4>)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000d0c 	.word	0x20000d0c
 80048fc:	20000d10 	.word	0x20000d10

08004900 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004906:	f000 f965 	bl	8004bd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <prvCheckForValidListAndQueue+0x60>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d120      	bne.n	8004954 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004912:	4814      	ldr	r0, [pc, #80]	; (8004964 <prvCheckForValidListAndQueue+0x64>)
 8004914:	f7fd ff14 	bl	8002740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004918:	4813      	ldr	r0, [pc, #76]	; (8004968 <prvCheckForValidListAndQueue+0x68>)
 800491a:	f7fd ff11 	bl	8002740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <prvCheckForValidListAndQueue+0x6c>)
 8004920:	4a10      	ldr	r2, [pc, #64]	; (8004964 <prvCheckForValidListAndQueue+0x64>)
 8004922:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <prvCheckForValidListAndQueue+0x70>)
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <prvCheckForValidListAndQueue+0x68>)
 8004928:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800492a:	2300      	movs	r3, #0
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <prvCheckForValidListAndQueue+0x74>)
 8004930:	4a11      	ldr	r2, [pc, #68]	; (8004978 <prvCheckForValidListAndQueue+0x78>)
 8004932:	2110      	movs	r1, #16
 8004934:	200a      	movs	r0, #10
 8004936:	f7fe f81f 	bl	8002978 <xQueueGenericCreateStatic>
 800493a:	4603      	mov	r3, r0
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <prvCheckForValidListAndQueue+0x60>)
 800493e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <prvCheckForValidListAndQueue+0x60>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <prvCheckForValidListAndQueue+0x60>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	490b      	ldr	r1, [pc, #44]	; (800497c <prvCheckForValidListAndQueue+0x7c>)
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fc38 	bl	80031c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004954:	f000 f96e 	bl	8004c34 <vPortExitCritical>
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000d14 	.word	0x20000d14
 8004964:	20000ce4 	.word	0x20000ce4
 8004968:	20000cf8 	.word	0x20000cf8
 800496c:	20000d0c 	.word	0x20000d0c
 8004970:	20000d10 	.word	0x20000d10
 8004974:	20000dc0 	.word	0x20000dc0
 8004978:	20000d20 	.word	0x20000d20
 800497c:	080052b4 	.word	0x080052b4

08004980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3b04      	subs	r3, #4
 8004990:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3b04      	subs	r3, #4
 800499e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3b04      	subs	r3, #4
 80049ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049b0:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <pxPortInitialiseStack+0x64>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b14      	subs	r3, #20
 80049ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3b04      	subs	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f06f 0202 	mvn.w	r2, #2
 80049ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3b20      	subs	r3, #32
 80049d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	080049e9 	.word	0x080049e9

080049e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <prvTaskExitError+0x54>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d00a      	beq.n	8004a12 <prvTaskExitError+0x2a>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60fb      	str	r3, [r7, #12]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <prvTaskExitError+0x28>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	60bb      	str	r3, [r7, #8]
}
 8004a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a26:	bf00      	nop
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0fc      	beq.n	8004a28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	2000000c 	.word	0x2000000c

08004a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <pxCurrentTCBConst2>)
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	6808      	ldr	r0, [r1, #0]
 8004a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4a:	f380 8809 	msr	PSP, r0
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8811 	msr	BASEPRI, r0
 8004a5a:	4770      	bx	lr
 8004a5c:	f3af 8000 	nop.w

08004a60 <pxCurrentTCBConst2>:
 8004a60:	200007e4 	.word	0x200007e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop

08004a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a68:	4808      	ldr	r0, [pc, #32]	; (8004a8c <prvPortStartFirstTask+0x24>)
 8004a6a:	6800      	ldr	r0, [r0, #0]
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	f380 8808 	msr	MSP, r0
 8004a72:	f04f 0000 	mov.w	r0, #0
 8004a76:	f380 8814 	msr	CONTROL, r0
 8004a7a:	b662      	cpsie	i
 8004a7c:	b661      	cpsie	f
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	df00      	svc	0
 8004a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a8a:	bf00      	nop
 8004a8c:	e000ed08 	.word	0xe000ed08

08004a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <xPortStartScheduler+0x120>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a46      	ldr	r2, [pc, #280]	; (8004bb4 <xPortStartScheduler+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10a      	bne.n	8004ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	613b      	str	r3, [r7, #16]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	; (8004bb0 <xPortStartScheduler+0x120>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3f      	ldr	r2, [pc, #252]	; (8004bb8 <xPortStartScheduler+0x128>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d10a      	bne.n	8004ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60fb      	str	r3, [r7, #12]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ad6:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <xPortStartScheduler+0x12c>)
 8004ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	4b31      	ldr	r3, [pc, #196]	; (8004bc0 <xPortStartScheduler+0x130>)
 8004afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004afe:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b04:	e009      	b.n	8004b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b06:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d0ef      	beq.n	8004b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b26:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1c3 0307 	rsb	r3, r3, #7
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d00a      	beq.n	8004b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	60bb      	str	r3, [r7, #8]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b5a:	4a1a      	ldr	r2, [pc, #104]	; (8004bc4 <xPortStartScheduler+0x134>)
 8004b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <xPortStartScheduler+0x138>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <xPortStartScheduler+0x138>)
 8004b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <xPortStartScheduler+0x138>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <xPortStartScheduler+0x138>)
 8004b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b7e:	f000 f8dd 	bl	8004d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <xPortStartScheduler+0x13c>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b88:	f000 f8fc 	bl	8004d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <xPortStartScheduler+0x140>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0f      	ldr	r2, [pc, #60]	; (8004bd0 <xPortStartScheduler+0x140>)
 8004b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b98:	f7ff ff66 	bl	8004a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b9c:	f7ff f856 	bl	8003c4c <vTaskSwitchContext>
	prvTaskExitError();
 8004ba0:	f7ff ff22 	bl	80049e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	e000ed00 	.word	0xe000ed00
 8004bb4:	410fc271 	.word	0x410fc271
 8004bb8:	410fc270 	.word	0x410fc270
 8004bbc:	e000e400 	.word	0xe000e400
 8004bc0:	20000e10 	.word	0x20000e10
 8004bc4:	20000e14 	.word	0x20000e14
 8004bc8:	e000ed20 	.word	0xe000ed20
 8004bcc:	2000000c 	.word	0x2000000c
 8004bd0:	e000ef34 	.word	0xe000ef34

08004bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	607b      	str	r3, [r7, #4]
}
 8004bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <vPortEnterCritical+0x58>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <vPortEnterCritical+0x58>)
 8004bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <vPortEnterCritical+0x58>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10f      	bne.n	8004c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <vPortEnterCritical+0x5c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	603b      	str	r3, [r7, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <vPortEnterCritical+0x4a>
	}
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	2000000c 	.word	0x2000000c
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <vPortExitCritical+0x50>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <vPortExitCritical+0x24>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	607b      	str	r3, [r7, #4]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <vPortExitCritical+0x50>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <vPortExitCritical+0x50>)
 8004c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <vPortExitCritical+0x50>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <vPortExitCritical+0x42>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	f383 8811 	msr	BASEPRI, r3
}
 8004c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	2000000c 	.word	0x2000000c
	...

08004c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c90:	f3ef 8009 	mrs	r0, PSP
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <pxCurrentTCBConst>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	f01e 0f10 	tst.w	lr, #16
 8004ca0:	bf08      	it	eq
 8004ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004caa:	6010      	str	r0, [r2, #0]
 8004cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cb4:	f380 8811 	msr	BASEPRI, r0
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f7fe ffc4 	bl	8003c4c <vTaskSwitchContext>
 8004cc4:	f04f 0000 	mov.w	r0, #0
 8004cc8:	f380 8811 	msr	BASEPRI, r0
 8004ccc:	bc09      	pop	{r0, r3}
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6808      	ldr	r0, [r1, #0]
 8004cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd6:	f01e 0f10 	tst.w	lr, #16
 8004cda:	bf08      	it	eq
 8004cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ce0:	f380 8809 	msr	PSP, r0
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	f3af 8000 	nop.w

08004cf0 <pxCurrentTCBConst>:
 8004cf0:	200007e4 	.word	0x200007e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop

08004cf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d12:	f7fe fee1 	bl	8003ad8 <xTaskIncrementTick>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <xPortSysTickHandler+0x40>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
}
 8004d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <vPortSetupTimerInterrupt+0x34>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <vPortSetupTimerInterrupt+0x38>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <vPortSetupTimerInterrupt+0x3c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <vPortSetupTimerInterrupt+0x40>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <vPortSetupTimerInterrupt+0x44>)
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d5e:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <vPortSetupTimerInterrupt+0x34>)
 8004d60:	2207      	movs	r2, #7
 8004d62:	601a      	str	r2, [r3, #0]
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e000e010 	.word	0xe000e010
 8004d74:	e000e018 	.word	0xe000e018
 8004d78:	20000000 	.word	0x20000000
 8004d7c:	10624dd3 	.word	0x10624dd3
 8004d80:	e000e014 	.word	0xe000e014

08004d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d94 <vPortEnableVFP+0x10>
 8004d88:	6801      	ldr	r1, [r0, #0]
 8004d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d8e:	6001      	str	r1, [r0, #0]
 8004d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d92:	bf00      	nop
 8004d94:	e000ed88 	.word	0xe000ed88

08004d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d9e:	f3ef 8305 	mrs	r3, IPSR
 8004da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b0f      	cmp	r3, #15
 8004da8:	d914      	bls.n	8004dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004daa:	4a17      	ldr	r2, [pc, #92]	; (8004e08 <vPortValidateInterruptPriority+0x70>)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <vPortValidateInterruptPriority+0x74>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	7afa      	ldrb	r2, [r7, #11]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d20a      	bcs.n	8004dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
}
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <vPortValidateInterruptPriority+0x78>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ddc:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <vPortValidateInterruptPriority+0x7c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d90a      	bls.n	8004dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	603b      	str	r3, [r7, #0]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <vPortValidateInterruptPriority+0x60>
	}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	e000e3f0 	.word	0xe000e3f0
 8004e0c:	20000e10 	.word	0x20000e10
 8004e10:	e000ed0c 	.word	0xe000ed0c
 8004e14:	20000e14 	.word	0x20000e14

08004e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e24:	f7fe fd9c 	bl	8003960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e28:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <pvPortMalloc+0x180>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e30:	f000 f920 	bl	8005074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e34:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <pvPortMalloc+0x184>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 8093 	bne.w	8004f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01d      	beq.n	8004e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e48:	2208      	movs	r2, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d014      	beq.n	8004e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	3308      	adds	r3, #8
 8004e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <pvPortMalloc+0x6c>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	617b      	str	r3, [r7, #20]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d06e      	beq.n	8004f68 <pvPortMalloc+0x150>
 8004e8a:	4b45      	ldr	r3, [pc, #276]	; (8004fa0 <pvPortMalloc+0x188>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d869      	bhi.n	8004f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <pvPortMalloc+0x18c>)
 8004e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e98:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <pvPortMalloc+0x18c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e9e:	e004      	b.n	8004eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d903      	bls.n	8004ebc <pvPortMalloc+0xa4>
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f1      	bne.n	8004ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ebc:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <pvPortMalloc+0x180>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d050      	beq.n	8004f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2208      	movs	r2, #8
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	1ad2      	subs	r2, r2, r3
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d91f      	bls.n	8004f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <pvPortMalloc+0xf8>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	613b      	str	r3, [r7, #16]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f22:	69b8      	ldr	r0, [r7, #24]
 8004f24:	f000 f908 	bl	8005138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f28:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f36:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <pvPortMalloc+0x190>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d203      	bcs.n	8004f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f42:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <pvPortMalloc+0x190>)
 8004f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <pvPortMalloc+0x184>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <pvPortMalloc+0x194>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a11      	ldr	r2, [pc, #68]	; (8004fac <pvPortMalloc+0x194>)
 8004f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f68:	f7fe fd08 	bl	800397c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <pvPortMalloc+0x174>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60fb      	str	r3, [r7, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <pvPortMalloc+0x172>
	return pvReturn;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20004a20 	.word	0x20004a20
 8004f9c:	20004a34 	.word	0x20004a34
 8004fa0:	20004a24 	.word	0x20004a24
 8004fa4:	20004a18 	.word	0x20004a18
 8004fa8:	20004a28 	.word	0x20004a28
 8004fac:	20004a2c 	.word	0x20004a2c

08004fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04d      	beq.n	800505e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	425b      	negs	r3, r3
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <vPortFree+0xb8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <vPortFree+0x44>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60fb      	str	r3, [r7, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <vPortFree+0x62>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	60bb      	str	r3, [r7, #8]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <vPortFree+0xb8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01e      	beq.n	800505e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11a      	bne.n	800505e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <vPortFree+0xb8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	43db      	mvns	r3, r3
 8005032:	401a      	ands	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005038:	f7fe fc92 	bl	8003960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <vPortFree+0xbc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4413      	add	r3, r2
 8005046:	4a09      	ldr	r2, [pc, #36]	; (800506c <vPortFree+0xbc>)
 8005048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800504a:	6938      	ldr	r0, [r7, #16]
 800504c:	f000 f874 	bl	8005138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <vPortFree+0xc0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	4a06      	ldr	r2, [pc, #24]	; (8005070 <vPortFree+0xc0>)
 8005058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800505a:	f7fe fc8f 	bl	800397c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20004a34 	.word	0x20004a34
 800506c:	20004a24 	.word	0x20004a24
 8005070:	20004a30 	.word	0x20004a30

08005074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800507a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800507e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <prvHeapInit+0xac>)
 8005082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00c      	beq.n	80050a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3307      	adds	r3, #7
 8005092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <prvHeapInit+0xac>)
 80050a4:	4413      	add	r3, r2
 80050a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <prvHeapInit+0xb0>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <prvHeapInit+0xb0>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050c0:	2208      	movs	r2, #8
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0307 	bic.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <prvHeapInit+0xb4>)
 80050d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvHeapInit+0xb4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <prvHeapInit+0xb4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <prvHeapInit+0xb4>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <prvHeapInit+0xb8>)
 8005102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <prvHeapInit+0xbc>)
 800510a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <prvHeapInit+0xc0>)
 800510e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000e18 	.word	0x20000e18
 8005124:	20004a18 	.word	0x20004a18
 8005128:	20004a20 	.word	0x20004a20
 800512c:	20004a28 	.word	0x20004a28
 8005130:	20004a24 	.word	0x20004a24
 8005134:	20004a34 	.word	0x20004a34

08005138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005140:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <prvInsertBlockIntoFreeList+0xac>)
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e002      	b.n	800514c <prvInsertBlockIntoFreeList+0x14>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d8f7      	bhi.n	8005146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4413      	add	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d108      	bne.n	800517a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	441a      	add	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d118      	bne.n	80051c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d00d      	beq.n	80051b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	441a      	add	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e008      	b.n	80051c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051b6:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <prvInsertBlockIntoFreeList+0xb0>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e003      	b.n	80051c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d002      	beq.n	80051d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20004a18 	.word	0x20004a18
 80051e8:	20004a20 	.word	0x20004a20

080051ec <memset>:
 80051ec:	4402      	add	r2, r0
 80051ee:	4603      	mov	r3, r0
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d100      	bne.n	80051f6 <memset+0xa>
 80051f4:	4770      	bx	lr
 80051f6:	f803 1b01 	strb.w	r1, [r3], #1
 80051fa:	e7f9      	b.n	80051f0 <memset+0x4>

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	4d0d      	ldr	r5, [pc, #52]	; (8005234 <__libc_init_array+0x38>)
 8005200:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005202:	1b64      	subs	r4, r4, r5
 8005204:	10a4      	asrs	r4, r4, #2
 8005206:	2600      	movs	r6, #0
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	4d0b      	ldr	r5, [pc, #44]	; (800523c <__libc_init_array+0x40>)
 800520e:	4c0c      	ldr	r4, [pc, #48]	; (8005240 <__libc_init_array+0x44>)
 8005210:	f000 f826 	bl	8005260 <_init>
 8005214:	1b64      	subs	r4, r4, r5
 8005216:	10a4      	asrs	r4, r4, #2
 8005218:	2600      	movs	r6, #0
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f855 3b04 	ldr.w	r3, [r5], #4
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f855 3b04 	ldr.w	r3, [r5], #4
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	080052dc 	.word	0x080052dc
 8005238:	080052dc 	.word	0x080052dc
 800523c:	080052dc 	.word	0x080052dc
 8005240:	080052e0 	.word	0x080052e0

08005244 <memcpy>:
 8005244:	440a      	add	r2, r1
 8005246:	4291      	cmp	r1, r2
 8005248:	f100 33ff 	add.w	r3, r0, #4294967295
 800524c:	d100      	bne.n	8005250 <memcpy+0xc>
 800524e:	4770      	bx	lr
 8005250:	b510      	push	{r4, lr}
 8005252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800525a:	4291      	cmp	r1, r2
 800525c:	d1f9      	bne.n	8005252 <memcpy+0xe>
 800525e:	bd10      	pop	{r4, pc}

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
