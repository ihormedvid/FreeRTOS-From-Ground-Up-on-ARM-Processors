
fr_45_Cmsis_Rtos_EvantFlags.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c4  080065c4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065cc  080065cc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080065d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  2000006c  08006640  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bf4  08006640  00024bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000176ff  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003686  00000000  00000000  000377de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001057  00000000  00000000  0003c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c87  00000000  00000000  0003d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017011  00000000  00000000  0004205e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a27d  00000000  00000000  0005906f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f14  00000000  00000000  000f32ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f9200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064e0 	.word	0x080064e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080064e0 	.word	0x080064e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
static const osEventFlagsAttr_t EventFlagAttr_LED = {
		.name = "LED_Events"
};

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0

  HAL_Init();
 80004e2:	f000 fc05 	bl	8000cf0 <HAL_Init>

  SystemClock_Config();
 80004e6:	f000 f963 	bl	80007b0 <SystemClock_Config>


  MX_GPIO_Init();
 80004ea:	f000 f9e9 	bl	80008c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f9bd 	bl	800086c <MX_USART2_UART_Init>

  // Initial Kernal
  osKernelInitialize();
 80004f2:	f002 f8b5 	bl	8002660 <osKernelInitialize>

  EventFlag_LED = osEventFlagsNew(&EventFlagAttr_LED);
 80004f6:	4844      	ldr	r0, [pc, #272]	; (8000608 <main+0x12c>)
 80004f8:	f002 fa68 	bl	80029cc <osEventFlagsNew>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a43      	ldr	r2, [pc, #268]	; (800060c <main+0x130>)
 8000500:	6013      	str	r3, [r2, #0]

  timer_1_id = osTimerNew(Timer1_Callback, osTimerOnce, NULL, NULL);
 8000502:	2300      	movs	r3, #0
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	4841      	ldr	r0, [pc, #260]	; (8000610 <main+0x134>)
 800050a:	f002 f9b5 	bl	8002878 <osTimerNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a40      	ldr	r2, [pc, #256]	; (8000614 <main+0x138>)
 8000512:	6013      	str	r3, [r2, #0]
  timer_2_id = osTimerNew(Timer2_Callback, osTimerPeriodic, NULL, NULL);
 8000514:	2300      	movs	r3, #0
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	483f      	ldr	r0, [pc, #252]	; (8000618 <main+0x13c>)
 800051c:	f002 f9ac 	bl	8002878 <osTimerNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a3e      	ldr	r2, [pc, #248]	; (800061c <main+0x140>)
 8000524:	6013      	str	r3, [r2, #0]

  // Create Threads
  osThreadAttr_t greenThreadAtrribs = {
 8000526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800052a:	2224      	movs	r2, #36	; 0x24
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fd12 	bl	8005f58 <memset>
 8000534:	4b3a      	ldr	r3, [pc, #232]	; (8000620 <main+0x144>)
 8000536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800053c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000540:	2318      	movs	r3, #24
 8000542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "GreenTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAtrribs);
 8000546:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	4835      	ldr	r0, [pc, #212]	; (8000624 <main+0x148>)
 8000550:	f002 f8d0 	bl	80026f4 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a34      	ldr	r2, [pc, #208]	; (8000628 <main+0x14c>)
 8000558:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAtrribs = {
 800055a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800055e:	2224      	movs	r2, #36	; 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fcf8 	bl	8005f58 <memset>
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <main+0x150>)
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
 800056c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000572:	2318      	movs	r3, #24
 8000574:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "RedTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAtrribs);
 8000576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800057a:	461a      	mov	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	482c      	ldr	r0, [pc, #176]	; (8000630 <main+0x154>)
 8000580:	f002 f8b8 	bl	80026f4 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <main+0x158>)
 8000588:	6013      	str	r3, [r2, #0]

  osThreadAttr_t oragneThreadAtrribs = {
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	2224      	movs	r2, #36	; 0x24
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 fce0 	bl	8005f58 <memset>
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <main+0x15c>)
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
 800059c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80005a2:	2318      	movs	r3, #24
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "OrangeTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &oragneThreadAtrribs);
 80005a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005aa:	461a      	mov	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	4823      	ldr	r0, [pc, #140]	; (800063c <main+0x160>)
 80005b0:	f002 f8a0 	bl	80026f4 <osThreadNew>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <main+0x164>)
 80005b8:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAtrribs = {
 80005ba:	463b      	mov	r3, r7
 80005bc:	2224      	movs	r2, #36	; 0x24
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f005 fcc9 	bl	8005f58 <memset>
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <main+0x168>)
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	2318      	movs	r3, #24
 80005d2:	61bb      	str	r3, [r7, #24]
		  .name = "BlueTask",
		  .stack_size = STACK_SIZE,
		  .priority = osPriorityNormal
  };

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAtrribs);
 80005d4:	463b      	mov	r3, r7
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0x16c>)
 80005dc:	f002 f88a 	bl	80026f4 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a1a      	ldr	r2, [pc, #104]	; (800064c <main+0x170>)
 80005e4:	6013      	str	r3, [r2, #0]

 // uart_sem_id = osSemaphoreNew(1, 1, &uartSemAtrribs);
  uart_mut_id = osMutexNew(&uartMutexAtrribs);
 80005e6:	481a      	ldr	r0, [pc, #104]	; (8000650 <main+0x174>)
 80005e8:	f002 fa95 	bl	8002b16 <osMutexNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <main+0x178>)
 80005f0:	6013      	str	r3, [r2, #0]

  msg_queue_id = osMessageQueueNew(5, sizeof(uint16_t), &msgQueueAtrribs);
 80005f2:	4a19      	ldr	r2, [pc, #100]	; (8000658 <main+0x17c>)
 80005f4:	2102      	movs	r1, #2
 80005f6:	2005      	movs	r0, #5
 80005f8:	f002 fb13 	bl	8002c22 <osMessageQueueNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <main+0x180>)
 8000600:	6013      	str	r3, [r2, #0]

  // Start Kernal
  osKernelStart();
 8000602:	f002 f851 	bl	80026a8 <osKernelStart>

  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x12a>
 8000608:	0800659c 	.word	0x0800659c
 800060c:	20000104 	.word	0x20000104
 8000610:	08000721 	.word	0x08000721
 8000614:	200000f4 	.word	0x200000f4
 8000618:	08000745 	.word	0x08000745
 800061c:	200000f8 	.word	0x200000f8
 8000620:	0800651c 	.word	0x0800651c
 8000624:	080006a1 	.word	0x080006a1
 8000628:	200000e8 	.word	0x200000e8
 800062c:	08006528 	.word	0x08006528
 8000630:	08000661 	.word	0x08000661
 8000634:	200000e4 	.word	0x200000e4
 8000638:	08006530 	.word	0x08006530
 800063c:	08000681 	.word	0x08000681
 8000640:	200000f0 	.word	0x200000f0
 8000644:	0800653c 	.word	0x0800653c
 8000648:	080006c1 	.word	0x080006c1
 800064c:	200000ec 	.word	0x200000ec
 8000650:	08006574 	.word	0x08006574
 8000654:	200000fc 	.word	0x200000fc
 8000658:	08006584 	.word	0x08006584
 800065c:	20000100 	.word	0x20000100

08000660 <vRedLedControllerTask>:
}

int32_t rcv_msg[1];


void vRedLedControllerTask(void *pvParameters) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]


	while(1) {

	//	osEventFlagsSet(EventFlag_LED, 0x01);
		Red_TaskProfiler++;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <vRedLedControllerTask+0x1c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a03      	ldr	r2, [pc, #12]	; (800067c <vRedLedControllerTask+0x1c>)
 8000670:	6013      	str	r3, [r2, #0]

		osDelay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f002 f8d0 	bl	8002818 <osDelay>
		Red_TaskProfiler++;
 8000678:	e7f6      	b.n	8000668 <vRedLedControllerTask+0x8>
 800067a:	bf00      	nop
 800067c:	200000d0 	.word	0x200000d0

08000680 <vOrangeLedControllerTask>:


	}
}

void vOrangeLedControllerTask(void *pvParameters) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	while(1) {
		Orange_TaskProfiler++;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <vOrangeLedControllerTask+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a03      	ldr	r2, [pc, #12]	; (800069c <vOrangeLedControllerTask+0x1c>)
 8000690:	6013      	str	r3, [r2, #0]

		osDelay(100);
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f002 f8c0 	bl	8002818 <osDelay>
		Orange_TaskProfiler++;
 8000698:	e7f6      	b.n	8000688 <vOrangeLedControllerTask+0x8>
 800069a:	bf00      	nop
 800069c:	200000cc 	.word	0x200000cc

080006a0 <vGreenLedControllerTask>:
	}
}

void vGreenLedControllerTask(void *pvParameters) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]


	while(1) {
		Green_TaskProfiler++;
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <vGreenLedControllerTask+0x1c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a03      	ldr	r2, [pc, #12]	; (80006bc <vGreenLedControllerTask+0x1c>)
 80006b0:	6013      	str	r3, [r2, #0]

		osDelay(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f002 f8b0 	bl	8002818 <osDelay>
		Green_TaskProfiler++;
 80006b8:	e7f6      	b.n	80006a8 <vGreenLedControllerTask+0x8>
 80006ba:	bf00      	nop
 80006bc:	200000d4 	.word	0x200000d4

080006c0 <vBlueLedControllerTask>:

	}
}

void vBlueLedControllerTask(void *pvParameters) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]


	osTimerStart(timer_1_id, 5000); // Set timer 1 period to 5000 ticks
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <vBlueLedControllerTask+0x4c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f94d 	bl	8002970 <osTimerStart>
	osTimerStart(timer_2_id, 1000); // Set timer 2 period to 1000 ticks
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <vBlueLedControllerTask+0x50>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f946 	bl	8002970 <osTimerStart>



	while(1) {

		osEventFlagsWait(EventFlag_LED, 0x01, osFlagsWaitAny, osWaitForever);
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <vBlueLedControllerTask+0x54>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	f002 f9ab 	bl	8002a4a <osEventFlagsWait>
		printf("This is BLUETask \r\n");
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <vBlueLedControllerTask+0x58>)
 80006f6:	f005 fb4f 	bl	8005d98 <puts>

		Blue_TaskProfiler++;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <vBlueLedControllerTask+0x5c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <vBlueLedControllerTask+0x5c>)
 8000702:	6013      	str	r3, [r2, #0]


		osDelay(100);
 8000704:	2064      	movs	r0, #100	; 0x64
 8000706:	f002 f887 	bl	8002818 <osDelay>
		osEventFlagsWait(EventFlag_LED, 0x01, osFlagsWaitAny, osWaitForever);
 800070a:	e7eb      	b.n	80006e4 <vBlueLedControllerTask+0x24>
 800070c:	200000f4 	.word	0x200000f4
 8000710:	200000f8 	.word	0x200000f8
 8000714:	20000104 	.word	0x20000104
 8000718:	08006548 	.word	0x08006548
 800071c:	200000d8 	.word	0x200000d8

08000720 <Timer1_Callback>:
	}
}

void Timer1_Callback(void *arg) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	Timer_1_TaskProfiler++;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <Timer1_Callback+0x20>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <Timer1_Callback+0x20>)
 8000730:	6013      	str	r3, [r2, #0]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	200000dc 	.word	0x200000dc

08000744 <Timer2_Callback>:

void Timer2_Callback(void *arg) {
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	Timer_2_TaskProfiler++;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <Timer2_Callback+0x20>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <Timer2_Callback+0x20>)
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000e0 	.word	0x200000e0

08000768 <USART2_write>:

int USART2_write(int ch) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

	while(!(USART2->SR & 0x0080)){}
 8000770:	bf00      	nop
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <USART2_write+0x2c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <USART2_write+0xa>
	USART2->DR = (ch & 0xFF);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <USART2_write+0x2c>)
 8000782:	b2db      	uxtb	r3, r3
 8000784:	6053      	str	r3, [r2, #4]

	return ch;
 8000786:	687b      	ldr	r3, [r7, #4]
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	40004400 	.word	0x40004400

08000798 <__io_putchar>:

int __io_putchar(int ch){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffe1 	bl	8000768 <USART2_write>
	return ch;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fbca 	bl	8005f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xb4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xb4>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xb4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <SystemClock_Config+0xb8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SystemClock_Config+0xb8>)
 80007fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <SystemClock_Config+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2310      	movs	r3, #16
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fd0d 	bl	8001240 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800082c:	f000 f874 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f000 ff70 	bl	8001730 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000856:	f000 f85f 	bl	8000918 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f001 fbd6 	bl	8002054 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f833 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000088 	.word	0x20000088
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_GPIO_Init+0x30>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <MX_GPIO_Init+0x30>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_GPIO_Init+0x30>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000906:	f000 fa15 	bl	8000d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40010000 	.word	0x40010000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x54>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <HAL_MspInit+0x54>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x54>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x54>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_MspInit+0x54>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x54>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	f06f 0001 	mvn.w	r0, #1
 800096a:	f000 fabb 	bl	8000ee4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12b      	bne.n	80009f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f2:	f000 faa1 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <HAL_InitTick+0xd0>)
 8000a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a24:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <HAL_InitTick+0xd0>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <HAL_InitTick+0xd0>)
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a38:	f107 020c 	add.w	r2, r7, #12
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 f854 	bl	8001af0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a48:	f001 f83e 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8000a4c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <HAL_InitTick+0xd4>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a5e:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <HAL_InitTick+0xdc>)
 8000a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a82:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a84:	f001 f866 	bl	8001b54 <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d11b      	bne.n	8000ace <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a96:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <HAL_InitTick+0xd8>)
 8000a98:	f001 f8b6 	bl	8001c08 <HAL_TIM_Base_Start_IT>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d111      	bne.n	8000ace <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aaa:	2019      	movs	r0, #25
 8000aac:	f000 fa36 	bl	8000f1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	d808      	bhi.n	8000ac8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	2019      	movs	r0, #25
 8000abc:	f000 fa12 	bl	8000ee4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_InitTick+0xe0>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e002      	b.n	8000ace <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3730      	adds	r7, #48	; 0x30
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20000108 	.word	0x20000108
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	20000004 	.word	0x20000004

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b22:	f001 f8d3 	bl	8001ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000108 	.word	0x20000108

08000b30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e00a      	b.n	8000b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b42:	f3af 8000 	nop.w
 8000b46:	4601      	mov	r1, r0
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	b2ca      	uxtb	r2, r1
 8000b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf0      	blt.n	8000b42 <_read+0x12>
  }

  return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e009      	b.n	8000b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fe07 	bl	8000798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf1      	blt.n	8000b7c <_write+0x12>
  }
  return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_close>:

int _close(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bca:	605a      	str	r2, [r3, #4]
  return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_isatty>:

int _isatty(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f005 f9da 	bl	8005ff4 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20020000 	.word	0x20020000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000150 	.word	0x20000150
 8000c74:	20004bf8 	.word	0x20004bf8

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ffd7 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f005 f999 	bl	8006000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc05 	bl	80004dc <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ce0:	080065d4 	.word	0x080065d4
  ldr r2, =_sbss
 8000ce4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ce8:	20004bf4 	.word	0x20004bf4

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f8d8 	bl	8000ece <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f7ff fe74 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fdfe 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000154 	.word	0x20000154

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000154 	.word	0x20000154

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff4c 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef6:	f7ff ff61 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000efa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff ffb1 	bl	8000e68 <NVIC_EncodePriority>
 8000f06:	4602      	mov	r2, r0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff80 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff54 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e159      	b.n	8001208 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8148 	bne.w	8001202 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a2 	beq.w	8001202 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a56      	ldr	r2, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b54      	ldr	r3, [pc, #336]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a49      	ldr	r2, [pc, #292]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x202>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_GPIO_Init+0x2f4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x1fe>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a47      	ldr	r2, [pc, #284]	; (8001230 <HAL_GPIO_Init+0x2f8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a46      	ldr	r2, [pc, #280]	; (8001234 <HAL_GPIO_Init+0x2fc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x1f6>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x1f2>
 8001126:	2304      	movs	r3, #4
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112a:	2307      	movs	r3, #7
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x204>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <HAL_GPIO_Init+0x304>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a2f      	ldr	r2, [pc, #188]	; (800123c <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <HAL_GPIO_Init+0x304>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a24      	ldr	r2, [pc, #144]	; (800123c <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_GPIO_Init+0x304>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_GPIO_Init+0x304>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_GPIO_Init+0x304>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_GPIO_Init+0x304>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f aea2 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e267      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d075      	beq.n	800134a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d00c      	beq.n	8001284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b85      	ldr	r3, [pc, #532]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	2b08      	cmp	r3, #8
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b82      	ldr	r3, [pc, #520]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d05b      	beq.n	8001348 <HAL_RCC_OscConfig+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d157      	bne.n	8001348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e242      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x74>
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x98>
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6c      	ldr	r2, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a68      	ldr	r2, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b66      	ldr	r3, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a65      	ldr	r2, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fd30 	bl	8000d5c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fd2c 	bl	8000d5c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e207      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xc0>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fd1c 	bl	8000d5c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fd18 	bl	8000d5c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1f3      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0xe8>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d063      	beq.n	800141e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1c7      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4937      	ldr	r1, [pc, #220]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e03a      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x244>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fcd1 	bl	8000d5c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fccd 	bl	8000d5c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1a8      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4925      	ldr	r1, [pc, #148]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_OscConfig+0x244>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcb0 	bl	8000d5c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fcac 	bl	8000d5c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e187      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d036      	beq.n	8001498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d016      	beq.n	8001460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x248>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fc90 	bl	8000d5c <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fc8c 	bl	8000d5c <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e167      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x200>
 800145e:	e01b      	b.n	8001498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_OscConfig+0x248>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fc79 	bl	8000d5c <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00e      	b.n	800148c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fc75 	bl	8000d5c <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d907      	bls.n	800148c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e150      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 8001480:	40023800 	.word	0x40023800
 8001484:	42470000 	.word	0x42470000
 8001488:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ea      	bne.n	800146e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8097 	beq.w	80015d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b7d      	ldr	r3, [pc, #500]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a7c      	ldr	r2, [pc, #496]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b77      	ldr	r3, [pc, #476]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a73      	ldr	r2, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fc35 	bl	8000d5c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff fc31 	bl	8000d5c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e10c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x2ea>
 800151c:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b05      	cmp	r3, #5
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x30c>
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5e      	ldr	r2, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5b      	ldr	r2, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800154c:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fbf6 	bl	8000d5c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff fbf2 	bl	8000d5c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0cb      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ee      	beq.n	8001574 <HAL_RCC_OscConfig+0x334>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff fbe0 	bl	8000d5c <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff fbdc 	bl	8000d5c <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0b5      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ee      	bne.n	80015a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c8:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a1 	beq.w	8001720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015de:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d05c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d141      	bne.n	8001676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbb0 	bl	8000d5c <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fbac 	bl	8000d5c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e087      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	491b      	ldr	r1, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb85 	bl	8000d5c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb81 	bl	8000d5c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e05c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x416>
 8001674:	e054      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb6e 	bl	8000d5c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb6a 	bl	8000d5c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e045      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x444>
 80016a2:	e03d      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e038      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x4ec>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d028      	beq.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d121      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d11a      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ec:	4013      	ands	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	3b01      	subs	r3, #1
 8001706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cc      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d90c      	bls.n	800176c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d044      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e067      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4934      	ldr	r1, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff fa9c 	bl	8000d5c <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fa98 	bl	8000d5c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20c      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f898 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	080065ac 	.word	0x080065ac
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001900:	b090      	sub	sp, #64	; 0x40
 8001902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
 8001908:	2300      	movs	r3, #0
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800190c:	2300      	movs	r3, #0
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d00d      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x40>
 8001920:	2b08      	cmp	r3, #8
 8001922:	f200 80a1 	bhi.w	8001a68 <HAL_RCC_GetSysClockFreq+0x16c>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x34>
 800192a:	2b04      	cmp	r3, #4
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x3a>
 800192e:	e09b      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001934:	e09b      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800193a:	e098      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x180>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d028      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	2200      	movs	r2, #0
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	627a      	str	r2, [r7, #36]	; 0x24
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001964:	2100      	movs	r1, #0
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001968:	fb03 f201 	mul.w	r2, r3, r1
 800196c:	2300      	movs	r3, #0
 800196e:	fb00 f303 	mul.w	r3, r0, r3
 8001972:	4413      	add	r3, r2
 8001974:	4a43      	ldr	r2, [pc, #268]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001976:	fba0 1202 	umull	r1, r2, r0, r2
 800197a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800197c:	460a      	mov	r2, r1
 800197e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001982:	4413      	add	r3, r2
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001988:	2200      	movs	r2, #0
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	61fa      	str	r2, [r7, #28]
 800198e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001996:	f7fe fc23 	bl	80001e0 <__aeabi_uldivmod>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4613      	mov	r3, r2
 80019a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a2:	e053      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x180>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	2200      	movs	r2, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	617a      	str	r2, [r7, #20]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019b6:	f04f 0b00 	mov.w	fp, #0
 80019ba:	4652      	mov	r2, sl
 80019bc:	465b      	mov	r3, fp
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ebb2 080a 	subs.w	r8, r2, sl
 80019d6:	eb63 090b 	sbc.w	r9, r3, fp
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ee:	ebb2 0408 	subs.w	r4, r2, r8
 80019f2:	eb63 0509 	sbc.w	r5, r3, r9
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	00eb      	lsls	r3, r5, #3
 8001a00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a04:	00e2      	lsls	r2, r4, #3
 8001a06:	4614      	mov	r4, r2
 8001a08:	461d      	mov	r5, r3
 8001a0a:	eb14 030a 	adds.w	r3, r4, sl
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	eb45 030b 	adc.w	r3, r5, fp
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a22:	4629      	mov	r1, r5
 8001a24:	028b      	lsls	r3, r1, #10
 8001a26:	4621      	mov	r1, r4
 8001a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	028a      	lsls	r2, r1, #10
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	2200      	movs	r2, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	60fa      	str	r2, [r7, #12]
 8001a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a40:	f7fe fbce 	bl	80001e0 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	3301      	adds	r3, #1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3740      	adds	r7, #64	; 0x40
 8001a74:	46bd      	mov	sp, r7
 8001a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	017d7840 	.word	0x017d7840

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	080065bc 	.word	0x080065bc

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffdc 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0b5b      	lsrs	r3, r3, #13
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	080065bc 	.word	0x080065bc

08001af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_GetClockConfig+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e041      	b.n	8001bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f839 	bl	8001bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 f9ca 	bl	8001f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d001      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e044      	b.n	8001caa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d018      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4a:	d013      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00e      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d004      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0x6c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d111      	bne.n	8001c98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d010      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	e007      	b.n	8001ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40010000 	.word	0x40010000
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40000800 	.word	0x40000800
 8001cc4:	40000c00 	.word	0x40000c00
 8001cc8:	40014000 	.word	0x40014000

08001ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d122      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d11b      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0202 	mvn.w	r2, #2
 8001cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8ee 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8e0 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8f1 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0204 	mvn.w	r2, #4
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8c4 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8b6 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8c7 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0208 	mvn.w	r2, #8
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f89a 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f88c 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f89d 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0210 	mvn.w	r2, #16
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f870 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f862 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f873 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0201 	mvn.w	r2, #1
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd52 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b80      	cmp	r3, #128	; 0x80
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8e2 	bl	8002040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f838 	bl	8001f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0220 	mvn.w	r2, #32
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8ac 	bl	800202c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	; (8002010 <TIM_Base_SetConfig+0xe4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00f      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a31      	ldr	r2, [pc, #196]	; (8002014 <TIM_Base_SetConfig+0xe8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a30      	ldr	r2, [pc, #192]	; (8002018 <TIM_Base_SetConfig+0xec>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x38>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	; (800201c <TIM_Base_SetConfig+0xf0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <TIM_Base_SetConfig+0xe4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d017      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a22      	ldr	r2, [pc, #136]	; (8002014 <TIM_Base_SetConfig+0xe8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <TIM_Base_SetConfig+0xec>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00f      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <TIM_Base_SetConfig+0xf0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <TIM_Base_SetConfig+0xf4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <TIM_Base_SetConfig+0xf8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <TIM_Base_SetConfig+0xfc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <TIM_Base_SetConfig+0xe4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	615a      	str	r2, [r3, #20]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40010000 	.word	0x40010000
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40014000 	.word	0x40014000
 8002024:	40014400 	.word	0x40014400
 8002028:	40014800 	.word	0x40014800

0800202c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e03f      	b.n	80020e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fc7e 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2224      	movs	r2, #36	; 0x24
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f829 	bl	80020f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b0c0      	sub	sp, #256	; 0x100
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210c:	68d9      	ldr	r1, [r3, #12]
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	ea40 0301 	orr.w	r3, r0, r1
 8002118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800211a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	431a      	orrs	r2, r3
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	431a      	orrs	r2, r3
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002148:	f021 010c 	bic.w	r1, r1, #12
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002156:	430b      	orrs	r3, r1
 8002158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216a:	6999      	ldr	r1, [r3, #24]
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	ea40 0301 	orr.w	r3, r0, r1
 8002176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <UART_SetConfig+0x2cc>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d005      	beq.n	8002190 <UART_SetConfig+0xa0>
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b8d      	ldr	r3, [pc, #564]	; (80023c0 <UART_SetConfig+0x2d0>)
 800218c:	429a      	cmp	r2, r3
 800218e:	d104      	bne.n	800219a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002190:	f7ff fc9a 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002194:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002198:	e003      	b.n	80021a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800219a:	f7ff fc81 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 800219e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ac:	f040 810c 	bne.w	80023c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021b4:	2200      	movs	r2, #0
 80021b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021c2:	4622      	mov	r2, r4
 80021c4:	462b      	mov	r3, r5
 80021c6:	1891      	adds	r1, r2, r2
 80021c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80021ca:	415b      	adcs	r3, r3
 80021cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021d2:	4621      	mov	r1, r4
 80021d4:	eb12 0801 	adds.w	r8, r2, r1
 80021d8:	4629      	mov	r1, r5
 80021da:	eb43 0901 	adc.w	r9, r3, r1
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021f2:	4690      	mov	r8, r2
 80021f4:	4699      	mov	r9, r3
 80021f6:	4623      	mov	r3, r4
 80021f8:	eb18 0303 	adds.w	r3, r8, r3
 80021fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002200:	462b      	mov	r3, r5
 8002202:	eb49 0303 	adc.w	r3, r9, r3
 8002206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002216:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800221a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800221e:	460b      	mov	r3, r1
 8002220:	18db      	adds	r3, r3, r3
 8002222:	653b      	str	r3, [r7, #80]	; 0x50
 8002224:	4613      	mov	r3, r2
 8002226:	eb42 0303 	adc.w	r3, r2, r3
 800222a:	657b      	str	r3, [r7, #84]	; 0x54
 800222c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002234:	f7fd ffd4 	bl	80001e0 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <UART_SetConfig+0x2d4>)
 800223e:	fba3 2302 	umull	r2, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	011c      	lsls	r4, r3, #4
 8002246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002250:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002258:	4642      	mov	r2, r8
 800225a:	464b      	mov	r3, r9
 800225c:	1891      	adds	r1, r2, r2
 800225e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002260:	415b      	adcs	r3, r3
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002268:	4641      	mov	r1, r8
 800226a:	eb12 0a01 	adds.w	sl, r2, r1
 800226e:	4649      	mov	r1, r9
 8002270:	eb43 0b01 	adc.w	fp, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002288:	4692      	mov	sl, r2
 800228a:	469b      	mov	fp, r3
 800228c:	4643      	mov	r3, r8
 800228e:	eb1a 0303 	adds.w	r3, sl, r3
 8002292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002296:	464b      	mov	r3, r9
 8002298:	eb4b 0303 	adc.w	r3, fp, r3
 800229c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022b4:	460b      	mov	r3, r1
 80022b6:	18db      	adds	r3, r3, r3
 80022b8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ba:	4613      	mov	r3, r2
 80022bc:	eb42 0303 	adc.w	r3, r2, r3
 80022c0:	647b      	str	r3, [r7, #68]	; 0x44
 80022c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022ca:	f7fd ff89 	bl	80001e0 <__aeabi_uldivmod>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <UART_SetConfig+0x2d4>)
 80022d6:	fba3 2301 	umull	r2, r3, r3, r1
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2264      	movs	r2, #100	; 0x64
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	1acb      	subs	r3, r1, r3
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022ea:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <UART_SetConfig+0x2d4>)
 80022ec:	fba3 2302 	umull	r2, r3, r3, r2
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022f8:	441c      	add	r4, r3
 80022fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022fe:	2200      	movs	r2, #0
 8002300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002304:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	1891      	adds	r1, r2, r2
 8002312:	63b9      	str	r1, [r7, #56]	; 0x38
 8002314:	415b      	adcs	r3, r3
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800231c:	4641      	mov	r1, r8
 800231e:	1851      	adds	r1, r2, r1
 8002320:	6339      	str	r1, [r7, #48]	; 0x30
 8002322:	4649      	mov	r1, r9
 8002324:	414b      	adcs	r3, r1
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002334:	4659      	mov	r1, fp
 8002336:	00cb      	lsls	r3, r1, #3
 8002338:	4651      	mov	r1, sl
 800233a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800233e:	4651      	mov	r1, sl
 8002340:	00ca      	lsls	r2, r1, #3
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	4603      	mov	r3, r0
 8002348:	4642      	mov	r2, r8
 800234a:	189b      	adds	r3, r3, r2
 800234c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002350:	464b      	mov	r3, r9
 8002352:	460a      	mov	r2, r1
 8002354:	eb42 0303 	adc.w	r3, r2, r3
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002368:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800236c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002370:	460b      	mov	r3, r1
 8002372:	18db      	adds	r3, r3, r3
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
 8002376:	4613      	mov	r3, r2
 8002378:	eb42 0303 	adc.w	r3, r2, r3
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800237e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002386:	f7fd ff2b 	bl	80001e0 <__aeabi_uldivmod>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <UART_SetConfig+0x2d4>)
 8002390:	fba3 1302 	umull	r1, r3, r3, r2
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	2164      	movs	r1, #100	; 0x64
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	3332      	adds	r3, #50	; 0x32
 80023a2:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <UART_SetConfig+0x2d4>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	f003 0207 	and.w	r2, r3, #7
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4422      	add	r2, r4
 80023b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023b8:	e106      	b.n	80025c8 <UART_SetConfig+0x4d8>
 80023ba:	bf00      	nop
 80023bc:	40011000 	.word	0x40011000
 80023c0:	40011400 	.word	0x40011400
 80023c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023cc:	2200      	movs	r2, #0
 80023ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023da:	4642      	mov	r2, r8
 80023dc:	464b      	mov	r3, r9
 80023de:	1891      	adds	r1, r2, r2
 80023e0:	6239      	str	r1, [r7, #32]
 80023e2:	415b      	adcs	r3, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ea:	4641      	mov	r1, r8
 80023ec:	1854      	adds	r4, r2, r1
 80023ee:	4649      	mov	r1, r9
 80023f0:	eb43 0501 	adc.w	r5, r3, r1
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	00eb      	lsls	r3, r5, #3
 80023fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002402:	00e2      	lsls	r2, r4, #3
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	4643      	mov	r3, r8
 800240a:	18e3      	adds	r3, r4, r3
 800240c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002410:	464b      	mov	r3, r9
 8002412:	eb45 0303 	adc.w	r3, r5, r3
 8002416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002436:	4629      	mov	r1, r5
 8002438:	008b      	lsls	r3, r1, #2
 800243a:	4621      	mov	r1, r4
 800243c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002440:	4621      	mov	r1, r4
 8002442:	008a      	lsls	r2, r1, #2
 8002444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002448:	f7fd feca 	bl	80001e0 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4b60      	ldr	r3, [pc, #384]	; (80025d4 <UART_SetConfig+0x4e4>)
 8002452:	fba3 2302 	umull	r2, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	011c      	lsls	r4, r3, #4
 800245a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800245e:	2200      	movs	r2, #0
 8002460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800246c:	4642      	mov	r2, r8
 800246e:	464b      	mov	r3, r9
 8002470:	1891      	adds	r1, r2, r2
 8002472:	61b9      	str	r1, [r7, #24]
 8002474:	415b      	adcs	r3, r3
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247c:	4641      	mov	r1, r8
 800247e:	1851      	adds	r1, r2, r1
 8002480:	6139      	str	r1, [r7, #16]
 8002482:	4649      	mov	r1, r9
 8002484:	414b      	adcs	r3, r1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002494:	4659      	mov	r1, fp
 8002496:	00cb      	lsls	r3, r1, #3
 8002498:	4651      	mov	r1, sl
 800249a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249e:	4651      	mov	r1, sl
 80024a0:	00ca      	lsls	r2, r1, #3
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	4642      	mov	r2, r8
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024b0:	464b      	mov	r3, r9
 80024b2:	460a      	mov	r2, r1
 80024b4:	eb42 0303 	adc.w	r3, r2, r3
 80024b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80024c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024d4:	4649      	mov	r1, r9
 80024d6:	008b      	lsls	r3, r1, #2
 80024d8:	4641      	mov	r1, r8
 80024da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024de:	4641      	mov	r1, r8
 80024e0:	008a      	lsls	r2, r1, #2
 80024e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024e6:	f7fd fe7b 	bl	80001e0 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <UART_SetConfig+0x4e4>)
 80024f2:	fba3 2301 	umull	r2, r3, r3, r1
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2264      	movs	r2, #100	; 0x64
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	1acb      	subs	r3, r1, r3
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <UART_SetConfig+0x4e4>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002510:	441c      	add	r4, r3
 8002512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002516:	2200      	movs	r2, #0
 8002518:	673b      	str	r3, [r7, #112]	; 0x70
 800251a:	677a      	str	r2, [r7, #116]	; 0x74
 800251c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002520:	4642      	mov	r2, r8
 8002522:	464b      	mov	r3, r9
 8002524:	1891      	adds	r1, r2, r2
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	415b      	adcs	r3, r3
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002530:	4641      	mov	r1, r8
 8002532:	1851      	adds	r1, r2, r1
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	4649      	mov	r1, r9
 8002538:	414b      	adcs	r3, r1
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002548:	4659      	mov	r1, fp
 800254a:	00cb      	lsls	r3, r1, #3
 800254c:	4651      	mov	r1, sl
 800254e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002552:	4651      	mov	r1, sl
 8002554:	00ca      	lsls	r2, r1, #3
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	4603      	mov	r3, r0
 800255c:	4642      	mov	r2, r8
 800255e:	189b      	adds	r3, r3, r2
 8002560:	66bb      	str	r3, [r7, #104]	; 0x68
 8002562:	464b      	mov	r3, r9
 8002564:	460a      	mov	r2, r1
 8002566:	eb42 0303 	adc.w	r3, r2, r3
 800256a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	663b      	str	r3, [r7, #96]	; 0x60
 8002576:	667a      	str	r2, [r7, #100]	; 0x64
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002584:	4649      	mov	r1, r9
 8002586:	008b      	lsls	r3, r1, #2
 8002588:	4641      	mov	r1, r8
 800258a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800258e:	4641      	mov	r1, r8
 8002590:	008a      	lsls	r2, r1, #2
 8002592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002596:	f7fd fe23 	bl	80001e0 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <UART_SetConfig+0x4e4>)
 80025a0:	fba3 1302 	umull	r1, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2164      	movs	r1, #100	; 0x64
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3332      	adds	r3, #50	; 0x32
 80025b2:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <UART_SetConfig+0x4e4>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f003 020f 	and.w	r2, r3, #15
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4422      	add	r2, r4
 80025c6:	609a      	str	r2, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025ce:	46bd      	mov	sp, r7
 80025d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d4:	51eb851f 	.word	0x51eb851f

080025d8 <__NVIC_SetPriority>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Handler+0x1c>)
 8002632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002634:	f002 f95e 	bl	80048f4 <xTaskGetSchedulerState>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d001      	beq.n	8002642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800263e:	f003 f81b 	bl	8005678 <xPortSysTickHandler>
  }
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002650:	2100      	movs	r1, #0
 8002652:	f06f 0004 	mvn.w	r0, #4
 8002656:	f7ff ffbf 	bl	80025d8 <__NVIC_SetPriority>
#endif
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002666:	f3ef 8305 	mrs	r3, IPSR
 800266a:	603b      	str	r3, [r7, #0]
  return(result);
 800266c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002672:	f06f 0305 	mvn.w	r3, #5
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	e00c      	b.n	8002694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <osKernelInitialize+0x44>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <osKernelInitialize+0x44>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	e002      	b.n	8002694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000158 	.word	0x20000158

080026a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ae:	f3ef 8305 	mrs	r3, IPSR
 80026b2:	603b      	str	r3, [r7, #0]
  return(result);
 80026b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80026ba:	f06f 0305 	mvn.w	r3, #5
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	e010      	b.n	80026e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <osKernelStart+0x48>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d109      	bne.n	80026de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80026ca:	f7ff ffbf 	bl	800264c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <osKernelStart+0x48>)
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80026d4:	f001 fc8a 	bl	8003fec <vTaskStartScheduler>
      stat = osOK;
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	e002      	b.n	80026e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026e4:	687b      	ldr	r3, [r7, #4]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000158 	.word	0x20000158

080026f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08e      	sub	sp, #56	; 0x38
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002704:	f3ef 8305 	mrs	r3, IPSR
 8002708:	617b      	str	r3, [r7, #20]
  return(result);
 800270a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800270c:	2b00      	cmp	r3, #0
 800270e:	d17e      	bne.n	800280e <osThreadNew+0x11a>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d07b      	beq.n	800280e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800271a:	2318      	movs	r3, #24
 800271c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d045      	beq.n	80027ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <osThreadNew+0x48>
        name = attr->name;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <osThreadNew+0x6e>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b38      	cmp	r3, #56	; 0x38
 8002754:	d805      	bhi.n	8002762 <osThreadNew+0x6e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <osThreadNew+0x72>
        return (NULL);
 8002762:	2300      	movs	r3, #0
 8002764:	e054      	b.n	8002810 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00e      	beq.n	800279c <osThreadNew+0xa8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b5b      	cmp	r3, #91	; 0x5b
 8002784:	d90a      	bls.n	800279c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <osThreadNew+0xa8>
        mem = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e010      	b.n	80027be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10c      	bne.n	80027be <osThreadNew+0xca>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d108      	bne.n	80027be <osThreadNew+0xca>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <osThreadNew+0xca>
          mem = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e001      	b.n	80027be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d110      	bne.n	80027e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027cc:	9202      	str	r2, [sp, #8]
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6a3a      	ldr	r2, [r7, #32]
 80027d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f001 fa30 	bl	8003c40 <xTaskCreateStatic>
 80027e0:	4603      	mov	r3, r0
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e013      	b.n	800280e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d110      	bne.n	800280e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f001 fa7b 	bl	8003cfa <xTaskCreate>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <osThreadNew+0x11a>
            hTask = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800280e:	693b      	ldr	r3, [r7, #16]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3728      	adds	r7, #40	; 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002820:	f3ef 8305 	mrs	r3, IPSR
 8002824:	60bb      	str	r3, [r7, #8]
  return(result);
 8002826:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <osDelay+0x1c>
    stat = osErrorISR;
 800282c:	f06f 0305 	mvn.w	r3, #5
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e007      	b.n	8002844 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <osDelay+0x2c>
      vTaskDelay(ticks);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f001 fba0 	bl	8003f84 <vTaskDelay>
    }
  }

  return (stat);
 8002844:	68fb      	ldr	r3, [r7, #12]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f002 fd2c 	bl	80052b4 <pvTimerGetTimerID>
 800285c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	4610      	mov	r0, r2
 800286e:	4798      	blx	r3
  }
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	; 0x30
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	460b      	mov	r3, r1
 8002886:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800288c:	f3ef 8305 	mrs	r3, IPSR
 8002890:	613b      	str	r3, [r7, #16]
  return(result);
 8002892:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002894:	2b00      	cmp	r3, #0
 8002896:	d163      	bne.n	8002960 <osTimerNew+0xe8>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d060      	beq.n	8002960 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800289e:	2008      	movs	r0, #8
 80028a0:	f002 ff7a 	bl	8005798 <pvPortMalloc>
 80028a4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d059      	beq.n	8002960 <osTimerNew+0xe8>
      callb->func = func;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <osTimerNew+0x4c>
        reload = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	e001      	b.n	80028c8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01c      	beq.n	8002912 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <osTimerNew+0x6e>
          name = attr->name;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <osTimerNew+0x84>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b2b      	cmp	r3, #43	; 0x2b
 80028f4:	d902      	bls.n	80028fc <osTimerNew+0x84>
          mem = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e00c      	b.n	8002916 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d108      	bne.n	8002916 <osTimerNew+0x9e>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <osTimerNew+0x9e>
            mem = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	e001      	b.n	8002916 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10c      	bne.n	8002936 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <osTimerNew+0xf4>)
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	2101      	movs	r1, #1
 800292c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800292e:	f002 f942 	bl	8004bb6 <xTimerCreateStatic>
 8002932:	6238      	str	r0, [r7, #32]
 8002934:	e00b      	b.n	800294e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d108      	bne.n	800294e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <osTimerNew+0xf4>)
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	2101      	movs	r1, #1
 8002946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002948:	f002 f914 	bl	8004b74 <xTimerCreate>
 800294c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <osTimerNew+0xe8>
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <osTimerNew+0xe8>
        vPortFree (callb);
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f002 ffe8 	bl	8005930 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002960:	6a3b      	ldr	r3, [r7, #32]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	0800284f 	.word	0x0800284f

08002970 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800297e:	f3ef 8305 	mrs	r3, IPSR
 8002982:	60fb      	str	r3, [r7, #12]
  return(result);
 8002984:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <osTimerStart+0x22>
    stat = osErrorISR;
 800298a:	f06f 0305 	mvn.w	r3, #5
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e017      	b.n	80029c2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <osTimerStart+0x30>
    stat = osErrorParameter;
 8002998:	f06f 0303 	mvn.w	r3, #3
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e010      	b.n	80029c2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80029a0:	2300      	movs	r3, #0
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	2104      	movs	r1, #4
 80029aa:	6938      	ldr	r0, [r7, #16]
 80029ac:	f002 f97c 	bl	8004ca8 <xTimerGenericCommand>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d102      	bne.n	80029bc <osTimerStart+0x4c>
      stat = osOK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e002      	b.n	80029c2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80029bc:	f06f 0302 	mvn.w	r3, #2
 80029c0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80029c2:	697b      	ldr	r3, [r7, #20]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d8:	f3ef 8305 	mrs	r3, IPSR
 80029dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80029de:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d12d      	bne.n	8002a40 <osEventFlagsNew+0x74>
    mem = -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <osEventFlagsNew+0x3a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b1f      	cmp	r3, #31
 80029fe:	d902      	bls.n	8002a06 <osEventFlagsNew+0x3a>
        mem = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e00c      	b.n	8002a20 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <osEventFlagsNew+0x54>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <osEventFlagsNew+0x54>
          mem = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e001      	b.n	8002a20 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d106      	bne.n	8002a34 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f9a0 	bl	8002d70 <xEventGroupCreateStatic>
 8002a30:	6178      	str	r0, [r7, #20]
 8002a32:	e005      	b.n	8002a40 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002a3a:	f000 f9d0 	bl	8002dde <xEventGroupCreate>
 8002a3e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002a40:	697b      	ldr	r3, [r7, #20]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08c      	sub	sp, #48	; 0x30
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <osEventFlagsWait+0x22>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8002a6c:	f06f 0303 	mvn.w	r3, #3
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e04b      	b.n	8002b0c <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a74:	f3ef 8305 	mrs	r3, IPSR
 8002a78:	617b      	str	r3, [r7, #20]
  return(result);
 8002a7a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8002a80:	f06f 0305 	mvn.w	r3, #5
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e041      	b.n	8002b0c <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
 8002a96:	e001      	b.n	8002a9c <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	e001      	b.n	8002ab0 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	69b8      	ldr	r0, [r7, #24]
 8002abc:	f000 f9aa 	bl	8002e14 <xEventGroupWaitBits>
 8002ac0:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d019      	beq.n	8002b0c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8002ade:	f06f 0301 	mvn.w	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	e012      	b.n	8002b0c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002ae6:	f06f 0302 	mvn.w	r3, #2
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	e00e      	b.n	8002b0c <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8002afe:	f06f 0301 	mvn.w	r3, #1
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	e002      	b.n	8002b0c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002b06:	f06f 0302 	mvn.w	r3, #2
 8002b0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b088      	sub	sp, #32
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b22:	f3ef 8305 	mrs	r3, IPSR
 8002b26:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b28:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d174      	bne.n	8002c18 <osMutexNew+0x102>
    if (attr != NULL) {
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <osMutexNew+0x26>
      type = attr->attr_bits;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	e001      	b.n	8002b40 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <osMutexNew+0x3a>
      rmtx = 1U;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e001      	b.n	8002b54 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d15c      	bne.n	8002c18 <osMutexNew+0x102>
      mem = -1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d015      	beq.n	8002b96 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <osMutexNew+0x6a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b4f      	cmp	r3, #79	; 0x4f
 8002b78:	d902      	bls.n	8002b80 <osMutexNew+0x6a>
          mem = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e00c      	b.n	8002b9a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d108      	bne.n	8002b9a <osMutexNew+0x84>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <osMutexNew+0x84>
            mem = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e001      	b.n	8002b9a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d112      	bne.n	8002bc6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4619      	mov	r1, r3
 8002bac:	2004      	movs	r0, #4
 8002bae:	f000 fc44 	bl	800343a <xQueueCreateMutexStatic>
 8002bb2:	61f8      	str	r0, [r7, #28]
 8002bb4:	e016      	b.n	8002be4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f000 fc3c 	bl	800343a <xQueueCreateMutexStatic>
 8002bc2:	61f8      	str	r0, [r7, #28]
 8002bc4:	e00e      	b.n	8002be4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002bd2:	2004      	movs	r0, #4
 8002bd4:	f000 fc19 	bl	800340a <xQueueCreateMutex>
 8002bd8:	61f8      	str	r0, [r7, #28]
 8002bda:	e003      	b.n	8002be4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f000 fc14 	bl	800340a <xQueueCreateMutex>
 8002be2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <osMutexNew+0xee>
        if (attr != NULL) {
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <osMutexNew+0xe2>
          name = attr->name;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e001      	b.n	8002bfc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	69f8      	ldr	r0, [r7, #28]
 8002c00:	f000 ffc0 	bl	8003b84 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <osMutexNew+0x102>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002c18:	69fb      	ldr	r3, [r7, #28]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b08a      	sub	sp, #40	; 0x28
 8002c26:	af02      	add	r7, sp, #8
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c32:	f3ef 8305 	mrs	r3, IPSR
 8002c36:	613b      	str	r3, [r7, #16]
  return(result);
 8002c38:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d15f      	bne.n	8002cfe <osMessageQueueNew+0xdc>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05c      	beq.n	8002cfe <osMessageQueueNew+0xdc>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d059      	beq.n	8002cfe <osMessageQueueNew+0xdc>
    mem = -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d029      	beq.n	8002caa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d012      	beq.n	8002c84 <osMessageQueueNew+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b4f      	cmp	r3, #79	; 0x4f
 8002c64:	d90e      	bls.n	8002c84 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <osMessageQueueNew+0x62>
        mem = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e014      	b.n	8002cae <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d110      	bne.n	8002cae <osMessageQueueNew+0x8c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10c      	bne.n	8002cae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <osMessageQueueNew+0x8c>
          mem = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e001      	b.n	8002cae <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10b      	bne.n	8002ccc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	9100      	str	r1, [sp, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fab2 	bl	800322c <xQueueGenericCreateStatic>
 8002cc8:	61f8      	str	r0, [r7, #28]
 8002cca:	e008      	b.n	8002cde <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fb20 	bl	800331c <xQueueGenericCreate>
 8002cdc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00c      	beq.n	8002cfe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e001      	b.n	8002cf6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002cf6:	6979      	ldr	r1, [r7, #20]
 8002cf8:	69f8      	ldr	r0, [r7, #28]
 8002cfa:	f000 ff43 	bl	8003b84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <vApplicationGetIdleTaskMemory+0x30>)
 8002d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	601a      	str	r2, [r3, #0]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	2000015c 	.word	0x2000015c
 8002d38:	200001b8 	.word	0x200001b8

08002d3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <vApplicationGetTimerTaskMemory+0x30>)
 8002d52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d5a:	601a      	str	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	200003b8 	.word	0x200003b8
 8002d6c:	20000414 	.word	0x20000414

08002d70 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002d94:	2320      	movs	r3, #32
 8002d96:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d00a      	beq.n	8002db4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	60fb      	str	r3, [r7, #12]
}
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 f913 	bl	8002ff4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002dd4:	697b      	ldr	r3, [r7, #20]
	}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002de4:	2020      	movs	r0, #32
 8002de6:	f002 fcd7 	bl	8005798 <pvPortMalloc>
 8002dea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f8f9 	bl	8002ff4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002e08:	687b      	ldr	r3, [r7, #4]
	}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b090      	sub	sp, #64	; 0x40
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <xEventGroupWaitBits+0x36>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	623b      	str	r3, [r7, #32]
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <xEventGroupWaitBits+0x56>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	61fb      	str	r3, [r7, #28]
}
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <xEventGroupWaitBits+0x72>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	61bb      	str	r3, [r7, #24]
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e86:	f001 fd35 	bl	80048f4 <xTaskGetSchedulerState>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <xEventGroupWaitBits+0x82>
 8002e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <xEventGroupWaitBits+0x86>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <xEventGroupWaitBits+0x88>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	617b      	str	r3, [r7, #20]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8002eb6:	f001 f8ff 	bl	80040b8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ec6:	f000 f873 	bl	8002fb0 <prvTestWaitCondition>
 8002eca:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d028      	beq.n	8002f32 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	401a      	ands	r2, r3
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e020      	b.n	8002f32 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
 8002efe:	e018      	b.n	8002f32 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	1d18      	adds	r0, r3, #4
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	4313      	orrs	r3, r2
 8002f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f001 fabd 	bl	80044a8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002f32:	f001 f8cf 	bl	80040d4 <xTaskResumeAll>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d031      	beq.n	8002fa2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <xEventGroupWaitBits+0x198>)
 8002f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002f54:	f001 fd5a 	bl	8004a0c <uxTaskResetEventItemValue>
 8002f58:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11a      	bne.n	8002f9a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8002f64:	f002 faf6 	bl	8005554 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f74:	f000 f81c 	bl	8002fb0 <prvTestWaitCondition>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002f92:	2301      	movs	r3, #1
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002f96:	f002 fb0d 	bl	80055b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3740      	adds	r7, #64	; 0x40
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e007      	b.n	8002fe6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d101      	bne.n	8002fe6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002fe6:	697b      	ldr	r3, [r7, #20]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f103 0208 	add.w	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f103 0208 	add.w	r2, r3, #8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f103 0208 	add.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	601a      	str	r2, [r3, #0]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d103      	bne.n	80030b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e00c      	b.n	80030d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3308      	adds	r3, #8
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e002      	b.n	80030c4 <vListInsert+0x2e>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d2f6      	bcs.n	80030be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	601a      	str	r2, [r3, #0]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6852      	ldr	r2, [r2, #4]
 8003128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d103      	bne.n	800313c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueGenericReset+0x2a>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	60bb      	str	r3, [r7, #8]
}
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003186:	f002 f9e5 	bl	8005554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	441a      	add	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	3b01      	subs	r3, #1
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	441a      	add	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	22ff      	movs	r2, #255	; 0xff
 80031d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d114      	bne.n	8003206 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01a      	beq.n	800321a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3310      	adds	r3, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 f9c5 	bl	8004578 <xTaskRemoveFromEventList>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <xQueueGenericReset+0xcc>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	e009      	b.n	800321a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3310      	adds	r3, #16
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fef2 	bl	8002ff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3324      	adds	r3, #36	; 0x24
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff feed 	bl	8002ff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800321a:	f002 f9cb 	bl	80055b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08e      	sub	sp, #56	; 0x38
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <xQueueGenericCreateStatic+0x52>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <xQueueGenericCreateStatic+0x56>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueGenericCreateStatic+0x58>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	623b      	str	r3, [r7, #32]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <xQueueGenericCreateStatic+0x7e>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <xQueueGenericCreateStatic+0x82>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <xQueueGenericCreateStatic+0x84>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	61fb      	str	r3, [r7, #28]
}
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032ca:	2350      	movs	r3, #80	; 0x50
 80032cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b50      	cmp	r3, #80	; 0x50
 80032d2:	d00a      	beq.n	80032ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	61bb      	str	r3, [r7, #24]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f83f 	bl	8003390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003314:	4618      	mov	r0, r3
 8003316:	3730      	adds	r7, #48	; 0x30
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	613b      	str	r3, [r7, #16]
}
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3350      	adds	r3, #80	; 0x50
 8003354:	4618      	mov	r0, r3
 8003356:	f002 fa1f 	bl	8005798 <pvPortMalloc>
 800335a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d011      	beq.n	8003386 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3350      	adds	r3, #80	; 0x50
 800336a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003374:	79fa      	ldrb	r2, [r7, #7]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f805 	bl	8003390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003386:	69bb      	ldr	r3, [r7, #24]
	}
 8003388:	4618      	mov	r0, r3
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e002      	b.n	80033b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033be:	2101      	movs	r1, #1
 80033c0:	69b8      	ldr	r0, [r7, #24]
 80033c2:	f7ff fecb 	bl	800315c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80033f6:	2300      	movs	r3, #0
 80033f8:	2200      	movs	r2, #0
 80033fa:	2100      	movs	r1, #0
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f837 	bl	8003470 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003414:	2301      	movs	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	461a      	mov	r2, r3
 8003420:	6939      	ldr	r1, [r7, #16]
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f7ff ff7a 	bl	800331c <xQueueGenericCreate>
 8003428:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff ffd3 	bl	80033d6 <prvInitialiseMutex>

		return xNewQueue;
 8003430:	68fb      	ldr	r3, [r7, #12]
	}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af02      	add	r7, sp, #8
 8003440:	4603      	mov	r3, r0
 8003442:	6039      	str	r1, [r7, #0]
 8003444:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	6939      	ldr	r1, [r7, #16]
 8003458:	6978      	ldr	r0, [r7, #20]
 800345a:	f7ff fee7 	bl	800322c <xQueueGenericCreateStatic>
 800345e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff ffb8 	bl	80033d6 <prvInitialiseMutex>

		return xNewQueue;
 8003466:	68fb      	ldr	r3, [r7, #12]
	}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <xQueueGenericSend+0x32>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800349e:	bf00      	nop
 80034a0:	e7fe      	b.n	80034a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <xQueueGenericSend+0x40>
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <xQueueGenericSend+0x44>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <xQueueGenericSend+0x46>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <xQueueGenericSend+0x60>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d103      	bne.n	80034de <xQueueGenericSend+0x6e>
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericSend+0x72>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericSend+0x74>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueGenericSend+0x8e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034fe:	f001 f9f9 	bl	80048f4 <xTaskGetSchedulerState>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <xQueueGenericSend+0x9e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <xQueueGenericSend+0xa2>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <xQueueGenericSend+0xa4>
 8003512:	2300      	movs	r3, #0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueGenericSend+0xbe>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61fb      	str	r3, [r7, #28]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800352e:	f002 f811 	bl	8005554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <xQueueGenericSend+0xd4>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d129      	bne.n	8003598 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800354a:	f000 fa0b 	bl	8003964 <prvCopyDataToQueue>
 800354e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	3324      	adds	r3, #36	; 0x24
 800355c:	4618      	mov	r0, r3
 800355e:	f001 f80b 	bl	8004578 <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003568:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <xQueueGenericSend+0x1f8>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	e00a      	b.n	8003590 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <xQueueGenericSend+0x1f8>)
 8003582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003590:	f002 f810 	bl	80055b4 <vPortExitCritical>
				return pdPASS;
 8003594:	2301      	movs	r3, #1
 8003596:	e063      	b.n	8003660 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800359e:	f002 f809 	bl	80055b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e05c      	b.n	8003660 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f845 	bl	8004640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035ba:	f001 fffb 	bl	80055b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035be:	f000 fd7b 	bl	80040b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c2:	f001 ffc7 	bl	8005554 <vPortEnterCritical>
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d103      	bne.n	80035dc <xQueueGenericSend+0x16c>
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d103      	bne.n	80035f2 <xQueueGenericSend+0x182>
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f2:	f001 ffdf 	bl	80055b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035f6:	1d3a      	adds	r2, r7, #4
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 f834 	bl	800466c <xTaskCheckForTimeOut>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d124      	bne.n	8003654 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800360a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360c:	f000 faa2 	bl	8003b54 <prvIsQueueFull>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d018      	beq.n	8003648 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	3310      	adds	r3, #16
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f000 ff1e 	bl	8004460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003626:	f000 fa2d 	bl	8003a84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800362a:	f000 fd53 	bl	80040d4 <xTaskResumeAll>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	f47f af7c 	bne.w	800352e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <xQueueGenericSend+0x1f8>)
 8003638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	e772      	b.n	800352e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800364a:	f000 fa1b 	bl	8003a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800364e:	f000 fd41 	bl	80040d4 <xTaskResumeAll>
 8003652:	e76c      	b.n	800352e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003656:	f000 fa15 	bl	8003a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800365a:	f000 fd3b 	bl	80040d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800365e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003660:	4618      	mov	r0, r3
 8003662:	3738      	adds	r7, #56	; 0x38
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b090      	sub	sp, #64	; 0x40
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <xQueueGenericSendFromISR+0x3c>
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <xQueueGenericSendFromISR+0x40>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <xQueueGenericSendFromISR+0x42>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d103      	bne.n	80036d6 <xQueueGenericSendFromISR+0x6a>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <xQueueGenericSendFromISR+0x6e>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <xQueueGenericSendFromISR+0x70>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	623b      	str	r3, [r7, #32]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036f6:	f002 f80f 	bl	8005718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036fa:	f3ef 8211 	mrs	r2, BASEPRI
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	61fa      	str	r2, [r7, #28]
 8003710:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003712:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <xQueueGenericSendFromISR+0xbc>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d12f      	bne.n	8003788 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800372e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800373e:	f000 f911 	bl	8003964 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003742:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d112      	bne.n	8003772 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	4618      	mov	r0, r3
 800375a:	f000 ff0d 	bl	8004578 <xTaskRemoveFromEventList>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e007      	b.n	8003782 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003776:	3301      	adds	r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b25a      	sxtb	r2, r3
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003782:	2301      	movs	r3, #1
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003786:	e001      	b.n	800378c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003788:	2300      	movs	r3, #0
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003796:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800379a:	4618      	mov	r0, r3
 800379c:	3740      	adds	r7, #64	; 0x40
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <xQueueReceive+0x30>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	623b      	str	r3, [r7, #32]
}
 80037d0:	bf00      	nop
 80037d2:	e7fe      	b.n	80037d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <xQueueReceive+0x3e>
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <xQueueReceive+0x42>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <xQueueReceive+0x44>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xQueueReceive+0x5e>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	61fb      	str	r3, [r7, #28]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003802:	f001 f877 	bl	80048f4 <xTaskGetSchedulerState>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <xQueueReceive+0x6e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <xQueueReceive+0x72>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <xQueueReceive+0x74>
 8003816:	2300      	movs	r3, #0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xQueueReceive+0x8e>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	61bb      	str	r3, [r7, #24]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003832:	f001 fe8f 	bl	8005554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01f      	beq.n	8003882 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003846:	f000 f8f7 	bl	8003a38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00f      	beq.n	800387a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	3310      	adds	r3, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fe8a 	bl	8004578 <xTaskRemoveFromEventList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <xQueueReceive+0x1bc>)
 800386c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800387a:	f001 fe9b 	bl	80055b4 <vPortExitCritical>
				return pdPASS;
 800387e:	2301      	movs	r3, #1
 8003880:	e069      	b.n	8003956 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003888:	f001 fe94 	bl	80055b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800388c:	2300      	movs	r3, #0
 800388e:	e062      	b.n	8003956 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fed0 	bl	8004640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038a4:	f001 fe86 	bl	80055b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038a8:	f000 fc06 	bl	80040b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ac:	f001 fe52 	bl	8005554 <vPortEnterCritical>
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d103      	bne.n	80038c6 <xQueueReceive+0x122>
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d103      	bne.n	80038dc <xQueueReceive+0x138>
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038dc:	f001 fe6a 	bl	80055b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038e0:	1d3a      	adds	r2, r7, #4
 80038e2:	f107 0310 	add.w	r3, r7, #16
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 febf 	bl	800466c <xTaskCheckForTimeOut>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d123      	bne.n	800393c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f6:	f000 f917 	bl	8003b28 <prvIsQueueEmpty>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	3324      	adds	r3, #36	; 0x24
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fda9 	bl	8004460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800390e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003910:	f000 f8b8 	bl	8003a84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003914:	f000 fbde 	bl	80040d4 <xTaskResumeAll>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d189      	bne.n	8003832 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <xQueueReceive+0x1bc>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	e780      	b.n	8003832 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003932:	f000 f8a7 	bl	8003a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003936:	f000 fbcd 	bl	80040d4 <xTaskResumeAll>
 800393a:	e77a      	b.n	8003832 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800393c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800393e:	f000 f8a1 	bl	8003a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003942:	f000 fbc7 	bl	80040d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003948:	f000 f8ee 	bl	8003b28 <prvIsQueueEmpty>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	f43f af6f 	beq.w	8003832 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003956:	4618      	mov	r0, r3
 8003958:	3730      	adds	r7, #48	; 0x30
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d14d      	bne.n	8003a26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 ffce 	bl	8004930 <xTaskPriorityDisinherit>
 8003994:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	e043      	b.n	8003a26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d119      	bne.n	80039d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6858      	ldr	r0, [r3, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	461a      	mov	r2, r3
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	f002 fb4d 	bl	800604e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d32b      	bcc.n	8003a26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e026      	b.n	8003a26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68d8      	ldr	r0, [r3, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	461a      	mov	r2, r3
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	f002 fb33 	bl	800604e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	425b      	negs	r3, r3
 80039f2:	441a      	add	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d207      	bcs.n	8003a14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d105      	bne.n	8003a26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a2e:	697b      	ldr	r3, [r7, #20]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d018      	beq.n	8003a7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d303      	bcc.n	8003a6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68d9      	ldr	r1, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	461a      	mov	r2, r3
 8003a76:	6838      	ldr	r0, [r7, #0]
 8003a78:	f002 fae9 	bl	800604e <memcpy>
	}
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a8c:	f001 fd62 	bl	8005554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a98:	e011      	b.n	8003abe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fd66 	bl	8004578 <xTaskRemoveFromEventList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ab2:	f000 fe3d 	bl	8004730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dce9      	bgt.n	8003a9a <prvUnlockQueue+0x16>
 8003ac6:	e000      	b.n	8003aca <prvUnlockQueue+0x46>
					break;
 8003ac8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ad2:	f001 fd6f 	bl	80055b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ad6:	f001 fd3d 	bl	8005554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ae2:	e011      	b.n	8003b08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d012      	beq.n	8003b12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3310      	adds	r3, #16
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fd41 	bl	8004578 <xTaskRemoveFromEventList>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003afc:	f000 fe18 	bl	8004730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	dce9      	bgt.n	8003ae4 <prvUnlockQueue+0x60>
 8003b10:	e000      	b.n	8003b14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	22ff      	movs	r2, #255	; 0xff
 8003b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b1c:	f001 fd4a 	bl	80055b4 <vPortExitCritical>
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b30:	f001 fd10 	bl	8005554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	e001      	b.n	8003b46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b46:	f001 fd35 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b5c:	f001 fcfa 	bl	8005554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d102      	bne.n	8003b72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e001      	b.n	8003b76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f001 fd1d 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e014      	b.n	8003bbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b94:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <vQueueAddToRegistry+0x50>)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ba0:	490c      	ldr	r1, [pc, #48]	; (8003bd4 <vQueueAddToRegistry+0x50>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <vQueueAddToRegistry+0x50>)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bb6:	e006      	b.n	8003bc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b07      	cmp	r3, #7
 8003bc2:	d9e7      	bls.n	8003b94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000814 	.word	0x20000814

08003bd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003be8:	f001 fcb4 	bl	8005554 <vPortEnterCritical>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d103      	bne.n	8003c02 <vQueueWaitForMessageRestricted+0x2a>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d103      	bne.n	8003c18 <vQueueWaitForMessageRestricted+0x40>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c18:	f001 fccc 	bl	80055b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3324      	adds	r3, #36	; 0x24
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fc77 	bl	8004520 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f7ff ff26 	bl	8003a84 <prvUnlockQueue>
	}
 8003c38:	bf00      	nop
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08e      	sub	sp, #56	; 0x38
 8003c44:	af04      	add	r7, sp, #16
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	623b      	str	r3, [r7, #32]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	61fb      	str	r3, [r7, #28]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c86:	235c      	movs	r3, #92	; 0x5c
 8003c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c8e:	d00a      	beq.n	8003ca6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	61bb      	str	r3, [r7, #24]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ca6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01e      	beq.n	8003cec <xTaskCreateStatic+0xac>
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9303      	str	r3, [sp, #12]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f850 	bl	8003d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ce6:	f000 f8dd 	bl	8003ea4 <prvAddNewTaskToReadyList>
 8003cea:	e001      	b.n	8003cf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cf0:	697b      	ldr	r3, [r7, #20]
	}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3728      	adds	r7, #40	; 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b08c      	sub	sp, #48	; 0x30
 8003cfe:	af04      	add	r7, sp, #16
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fd42 	bl	8005798 <pvPortMalloc>
 8003d14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d1c:	205c      	movs	r0, #92	; 0x5c
 8003d1e:	f001 fd3b 	bl	8005798 <pvPortMalloc>
 8003d22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d30:	e005      	b.n	8003d3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f001 fdfc 	bl	8005930 <vPortFree>
 8003d38:	e001      	b.n	8003d3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9303      	str	r3, [sp, #12]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	9302      	str	r3, [sp, #8]
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f80e 	bl	8003d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d68:	69f8      	ldr	r0, [r7, #28]
 8003d6a:	f000 f89b 	bl	8003ea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e002      	b.n	8003d7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	21a5      	movs	r1, #165	; 0xa5
 8003d9e:	f002 f8db 	bl	8005f58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dac:	3b01      	subs	r3, #1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	617b      	str	r3, [r7, #20]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01f      	beq.n	8003e22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e012      	b.n	8003e0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	7819      	ldrb	r1, [r3, #0]
 8003df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	3334      	adds	r3, #52	; 0x34
 8003df8:	460a      	mov	r2, r1
 8003dfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b0f      	cmp	r3, #15
 8003e12:	d9e9      	bls.n	8003de8 <prvInitialiseNewTask+0x64>
 8003e14:	e000      	b.n	8003e18 <prvInitialiseNewTask+0x94>
			{
				break;
 8003e16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e20:	e003      	b.n	8003e2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	2b37      	cmp	r3, #55	; 0x37
 8003e2e:	d901      	bls.n	8003e34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e30:	2337      	movs	r3, #55	; 0x37
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	2200      	movs	r2, #0
 8003e44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f8f2 	bl	8003034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	3318      	adds	r3, #24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f8ed 	bl	8003034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	2200      	movs	r2, #0
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	69b8      	ldr	r0, [r7, #24]
 8003e84:	f001 fa36 	bl	80052f4 <pxPortInitialiseStack>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e9a:	bf00      	nop
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003eac:	f001 fb52 	bl	8005554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <prvAddNewTaskToReadyList+0xc4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a2c      	ldr	r2, [pc, #176]	; (8003f68 <prvAddNewTaskToReadyList+0xc4>)
 8003eb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eba:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <prvAddNewTaskToReadyList+0xc8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <prvAddNewTaskToReadyList+0xc8>)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ec8:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <prvAddNewTaskToReadyList+0xc4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d110      	bne.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ed0:	f000 fc52 	bl	8004778 <prvInitialiseTaskLists>
 8003ed4:	e00d      	b.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <prvAddNewTaskToReadyList+0xcc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ede:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <prvAddNewTaskToReadyList+0xc8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d802      	bhi.n	8003ef2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003eec:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <prvAddNewTaskToReadyList+0xc8>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <prvAddNewTaskToReadyList+0xd0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <prvAddNewTaskToReadyList+0xd0>)
 8003efa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <prvAddNewTaskToReadyList+0xd0>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <prvAddNewTaskToReadyList+0xd4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d903      	bls.n	8003f18 <prvAddNewTaskToReadyList+0x74>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <prvAddNewTaskToReadyList+0xd4>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <prvAddNewTaskToReadyList+0xd8>)
 8003f26:	441a      	add	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7ff f88d 	bl	800304e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f34:	f001 fb3e 	bl	80055b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <prvAddNewTaskToReadyList+0xcc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <prvAddNewTaskToReadyList+0xc8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d207      	bcs.n	8003f5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <prvAddNewTaskToReadyList+0xdc>)
 8003f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000d28 	.word	0x20000d28
 8003f6c:	20000854 	.word	0x20000854
 8003f70:	20000d34 	.word	0x20000d34
 8003f74:	20000d44 	.word	0x20000d44
 8003f78:	20000d30 	.word	0x20000d30
 8003f7c:	20000858 	.word	0x20000858
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d017      	beq.n	8003fc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <vTaskDelay+0x60>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <vTaskDelay+0x30>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60bb      	str	r3, [r7, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fb4:	f000 f880 	bl	80040b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fb8:	2100      	movs	r1, #0
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fd3e 	bl	8004a3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fc0:	f000 f888 	bl	80040d4 <xTaskResumeAll>
 8003fc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <vTaskDelay+0x64>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000d50 	.word	0x20000d50
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ffa:	463a      	mov	r2, r7
 8003ffc:	1d39      	adds	r1, r7, #4
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fe80 	bl	8002d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	9202      	str	r2, [sp, #8]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	460a      	mov	r2, r1
 800401a:	4921      	ldr	r1, [pc, #132]	; (80040a0 <vTaskStartScheduler+0xb4>)
 800401c:	4821      	ldr	r0, [pc, #132]	; (80040a4 <vTaskStartScheduler+0xb8>)
 800401e:	f7ff fe0f 	bl	8003c40 <xTaskCreateStatic>
 8004022:	4603      	mov	r3, r0
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <vTaskStartScheduler+0xbc>)
 8004026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <vTaskStartScheduler+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e001      	b.n	800403a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004040:	f000 fd50 	bl	8004ae4 <xTimerCreateTimerTask>
 8004044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d116      	bne.n	800407a <vTaskStartScheduler+0x8e>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	613b      	str	r3, [r7, #16]
}
 800405e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <vTaskStartScheduler+0xc0>)
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <vTaskStartScheduler+0xc4>)
 800406a:	2201      	movs	r2, #1
 800406c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <vTaskStartScheduler+0xc8>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004074:	f001 f9cc 	bl	8005410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004078:	e00e      	b.n	8004098 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d10a      	bne.n	8004098 <vTaskStartScheduler+0xac>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60fb      	str	r3, [r7, #12]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <vTaskStartScheduler+0xaa>
}
 8004098:	bf00      	nop
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	0800655c 	.word	0x0800655c
 80040a4:	08004749 	.word	0x08004749
 80040a8:	20000d4c 	.word	0x20000d4c
 80040ac:	20000d48 	.word	0x20000d48
 80040b0:	20000d34 	.word	0x20000d34
 80040b4:	20000d2c 	.word	0x20000d2c

080040b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <vTaskSuspendAll+0x18>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a03      	ldr	r2, [pc, #12]	; (80040d0 <vTaskSuspendAll+0x18>)
 80040c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	20000d50 	.word	0x20000d50

080040d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040e2:	4b42      	ldr	r3, [pc, #264]	; (80041ec <xTaskResumeAll+0x118>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <xTaskResumeAll+0x2c>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	603b      	str	r3, [r7, #0]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004100:	f001 fa28 	bl	8005554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004104:	4b39      	ldr	r3, [pc, #228]	; (80041ec <xTaskResumeAll+0x118>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3b01      	subs	r3, #1
 800410a:	4a38      	ldr	r2, [pc, #224]	; (80041ec <xTaskResumeAll+0x118>)
 800410c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800410e:	4b37      	ldr	r3, [pc, #220]	; (80041ec <xTaskResumeAll+0x118>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d162      	bne.n	80041dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004116:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <xTaskResumeAll+0x11c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d05e      	beq.n	80041dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800411e:	e02f      	b.n	8004180 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004120:	4b34      	ldr	r3, [pc, #208]	; (80041f4 <xTaskResumeAll+0x120>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3318      	adds	r3, #24
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe ffeb 	bl	8003108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe ffe6 	bl	8003108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <xTaskResumeAll+0x124>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d903      	bls.n	8004150 <xTaskResumeAll+0x7c>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <xTaskResumeAll+0x124>)
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a27      	ldr	r2, [pc, #156]	; (80041fc <xTaskResumeAll+0x128>)
 800415e:	441a      	add	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f7fe ff71 	bl	800304e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4b23      	ldr	r3, [pc, #140]	; (8004200 <xTaskResumeAll+0x12c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <xTaskResumeAll+0x130>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004180:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <xTaskResumeAll+0x120>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1cb      	bne.n	8004120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800418e:	f000 fb91 	bl	80048b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <xTaskResumeAll+0x134>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d010      	beq.n	80041c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800419e:	f000 f847 	bl	8004230 <xTaskIncrementTick>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041a8:	4b16      	ldr	r3, [pc, #88]	; (8004204 <xTaskResumeAll+0x130>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f1      	bne.n	800419e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <xTaskResumeAll+0x134>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <xTaskResumeAll+0x130>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <xTaskResumeAll+0x138>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041dc:	f001 f9ea 	bl	80055b4 <vPortExitCritical>

	return xAlreadyYielded;
 80041e0:	68bb      	ldr	r3, [r7, #8]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000d50 	.word	0x20000d50
 80041f0:	20000d28 	.word	0x20000d28
 80041f4:	20000ce8 	.word	0x20000ce8
 80041f8:	20000d30 	.word	0x20000d30
 80041fc:	20000858 	.word	0x20000858
 8004200:	20000854 	.word	0x20000854
 8004204:	20000d3c 	.word	0x20000d3c
 8004208:	20000d38 	.word	0x20000d38
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <xTaskGetTickCount+0x1c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800421c:	687b      	ldr	r3, [r7, #4]
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000d2c 	.word	0x20000d2c

08004230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800423a:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <xTaskIncrementTick+0x148>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 808f 	bne.w	8004362 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004244:	4b4d      	ldr	r3, [pc, #308]	; (800437c <xTaskIncrementTick+0x14c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800424c:	4a4b      	ldr	r2, [pc, #300]	; (800437c <xTaskIncrementTick+0x14c>)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d120      	bne.n	800429a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004258:	4b49      	ldr	r3, [pc, #292]	; (8004380 <xTaskIncrementTick+0x150>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <xTaskIncrementTick+0x48>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	603b      	str	r3, [r7, #0]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xTaskIncrementTick+0x46>
 8004278:	4b41      	ldr	r3, [pc, #260]	; (8004380 <xTaskIncrementTick+0x150>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4b41      	ldr	r3, [pc, #260]	; (8004384 <xTaskIncrementTick+0x154>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a3f      	ldr	r2, [pc, #252]	; (8004380 <xTaskIncrementTick+0x150>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <xTaskIncrementTick+0x154>)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <xTaskIncrementTick+0x158>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	4a3d      	ldr	r2, [pc, #244]	; (8004388 <xTaskIncrementTick+0x158>)
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	f000 fb0d 	bl	80048b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800429a:	4b3c      	ldr	r3, [pc, #240]	; (800438c <xTaskIncrementTick+0x15c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d349      	bcc.n	8004338 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <xTaskIncrementTick+0x150>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ae:	4b37      	ldr	r3, [pc, #220]	; (800438c <xTaskIncrementTick+0x15c>)
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	601a      	str	r2, [r3, #0]
					break;
 80042b6:	e03f      	b.n	8004338 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b8:	4b31      	ldr	r3, [pc, #196]	; (8004380 <xTaskIncrementTick+0x150>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d203      	bcs.n	80042d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042d0:	4a2e      	ldr	r2, [pc, #184]	; (800438c <xTaskIncrementTick+0x15c>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042d6:	e02f      	b.n	8004338 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	3304      	adds	r3, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe ff13 	bl	8003108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	3318      	adds	r3, #24
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe ff0a 	bl	8003108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b25      	ldr	r3, [pc, #148]	; (8004390 <xTaskIncrementTick+0x160>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d903      	bls.n	8004308 <xTaskIncrementTick+0xd8>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a22      	ldr	r2, [pc, #136]	; (8004390 <xTaskIncrementTick+0x160>)
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <xTaskIncrementTick+0x164>)
 8004316:	441a      	add	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7fe fe95 	bl	800304e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <xTaskIncrementTick+0x168>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	429a      	cmp	r2, r3
 8004330:	d3b8      	bcc.n	80042a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004336:	e7b5      	b.n	80042a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <xTaskIncrementTick+0x168>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4915      	ldr	r1, [pc, #84]	; (8004394 <xTaskIncrementTick+0x164>)
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d901      	bls.n	8004354 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <xTaskIncrementTick+0x16c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e004      	b.n	800436c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <xTaskIncrementTick+0x170>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <xTaskIncrementTick+0x170>)
 800436a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800436c:	697b      	ldr	r3, [r7, #20]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000d50 	.word	0x20000d50
 800437c:	20000d2c 	.word	0x20000d2c
 8004380:	20000ce0 	.word	0x20000ce0
 8004384:	20000ce4 	.word	0x20000ce4
 8004388:	20000d40 	.word	0x20000d40
 800438c:	20000d48 	.word	0x20000d48
 8004390:	20000d30 	.word	0x20000d30
 8004394:	20000858 	.word	0x20000858
 8004398:	20000854 	.word	0x20000854
 800439c:	20000d3c 	.word	0x20000d3c
 80043a0:	20000d38 	.word	0x20000d38

080043a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043aa:	4b28      	ldr	r3, [pc, #160]	; (800444c <vTaskSwitchContext+0xa8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043b2:	4b27      	ldr	r3, [pc, #156]	; (8004450 <vTaskSwitchContext+0xac>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043b8:	e041      	b.n	800443e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80043ba:	4b25      	ldr	r3, [pc, #148]	; (8004450 <vTaskSwitchContext+0xac>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c0:	4b24      	ldr	r3, [pc, #144]	; (8004454 <vTaskSwitchContext+0xb0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e010      	b.n	80043ea <vTaskSwitchContext+0x46>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <vTaskSwitchContext+0x3e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	491b      	ldr	r1, [pc, #108]	; (8004458 <vTaskSwitchContext+0xb4>)
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0e4      	beq.n	80043c8 <vTaskSwitchContext+0x24>
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <vTaskSwitchContext+0xb4>)
 800440a:	4413      	add	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3308      	adds	r3, #8
 8004420:	429a      	cmp	r2, r3
 8004422:	d104      	bne.n	800442e <vTaskSwitchContext+0x8a>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a09      	ldr	r2, [pc, #36]	; (800445c <vTaskSwitchContext+0xb8>)
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4a06      	ldr	r2, [pc, #24]	; (8004454 <vTaskSwitchContext+0xb0>)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6013      	str	r3, [r2, #0]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000d50 	.word	0x20000d50
 8004450:	20000d3c 	.word	0x20000d3c
 8004454:	20000d30 	.word	0x20000d30
 8004458:	20000858 	.word	0x20000858
 800445c:	20000854 	.word	0x20000854

08004460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60fb      	str	r3, [r7, #12]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <vTaskPlaceOnEventList+0x44>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3318      	adds	r3, #24
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fe fe01 	bl	8003096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004494:	2101      	movs	r1, #1
 8004496:	6838      	ldr	r0, [r7, #0]
 8004498:	f000 fad0 	bl	8004a3c <prvAddCurrentTaskToDelayedList>
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000854 	.word	0x20000854

080044a8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	617b      	str	r3, [r7, #20]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <vTaskPlaceOnUnorderedEventList+0x70>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	613b      	str	r3, [r7, #16]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <vTaskPlaceOnUnorderedEventList+0x74>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044f8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <vTaskPlaceOnUnorderedEventList+0x74>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3318      	adds	r3, #24
 8004500:	4619      	mov	r1, r3
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7fe fda3 	bl	800304e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004508:	2101      	movs	r1, #1
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa96 	bl	8004a3c <prvAddCurrentTaskToDelayedList>
}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000d50 	.word	0x20000d50
 800451c:	20000854 	.word	0x20000854

08004520 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	617b      	str	r3, [r7, #20]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <vTaskPlaceOnEventListRestricted+0x54>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3318      	adds	r3, #24
 800454e:	4619      	mov	r1, r3
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7fe fd7c 	bl	800304e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800455c:	f04f 33ff 	mov.w	r3, #4294967295
 8004560:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	68b8      	ldr	r0, [r7, #8]
 8004566:	f000 fa69 	bl	8004a3c <prvAddCurrentTaskToDelayedList>
	}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000854 	.word	0x20000854

08004578 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60fb      	str	r3, [r7, #12]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	3318      	adds	r3, #24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fdad 	bl	8003108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ae:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <xTaskRemoveFromEventList+0xb0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d11d      	bne.n	80045f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fda4 	bl	8003108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <xTaskRemoveFromEventList+0xb4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d903      	bls.n	80045d4 <xTaskRemoveFromEventList+0x5c>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a16      	ldr	r2, [pc, #88]	; (800462c <xTaskRemoveFromEventList+0xb4>)
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4a13      	ldr	r2, [pc, #76]	; (8004630 <xTaskRemoveFromEventList+0xb8>)
 80045e2:	441a      	add	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7fe fd2f 	bl	800304e <vListInsertEnd>
 80045f0:	e005      	b.n	80045fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3318      	adds	r3, #24
 80045f6:	4619      	mov	r1, r3
 80045f8:	480e      	ldr	r0, [pc, #56]	; (8004634 <xTaskRemoveFromEventList+0xbc>)
 80045fa:	f7fe fd28 	bl	800304e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <xTaskRemoveFromEventList+0xc0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	429a      	cmp	r2, r3
 800460a:	d905      	bls.n	8004618 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <xTaskRemoveFromEventList+0xc4>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e001      	b.n	800461c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800461c:	697b      	ldr	r3, [r7, #20]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000d50 	.word	0x20000d50
 800462c:	20000d30 	.word	0x20000d30
 8004630:	20000858 	.word	0x20000858
 8004634:	20000ce8 	.word	0x20000ce8
 8004638:	20000854 	.word	0x20000854
 800463c:	20000d3c 	.word	0x20000d3c

08004640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <vTaskInternalSetTimeOutState+0x24>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <vTaskInternalSetTimeOutState+0x28>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	605a      	str	r2, [r3, #4]
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	20000d40 	.word	0x20000d40
 8004668:	20000d2c 	.word	0x20000d2c

0800466c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	613b      	str	r3, [r7, #16]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	60fb      	str	r3, [r7, #12]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80046ae:	f000 ff51 	bl	8005554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <xTaskCheckForTimeOut+0xbc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d102      	bne.n	80046d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e023      	b.n	800471a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <xTaskCheckForTimeOut+0xc0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d007      	beq.n	80046ee <xTaskCheckForTimeOut+0x82>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d302      	bcc.n	80046ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046e8:	2301      	movs	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	e015      	b.n	800471a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d20b      	bcs.n	8004710 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	1ad2      	subs	r2, r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff9b 	bl	8004640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	e004      	b.n	800471a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004716:	2301      	movs	r3, #1
 8004718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800471a:	f000 ff4b 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 800471e:	69fb      	ldr	r3, [r7, #28]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000d2c 	.word	0x20000d2c
 800472c:	20000d40 	.word	0x20000d40

08004730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <vTaskMissedYield+0x14>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	20000d3c 	.word	0x20000d3c

08004748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004750:	f000 f852 	bl	80047f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <prvIdleTask+0x28>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d9f9      	bls.n	8004750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <prvIdleTask+0x2c>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800476c:	e7f0      	b.n	8004750 <prvIdleTask+0x8>
 800476e:	bf00      	nop
 8004770:	20000858 	.word	0x20000858
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	e00c      	b.n	800479e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <prvInitialiseTaskLists+0x60>)
 8004790:	4413      	add	r3, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fc2e 	bl	8002ff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3301      	adds	r3, #1
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b37      	cmp	r3, #55	; 0x37
 80047a2:	d9ef      	bls.n	8004784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047a4:	480d      	ldr	r0, [pc, #52]	; (80047dc <prvInitialiseTaskLists+0x64>)
 80047a6:	f7fe fc25 	bl	8002ff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047aa:	480d      	ldr	r0, [pc, #52]	; (80047e0 <prvInitialiseTaskLists+0x68>)
 80047ac:	f7fe fc22 	bl	8002ff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047b0:	480c      	ldr	r0, [pc, #48]	; (80047e4 <prvInitialiseTaskLists+0x6c>)
 80047b2:	f7fe fc1f 	bl	8002ff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047b6:	480c      	ldr	r0, [pc, #48]	; (80047e8 <prvInitialiseTaskLists+0x70>)
 80047b8:	f7fe fc1c 	bl	8002ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047bc:	480b      	ldr	r0, [pc, #44]	; (80047ec <prvInitialiseTaskLists+0x74>)
 80047be:	f7fe fc19 	bl	8002ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <prvInitialiseTaskLists+0x78>)
 80047c4:	4a05      	ldr	r2, [pc, #20]	; (80047dc <prvInitialiseTaskLists+0x64>)
 80047c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <prvInitialiseTaskLists+0x7c>)
 80047ca:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <prvInitialiseTaskLists+0x68>)
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000858 	.word	0x20000858
 80047dc:	20000cb8 	.word	0x20000cb8
 80047e0:	20000ccc 	.word	0x20000ccc
 80047e4:	20000ce8 	.word	0x20000ce8
 80047e8:	20000cfc 	.word	0x20000cfc
 80047ec:	20000d14 	.word	0x20000d14
 80047f0:	20000ce0 	.word	0x20000ce0
 80047f4:	20000ce4 	.word	0x20000ce4

080047f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047fe:	e019      	b.n	8004834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004800:	f000 fea8 	bl	8005554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <prvCheckTasksWaitingTermination+0x50>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fc79 	bl	8003108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <prvCheckTasksWaitingTermination+0x54>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3b01      	subs	r3, #1
 800481c:	4a0b      	ldr	r2, [pc, #44]	; (800484c <prvCheckTasksWaitingTermination+0x54>)
 800481e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <prvCheckTasksWaitingTermination+0x58>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3b01      	subs	r3, #1
 8004826:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <prvCheckTasksWaitingTermination+0x58>)
 8004828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800482a:	f000 fec3 	bl	80055b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f810 	bl	8004854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <prvCheckTasksWaitingTermination+0x58>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e1      	bne.n	8004800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000cfc 	.word	0x20000cfc
 800484c:	20000d28 	.word	0x20000d28
 8004850:	20000d10 	.word	0x20000d10

08004854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4618      	mov	r0, r3
 800486c:	f001 f860 	bl	8005930 <vPortFree>
				vPortFree( pxTCB );
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f001 f85d 	bl	8005930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004876:	e018      	b.n	80048aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800487e:	2b01      	cmp	r3, #1
 8004880:	d103      	bne.n	800488a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f001 f854 	bl	8005930 <vPortFree>
	}
 8004888:	e00f      	b.n	80048aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004890:	2b02      	cmp	r3, #2
 8004892:	d00a      	beq.n	80048aa <prvDeleteTCB+0x56>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	60fb      	str	r3, [r7, #12]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <prvDeleteTCB+0x54>
	}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <prvResetNextTaskUnblockTime+0x38>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <prvResetNextTaskUnblockTime+0x3c>)
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048cc:	e008      	b.n	80048e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <prvResetNextTaskUnblockTime+0x38>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <prvResetNextTaskUnblockTime+0x3c>)
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	20000ce0 	.word	0x20000ce0
 80048f0:	20000d48 	.word	0x20000d48

080048f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <xTaskGetSchedulerState+0x34>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004902:	2301      	movs	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	e008      	b.n	800491a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <xTaskGetSchedulerState+0x38>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004910:	2302      	movs	r3, #2
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e001      	b.n	800491a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800491a:	687b      	ldr	r3, [r7, #4]
	}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	20000d34 	.word	0x20000d34
 800492c:	20000d50 	.word	0x20000d50

08004930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d056      	beq.n	80049f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004946:	4b2e      	ldr	r3, [pc, #184]	; (8004a00 <xTaskPriorityDisinherit+0xd0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d00a      	beq.n	8004966 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	60bb      	str	r3, [r7, #8]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	1e5a      	subs	r2, r3, #1
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	429a      	cmp	r2, r3
 8004998:	d02c      	beq.n	80049f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d128      	bne.n	80049f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fbae 	bl	8003108 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <xTaskPriorityDisinherit+0xd4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d903      	bls.n	80049d4 <xTaskPriorityDisinherit+0xa4>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <xTaskPriorityDisinherit+0xd4>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <xTaskPriorityDisinherit+0xd8>)
 80049e2:	441a      	add	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fe fb2f 	bl	800304e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049f0:	2301      	movs	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049f4:	697b      	ldr	r3, [r7, #20]
	}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000854 	.word	0x20000854
 8004a04:	20000d30 	.word	0x20000d30
 8004a08:	20000858 	.word	0x20000858

08004a0c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <uxTaskResetEventItemValue+0x2c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <uxTaskResetEventItemValue+0x2c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <uxTaskResetEventItemValue+0x2c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004a28:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004a2a:	687b      	ldr	r3, [r7, #4]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	20000854 	.word	0x20000854

08004a3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a46:	4b21      	ldr	r3, [pc, #132]	; (8004acc <prvAddCurrentTaskToDelayedList+0x90>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a4c:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fe fb58 	bl	8003108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d10a      	bne.n	8004a76 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4819      	ldr	r0, [pc, #100]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a70:	f7fe faed 	bl	800304e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a74:	e026      	b.n	8004ac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d209      	bcs.n	8004aa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe fafb 	bl	8003096 <vListInsert>
}
 8004aa0:	e010      	b.n	8004ac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f7fe faf1 	bl	8003096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d202      	bcs.n	8004ac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004abe:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000d2c 	.word	0x20000d2c
 8004ad0:	20000854 	.word	0x20000854
 8004ad4:	20000d14 	.word	0x20000d14
 8004ad8:	20000ce4 	.word	0x20000ce4
 8004adc:	20000ce0 	.word	0x20000ce0
 8004ae0:	20000d48 	.word	0x20000d48

08004ae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aee:	f000 fba1 	bl	8005234 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <xTimerCreateTimerTask+0x80>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d021      	beq.n	8004b3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b02:	1d3a      	adds	r2, r7, #4
 8004b04:	f107 0108 	add.w	r1, r7, #8
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe f915 	bl	8002d3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	9202      	str	r2, [sp, #8]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2300      	movs	r3, #0
 8004b22:	460a      	mov	r2, r1
 8004b24:	4910      	ldr	r1, [pc, #64]	; (8004b68 <xTimerCreateTimerTask+0x84>)
 8004b26:	4811      	ldr	r0, [pc, #68]	; (8004b6c <xTimerCreateTimerTask+0x88>)
 8004b28:	f7ff f88a 	bl	8003c40 <xTaskCreateStatic>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <xTimerCreateTimerTask+0x8c>)
 8004b30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b32:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <xTimerCreateTimerTask+0x8c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	613b      	str	r3, [r7, #16]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b5a:	697b      	ldr	r3, [r7, #20]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000d84 	.word	0x20000d84
 8004b68:	08006564 	.word	0x08006564
 8004b6c:	08004ddd 	.word	0x08004ddd
 8004b70:	20000d88 	.word	0x20000d88

08004b74 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004b82:	202c      	movs	r0, #44	; 0x2c
 8004b84:	f000 fe08 	bl	8005798 <pvPortMalloc>
 8004b88:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f843 	bl	8004c32 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004bac:	697b      	ldr	r3, [r7, #20]
	}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08a      	sub	sp, #40	; 0x28
 8004bba:	af02      	add	r7, sp, #8
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004bc4:	232c      	movs	r3, #44	; 0x2c
 8004bc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b2c      	cmp	r3, #44	; 0x2c
 8004bcc:	d00a      	beq.n	8004be4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	61bb      	str	r3, [r7, #24]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004be4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xTimerCreateStatic+0x4c>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	617b      	str	r3, [r7, #20]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00d      	beq.n	8004c28 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f805 	bl	8004c32 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004c28:	69fb      	ldr	r3, [r7, #28]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	617b      	str	r3, [r7, #20]
}
 8004c58:	bf00      	nop
 8004c5a:	e7fe      	b.n	8004c5a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01e      	beq.n	8004ca0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004c62:	f000 fae7 	bl	8005234 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	3304      	adds	r3, #4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe f9d6 	bl	8003034 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	623b      	str	r3, [r7, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cd6:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <xTimerGenericCommand+0x98>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d02a      	beq.n	8004d34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	dc18      	bgt.n	8004d22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cf0:	f7ff fe00 	bl	80048f4 <xTaskGetSchedulerState>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d109      	bne.n	8004d0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <xTimerGenericCommand+0x98>)
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	f107 0110 	add.w	r1, r7, #16
 8004d02:	2300      	movs	r3, #0
 8004d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d06:	f7fe fbb3 	bl	8003470 <xQueueGenericSend>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8004d0c:	e012      	b.n	8004d34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <xTimerGenericCommand+0x98>)
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	f107 0110 	add.w	r1, r7, #16
 8004d16:	2300      	movs	r3, #0
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f7fe fba9 	bl	8003470 <xQueueGenericSend>
 8004d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8004d20:	e008      	b.n	8004d34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <xTimerGenericCommand+0x98>)
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	f107 0110 	add.w	r1, r7, #16
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	f7fe fc9d 	bl	800366c <xQueueGenericSendFromISR>
 8004d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000d84 	.word	0x20000d84

08004d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4e:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <prvProcessExpiredTimer+0x94>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe f9d3 	bl	8003108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d022      	beq.n	8004db6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	699a      	ldr	r2, [r3, #24]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	18d1      	adds	r1, r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	6978      	ldr	r0, [r7, #20]
 8004d7e:	f000 f8d1 	bl	8004f24 <prvInsertTimerInActiveList>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01f      	beq.n	8004dc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	2100      	movs	r1, #0
 8004d92:	6978      	ldr	r0, [r7, #20]
 8004d94:	f7ff ff88 	bl	8004ca8 <xTimerGenericCommand>
 8004d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d113      	bne.n	8004dc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	4798      	blx	r3
}
 8004dd0:	bf00      	nop
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000d7c 	.word	0x20000d7c

08004ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004de4:	f107 0308 	add.w	r3, r7, #8
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f857 	bl	8004e9c <prvGetNextExpireTime>
 8004dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4619      	mov	r1, r3
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f803 	bl	8004e00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dfa:	f000 f8d5 	bl	8004fa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dfe:	e7f1      	b.n	8004de4 <prvTimerTask+0x8>

08004e00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e0a:	f7ff f955 	bl	80040b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e0e:	f107 0308 	add.w	r3, r7, #8
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f866 	bl	8004ee4 <prvSampleTimeNow>
 8004e18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d130      	bne.n	8004e82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <prvProcessTimerOrBlockTask+0x3c>
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d806      	bhi.n	8004e3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e2e:	f7ff f951 	bl	80040d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff85 	bl	8004d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e3a:	e024      	b.n	8004e86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <prvProcessTimerOrBlockTask+0x90>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <prvProcessTimerOrBlockTask+0x50>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <prvProcessTimerOrBlockTask+0x52>
 8004e50:	2300      	movs	r3, #0
 8004e52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <prvProcessTimerOrBlockTask+0x94>)
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	f7fe feb9 	bl	8003bd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e66:	f7ff f935 	bl	80040d4 <xTaskResumeAll>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <prvProcessTimerOrBlockTask+0x98>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
}
 8004e80:	e001      	b.n	8004e86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e82:	f7ff f927 	bl	80040d4 <xTaskResumeAll>
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000d80 	.word	0x20000d80
 8004e94:	20000d84 	.word	0x20000d84
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <prvGetNextExpireTime+0x44>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <prvGetNextExpireTime+0x16>
 8004eae:	2201      	movs	r2, #1
 8004eb0:	e000      	b.n	8004eb4 <prvGetNextExpireTime+0x18>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <prvGetNextExpireTime+0x44>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e001      	b.n	8004ed0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000d7c 	.word	0x20000d7c

08004ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004eec:	f7ff f990 	bl	8004210 <xTaskGetTickCount>
 8004ef0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <prvSampleTimeNow+0x3c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d205      	bcs.n	8004f08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004efc:	f000 f936 	bl	800516c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f0e:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <prvSampleTimeNow+0x3c>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000d8c 	.word	0x20000d8c

08004f24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d812      	bhi.n	8004f70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d302      	bcc.n	8004f5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e01b      	b.n	8004f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <prvInsertTimerInActiveList+0x7c>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7fe f894 	bl	8003096 <vListInsert>
 8004f6e:	e012      	b.n	8004f96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d206      	bcs.n	8004f86 <prvInsertTimerInActiveList+0x62>
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e007      	b.n	8004f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <prvInsertTimerInActiveList+0x80>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7fe f880 	bl	8003096 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f96:	697b      	ldr	r3, [r7, #20]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000d80 	.word	0x20000d80
 8004fa4:	20000d7c 	.word	0x20000d7c

08004fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08e      	sub	sp, #56	; 0x38
 8004fac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fae:	e0ca      	b.n	8005146 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da18      	bge.n	8004fe8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fb6:	1d3b      	adds	r3, r7, #4
 8004fb8:	3304      	adds	r3, #4
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	61fb      	str	r3, [r7, #28]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fde:	6850      	ldr	r0, [r2, #4]
 8004fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe2:	6892      	ldr	r2, [r2, #8]
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f2c0 80ab 	blt.w	8005146 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	3304      	adds	r3, #4
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe f881 	bl	8003108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005006:	463b      	mov	r3, r7
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ff6b 	bl	8004ee4 <prvSampleTimeNow>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b09      	cmp	r3, #9
 8005014:	f200 8096 	bhi.w	8005144 <prvProcessReceivedCommands+0x19c>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <prvProcessReceivedCommands+0x78>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005049 	.word	0x08005049
 8005024:	08005049 	.word	0x08005049
 8005028:	08005049 	.word	0x08005049
 800502c:	080050bd 	.word	0x080050bd
 8005030:	080050d1 	.word	0x080050d1
 8005034:	0800511b 	.word	0x0800511b
 8005038:	08005049 	.word	0x08005049
 800503c:	08005049 	.word	0x08005049
 8005040:	080050bd 	.word	0x080050bd
 8005044:	080050d1 	.word	0x080050d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	18d1      	adds	r1, r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005068:	f7ff ff5c 	bl	8004f24 <prvInsertTimerInActiveList>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d069      	beq.n	8005146 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05e      	beq.n	8005146 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	441a      	add	r2, r3
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	2100      	movs	r1, #0
 8005098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509a:	f7ff fe05 	bl	8004ca8 <xTimerGenericCommand>
 800509e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d14f      	bne.n	8005146 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	61bb      	str	r3, [r7, #24]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80050ce:	e03a      	b.n	8005146 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	617b      	str	r3, [r7, #20]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	18d1      	adds	r1, r2, r3
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005114:	f7ff ff06 	bl	8004f24 <prvInsertTimerInActiveList>
					break;
 8005118:	e015      	b.n	8005146 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d103      	bne.n	8005130 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800512a:	f000 fc01 	bl	8005930 <vPortFree>
 800512e:	e00a      	b.n	8005146 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005142:	e000      	b.n	8005146 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <prvProcessReceivedCommands+0x1c0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	1d39      	adds	r1, r7, #4
 800514c:	2200      	movs	r2, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fb28 	bl	80037a4 <xQueueReceive>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f47f af2a 	bne.w	8004fb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	3730      	adds	r7, #48	; 0x30
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000d84 	.word	0x20000d84

0800516c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005172:	e048      	b.n	8005206 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005174:	4b2d      	ldr	r3, [pc, #180]	; (800522c <prvSwitchTimerLists+0xc0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517e:	4b2b      	ldr	r3, [pc, #172]	; (800522c <prvSwitchTimerLists+0xc0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3304      	adds	r3, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f7fd ffbb 	bl	8003108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d02e      	beq.n	8005206 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d90e      	bls.n	80051d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051c6:	4b19      	ldr	r3, [pc, #100]	; (800522c <prvSwitchTimerLists+0xc0>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f7fd ff60 	bl	8003096 <vListInsert>
 80051d6:	e016      	b.n	8005206 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051d8:	2300      	movs	r3, #0
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	2300      	movs	r3, #0
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	2100      	movs	r1, #0
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff fd60 	bl	8004ca8 <xTimerGenericCommand>
 80051e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	603b      	str	r3, [r7, #0]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <prvSwitchTimerLists+0xc0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1b1      	bne.n	8005174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <prvSwitchTimerLists+0xc0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <prvSwitchTimerLists+0xc4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a04      	ldr	r2, [pc, #16]	; (800522c <prvSwitchTimerLists+0xc0>)
 800521c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800521e:	4a04      	ldr	r2, [pc, #16]	; (8005230 <prvSwitchTimerLists+0xc4>)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000d7c 	.word	0x20000d7c
 8005230:	20000d80 	.word	0x20000d80

08005234 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800523a:	f000 f98b 	bl	8005554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800523e:	4b15      	ldr	r3, [pc, #84]	; (8005294 <prvCheckForValidListAndQueue+0x60>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d120      	bne.n	8005288 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005246:	4814      	ldr	r0, [pc, #80]	; (8005298 <prvCheckForValidListAndQueue+0x64>)
 8005248:	f7fd fed4 	bl	8002ff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800524c:	4813      	ldr	r0, [pc, #76]	; (800529c <prvCheckForValidListAndQueue+0x68>)
 800524e:	f7fd fed1 	bl	8002ff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <prvCheckForValidListAndQueue+0x6c>)
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <prvCheckForValidListAndQueue+0x64>)
 8005256:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005258:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <prvCheckForValidListAndQueue+0x70>)
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <prvCheckForValidListAndQueue+0x68>)
 800525c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800525e:	2300      	movs	r3, #0
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <prvCheckForValidListAndQueue+0x74>)
 8005264:	4a11      	ldr	r2, [pc, #68]	; (80052ac <prvCheckForValidListAndQueue+0x78>)
 8005266:	2110      	movs	r1, #16
 8005268:	200a      	movs	r0, #10
 800526a:	f7fd ffdf 	bl	800322c <xQueueGenericCreateStatic>
 800526e:	4603      	mov	r3, r0
 8005270:	4a08      	ldr	r2, [pc, #32]	; (8005294 <prvCheckForValidListAndQueue+0x60>)
 8005272:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <prvCheckForValidListAndQueue+0x60>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <prvCheckForValidListAndQueue+0x60>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	490b      	ldr	r1, [pc, #44]	; (80052b0 <prvCheckForValidListAndQueue+0x7c>)
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fc7e 	bl	8003b84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005288:	f000 f994 	bl	80055b4 <vPortExitCritical>
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000d84 	.word	0x20000d84
 8005298:	20000d54 	.word	0x20000d54
 800529c:	20000d68 	.word	0x20000d68
 80052a0:	20000d7c 	.word	0x20000d7c
 80052a4:	20000d80 	.word	0x20000d80
 80052a8:	20000e30 	.word	0x20000e30
 80052ac:	20000d90 	.word	0x20000d90
 80052b0:	0800656c 	.word	0x0800656c

080052b4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <pvTimerGetTimerID+0x28>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80052dc:	f000 f93a 	bl	8005554 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80052e6:	f000 f965 	bl	80055b4 <vPortExitCritical>

	return pvReturn;
 80052ea:	693b      	ldr	r3, [r7, #16]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b04      	subs	r3, #4
 8005304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800530c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b04      	subs	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b04      	subs	r3, #4
 8005322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005324:	4a0c      	ldr	r2, [pc, #48]	; (8005358 <pxPortInitialiseStack+0x64>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b14      	subs	r3, #20
 800532e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b04      	subs	r3, #4
 800533a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f06f 0202 	mvn.w	r2, #2
 8005342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3b20      	subs	r3, #32
 8005348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	0800535d 	.word	0x0800535d

0800535c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005366:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <prvTaskExitError+0x54>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d00a      	beq.n	8005386 <prvTaskExitError+0x2a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	60fb      	str	r3, [r7, #12]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <prvTaskExitError+0x28>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60bb      	str	r3, [r7, #8]
}
 8005398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800539a:	bf00      	nop
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0fc      	beq.n	800539c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	2000000c 	.word	0x2000000c
	...

080053c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <pxCurrentTCBConst2>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f380 8809 	msr	PSP, r0
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	4770      	bx	lr
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst2>:
 80053e0:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053e8:	4808      	ldr	r0, [pc, #32]	; (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800540a:	bf00      	nop
 800540c:	e000ed08 	.word	0xe000ed08

08005410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005416:	4b46      	ldr	r3, [pc, #280]	; (8005530 <xPortStartScheduler+0x120>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a46      	ldr	r2, [pc, #280]	; (8005534 <xPortStartScheduler+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10a      	bne.n	8005436 <xPortStartScheduler+0x26>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005436:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <xPortStartScheduler+0x120>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <xPortStartScheduler+0x128>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10a      	bne.n	8005456 <xPortStartScheduler+0x46>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60fb      	str	r3, [r7, #12]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <xPortStartScheduler+0x12c>)
 8005458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <xPortStartScheduler+0x130>)
 800547c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <xPortStartScheduler+0x134>)
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005484:	e009      	b.n	800549a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005486:	4b2f      	ldr	r3, [pc, #188]	; (8005544 <xPortStartScheduler+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <xPortStartScheduler+0x134>)
 800548e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	b2db      	uxtb	r3, r3
 8005498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d0ef      	beq.n	8005486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054a6:	4b27      	ldr	r3, [pc, #156]	; (8005544 <xPortStartScheduler+0x134>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1c3 0307 	rsb	r3, r3, #7
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d00a      	beq.n	80054c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60bb      	str	r3, [r7, #8]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <xPortStartScheduler+0x134>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <xPortStartScheduler+0x134>)
 80054d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <xPortStartScheduler+0x134>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054da:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <xPortStartScheduler+0x134>)
 80054dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <xPortStartScheduler+0x138>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <xPortStartScheduler+0x138>)
 80054ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <xPortStartScheduler+0x138>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <xPortStartScheduler+0x138>)
 80054f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054fe:	f000 f8dd 	bl	80056bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <xPortStartScheduler+0x13c>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005508:	f000 f8fc 	bl	8005704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <xPortStartScheduler+0x140>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0f      	ldr	r2, [pc, #60]	; (8005550 <xPortStartScheduler+0x140>)
 8005512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005518:	f7ff ff66 	bl	80053e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800551c:	f7fe ff42 	bl	80043a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005520:	f7ff ff1c 	bl	800535c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000ed00 	.word	0xe000ed00
 8005534:	410fc271 	.word	0x410fc271
 8005538:	410fc270 	.word	0x410fc270
 800553c:	e000e400 	.word	0xe000e400
 8005540:	20000e80 	.word	0x20000e80
 8005544:	20000e84 	.word	0x20000e84
 8005548:	e000ed20 	.word	0xe000ed20
 800554c:	2000000c 	.word	0x2000000c
 8005550:	e000ef34 	.word	0xe000ef34

08005554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	607b      	str	r3, [r7, #4]
}
 800556c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <vPortEnterCritical+0x58>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	4a0d      	ldr	r2, [pc, #52]	; (80055ac <vPortEnterCritical+0x58>)
 8005576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <vPortEnterCritical+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10f      	bne.n	80055a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <vPortEnterCritical+0x5c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	603b      	str	r3, [r7, #0]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <vPortEnterCritical+0x4a>
	}
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	2000000c 	.word	0x2000000c
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <vPortExitCritical+0x50>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <vPortExitCritical+0x24>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	607b      	str	r3, [r7, #4]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <vPortExitCritical+0x50>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3b01      	subs	r3, #1
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <vPortExitCritical+0x50>)
 80055e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <vPortExitCritical+0x50>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <vPortExitCritical+0x42>
 80055ea:	2300      	movs	r3, #0
 80055ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f383 8811 	msr	BASEPRI, r3
}
 80055f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000000c 	.word	0x2000000c
	...

08005610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005610:	f3ef 8009 	mrs	r0, PSP
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <pxCurrentTCBConst>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f01e 0f10 	tst.w	lr, #16
 8005620:	bf08      	it	eq
 8005622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005634:	f380 8811 	msr	BASEPRI, r0
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f7fe feb0 	bl	80043a4 <vTaskSwitchContext>
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f380 8811 	msr	BASEPRI, r0
 800564c:	bc09      	pop	{r0, r3}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005656:	f01e 0f10 	tst.w	lr, #16
 800565a:	bf08      	it	eq
 800565c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005660:	f380 8809 	msr	PSP, r0
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst>:
 8005670:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005692:	f7fe fdcd 	bl	8004230 <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <xPortSysTickHandler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
}
 80056ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <vPortSetupTimerInterrupt+0x44>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010
 80056f4:	e000e018 	.word	0xe000e018
 80056f8:	20000000 	.word	0x20000000
 80056fc:	10624dd3 	.word	0x10624dd3
 8005700:	e000e014 	.word	0xe000e014

08005704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005714 <vPortEnableVFP+0x10>
 8005708:	6801      	ldr	r1, [r0, #0]
 800570a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800570e:	6001      	str	r1, [r0, #0]
 8005710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005712:	bf00      	nop
 8005714:	e000ed88 	.word	0xe000ed88

08005718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800571e:	f3ef 8305 	mrs	r3, IPSR
 8005722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d914      	bls.n	8005754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <vPortValidateInterruptPriority+0x70>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <vPortValidateInterruptPriority+0x74>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	7afa      	ldrb	r2, [r7, #11]
 800573a:	429a      	cmp	r2, r3
 800573c:	d20a      	bcs.n	8005754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005754:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <vPortValidateInterruptPriority+0x78>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <vPortValidateInterruptPriority+0x7c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d90a      	bls.n	800577a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	603b      	str	r3, [r7, #0]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <vPortValidateInterruptPriority+0x60>
	}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	e000e3f0 	.word	0xe000e3f0
 800578c:	20000e80 	.word	0x20000e80
 8005790:	e000ed0c 	.word	0xe000ed0c
 8005794:	20000e84 	.word	0x20000e84

08005798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057a4:	f7fe fc88 	bl	80040b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057a8:	4b5b      	ldr	r3, [pc, #364]	; (8005918 <pvPortMalloc+0x180>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057b0:	f000 f920 	bl	80059f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <pvPortMalloc+0x184>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f040 8093 	bne.w	80058e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01d      	beq.n	8005804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057c8:	2208      	movs	r2, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f023 0307 	bic.w	r3, r3, #7
 80057e0:	3308      	adds	r3, #8
 80057e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <pvPortMalloc+0x6c>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	617b      	str	r3, [r7, #20]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d06e      	beq.n	80058e8 <pvPortMalloc+0x150>
 800580a:	4b45      	ldr	r3, [pc, #276]	; (8005920 <pvPortMalloc+0x188>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d869      	bhi.n	80058e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005814:	4b43      	ldr	r3, [pc, #268]	; (8005924 <pvPortMalloc+0x18c>)
 8005816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005818:	4b42      	ldr	r3, [pc, #264]	; (8005924 <pvPortMalloc+0x18c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800581e:	e004      	b.n	800582a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d903      	bls.n	800583c <pvPortMalloc+0xa4>
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f1      	bne.n	8005820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800583c:	4b36      	ldr	r3, [pc, #216]	; (8005918 <pvPortMalloc+0x180>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005842:	429a      	cmp	r2, r3
 8005844:	d050      	beq.n	80058e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2208      	movs	r2, #8
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	2308      	movs	r3, #8
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	429a      	cmp	r2, r3
 8005866:	d91f      	bls.n	80058a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <pvPortMalloc+0xf8>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	613b      	str	r3, [r7, #16]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058a2:	69b8      	ldr	r0, [r7, #24]
 80058a4:	f000 f908 	bl	8005ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <pvPortMalloc+0x188>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <pvPortMalloc+0x188>)
 80058b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058b6:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <pvPortMalloc+0x188>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <pvPortMalloc+0x190>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d203      	bcs.n	80058ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058c2:	4b17      	ldr	r3, [pc, #92]	; (8005920 <pvPortMalloc+0x188>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a18      	ldr	r2, [pc, #96]	; (8005928 <pvPortMalloc+0x190>)
 80058c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <pvPortMalloc+0x184>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <pvPortMalloc+0x194>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	4a11      	ldr	r2, [pc, #68]	; (800592c <pvPortMalloc+0x194>)
 80058e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058e8:	f7fe fbf4 	bl	80040d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <pvPortMalloc+0x174>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	60fb      	str	r3, [r7, #12]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <pvPortMalloc+0x172>
	return pvReturn;
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3728      	adds	r7, #40	; 0x28
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20004a90 	.word	0x20004a90
 800591c:	20004aa4 	.word	0x20004aa4
 8005920:	20004a94 	.word	0x20004a94
 8005924:	20004a88 	.word	0x20004a88
 8005928:	20004a98 	.word	0x20004a98
 800592c:	20004a9c 	.word	0x20004a9c

08005930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d04d      	beq.n	80059de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005942:	2308      	movs	r3, #8
 8005944:	425b      	negs	r3, r3
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4413      	add	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <vPortFree+0xb8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <vPortFree+0x44>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60fb      	str	r3, [r7, #12]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <vPortFree+0x62>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <vPortFree+0xb8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01e      	beq.n	80059de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d11a      	bne.n	80059de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <vPortFree+0xb8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059b8:	f7fe fb7e 	bl	80040b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <vPortFree+0xbc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <vPortFree+0xbc>)
 80059c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ca:	6938      	ldr	r0, [r7, #16]
 80059cc:	f000 f874 	bl	8005ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <vPortFree+0xc0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a06      	ldr	r2, [pc, #24]	; (80059f0 <vPortFree+0xc0>)
 80059d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059da:	f7fe fb7b 	bl	80040d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20004aa4 	.word	0x20004aa4
 80059ec:	20004a94 	.word	0x20004a94
 80059f0:	20004aa0 	.word	0x20004aa0

080059f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a00:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <prvHeapInit+0xac>)
 8005a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3307      	adds	r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0307 	bic.w	r3, r3, #7
 8005a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <prvHeapInit+0xac>)
 8005a24:	4413      	add	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <prvHeapInit+0xb0>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a32:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <prvHeapInit+0xb0>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a40:	2208      	movs	r2, #8
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0307 	bic.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	1ad2      	subs	r2, r2, r3
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <prvHeapInit+0xb4>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <prvHeapInit+0xb8>)
 8005a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <prvHeapInit+0xbc>)
 8005a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <prvHeapInit+0xc0>)
 8005a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20000e88 	.word	0x20000e88
 8005aa4:	20004a88 	.word	0x20004a88
 8005aa8:	20004a90 	.word	0x20004a90
 8005aac:	20004a98 	.word	0x20004a98
 8005ab0:	20004a94 	.word	0x20004a94
 8005ab4:	20004aa4 	.word	0x20004aa4

08005ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ac0:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <prvInsertBlockIntoFreeList+0xac>)
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e002      	b.n	8005acc <prvInsertBlockIntoFreeList+0x14>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d8f7      	bhi.n	8005ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d108      	bne.n	8005afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	441a      	add	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	441a      	add	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d118      	bne.n	8005b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <prvInsertBlockIntoFreeList+0xb0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d00d      	beq.n	8005b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	441a      	add	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e008      	b.n	8005b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <prvInsertBlockIntoFreeList+0xb0>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e003      	b.n	8005b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d002      	beq.n	8005b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20004a88 	.word	0x20004a88
 8005b68:	20004a90 	.word	0x20004a90

08005b6c <std>:
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	b510      	push	{r4, lr}
 8005b70:	4604      	mov	r4, r0
 8005b72:	e9c0 3300 	strd	r3, r3, [r0]
 8005b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b7a:	6083      	str	r3, [r0, #8]
 8005b7c:	8181      	strh	r1, [r0, #12]
 8005b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b80:	81c2      	strh	r2, [r0, #14]
 8005b82:	6183      	str	r3, [r0, #24]
 8005b84:	4619      	mov	r1, r3
 8005b86:	2208      	movs	r2, #8
 8005b88:	305c      	adds	r0, #92	; 0x5c
 8005b8a:	f000 f9e5 	bl	8005f58 <memset>
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <std+0x58>)
 8005b90:	6263      	str	r3, [r4, #36]	; 0x24
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <std+0x5c>)
 8005b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <std+0x60>)
 8005b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <std+0x64>)
 8005b9c:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <std+0x68>)
 8005ba0:	6224      	str	r4, [r4, #32]
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d006      	beq.n	8005bb4 <std+0x48>
 8005ba6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005baa:	4294      	cmp	r4, r2
 8005bac:	d002      	beq.n	8005bb4 <std+0x48>
 8005bae:	33d0      	adds	r3, #208	; 0xd0
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d105      	bne.n	8005bc0 <std+0x54>
 8005bb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bbc:	f000 ba44 	b.w	8006048 <__retarget_lock_init_recursive>
 8005bc0:	bd10      	pop	{r4, pc}
 8005bc2:	bf00      	nop
 8005bc4:	08005da9 	.word	0x08005da9
 8005bc8:	08005dcb 	.word	0x08005dcb
 8005bcc:	08005e03 	.word	0x08005e03
 8005bd0:	08005e27 	.word	0x08005e27
 8005bd4:	20004aa8 	.word	0x20004aa8

08005bd8 <stdio_exit_handler>:
 8005bd8:	4a02      	ldr	r2, [pc, #8]	; (8005be4 <stdio_exit_handler+0xc>)
 8005bda:	4903      	ldr	r1, [pc, #12]	; (8005be8 <stdio_exit_handler+0x10>)
 8005bdc:	4803      	ldr	r0, [pc, #12]	; (8005bec <stdio_exit_handler+0x14>)
 8005bde:	f000 b869 	b.w	8005cb4 <_fwalk_sglue>
 8005be2:	bf00      	nop
 8005be4:	20000010 	.word	0x20000010
 8005be8:	08006369 	.word	0x08006369
 8005bec:	2000001c 	.word	0x2000001c

08005bf0 <cleanup_stdio>:
 8005bf0:	6841      	ldr	r1, [r0, #4]
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <cleanup_stdio+0x34>)
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	b510      	push	{r4, lr}
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	d001      	beq.n	8005c00 <cleanup_stdio+0x10>
 8005bfc:	f000 fbb4 	bl	8006368 <_fflush_r>
 8005c00:	68a1      	ldr	r1, [r4, #8]
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <cleanup_stdio+0x38>)
 8005c04:	4299      	cmp	r1, r3
 8005c06:	d002      	beq.n	8005c0e <cleanup_stdio+0x1e>
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 fbad 	bl	8006368 <_fflush_r>
 8005c0e:	68e1      	ldr	r1, [r4, #12]
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <cleanup_stdio+0x3c>)
 8005c12:	4299      	cmp	r1, r3
 8005c14:	d004      	beq.n	8005c20 <cleanup_stdio+0x30>
 8005c16:	4620      	mov	r0, r4
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	f000 bba4 	b.w	8006368 <_fflush_r>
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	bf00      	nop
 8005c24:	20004aa8 	.word	0x20004aa8
 8005c28:	20004b10 	.word	0x20004b10
 8005c2c:	20004b78 	.word	0x20004b78

08005c30 <global_stdio_init.part.0>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <global_stdio_init.part.0+0x30>)
 8005c34:	4c0b      	ldr	r4, [pc, #44]	; (8005c64 <global_stdio_init.part.0+0x34>)
 8005c36:	4a0c      	ldr	r2, [pc, #48]	; (8005c68 <global_stdio_init.part.0+0x38>)
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2104      	movs	r1, #4
 8005c40:	f7ff ff94 	bl	8005b6c <std>
 8005c44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c48:	2201      	movs	r2, #1
 8005c4a:	2109      	movs	r1, #9
 8005c4c:	f7ff ff8e 	bl	8005b6c <std>
 8005c50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c54:	2202      	movs	r2, #2
 8005c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c5a:	2112      	movs	r1, #18
 8005c5c:	f7ff bf86 	b.w	8005b6c <std>
 8005c60:	20004be0 	.word	0x20004be0
 8005c64:	20004aa8 	.word	0x20004aa8
 8005c68:	08005bd9 	.word	0x08005bd9

08005c6c <__sfp_lock_acquire>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__sfp_lock_acquire+0x8>)
 8005c6e:	f000 b9ec 	b.w	800604a <__retarget_lock_acquire_recursive>
 8005c72:	bf00      	nop
 8005c74:	20004be9 	.word	0x20004be9

08005c78 <__sfp_lock_release>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__sfp_lock_release+0x8>)
 8005c7a:	f000 b9e7 	b.w	800604c <__retarget_lock_release_recursive>
 8005c7e:	bf00      	nop
 8005c80:	20004be9 	.word	0x20004be9

08005c84 <__sinit>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4604      	mov	r4, r0
 8005c88:	f7ff fff0 	bl	8005c6c <__sfp_lock_acquire>
 8005c8c:	6a23      	ldr	r3, [r4, #32]
 8005c8e:	b11b      	cbz	r3, 8005c98 <__sinit+0x14>
 8005c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c94:	f7ff bff0 	b.w	8005c78 <__sfp_lock_release>
 8005c98:	4b04      	ldr	r3, [pc, #16]	; (8005cac <__sinit+0x28>)
 8005c9a:	6223      	str	r3, [r4, #32]
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <__sinit+0x2c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f5      	bne.n	8005c90 <__sinit+0xc>
 8005ca4:	f7ff ffc4 	bl	8005c30 <global_stdio_init.part.0>
 8005ca8:	e7f2      	b.n	8005c90 <__sinit+0xc>
 8005caa:	bf00      	nop
 8005cac:	08005bf1 	.word	0x08005bf1
 8005cb0:	20004be0 	.word	0x20004be0

08005cb4 <_fwalk_sglue>:
 8005cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	4607      	mov	r7, r0
 8005cba:	4688      	mov	r8, r1
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8005cc8:	d505      	bpl.n	8005cd6 <_fwalk_sglue+0x22>
 8005cca:	6824      	ldr	r4, [r4, #0]
 8005ccc:	2c00      	cmp	r4, #0
 8005cce:	d1f7      	bne.n	8005cc0 <_fwalk_sglue+0xc>
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d907      	bls.n	8005cec <_fwalk_sglue+0x38>
 8005cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	d003      	beq.n	8005cec <_fwalk_sglue+0x38>
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	4306      	orrs	r6, r0
 8005cec:	3568      	adds	r5, #104	; 0x68
 8005cee:	e7e9      	b.n	8005cc4 <_fwalk_sglue+0x10>

08005cf0 <_puts_r>:
 8005cf0:	6a03      	ldr	r3, [r0, #32]
 8005cf2:	b570      	push	{r4, r5, r6, lr}
 8005cf4:	6884      	ldr	r4, [r0, #8]
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	b90b      	cbnz	r3, 8005d00 <_puts_r+0x10>
 8005cfc:	f7ff ffc2 	bl	8005c84 <__sinit>
 8005d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d02:	07db      	lsls	r3, r3, #31
 8005d04:	d405      	bmi.n	8005d12 <_puts_r+0x22>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	0598      	lsls	r0, r3, #22
 8005d0a:	d402      	bmi.n	8005d12 <_puts_r+0x22>
 8005d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d0e:	f000 f99c 	bl	800604a <__retarget_lock_acquire_recursive>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	0719      	lsls	r1, r3, #28
 8005d16:	d513      	bpl.n	8005d40 <_puts_r+0x50>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	b18b      	cbz	r3, 8005d40 <_puts_r+0x50>
 8005d1c:	3e01      	subs	r6, #1
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d24:	3b01      	subs	r3, #1
 8005d26:	60a3      	str	r3, [r4, #8]
 8005d28:	b9e9      	cbnz	r1, 8005d66 <_puts_r+0x76>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	da2e      	bge.n	8005d8c <_puts_r+0x9c>
 8005d2e:	4622      	mov	r2, r4
 8005d30:	210a      	movs	r1, #10
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 f87b 	bl	8005e2e <__swbuf_r>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d007      	beq.n	8005d4c <_puts_r+0x5c>
 8005d3c:	250a      	movs	r5, #10
 8005d3e:	e007      	b.n	8005d50 <_puts_r+0x60>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f8b0 	bl	8005ea8 <__swsetup_r>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d0e7      	beq.n	8005d1c <_puts_r+0x2c>
 8005d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8005d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d52:	07da      	lsls	r2, r3, #31
 8005d54:	d405      	bmi.n	8005d62 <_puts_r+0x72>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	059b      	lsls	r3, r3, #22
 8005d5a:	d402      	bmi.n	8005d62 <_puts_r+0x72>
 8005d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5e:	f000 f975 	bl	800604c <__retarget_lock_release_recursive>
 8005d62:	4628      	mov	r0, r5
 8005d64:	bd70      	pop	{r4, r5, r6, pc}
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da04      	bge.n	8005d74 <_puts_r+0x84>
 8005d6a:	69a2      	ldr	r2, [r4, #24]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	dc06      	bgt.n	8005d7e <_puts_r+0x8e>
 8005d70:	290a      	cmp	r1, #10
 8005d72:	d004      	beq.n	8005d7e <_puts_r+0x8e>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	6022      	str	r2, [r4, #0]
 8005d7a:	7019      	strb	r1, [r3, #0]
 8005d7c:	e7cf      	b.n	8005d1e <_puts_r+0x2e>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 f854 	bl	8005e2e <__swbuf_r>
 8005d86:	3001      	adds	r0, #1
 8005d88:	d1c9      	bne.n	8005d1e <_puts_r+0x2e>
 8005d8a:	e7df      	b.n	8005d4c <_puts_r+0x5c>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	250a      	movs	r5, #10
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	701d      	strb	r5, [r3, #0]
 8005d96:	e7db      	b.n	8005d50 <_puts_r+0x60>

08005d98 <puts>:
 8005d98:	4b02      	ldr	r3, [pc, #8]	; (8005da4 <puts+0xc>)
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f7ff bfa7 	b.w	8005cf0 <_puts_r>
 8005da2:	bf00      	nop
 8005da4:	20000068 	.word	0x20000068

08005da8 <__sread>:
 8005da8:	b510      	push	{r4, lr}
 8005daa:	460c      	mov	r4, r1
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	f000 f8fc 	bl	8005fac <_read_r>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	bfab      	itete	ge
 8005db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dba:	89a3      	ldrhlt	r3, [r4, #12]
 8005dbc:	181b      	addge	r3, r3, r0
 8005dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dc2:	bfac      	ite	ge
 8005dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dc6:	81a3      	strhlt	r3, [r4, #12]
 8005dc8:	bd10      	pop	{r4, pc}

08005dca <__swrite>:
 8005dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	461f      	mov	r7, r3
 8005dd0:	898b      	ldrh	r3, [r1, #12]
 8005dd2:	05db      	lsls	r3, r3, #23
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	4616      	mov	r6, r2
 8005dda:	d505      	bpl.n	8005de8 <__swrite+0x1e>
 8005ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de0:	2302      	movs	r3, #2
 8005de2:	2200      	movs	r2, #0
 8005de4:	f000 f8d0 	bl	8005f88 <_lseek_r>
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	4632      	mov	r2, r6
 8005df6:	463b      	mov	r3, r7
 8005df8:	4628      	mov	r0, r5
 8005dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfe:	f000 b8e7 	b.w	8005fd0 <_write_r>

08005e02 <__sseek>:
 8005e02:	b510      	push	{r4, lr}
 8005e04:	460c      	mov	r4, r1
 8005e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0a:	f000 f8bd 	bl	8005f88 <_lseek_r>
 8005e0e:	1c43      	adds	r3, r0, #1
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	bf15      	itete	ne
 8005e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e1e:	81a3      	strheq	r3, [r4, #12]
 8005e20:	bf18      	it	ne
 8005e22:	81a3      	strhne	r3, [r4, #12]
 8005e24:	bd10      	pop	{r4, pc}

08005e26 <__sclose>:
 8005e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2a:	f000 b89d 	b.w	8005f68 <_close_r>

08005e2e <__swbuf_r>:
 8005e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e30:	460e      	mov	r6, r1
 8005e32:	4614      	mov	r4, r2
 8005e34:	4605      	mov	r5, r0
 8005e36:	b118      	cbz	r0, 8005e40 <__swbuf_r+0x12>
 8005e38:	6a03      	ldr	r3, [r0, #32]
 8005e3a:	b90b      	cbnz	r3, 8005e40 <__swbuf_r+0x12>
 8005e3c:	f7ff ff22 	bl	8005c84 <__sinit>
 8005e40:	69a3      	ldr	r3, [r4, #24]
 8005e42:	60a3      	str	r3, [r4, #8]
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	071a      	lsls	r2, r3, #28
 8005e48:	d525      	bpl.n	8005e96 <__swbuf_r+0x68>
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	b31b      	cbz	r3, 8005e96 <__swbuf_r+0x68>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	1a98      	subs	r0, r3, r2
 8005e54:	6963      	ldr	r3, [r4, #20]
 8005e56:	b2f6      	uxtb	r6, r6
 8005e58:	4283      	cmp	r3, r0
 8005e5a:	4637      	mov	r7, r6
 8005e5c:	dc04      	bgt.n	8005e68 <__swbuf_r+0x3a>
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 fa81 	bl	8006368 <_fflush_r>
 8005e66:	b9e0      	cbnz	r0, 8005ea2 <__swbuf_r+0x74>
 8005e68:	68a3      	ldr	r3, [r4, #8]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	60a3      	str	r3, [r4, #8]
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	701e      	strb	r6, [r3, #0]
 8005e76:	6962      	ldr	r2, [r4, #20]
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d004      	beq.n	8005e88 <__swbuf_r+0x5a>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	07db      	lsls	r3, r3, #31
 8005e82:	d506      	bpl.n	8005e92 <__swbuf_r+0x64>
 8005e84:	2e0a      	cmp	r6, #10
 8005e86:	d104      	bne.n	8005e92 <__swbuf_r+0x64>
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 fa6c 	bl	8006368 <_fflush_r>
 8005e90:	b938      	cbnz	r0, 8005ea2 <__swbuf_r+0x74>
 8005e92:	4638      	mov	r0, r7
 8005e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e96:	4621      	mov	r1, r4
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f000 f805 	bl	8005ea8 <__swsetup_r>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d0d5      	beq.n	8005e4e <__swbuf_r+0x20>
 8005ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ea6:	e7f4      	b.n	8005e92 <__swbuf_r+0x64>

08005ea8 <__swsetup_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <__swsetup_r+0xac>)
 8005eac:	4605      	mov	r5, r0
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	b118      	cbz	r0, 8005ebc <__swsetup_r+0x14>
 8005eb4:	6a03      	ldr	r3, [r0, #32]
 8005eb6:	b90b      	cbnz	r3, 8005ebc <__swsetup_r+0x14>
 8005eb8:	f7ff fee4 	bl	8005c84 <__sinit>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec2:	0718      	lsls	r0, r3, #28
 8005ec4:	d422      	bmi.n	8005f0c <__swsetup_r+0x64>
 8005ec6:	06d9      	lsls	r1, r3, #27
 8005ec8:	d407      	bmi.n	8005eda <__swsetup_r+0x32>
 8005eca:	2309      	movs	r3, #9
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	e034      	b.n	8005f44 <__swsetup_r+0x9c>
 8005eda:	0758      	lsls	r0, r3, #29
 8005edc:	d512      	bpl.n	8005f04 <__swsetup_r+0x5c>
 8005ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ee0:	b141      	cbz	r1, 8005ef4 <__swsetup_r+0x4c>
 8005ee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee6:	4299      	cmp	r1, r3
 8005ee8:	d002      	beq.n	8005ef0 <__swsetup_r+0x48>
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f8be 	bl	800606c <_free_r>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	2300      	movs	r3, #0
 8005efe:	6063      	str	r3, [r4, #4]
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	f043 0308 	orr.w	r3, r3, #8
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	b94b      	cbnz	r3, 8005f24 <__swsetup_r+0x7c>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1a:	d003      	beq.n	8005f24 <__swsetup_r+0x7c>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 fa70 	bl	8006404 <__smakebuf_r>
 8005f24:	89a0      	ldrh	r0, [r4, #12]
 8005f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f2a:	f010 0301 	ands.w	r3, r0, #1
 8005f2e:	d00a      	beq.n	8005f46 <__swsetup_r+0x9e>
 8005f30:	2300      	movs	r3, #0
 8005f32:	60a3      	str	r3, [r4, #8]
 8005f34:	6963      	ldr	r3, [r4, #20]
 8005f36:	425b      	negs	r3, r3
 8005f38:	61a3      	str	r3, [r4, #24]
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	b943      	cbnz	r3, 8005f50 <__swsetup_r+0xa8>
 8005f3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f42:	d1c4      	bne.n	8005ece <__swsetup_r+0x26>
 8005f44:	bd38      	pop	{r3, r4, r5, pc}
 8005f46:	0781      	lsls	r1, r0, #30
 8005f48:	bf58      	it	pl
 8005f4a:	6963      	ldrpl	r3, [r4, #20]
 8005f4c:	60a3      	str	r3, [r4, #8]
 8005f4e:	e7f4      	b.n	8005f3a <__swsetup_r+0x92>
 8005f50:	2000      	movs	r0, #0
 8005f52:	e7f7      	b.n	8005f44 <__swsetup_r+0x9c>
 8005f54:	20000068 	.word	0x20000068

08005f58 <memset>:
 8005f58:	4402      	add	r2, r0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <_close_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4d06      	ldr	r5, [pc, #24]	; (8005f84 <_close_r+0x1c>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fa fe15 	bl	8000ba2 <_close>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_close_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_close_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	20004be4 	.word	0x20004be4

08005f88 <_lseek_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d07      	ldr	r5, [pc, #28]	; (8005fa8 <_lseek_r+0x20>)
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	4608      	mov	r0, r1
 8005f90:	4611      	mov	r1, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fa fe2a 	bl	8000bf0 <_lseek>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_lseek_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_lseek_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	20004be4 	.word	0x20004be4

08005fac <_read_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d07      	ldr	r5, [pc, #28]	; (8005fcc <_read_r+0x20>)
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	4608      	mov	r0, r1
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	602a      	str	r2, [r5, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f7fa fdb8 	bl	8000b30 <_read>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_read_r+0x1e>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_read_r+0x1e>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	20004be4 	.word	0x20004be4

08005fd0 <_write_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d07      	ldr	r5, [pc, #28]	; (8005ff0 <_write_r+0x20>)
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	4608      	mov	r0, r1
 8005fd8:	4611      	mov	r1, r2
 8005fda:	2200      	movs	r2, #0
 8005fdc:	602a      	str	r2, [r5, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f7fa fdc3 	bl	8000b6a <_write>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_write_r+0x1e>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_write_r+0x1e>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	20004be4 	.word	0x20004be4

08005ff4 <__errno>:
 8005ff4:	4b01      	ldr	r3, [pc, #4]	; (8005ffc <__errno+0x8>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000068 	.word	0x20000068

08006000 <__libc_init_array>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	4d0d      	ldr	r5, [pc, #52]	; (8006038 <__libc_init_array+0x38>)
 8006004:	4c0d      	ldr	r4, [pc, #52]	; (800603c <__libc_init_array+0x3c>)
 8006006:	1b64      	subs	r4, r4, r5
 8006008:	10a4      	asrs	r4, r4, #2
 800600a:	2600      	movs	r6, #0
 800600c:	42a6      	cmp	r6, r4
 800600e:	d109      	bne.n	8006024 <__libc_init_array+0x24>
 8006010:	4d0b      	ldr	r5, [pc, #44]	; (8006040 <__libc_init_array+0x40>)
 8006012:	4c0c      	ldr	r4, [pc, #48]	; (8006044 <__libc_init_array+0x44>)
 8006014:	f000 fa64 	bl	80064e0 <_init>
 8006018:	1b64      	subs	r4, r4, r5
 800601a:	10a4      	asrs	r4, r4, #2
 800601c:	2600      	movs	r6, #0
 800601e:	42a6      	cmp	r6, r4
 8006020:	d105      	bne.n	800602e <__libc_init_array+0x2e>
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	f855 3b04 	ldr.w	r3, [r5], #4
 8006028:	4798      	blx	r3
 800602a:	3601      	adds	r6, #1
 800602c:	e7ee      	b.n	800600c <__libc_init_array+0xc>
 800602e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006032:	4798      	blx	r3
 8006034:	3601      	adds	r6, #1
 8006036:	e7f2      	b.n	800601e <__libc_init_array+0x1e>
 8006038:	080065cc 	.word	0x080065cc
 800603c:	080065cc 	.word	0x080065cc
 8006040:	080065cc 	.word	0x080065cc
 8006044:	080065d0 	.word	0x080065d0

08006048 <__retarget_lock_init_recursive>:
 8006048:	4770      	bx	lr

0800604a <__retarget_lock_acquire_recursive>:
 800604a:	4770      	bx	lr

0800604c <__retarget_lock_release_recursive>:
 800604c:	4770      	bx	lr

0800604e <memcpy>:
 800604e:	440a      	add	r2, r1
 8006050:	4291      	cmp	r1, r2
 8006052:	f100 33ff 	add.w	r3, r0, #4294967295
 8006056:	d100      	bne.n	800605a <memcpy+0xc>
 8006058:	4770      	bx	lr
 800605a:	b510      	push	{r4, lr}
 800605c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006064:	4291      	cmp	r1, r2
 8006066:	d1f9      	bne.n	800605c <memcpy+0xe>
 8006068:	bd10      	pop	{r4, pc}
	...

0800606c <_free_r>:
 800606c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800606e:	2900      	cmp	r1, #0
 8006070:	d044      	beq.n	80060fc <_free_r+0x90>
 8006072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006076:	9001      	str	r0, [sp, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f1a1 0404 	sub.w	r4, r1, #4
 800607e:	bfb8      	it	lt
 8006080:	18e4      	addlt	r4, r4, r3
 8006082:	f000 f8df 	bl	8006244 <__malloc_lock>
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <_free_r+0x94>)
 8006088:	9801      	ldr	r0, [sp, #4]
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	b933      	cbnz	r3, 800609c <_free_r+0x30>
 800608e:	6063      	str	r3, [r4, #4]
 8006090:	6014      	str	r4, [r2, #0]
 8006092:	b003      	add	sp, #12
 8006094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006098:	f000 b8da 	b.w	8006250 <__malloc_unlock>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d908      	bls.n	80060b2 <_free_r+0x46>
 80060a0:	6825      	ldr	r5, [r4, #0]
 80060a2:	1961      	adds	r1, r4, r5
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf01      	itttt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	1949      	addeq	r1, r1, r5
 80060ae:	6021      	streq	r1, [r4, #0]
 80060b0:	e7ed      	b.n	800608e <_free_r+0x22>
 80060b2:	461a      	mov	r2, r3
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b10b      	cbz	r3, 80060bc <_free_r+0x50>
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d9fa      	bls.n	80060b2 <_free_r+0x46>
 80060bc:	6811      	ldr	r1, [r2, #0]
 80060be:	1855      	adds	r5, r2, r1
 80060c0:	42a5      	cmp	r5, r4
 80060c2:	d10b      	bne.n	80060dc <_free_r+0x70>
 80060c4:	6824      	ldr	r4, [r4, #0]
 80060c6:	4421      	add	r1, r4
 80060c8:	1854      	adds	r4, r2, r1
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	d1e0      	bne.n	8006092 <_free_r+0x26>
 80060d0:	681c      	ldr	r4, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	6053      	str	r3, [r2, #4]
 80060d6:	440c      	add	r4, r1
 80060d8:	6014      	str	r4, [r2, #0]
 80060da:	e7da      	b.n	8006092 <_free_r+0x26>
 80060dc:	d902      	bls.n	80060e4 <_free_r+0x78>
 80060de:	230c      	movs	r3, #12
 80060e0:	6003      	str	r3, [r0, #0]
 80060e2:	e7d6      	b.n	8006092 <_free_r+0x26>
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	1961      	adds	r1, r4, r5
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf04      	itt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	bf04      	itt	eq
 80060f4:	1949      	addeq	r1, r1, r5
 80060f6:	6021      	streq	r1, [r4, #0]
 80060f8:	6054      	str	r4, [r2, #4]
 80060fa:	e7ca      	b.n	8006092 <_free_r+0x26>
 80060fc:	b003      	add	sp, #12
 80060fe:	bd30      	pop	{r4, r5, pc}
 8006100:	20004bec 	.word	0x20004bec

08006104 <sbrk_aligned>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4e0e      	ldr	r6, [pc, #56]	; (8006140 <sbrk_aligned+0x3c>)
 8006108:	460c      	mov	r4, r1
 800610a:	6831      	ldr	r1, [r6, #0]
 800610c:	4605      	mov	r5, r0
 800610e:	b911      	cbnz	r1, 8006116 <sbrk_aligned+0x12>
 8006110:	f000 f9d6 	bl	80064c0 <_sbrk_r>
 8006114:	6030      	str	r0, [r6, #0]
 8006116:	4621      	mov	r1, r4
 8006118:	4628      	mov	r0, r5
 800611a:	f000 f9d1 	bl	80064c0 <_sbrk_r>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d00a      	beq.n	8006138 <sbrk_aligned+0x34>
 8006122:	1cc4      	adds	r4, r0, #3
 8006124:	f024 0403 	bic.w	r4, r4, #3
 8006128:	42a0      	cmp	r0, r4
 800612a:	d007      	beq.n	800613c <sbrk_aligned+0x38>
 800612c:	1a21      	subs	r1, r4, r0
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f9c6 	bl	80064c0 <_sbrk_r>
 8006134:	3001      	adds	r0, #1
 8006136:	d101      	bne.n	800613c <sbrk_aligned+0x38>
 8006138:	f04f 34ff 	mov.w	r4, #4294967295
 800613c:	4620      	mov	r0, r4
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	20004bf0 	.word	0x20004bf0

08006144 <_malloc_r>:
 8006144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006148:	1ccd      	adds	r5, r1, #3
 800614a:	f025 0503 	bic.w	r5, r5, #3
 800614e:	3508      	adds	r5, #8
 8006150:	2d0c      	cmp	r5, #12
 8006152:	bf38      	it	cc
 8006154:	250c      	movcc	r5, #12
 8006156:	2d00      	cmp	r5, #0
 8006158:	4607      	mov	r7, r0
 800615a:	db01      	blt.n	8006160 <_malloc_r+0x1c>
 800615c:	42a9      	cmp	r1, r5
 800615e:	d905      	bls.n	800616c <_malloc_r+0x28>
 8006160:	230c      	movs	r3, #12
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	2600      	movs	r6, #0
 8006166:	4630      	mov	r0, r6
 8006168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006240 <_malloc_r+0xfc>
 8006170:	f000 f868 	bl	8006244 <__malloc_lock>
 8006174:	f8d8 3000 	ldr.w	r3, [r8]
 8006178:	461c      	mov	r4, r3
 800617a:	bb5c      	cbnz	r4, 80061d4 <_malloc_r+0x90>
 800617c:	4629      	mov	r1, r5
 800617e:	4638      	mov	r0, r7
 8006180:	f7ff ffc0 	bl	8006104 <sbrk_aligned>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	4604      	mov	r4, r0
 8006188:	d155      	bne.n	8006236 <_malloc_r+0xf2>
 800618a:	f8d8 4000 	ldr.w	r4, [r8]
 800618e:	4626      	mov	r6, r4
 8006190:	2e00      	cmp	r6, #0
 8006192:	d145      	bne.n	8006220 <_malloc_r+0xdc>
 8006194:	2c00      	cmp	r4, #0
 8006196:	d048      	beq.n	800622a <_malloc_r+0xe6>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	4631      	mov	r1, r6
 800619c:	4638      	mov	r0, r7
 800619e:	eb04 0903 	add.w	r9, r4, r3
 80061a2:	f000 f98d 	bl	80064c0 <_sbrk_r>
 80061a6:	4581      	cmp	r9, r0
 80061a8:	d13f      	bne.n	800622a <_malloc_r+0xe6>
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	1a6d      	subs	r5, r5, r1
 80061ae:	4629      	mov	r1, r5
 80061b0:	4638      	mov	r0, r7
 80061b2:	f7ff ffa7 	bl	8006104 <sbrk_aligned>
 80061b6:	3001      	adds	r0, #1
 80061b8:	d037      	beq.n	800622a <_malloc_r+0xe6>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	442b      	add	r3, r5
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	f8d8 3000 	ldr.w	r3, [r8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d038      	beq.n	800623a <_malloc_r+0xf6>
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	42a2      	cmp	r2, r4
 80061cc:	d12b      	bne.n	8006226 <_malloc_r+0xe2>
 80061ce:	2200      	movs	r2, #0
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	e00f      	b.n	80061f4 <_malloc_r+0xb0>
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	1b52      	subs	r2, r2, r5
 80061d8:	d41f      	bmi.n	800621a <_malloc_r+0xd6>
 80061da:	2a0b      	cmp	r2, #11
 80061dc:	d917      	bls.n	800620e <_malloc_r+0xca>
 80061de:	1961      	adds	r1, r4, r5
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	6025      	str	r5, [r4, #0]
 80061e4:	bf18      	it	ne
 80061e6:	6059      	strne	r1, [r3, #4]
 80061e8:	6863      	ldr	r3, [r4, #4]
 80061ea:	bf08      	it	eq
 80061ec:	f8c8 1000 	streq.w	r1, [r8]
 80061f0:	5162      	str	r2, [r4, r5]
 80061f2:	604b      	str	r3, [r1, #4]
 80061f4:	4638      	mov	r0, r7
 80061f6:	f104 060b 	add.w	r6, r4, #11
 80061fa:	f000 f829 	bl	8006250 <__malloc_unlock>
 80061fe:	f026 0607 	bic.w	r6, r6, #7
 8006202:	1d23      	adds	r3, r4, #4
 8006204:	1af2      	subs	r2, r6, r3
 8006206:	d0ae      	beq.n	8006166 <_malloc_r+0x22>
 8006208:	1b9b      	subs	r3, r3, r6
 800620a:	50a3      	str	r3, [r4, r2]
 800620c:	e7ab      	b.n	8006166 <_malloc_r+0x22>
 800620e:	42a3      	cmp	r3, r4
 8006210:	6862      	ldr	r2, [r4, #4]
 8006212:	d1dd      	bne.n	80061d0 <_malloc_r+0x8c>
 8006214:	f8c8 2000 	str.w	r2, [r8]
 8006218:	e7ec      	b.n	80061f4 <_malloc_r+0xb0>
 800621a:	4623      	mov	r3, r4
 800621c:	6864      	ldr	r4, [r4, #4]
 800621e:	e7ac      	b.n	800617a <_malloc_r+0x36>
 8006220:	4634      	mov	r4, r6
 8006222:	6876      	ldr	r6, [r6, #4]
 8006224:	e7b4      	b.n	8006190 <_malloc_r+0x4c>
 8006226:	4613      	mov	r3, r2
 8006228:	e7cc      	b.n	80061c4 <_malloc_r+0x80>
 800622a:	230c      	movs	r3, #12
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4638      	mov	r0, r7
 8006230:	f000 f80e 	bl	8006250 <__malloc_unlock>
 8006234:	e797      	b.n	8006166 <_malloc_r+0x22>
 8006236:	6025      	str	r5, [r4, #0]
 8006238:	e7dc      	b.n	80061f4 <_malloc_r+0xb0>
 800623a:	605b      	str	r3, [r3, #4]
 800623c:	deff      	udf	#255	; 0xff
 800623e:	bf00      	nop
 8006240:	20004bec 	.word	0x20004bec

08006244 <__malloc_lock>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__malloc_lock+0x8>)
 8006246:	f7ff bf00 	b.w	800604a <__retarget_lock_acquire_recursive>
 800624a:	bf00      	nop
 800624c:	20004be8 	.word	0x20004be8

08006250 <__malloc_unlock>:
 8006250:	4801      	ldr	r0, [pc, #4]	; (8006258 <__malloc_unlock+0x8>)
 8006252:	f7ff befb 	b.w	800604c <__retarget_lock_release_recursive>
 8006256:	bf00      	nop
 8006258:	20004be8 	.word	0x20004be8

0800625c <__sflush_r>:
 800625c:	898a      	ldrh	r2, [r1, #12]
 800625e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006262:	4605      	mov	r5, r0
 8006264:	0710      	lsls	r0, r2, #28
 8006266:	460c      	mov	r4, r1
 8006268:	d458      	bmi.n	800631c <__sflush_r+0xc0>
 800626a:	684b      	ldr	r3, [r1, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	dc05      	bgt.n	800627c <__sflush_r+0x20>
 8006270:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	dc02      	bgt.n	800627c <__sflush_r+0x20>
 8006276:	2000      	movs	r0, #0
 8006278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800627c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800627e:	2e00      	cmp	r6, #0
 8006280:	d0f9      	beq.n	8006276 <__sflush_r+0x1a>
 8006282:	2300      	movs	r3, #0
 8006284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006288:	682f      	ldr	r7, [r5, #0]
 800628a:	6a21      	ldr	r1, [r4, #32]
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	d032      	beq.n	80062f6 <__sflush_r+0x9a>
 8006290:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	075a      	lsls	r2, r3, #29
 8006296:	d505      	bpl.n	80062a4 <__sflush_r+0x48>
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	1ac0      	subs	r0, r0, r3
 800629c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800629e:	b10b      	cbz	r3, 80062a4 <__sflush_r+0x48>
 80062a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	2300      	movs	r3, #0
 80062a6:	4602      	mov	r2, r0
 80062a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062aa:	6a21      	ldr	r1, [r4, #32]
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b0      	blx	r6
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	d106      	bne.n	80062c4 <__sflush_r+0x68>
 80062b6:	6829      	ldr	r1, [r5, #0]
 80062b8:	291d      	cmp	r1, #29
 80062ba:	d82b      	bhi.n	8006314 <__sflush_r+0xb8>
 80062bc:	4a29      	ldr	r2, [pc, #164]	; (8006364 <__sflush_r+0x108>)
 80062be:	410a      	asrs	r2, r1
 80062c0:	07d6      	lsls	r6, r2, #31
 80062c2:	d427      	bmi.n	8006314 <__sflush_r+0xb8>
 80062c4:	2200      	movs	r2, #0
 80062c6:	6062      	str	r2, [r4, #4]
 80062c8:	04d9      	lsls	r1, r3, #19
 80062ca:	6922      	ldr	r2, [r4, #16]
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	d504      	bpl.n	80062da <__sflush_r+0x7e>
 80062d0:	1c42      	adds	r2, r0, #1
 80062d2:	d101      	bne.n	80062d8 <__sflush_r+0x7c>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b903      	cbnz	r3, 80062da <__sflush_r+0x7e>
 80062d8:	6560      	str	r0, [r4, #84]	; 0x54
 80062da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062dc:	602f      	str	r7, [r5, #0]
 80062de:	2900      	cmp	r1, #0
 80062e0:	d0c9      	beq.n	8006276 <__sflush_r+0x1a>
 80062e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062e6:	4299      	cmp	r1, r3
 80062e8:	d002      	beq.n	80062f0 <__sflush_r+0x94>
 80062ea:	4628      	mov	r0, r5
 80062ec:	f7ff febe 	bl	800606c <_free_r>
 80062f0:	2000      	movs	r0, #0
 80062f2:	6360      	str	r0, [r4, #52]	; 0x34
 80062f4:	e7c0      	b.n	8006278 <__sflush_r+0x1c>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b0      	blx	r6
 80062fc:	1c41      	adds	r1, r0, #1
 80062fe:	d1c8      	bne.n	8006292 <__sflush_r+0x36>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0c5      	beq.n	8006292 <__sflush_r+0x36>
 8006306:	2b1d      	cmp	r3, #29
 8006308:	d001      	beq.n	800630e <__sflush_r+0xb2>
 800630a:	2b16      	cmp	r3, #22
 800630c:	d101      	bne.n	8006312 <__sflush_r+0xb6>
 800630e:	602f      	str	r7, [r5, #0]
 8006310:	e7b1      	b.n	8006276 <__sflush_r+0x1a>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	e7ad      	b.n	8006278 <__sflush_r+0x1c>
 800631c:	690f      	ldr	r7, [r1, #16]
 800631e:	2f00      	cmp	r7, #0
 8006320:	d0a9      	beq.n	8006276 <__sflush_r+0x1a>
 8006322:	0793      	lsls	r3, r2, #30
 8006324:	680e      	ldr	r6, [r1, #0]
 8006326:	bf08      	it	eq
 8006328:	694b      	ldreq	r3, [r1, #20]
 800632a:	600f      	str	r7, [r1, #0]
 800632c:	bf18      	it	ne
 800632e:	2300      	movne	r3, #0
 8006330:	eba6 0807 	sub.w	r8, r6, r7
 8006334:	608b      	str	r3, [r1, #8]
 8006336:	f1b8 0f00 	cmp.w	r8, #0
 800633a:	dd9c      	ble.n	8006276 <__sflush_r+0x1a>
 800633c:	6a21      	ldr	r1, [r4, #32]
 800633e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006340:	4643      	mov	r3, r8
 8006342:	463a      	mov	r2, r7
 8006344:	4628      	mov	r0, r5
 8006346:	47b0      	blx	r6
 8006348:	2800      	cmp	r0, #0
 800634a:	dc06      	bgt.n	800635a <__sflush_r+0xfe>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	e78e      	b.n	8006278 <__sflush_r+0x1c>
 800635a:	4407      	add	r7, r0
 800635c:	eba8 0800 	sub.w	r8, r8, r0
 8006360:	e7e9      	b.n	8006336 <__sflush_r+0xda>
 8006362:	bf00      	nop
 8006364:	dfbffffe 	.word	0xdfbffffe

08006368 <_fflush_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	690b      	ldr	r3, [r1, #16]
 800636c:	4605      	mov	r5, r0
 800636e:	460c      	mov	r4, r1
 8006370:	b913      	cbnz	r3, 8006378 <_fflush_r+0x10>
 8006372:	2500      	movs	r5, #0
 8006374:	4628      	mov	r0, r5
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	b118      	cbz	r0, 8006382 <_fflush_r+0x1a>
 800637a:	6a03      	ldr	r3, [r0, #32]
 800637c:	b90b      	cbnz	r3, 8006382 <_fflush_r+0x1a>
 800637e:	f7ff fc81 	bl	8005c84 <__sinit>
 8006382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f3      	beq.n	8006372 <_fflush_r+0xa>
 800638a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800638c:	07d0      	lsls	r0, r2, #31
 800638e:	d404      	bmi.n	800639a <_fflush_r+0x32>
 8006390:	0599      	lsls	r1, r3, #22
 8006392:	d402      	bmi.n	800639a <_fflush_r+0x32>
 8006394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006396:	f7ff fe58 	bl	800604a <__retarget_lock_acquire_recursive>
 800639a:	4628      	mov	r0, r5
 800639c:	4621      	mov	r1, r4
 800639e:	f7ff ff5d 	bl	800625c <__sflush_r>
 80063a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063a4:	07da      	lsls	r2, r3, #31
 80063a6:	4605      	mov	r5, r0
 80063a8:	d4e4      	bmi.n	8006374 <_fflush_r+0xc>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	059b      	lsls	r3, r3, #22
 80063ae:	d4e1      	bmi.n	8006374 <_fflush_r+0xc>
 80063b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063b2:	f7ff fe4b 	bl	800604c <__retarget_lock_release_recursive>
 80063b6:	e7dd      	b.n	8006374 <_fflush_r+0xc>

080063b8 <__swhatbuf_r>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	460c      	mov	r4, r1
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	b096      	sub	sp, #88	; 0x58
 80063c4:	4615      	mov	r5, r2
 80063c6:	461e      	mov	r6, r3
 80063c8:	da0d      	bge.n	80063e6 <__swhatbuf_r+0x2e>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	bf0c      	ite	eq
 80063d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063da:	2340      	movne	r3, #64	; 0x40
 80063dc:	2000      	movs	r0, #0
 80063de:	6031      	str	r1, [r6, #0]
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	b016      	add	sp, #88	; 0x58
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	466a      	mov	r2, sp
 80063e8:	f000 f848 	bl	800647c <_fstat_r>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	dbec      	blt.n	80063ca <__swhatbuf_r+0x12>
 80063f0:	9901      	ldr	r1, [sp, #4]
 80063f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063fa:	4259      	negs	r1, r3
 80063fc:	4159      	adcs	r1, r3
 80063fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006402:	e7eb      	b.n	80063dc <__swhatbuf_r+0x24>

08006404 <__smakebuf_r>:
 8006404:	898b      	ldrh	r3, [r1, #12]
 8006406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006408:	079d      	lsls	r5, r3, #30
 800640a:	4606      	mov	r6, r0
 800640c:	460c      	mov	r4, r1
 800640e:	d507      	bpl.n	8006420 <__smakebuf_r+0x1c>
 8006410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2301      	movs	r3, #1
 800641a:	6163      	str	r3, [r4, #20]
 800641c:	b002      	add	sp, #8
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	ab01      	add	r3, sp, #4
 8006422:	466a      	mov	r2, sp
 8006424:	f7ff ffc8 	bl	80063b8 <__swhatbuf_r>
 8006428:	9900      	ldr	r1, [sp, #0]
 800642a:	4605      	mov	r5, r0
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff fe89 	bl	8006144 <_malloc_r>
 8006432:	b948      	cbnz	r0, 8006448 <__smakebuf_r+0x44>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	059a      	lsls	r2, r3, #22
 800643a:	d4ef      	bmi.n	800641c <__smakebuf_r+0x18>
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	e7e3      	b.n	8006410 <__smakebuf_r+0xc>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	6020      	str	r0, [r4, #0]
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	6163      	str	r3, [r4, #20]
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	6120      	str	r0, [r4, #16]
 800645a:	b15b      	cbz	r3, 8006474 <__smakebuf_r+0x70>
 800645c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006460:	4630      	mov	r0, r6
 8006462:	f000 f81d 	bl	80064a0 <_isatty_r>
 8006466:	b128      	cbz	r0, 8006474 <__smakebuf_r+0x70>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f023 0303 	bic.w	r3, r3, #3
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	431d      	orrs	r5, r3
 8006478:	81a5      	strh	r5, [r4, #12]
 800647a:	e7cf      	b.n	800641c <__smakebuf_r+0x18>

0800647c <_fstat_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d07      	ldr	r5, [pc, #28]	; (800649c <_fstat_r+0x20>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	f7fa fb96 	bl	8000bba <_fstat>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d102      	bne.n	8006498 <_fstat_r+0x1c>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	b103      	cbz	r3, 8006498 <_fstat_r+0x1c>
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	bf00      	nop
 800649c:	20004be4 	.word	0x20004be4

080064a0 <_isatty_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4d06      	ldr	r5, [pc, #24]	; (80064bc <_isatty_r+0x1c>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fa fb95 	bl	8000bda <_isatty>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_isatty_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_isatty_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20004be4 	.word	0x20004be4

080064c0 <_sbrk_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d06      	ldr	r5, [pc, #24]	; (80064dc <_sbrk_r+0x1c>)
 80064c4:	2300      	movs	r3, #0
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	f7fa fb9e 	bl	8000c0c <_sbrk>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d102      	bne.n	80064da <_sbrk_r+0x1a>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	b103      	cbz	r3, 80064da <_sbrk_r+0x1a>
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	20004be4 	.word	0x20004be4

080064e0 <_init>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	bf00      	nop
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr

080064ec <_fini>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	bf00      	nop
 80064f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f2:	bc08      	pop	{r3}
 80064f4:	469e      	mov	lr, r3
 80064f6:	4770      	bx	lr
