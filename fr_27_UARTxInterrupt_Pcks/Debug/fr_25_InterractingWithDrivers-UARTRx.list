
fr_25_InterractingWithDrivers-UARTRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb8  08004cb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc0  08004cc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  20000010  08004cd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  08004cd8  00024a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e02  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c8  00000000  00000000  00036e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa6  00000000  00000000  0003b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180a3  00000000  00000000  0003c726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ca4  00000000  00000000  000547c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009811d  00000000  00000000  0006b46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005470  00000000  00000000  0010358c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001089fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c50 	.word	0x08004c50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004c50 	.word	0x08004c50

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <read_analog_sensor>:
	// Enable ADC module
	ADC1->CR2 |= CR2_AD0N;

}

uint32_t read_analog_sensor(void) {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

	//Start the conversion
	ADC1->CR2 |= (1U<<30);
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <read_analog_sensor+0x2c>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a08      	ldr	r2, [pc, #32]	; (8000508 <read_analog_sensor+0x2c>)
 80004e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004ea:	6093      	str	r3, [r2, #8]

	//Wait until the conversion is finished
	while(!(ADC1->SR & 2)){}
 80004ec:	bf00      	nop
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <read_analog_sensor+0x2c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <read_analog_sensor+0x12>

	//Return converted data
	return (ADC1->DR);
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <read_analog_sensor+0x2c>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40012000 	.word	0x40012000

0800050c <read_digital_sensor>:
	//set Pin C13 Mode to input -> As default is 0x0000 0000 for other ports there is no need to do anything

}

uint8_t read_digital_sensor(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	//we use GPIO INPUT DATA REGISTER for PC13
	if(GPIOC->IDR & 0x2000)
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <read_digital_sensor+0x20>)
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <read_digital_sensor+0x14>
	{
		return 1; // it depends on the MCU, either pressed or not pressed
 800051c:	2301      	movs	r3, #1
 800051e:	e000      	b.n	8000522 <read_digital_sensor+0x16>
	}
	else
	{
		return 0; // it depends on the MCU, viceversa of previous state
 8000520:	2300      	movs	r3, #0
	}
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40020800 	.word	0x40020800

08000530 <main>:

void polledUartReceive(void *pvParams);
void HandlerTask(void *pvParams);

int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af02      	add	r7, sp, #8

  HAL_Init();
 8000536:	f000 fa6f 	bl	8000a18 <HAL_Init>

  SystemClock_Config();
 800053a:	f000 f863 	bl	8000604 <SystemClock_Config>


  MX_GPIO_Init();
 800053e:	f000 f8bf 	bl	80006c0 <MX_GPIO_Init>




  xTaskCreate(polledUartReceive,
 8000542:	2300      	movs	r3, #0
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2302      	movs	r3, #2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	4912      	ldr	r1, [pc, #72]	; (8000598 <main+0x68>)
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <main+0x6c>)
 8000552:	f002 fd50 	bl	8002ff6 <xTaskCreate>
		  STACK_SIZE,
		  NULL,
		  tskIDLE_PRIORITY + 2,
		  NULL);

  xTaskCreate(HandlerTask,
 8000556:	2300      	movs	r3, #0
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2303      	movs	r3, #3
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	490f      	ldr	r1, [pc, #60]	; (80005a0 <main+0x70>)
 8000564:	480f      	ldr	r0, [pc, #60]	; (80005a4 <main+0x74>)
 8000566:	f002 fd46 	bl	8002ff6 <xTaskCreate>
		  STACK_SIZE,
		  NULL,
		  tskIDLE_PRIORITY + 3,
		  NULL);

  uart2_BytesReceived = xQueueCreate(10, sizeof(char));
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	200a      	movs	r0, #10
 8000570:	f002 f89e 	bl	80026b0 <xQueueGenericCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <main+0x78>)
 8000578:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800057a:	f002 fe81 	bl	8003280 <vTaskStartScheduler>


  while (1)
  {
	  btn_state = read_digital_sensor();
 800057e:	f7ff ffc5 	bl	800050c <read_digital_sensor>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <main+0x7c>)
 8000588:	701a      	strb	r2, [r3, #0]
	  sensor_value = read_analog_sensor();
 800058a:	f7ff ffa7 	bl	80004dc <read_analog_sensor>
 800058e:	4603      	mov	r3, r0
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <main+0x80>)
 8000592:	6013      	str	r3, [r2, #0]
	  btn_state = read_digital_sensor();
 8000594:	e7f3      	b.n	800057e <main+0x4e>
 8000596:	bf00      	nop
 8000598:	08004c68 	.word	0x08004c68
 800059c:	080005b5 	.word	0x080005b5
 80005a0:	08004c78 	.word	0x08004c78
 80005a4:	080005e1 	.word	0x080005e1
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	20000030 	.word	0x20000030
 80005b0:	20000034 	.word	0x20000034

080005b4 <polledUartReceive>:

  }

}

void polledUartReceive(void *pvParams) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

	uint8_t nextByte;
	USART2_UART_RX_Init();
 80005bc:	f000 f9ca 	bl	8000954 <USART2_UART_RX_Init>

	while(1)
	{
		nextByte = USART2_read();
 80005c0:	f000 f9ec 	bl	800099c <USART2_read>
 80005c4:	4603      	mov	r3, r0
 80005c6:	73fb      	strb	r3, [r7, #15]
		xQueueSend(uart2_BytesReceived, &nextByte, 0);
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <polledUartReceive+0x28>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	f107 010f 	add.w	r1, r7, #15
 80005d0:	2300      	movs	r3, #0
 80005d2:	2200      	movs	r2, #0
 80005d4:	f002 f8ca 	bl	800276c <xQueueGenericSend>
		nextByte = USART2_read();
 80005d8:	e7f2      	b.n	80005c0 <polledUartReceive+0xc>
 80005da:	bf00      	nop
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <HandlerTask>:
	}
}

char rcvByte;
void HandlerTask(void *pvParams) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	while(1)
		{
			xQueueReceive(uart2_BytesReceived, &rcvByte, portMAX_DELAY);
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HandlerTask+0x1c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f04f 32ff 	mov.w	r2, #4294967295
 80005f0:	4903      	ldr	r1, [pc, #12]	; (8000600 <HandlerTask+0x20>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fa54 	bl	8002aa0 <xQueueReceive>
 80005f8:	e7f6      	b.n	80005e8 <HandlerTask+0x8>
 80005fa:	bf00      	nop
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	20000038 	.word	0x20000038

08000604 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fae2 	bl	8004bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xb4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xb4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xb8>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xb8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fc77 	bl	8000f68 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000680:	f000 f84a 	bl	8000718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 feda 	bl	8001458 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006aa:	f000 f835 	bl	8000718 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_GPIO_Init+0x30>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x30>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x30>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d101      	bne.n	800070a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000706:	f000 f9a9 	bl	8000a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40010000 	.word	0x40010000

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_MspInit+0x54>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	4a11      	ldr	r2, [pc, #68]	; (8000778 <HAL_MspInit+0x54>)
 8000734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000738:	6453      	str	r3, [r2, #68]	; 0x44
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x54>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_MspInit+0x54>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <HAL_MspInit+0x54>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_MspInit+0x54>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	210f      	movs	r1, #15
 8000766:	f06f 0001 	mvn.w	r0, #1
 800076a:	f000 fa4f 	bl	8000c0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <HAL_UART_MspInit+0x84>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d12b      	bne.n	80007f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007d6:	230c      	movs	r3, #12
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e6:	2307      	movs	r3, #7
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_UART_MspInit+0x8c>)
 80007f2:	f000 fa35 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40004400 	.word	0x40004400
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000

0800080c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <HAL_InitTick+0xd0>)
 8000822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000824:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <HAL_InitTick+0xd0>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6453      	str	r3, [r2, #68]	; 0x44
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <HAL_InitTick+0xd0>)
 800082e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000838:	f107 020c 	add.w	r2, r7, #12
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f000 ffe8 	bl	8001818 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000848:	f000 ffd2 	bl	80017f0 <HAL_RCC_GetPCLK2Freq>
 800084c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000850:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <HAL_InitTick+0xd4>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	0c9b      	lsrs	r3, r3, #18
 8000858:	3b01      	subs	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <HAL_InitTick+0xd8>)
 800085e:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <HAL_InitTick+0xdc>)
 8000860:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_InitTick+0xd8>)
 8000864:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000868:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <HAL_InitTick+0xd8>)
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_InitTick+0xd8>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_InitTick+0xd8>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_InitTick+0xd8>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000882:	4818      	ldr	r0, [pc, #96]	; (80008e4 <HAL_InitTick+0xd8>)
 8000884:	f000 fffa 	bl	800187c <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800088e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000892:	2b00      	cmp	r3, #0
 8000894:	d11b      	bne.n	80008ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <HAL_InitTick+0xd8>)
 8000898:	f001 f84a 	bl	8001930 <HAL_TIM_Base_Start_IT>
 800089c:	4603      	mov	r3, r0
 800089e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d111      	bne.n	80008ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008aa:	2019      	movs	r0, #25
 80008ac:	f000 f9ca 	bl	8000c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b0f      	cmp	r3, #15
 80008b4:	d808      	bhi.n	80008c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008b6:	2200      	movs	r2, #0
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	2019      	movs	r0, #25
 80008bc:	f000 f9a6 	bl	8000c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_InitTick+0xe0>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e002      	b.n	80008ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3730      	adds	r7, #48	; 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	431bde83 	.word	0x431bde83
 80008e4:	2000003c 	.word	0x2000003c
 80008e8:	40010000 	.word	0x40010000
 80008ec:	20000004 	.word	0x20000004

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000922:	f001 f867 	bl	80019f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000003c 	.word	0x2000003c

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <USART2_UART_RX_Init>:
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
}


void USART2_UART_RX_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <USART2_UART_RX_Init+0x40>)
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <USART2_UART_RX_Init+0x44>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <USART2_UART_RX_Init+0x40>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <USART2_UART_RX_Init+0x40>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <USART2_UART_RX_Init+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <USART2_UART_RX_Init+0x40>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <USART2_UART_RX_Init+0x40>)
 800097a:	2204      	movs	r2, #4
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <USART2_UART_RX_Init+0x40>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <USART2_UART_RX_Init+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
 800098a:	4802      	ldr	r0, [pc, #8]	; (8000994 <USART2_UART_RX_Init+0x40>)
 800098c:	f001 f9f6 	bl	8001d7c <HAL_UART_Init>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000084 	.word	0x20000084
 8000998:	40004400 	.word	0x40004400

0800099c <USART2_read>:

	return ch;
}

// Read a character from USART2
char USART2_read(void) {
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

	while(!(USART2->SR & 0x0020)) {} // wait until char arrives
 80009a0:	bf00      	nop
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <USART2_read+0x24>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f9      	beq.n	80009a2 <USART2_read+0x6>
	return USART2->DR;
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <USART2_read+0x24>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	b2db      	uxtb	r3, r3
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ff9f 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f004 f8fb 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fd9b 	bl	8000530 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a08:	08004cc8 	.word	0x08004cc8
  ldr r2, =_sbss
 8000a0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a10:	20004a18 	.word	0x20004a18

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f8d8 	bl	8000bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f7ff fee0 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff fe6a 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000c8 	.word	0x200000c8

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200000c8 	.word	0x200000c8

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4c 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1e:	f7ff ff61 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f7ff ffb1 	bl	8000b90 <NVIC_EncodePriority>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff80 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff54 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e159      	b.n	8000f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8148 	bne.w	8000f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a2 	beq.w	8000f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x202>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2f4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x1fe>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a47      	ldr	r2, [pc, #284]	; (8000f58 <HAL_GPIO_Init+0x2f8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x1fa>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2fc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x1f6>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <HAL_GPIO_Init+0x300>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x1f2>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4935      	ldr	r1, [pc, #212]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f aea2 	bls.w	8000c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e267      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d075      	beq.n	8001072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f86:	4b88      	ldr	r3, [pc, #544]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d00c      	beq.n	8000fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f92:	4b85      	ldr	r3, [pc, #532]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d112      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9e:	4b82      	ldr	r3, [pc, #520]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000faa:	d10b      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	4b7e      	ldr	r3, [pc, #504]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d05b      	beq.n	8001070 <HAL_RCC_OscConfig+0x108>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d157      	bne.n	8001070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e242      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d106      	bne.n	8000fdc <HAL_RCC_OscConfig+0x74>
 8000fce:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e01d      	b.n	8001018 <HAL_RCC_OscConfig+0xb0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x98>
 8000fe6:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a6f      	ldr	r2, [pc, #444]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b6d      	ldr	r3, [pc, #436]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6c      	ldr	r2, [pc, #432]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00b      	b.n	8001018 <HAL_RCC_OscConfig+0xb0>
 8001000:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a68      	ldr	r2, [pc, #416]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a65      	ldr	r2, [pc, #404]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d013      	beq.n	8001048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fd30 	bl	8000a84 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fd2c 	bl	8000a84 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e207      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0xc0>
 8001046:	e014      	b.n	8001072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fd1c 	bl	8000a84 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fd18 	bl	8000a84 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1f3      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0xe8>
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d063      	beq.n	8001146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800107e:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001092:	2b08      	cmp	r3, #8
 8001094:	d11c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d116      	bne.n	80010d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x152>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e1c7      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4937      	ldr	r1, [pc, #220]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	e03a      	b.n	8001146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d8:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x244>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010de:	f7ff fcd1 	bl	8000a84 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fccd 	bl	8000a84 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1a8      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4925      	ldr	r1, [pc, #148]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
 8001118:	e015      	b.n	8001146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x244>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fcb0 	bl	8000a84 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fcac 	bl	8000a84 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e187      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d036      	beq.n	80011c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d016      	beq.n	8001188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_RCC_OscConfig+0x248>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001160:	f7ff fc90 	bl	8000a84 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fc8c 	bl	8000a84 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e167      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800117c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x200>
 8001186:	e01b      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x248>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff fc79 	bl	8000a84 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	e00e      	b.n	80011b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff fc75 	bl	8000a84 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d907      	bls.n	80011b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e150      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
 80011a8:	40023800 	.word	0x40023800
 80011ac:	42470000 	.word	0x42470000
 80011b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ea      	bne.n	8001196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 8097 	beq.w	80012fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10f      	bne.n	80011fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a7c      	ldr	r2, [pc, #496]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b7a      	ldr	r3, [pc, #488]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fa:	2301      	movs	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fe:	4b77      	ldr	r3, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d118      	bne.n	800123c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120a:	4b74      	ldr	r3, [pc, #464]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a73      	ldr	r2, [pc, #460]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001216:	f7ff fc35 	bl	8000a84 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121e:	f7ff fc31 	bl	8000a84 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e10c      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x2ea>
 8001244:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	4a63      	ldr	r2, [pc, #396]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6713      	str	r3, [r2, #112]	; 0x70
 8001250:	e01c      	b.n	800128c <HAL_RCC_OscConfig+0x324>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b05      	cmp	r3, #5
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x30c>
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	4a5e      	ldr	r2, [pc, #376]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6713      	str	r3, [r2, #112]	; 0x70
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6713      	str	r3, [r2, #112]	; 0x70
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0x324>
 8001274:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6713      	str	r3, [r2, #112]	; 0x70
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d015      	beq.n	80012c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff fbf6 	bl	8000a84 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f7ff fbf2 	bl	8000a84 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e0cb      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b2:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0ee      	beq.n	800129c <HAL_RCC_OscConfig+0x334>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fbe0 	bl	8000a84 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f7ff fbdc 	bl	8000a84 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0b5      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ee      	bne.n	80012c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a1 	beq.w	8001448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b08      	cmp	r3, #8
 8001310:	d05c      	beq.n	80013cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d141      	bne.n	800139e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fbb0 	bl	8000a84 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fbac 	bl	8000a84 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e087      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69da      	ldr	r2, [r3, #28]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	085b      	lsrs	r3, r3, #1
 800135e:	3b01      	subs	r3, #1
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	491b      	ldr	r1, [pc, #108]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_RCC_OscConfig+0x478>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb85 	bl	8000a84 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb81 	bl	8000a84 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e05c      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x416>
 800139c:	e054      	b.n	8001448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_RCC_OscConfig+0x478>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb6e 	bl	8000a84 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb6a 	bl	8000a84 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e045      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x444>
 80013ca:	e03d      	b.n	8001448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e038      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000
 80013e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x4ec>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d028      	beq.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d121      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d11a      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001414:	4013      	ands	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800141a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800141c:	4293      	cmp	r3, r2
 800141e:	d111      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	3b01      	subs	r3, #1
 800142e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001430:	429a      	cmp	r2, r3
 8001432:	d107      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0cc      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b68      	ldr	r3, [pc, #416]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d90c      	bls.n	8001494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0b8      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ac:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a52      	ldr	r2, [pc, #328]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494d      	ldr	r1, [pc, #308]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d044      	beq.n	8001578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d119      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e07f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d003      	beq.n	8001516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001512:	2b03      	cmp	r3, #3
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e06f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e067      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4934      	ldr	r1, [pc, #208]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001548:	f7ff fa9c 	bl	8000a84 <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	e00a      	b.n	8001566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff fa98 	bl	8000a84 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e04f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 020c 	and.w	r2, r3, #12
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d1eb      	bne.n	8001550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d20c      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e032      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4916      	ldr	r1, [pc, #88]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	490e      	ldr	r1, [pc, #56]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015de:	f000 f821 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	490a      	ldr	r1, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1c8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f904 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00
 8001614:	40023800 	.word	0x40023800
 8001618:	08004ca0 	.word	0x08004ca0
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001628:	b090      	sub	sp, #64	; 0x40
 800162a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d00d      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x40>
 8001648:	2b08      	cmp	r3, #8
 800164a:	f200 80a1 	bhi.w	8001790 <HAL_RCC_GetSysClockFreq+0x16c>
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x34>
 8001652:	2b04      	cmp	r3, #4
 8001654:	d003      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x3a>
 8001656:	e09b      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800165c:	e09b      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001662:	e098      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166e:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d028      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	2200      	movs	r2, #0
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	627a      	str	r2, [r7, #36]	; 0x24
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800168c:	2100      	movs	r1, #0
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001690:	fb03 f201 	mul.w	r2, r3, r1
 8001694:	2300      	movs	r3, #0
 8001696:	fb00 f303 	mul.w	r3, r0, r3
 800169a:	4413      	add	r3, r2
 800169c:	4a43      	ldr	r2, [pc, #268]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 800169e:	fba0 1202 	umull	r1, r2, r0, r2
 80016a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016a4:	460a      	mov	r2, r1
 80016a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80016a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016aa:	4413      	add	r3, r2
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	2200      	movs	r2, #0
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	61fa      	str	r2, [r7, #28]
 80016b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016be:	f7fe fd8f 	bl	80001e0 <__aeabi_uldivmod>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4613      	mov	r3, r2
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ca:	e053      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	2200      	movs	r2, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	617a      	str	r2, [r7, #20]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016de:	f04f 0b00 	mov.w	fp, #0
 80016e2:	4652      	mov	r2, sl
 80016e4:	465b      	mov	r3, fp
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	0159      	lsls	r1, r3, #5
 80016f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f4:	0150      	lsls	r0, r2, #5
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	ebb2 080a 	subs.w	r8, r2, sl
 80016fe:	eb63 090b 	sbc.w	r9, r3, fp
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800170e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001716:	ebb2 0408 	subs.w	r4, r2, r8
 800171a:	eb63 0509 	sbc.w	r5, r3, r9
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00eb      	lsls	r3, r5, #3
 8001728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800172c:	00e2      	lsls	r2, r4, #3
 800172e:	4614      	mov	r4, r2
 8001730:	461d      	mov	r5, r3
 8001732:	eb14 030a 	adds.w	r3, r4, sl
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	eb45 030b 	adc.w	r3, r5, fp
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800174a:	4629      	mov	r1, r5
 800174c:	028b      	lsls	r3, r1, #10
 800174e:	4621      	mov	r1, r4
 8001750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001754:	4621      	mov	r1, r4
 8001756:	028a      	lsls	r2, r1, #10
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	2200      	movs	r2, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001768:	f7fe fd3a 	bl	80001e0 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	3301      	adds	r3, #1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800178e:	e002      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001798:	4618      	mov	r0, r3
 800179a:	3740      	adds	r7, #64	; 0x40
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	017d7840 	.word	0x017d7840

080017b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017cc:	f7ff fff0 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	0a9b      	lsrs	r3, r3, #10
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	4903      	ldr	r1, [pc, #12]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	08004cb0 	.word	0x08004cb0

080017f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017f4:	f7ff ffdc 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	0b5b      	lsrs	r3, r3, #13
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4903      	ldr	r1, [pc, #12]	; (8001814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001806:	5ccb      	ldrb	r3, [r1, r3]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	08004cb0 	.word	0x08004cb0

08001818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	220f      	movs	r2, #15
 8001826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_RCC_GetClockConfig+0x60>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0207 	and.w	r2, r3, #7
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e041      	b.n	8001912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f839 	bl	800191a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3304      	adds	r3, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f000 f9ca 	bl	8001c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d001      	beq.n	8001948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e044      	b.n	80019d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d018      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x6c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001972:	d013      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x6c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00e      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x6c>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x6c>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_TIM_Base_Start_IT+0xbc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d004      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x6c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d111      	bne.n	80019c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d010      	beq.n	80019d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019be:	e007      	b.n	80019d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40010000 	.word	0x40010000
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40000800 	.word	0x40000800
 80019ec:	40000c00 	.word	0x40000c00
 80019f0:	40014000 	.word	0x40014000

080019f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d122      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d11b      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0202 	mvn.w	r2, #2
 8001a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8ee 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
 8001a3c:	e005      	b.n	8001a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f8e0 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f8f1 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d122      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0204 	mvn.w	r2, #4
 8001a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8c4 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8b6 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f8c7 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0208 	mvn.w	r2, #8
 8001ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2204      	movs	r2, #4
 8001ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f89a 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f88c 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f89d 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0210 	mvn.w	r2, #16
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2208      	movs	r2, #8
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f870 	bl	8001c18 <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f862 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f873 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10e      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0201 	mvn.w	r2, #1
 8001b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fdbe 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	2b80      	cmp	r3, #128	; 0x80
 8001b84:	d10e      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	2b80      	cmp	r3, #128	; 0x80
 8001b92:	d107      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8e2 	bl	8001d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	2b40      	cmp	r3, #64	; 0x40
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d107      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f838 	bl	8001c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d10e      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d107      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0220 	mvn.w	r2, #32
 8001bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8ac 	bl	8001d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a34      	ldr	r2, [pc, #208]	; (8001d38 <TIM_Base_SetConfig+0xe4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00f      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c72:	d00b      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <TIM_Base_SetConfig+0xe8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d007      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <TIM_Base_SetConfig+0xec>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d003      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <TIM_Base_SetConfig+0xf0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d108      	bne.n	8001c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <TIM_Base_SetConfig+0xe4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01b      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d017      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <TIM_Base_SetConfig+0xe8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <TIM_Base_SetConfig+0xec>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00f      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <TIM_Base_SetConfig+0xf0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00b      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <TIM_Base_SetConfig+0xf4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <TIM_Base_SetConfig+0xf8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d003      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <TIM_Base_SetConfig+0xfc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d108      	bne.n	8001cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <TIM_Base_SetConfig+0xe4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d103      	bne.n	8001d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	615a      	str	r2, [r3, #20]
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40000800 	.word	0x40000800
 8001d44:	40000c00 	.word	0x40000c00
 8001d48:	40014000 	.word	0x40014000
 8001d4c:	40014400 	.word	0x40014400
 8001d50:	40014800 	.word	0x40014800

08001d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e03f      	b.n	8001e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fcea 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f829 	bl	8001e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b0c0      	sub	sp, #256	; 0x100
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	68d9      	ldr	r1, [r3, #12]
 8001e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	ea40 0301 	orr.w	r3, r0, r1
 8001e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e70:	f021 010c 	bic.w	r1, r1, #12
 8001e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e92:	6999      	ldr	r1, [r3, #24]
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	ea40 0301 	orr.w	r3, r0, r1
 8001e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <UART_SetConfig+0x2cc>)
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d005      	beq.n	8001eb8 <UART_SetConfig+0xa0>
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b8d      	ldr	r3, [pc, #564]	; (80020e8 <UART_SetConfig+0x2d0>)
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d104      	bne.n	8001ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001eb8:	f7ff fc9a 	bl	80017f0 <HAL_RCC_GetPCLK2Freq>
 8001ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ec0:	e003      	b.n	8001eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ec2:	f7ff fc81 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 8001ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed4:	f040 810c 	bne.w	80020f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001edc:	2200      	movs	r2, #0
 8001ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001eea:	4622      	mov	r2, r4
 8001eec:	462b      	mov	r3, r5
 8001eee:	1891      	adds	r1, r2, r2
 8001ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ef2:	415b      	adcs	r3, r3
 8001ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001efa:	4621      	mov	r1, r4
 8001efc:	eb12 0801 	adds.w	r8, r2, r1
 8001f00:	4629      	mov	r1, r5
 8001f02:	eb43 0901 	adc.w	r9, r3, r1
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f1a:	4690      	mov	r8, r2
 8001f1c:	4699      	mov	r9, r3
 8001f1e:	4623      	mov	r3, r4
 8001f20:	eb18 0303 	adds.w	r3, r8, r3
 8001f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f28:	462b      	mov	r3, r5
 8001f2a:	eb49 0303 	adc.w	r3, r9, r3
 8001f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f46:	460b      	mov	r3, r1
 8001f48:	18db      	adds	r3, r3, r3
 8001f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	eb42 0303 	adc.w	r3, r2, r3
 8001f52:	657b      	str	r3, [r7, #84]	; 0x54
 8001f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f5c:	f7fe f940 	bl	80001e0 <__aeabi_uldivmod>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4b61      	ldr	r3, [pc, #388]	; (80020ec <UART_SetConfig+0x2d4>)
 8001f66:	fba3 2302 	umull	r2, r3, r3, r2
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	011c      	lsls	r4, r3, #4
 8001f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f80:	4642      	mov	r2, r8
 8001f82:	464b      	mov	r3, r9
 8001f84:	1891      	adds	r1, r2, r2
 8001f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f88:	415b      	adcs	r3, r3
 8001f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f90:	4641      	mov	r1, r8
 8001f92:	eb12 0a01 	adds.w	sl, r2, r1
 8001f96:	4649      	mov	r1, r9
 8001f98:	eb43 0b01 	adc.w	fp, r3, r1
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fb0:	4692      	mov	sl, r2
 8001fb2:	469b      	mov	fp, r3
 8001fb4:	4643      	mov	r3, r8
 8001fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8001fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8001fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	18db      	adds	r3, r3, r3
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	eb42 0303 	adc.w	r3, r2, r3
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8001fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ff2:	f7fe f8f5 	bl	80001e0 <__aeabi_uldivmod>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <UART_SetConfig+0x2d4>)
 8001ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2264      	movs	r2, #100	; 0x64
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <UART_SetConfig+0x2d4>)
 8002014:	fba3 2302 	umull	r2, r3, r3, r2
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002020:	441c      	add	r4, r3
 8002022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002026:	2200      	movs	r2, #0
 8002028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800202c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002034:	4642      	mov	r2, r8
 8002036:	464b      	mov	r3, r9
 8002038:	1891      	adds	r1, r2, r2
 800203a:	63b9      	str	r1, [r7, #56]	; 0x38
 800203c:	415b      	adcs	r3, r3
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002044:	4641      	mov	r1, r8
 8002046:	1851      	adds	r1, r2, r1
 8002048:	6339      	str	r1, [r7, #48]	; 0x30
 800204a:	4649      	mov	r1, r9
 800204c:	414b      	adcs	r3, r1
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800205c:	4659      	mov	r1, fp
 800205e:	00cb      	lsls	r3, r1, #3
 8002060:	4651      	mov	r1, sl
 8002062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002066:	4651      	mov	r1, sl
 8002068:	00ca      	lsls	r2, r1, #3
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	4603      	mov	r3, r0
 8002070:	4642      	mov	r2, r8
 8002072:	189b      	adds	r3, r3, r2
 8002074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002078:	464b      	mov	r3, r9
 800207a:	460a      	mov	r2, r1
 800207c:	eb42 0303 	adc.w	r3, r2, r3
 8002080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002098:	460b      	mov	r3, r1
 800209a:	18db      	adds	r3, r3, r3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
 800209e:	4613      	mov	r3, r2
 80020a0:	eb42 0303 	adc.w	r3, r2, r3
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020ae:	f7fe f897 	bl	80001e0 <__aeabi_uldivmod>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <UART_SetConfig+0x2d4>)
 80020b8:	fba3 1302 	umull	r1, r3, r3, r2
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	2164      	movs	r1, #100	; 0x64
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	3332      	adds	r3, #50	; 0x32
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <UART_SetConfig+0x2d4>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	f003 0207 	and.w	r2, r3, #7
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4422      	add	r2, r4
 80020de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020e0:	e106      	b.n	80022f0 <UART_SetConfig+0x4d8>
 80020e2:	bf00      	nop
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40011400 	.word	0x40011400
 80020ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002102:	4642      	mov	r2, r8
 8002104:	464b      	mov	r3, r9
 8002106:	1891      	adds	r1, r2, r2
 8002108:	6239      	str	r1, [r7, #32]
 800210a:	415b      	adcs	r3, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002112:	4641      	mov	r1, r8
 8002114:	1854      	adds	r4, r2, r1
 8002116:	4649      	mov	r1, r9
 8002118:	eb43 0501 	adc.w	r5, r3, r1
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	00eb      	lsls	r3, r5, #3
 8002126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800212a:	00e2      	lsls	r2, r4, #3
 800212c:	4614      	mov	r4, r2
 800212e:	461d      	mov	r5, r3
 8002130:	4643      	mov	r3, r8
 8002132:	18e3      	adds	r3, r4, r3
 8002134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002138:	464b      	mov	r3, r9
 800213a:	eb45 0303 	adc.w	r3, r5, r3
 800213e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800214e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800215e:	4629      	mov	r1, r5
 8002160:	008b      	lsls	r3, r1, #2
 8002162:	4621      	mov	r1, r4
 8002164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002168:	4621      	mov	r1, r4
 800216a:	008a      	lsls	r2, r1, #2
 800216c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002170:	f7fe f836 	bl	80001e0 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4b60      	ldr	r3, [pc, #384]	; (80022fc <UART_SetConfig+0x4e4>)
 800217a:	fba3 2302 	umull	r2, r3, r3, r2
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	011c      	lsls	r4, r3, #4
 8002182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002186:	2200      	movs	r2, #0
 8002188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800218c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002194:	4642      	mov	r2, r8
 8002196:	464b      	mov	r3, r9
 8002198:	1891      	adds	r1, r2, r2
 800219a:	61b9      	str	r1, [r7, #24]
 800219c:	415b      	adcs	r3, r3
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021a4:	4641      	mov	r1, r8
 80021a6:	1851      	adds	r1, r2, r1
 80021a8:	6139      	str	r1, [r7, #16]
 80021aa:	4649      	mov	r1, r9
 80021ac:	414b      	adcs	r3, r1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021bc:	4659      	mov	r1, fp
 80021be:	00cb      	lsls	r3, r1, #3
 80021c0:	4651      	mov	r1, sl
 80021c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021c6:	4651      	mov	r1, sl
 80021c8:	00ca      	lsls	r2, r1, #3
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	4642      	mov	r2, r8
 80021d2:	189b      	adds	r3, r3, r2
 80021d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021d8:	464b      	mov	r3, r9
 80021da:	460a      	mov	r2, r1
 80021dc:	eb42 0303 	adc.w	r3, r2, r3
 80021e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021fc:	4649      	mov	r1, r9
 80021fe:	008b      	lsls	r3, r1, #2
 8002200:	4641      	mov	r1, r8
 8002202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002206:	4641      	mov	r1, r8
 8002208:	008a      	lsls	r2, r1, #2
 800220a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800220e:	f7fd ffe7 	bl	80001e0 <__aeabi_uldivmod>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4611      	mov	r1, r2
 8002218:	4b38      	ldr	r3, [pc, #224]	; (80022fc <UART_SetConfig+0x4e4>)
 800221a:	fba3 2301 	umull	r2, r3, r3, r1
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2264      	movs	r2, #100	; 0x64
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	1acb      	subs	r3, r1, r3
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	3332      	adds	r3, #50	; 0x32
 800222c:	4a33      	ldr	r2, [pc, #204]	; (80022fc <UART_SetConfig+0x4e4>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002238:	441c      	add	r4, r3
 800223a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800223e:	2200      	movs	r2, #0
 8002240:	673b      	str	r3, [r7, #112]	; 0x70
 8002242:	677a      	str	r2, [r7, #116]	; 0x74
 8002244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002248:	4642      	mov	r2, r8
 800224a:	464b      	mov	r3, r9
 800224c:	1891      	adds	r1, r2, r2
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	415b      	adcs	r3, r3
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	4641      	mov	r1, r8
 800225a:	1851      	adds	r1, r2, r1
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	4649      	mov	r1, r9
 8002260:	414b      	adcs	r3, r1
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002270:	4659      	mov	r1, fp
 8002272:	00cb      	lsls	r3, r1, #3
 8002274:	4651      	mov	r1, sl
 8002276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800227a:	4651      	mov	r1, sl
 800227c:	00ca      	lsls	r2, r1, #3
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	4603      	mov	r3, r0
 8002284:	4642      	mov	r2, r8
 8002286:	189b      	adds	r3, r3, r2
 8002288:	66bb      	str	r3, [r7, #104]	; 0x68
 800228a:	464b      	mov	r3, r9
 800228c:	460a      	mov	r2, r1
 800228e:	eb42 0303 	adc.w	r3, r2, r3
 8002292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	663b      	str	r3, [r7, #96]	; 0x60
 800229e:	667a      	str	r2, [r7, #100]	; 0x64
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022ac:	4649      	mov	r1, r9
 80022ae:	008b      	lsls	r3, r1, #2
 80022b0:	4641      	mov	r1, r8
 80022b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b6:	4641      	mov	r1, r8
 80022b8:	008a      	lsls	r2, r1, #2
 80022ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022be:	f7fd ff8f 	bl	80001e0 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <UART_SetConfig+0x4e4>)
 80022c8:	fba3 1302 	umull	r1, r3, r3, r2
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	2164      	movs	r1, #100	; 0x64
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	3332      	adds	r3, #50	; 0x32
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <UART_SetConfig+0x4e4>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	f003 020f 	and.w	r2, r3, #15
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4422      	add	r2, r4
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022f6:	46bd      	mov	sp, r7
 80022f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fc:	51eb851f 	.word	0x51eb851f

08002300 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Handler+0x1c>)
 8002306:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002308:	f001 fc02 	bl	8003b10 <xTaskGetSchedulerState>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002312:	f002 f9e9 	bl	80046e8 <xPortSysTickHandler>
  }
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <vApplicationGetIdleTaskMemory+0x2c>)
 8002330:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <vApplicationGetIdleTaskMemory+0x30>)
 8002336:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	601a      	str	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	200000cc 	.word	0x200000cc
 8002350:	20000128 	.word	0x20000128

08002354 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <vApplicationGetTimerTaskMemory+0x2c>)
 8002364:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <vApplicationGetTimerTaskMemory+0x30>)
 800236a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	20000328 	.word	0x20000328
 8002384:	20000384 	.word	0x20000384

08002388 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0208 	add.w	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f103 0208 	add.w	r2, r3, #8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f103 0208 	add.w	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d103      	bne.n	800244a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e00c      	b.n	8002464 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3308      	adds	r3, #8
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e002      	b.n	8002458 <vListInsert+0x2e>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	429a      	cmp	r2, r3
 8002462:	d2f6      	bcs.n	8002452 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	601a      	str	r2, [r3, #0]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6892      	ldr	r2, [r2, #8]
 80024b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6852      	ldr	r2, [r2, #4]
 80024bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d103      	bne.n	80024d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800251a:	f002 f853 	bl	80045c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	441a      	add	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	3b01      	subs	r3, #1
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	441a      	add	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	22ff      	movs	r2, #255	; 0xff
 800255e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d114      	bne.n	800259a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01a      	beq.n	80025ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3310      	adds	r3, #16
 800257c:	4618      	mov	r0, r3
 800257e:	f001 f909 	bl	8003794 <xTaskRemoveFromEventList>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d012      	beq.n	80025ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <xQueueGenericReset+0xcc>)
 800258a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	e009      	b.n	80025ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3310      	adds	r3, #16
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fef2 	bl	8002388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3324      	adds	r3, #36	; 0x24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff feed 	bl	8002388 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ae:	f002 f839 	bl	8004624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <xQueueGenericCreateStatic+0x52>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <xQueueGenericCreateStatic+0x56>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <xQueueGenericCreateStatic+0x58>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	623b      	str	r3, [r7, #32]
}
 800262e:	bf00      	nop
 8002630:	e7fe      	b.n	8002630 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <xQueueGenericCreateStatic+0x7e>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <xQueueGenericCreateStatic+0x82>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <xQueueGenericCreateStatic+0x84>
 8002642:	2300      	movs	r3, #0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	61fb      	str	r3, [r7, #28]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800265e:	2350      	movs	r3, #80	; 0x50
 8002660:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d00a      	beq.n	800267e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	61bb      	str	r3, [r7, #24]
}
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800267e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002692:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f83f 	bl	8002724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3730      	adds	r7, #48	; 0x30
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueGenericCreate+0x2a>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	613b      	str	r3, [r7, #16]
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3350      	adds	r3, #80	; 0x50
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 f88d 	bl	8004808 <pvPortMalloc>
 80026ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d011      	beq.n	800271a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3350      	adds	r3, #80	; 0x50
 80026fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002708:	79fa      	ldrb	r2, [r7, #7]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f805 	bl	8002724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800271a:	69bb      	ldr	r3, [r7, #24]
	}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e002      	b.n	8002746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002752:	2101      	movs	r1, #1
 8002754:	69b8      	ldr	r0, [r7, #24]
 8002756:	f7ff fecb 	bl	80024f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <xQueueGenericSend+0x32>
	__asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800279a:	bf00      	nop
 800279c:	e7fe      	b.n	800279c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <xQueueGenericSend+0x40>
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <xQueueGenericSend+0x44>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <xQueueGenericSend+0x46>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <xQueueGenericSend+0x60>
	__asm volatile
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027c8:	bf00      	nop
 80027ca:	e7fe      	b.n	80027ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d103      	bne.n	80027da <xQueueGenericSend+0x6e>
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <xQueueGenericSend+0x72>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <xQueueGenericSend+0x74>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueGenericSend+0x8e>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	623b      	str	r3, [r7, #32]
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027fa:	f001 f989 	bl	8003b10 <xTaskGetSchedulerState>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <xQueueGenericSend+0x9e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueGenericSend+0xa2>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericSend+0xa4>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueGenericSend+0xbe>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	61fb      	str	r3, [r7, #28]
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800282a:	f001 fecb 	bl	80045c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <xQueueGenericSend+0xd4>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d129      	bne.n	8002894 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002846:	f000 fa0b 	bl	8002c60 <prvCopyDataToQueue>
 800284a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	3324      	adds	r3, #36	; 0x24
 8002858:	4618      	mov	r0, r3
 800285a:	f000 ff9b 	bl	8003794 <xTaskRemoveFromEventList>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002864:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <xQueueGenericSend+0x1f8>)
 8002866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	e00a      	b.n	800288c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800287c:	4b39      	ldr	r3, [pc, #228]	; (8002964 <xQueueGenericSend+0x1f8>)
 800287e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800288c:	f001 feca 	bl	8004624 <vPortExitCritical>
				return pdPASS;
 8002890:	2301      	movs	r3, #1
 8002892:	e063      	b.n	800295c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800289a:	f001 fec3 	bl	8004624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	e05c      	b.n	800295c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 ffd5 	bl	800385c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028b6:	f001 feb5 	bl	8004624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028ba:	f000 fd47 	bl	800334c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028be:	f001 fe81 	bl	80045c4 <vPortEnterCritical>
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d103      	bne.n	80028d8 <xQueueGenericSend+0x16c>
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d103      	bne.n	80028ee <xQueueGenericSend+0x182>
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ee:	f001 fe99 	bl	8004624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028f2:	1d3a      	adds	r2, r7, #4
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 ffc4 	bl	8003888 <xTaskCheckForTimeOut>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d124      	bne.n	8002950 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002908:	f000 faa2 	bl	8002e50 <prvIsQueueFull>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	3310      	adds	r3, #16
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f000 feea 	bl	80036f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002922:	f000 fa2d 	bl	8002d80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002926:	f000 fd1f 	bl	8003368 <xTaskResumeAll>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f af7c 	bne.w	800282a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <xQueueGenericSend+0x1f8>)
 8002934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	e772      	b.n	800282a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002946:	f000 fa1b 	bl	8002d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800294a:	f000 fd0d 	bl	8003368 <xTaskResumeAll>
 800294e:	e76c      	b.n	800282a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002952:	f000 fa15 	bl	8002d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002956:	f000 fd07 	bl	8003368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800295a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800295c:	4618      	mov	r0, r3
 800295e:	3738      	adds	r7, #56	; 0x38
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	e000ed04 	.word	0xe000ed04

08002968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b090      	sub	sp, #64	; 0x40
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <xQueueGenericSendFromISR+0x3c>
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <xQueueGenericSendFromISR+0x40>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <xQueueGenericSendFromISR+0x42>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d103      	bne.n	80029d2 <xQueueGenericSendFromISR+0x6a>
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <xQueueGenericSendFromISR+0x6e>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueGenericSendFromISR+0x70>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	623b      	str	r3, [r7, #32]
}
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029f2:	f001 fec9 	bl	8004788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029f6:	f3ef 8211 	mrs	r2, BASEPRI
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <xQueueGenericSendFromISR+0xbc>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d12f      	bne.n	8002a84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a3a:	f000 f911 	bl	8002c60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d112      	bne.n	8002a6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	3324      	adds	r3, #36	; 0x24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fe9d 	bl	8003794 <xTaskRemoveFromEventList>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e007      	b.n	8002a7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	b25a      	sxtb	r2, r3
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002a82:	e001      	b.n	8002a88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3740      	adds	r7, #64	; 0x40
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	; 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <xQueueReceive+0x30>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	623b      	str	r3, [r7, #32]
}
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <xQueueReceive+0x3e>
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <xQueueReceive+0x42>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <xQueueReceive+0x44>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <xQueueReceive+0x5e>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	61fb      	str	r3, [r7, #28]
}
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002afe:	f001 f807 	bl	8003b10 <xTaskGetSchedulerState>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <xQueueReceive+0x6e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <xQueueReceive+0x72>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <xQueueReceive+0x74>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <xQueueReceive+0x8e>
	__asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	61bb      	str	r3, [r7, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b2e:	f001 fd49 	bl	80045c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01f      	beq.n	8002b7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b42:	f000 f8f7 	bl	8002d34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1e5a      	subs	r2, r3, #1
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	3310      	adds	r3, #16
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fe1a 	bl	8003794 <xTaskRemoveFromEventList>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <xQueueReceive+0x1bc>)
 8002b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b76:	f001 fd55 	bl	8004624 <vPortExitCritical>
				return pdPASS;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e069      	b.n	8002c52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b84:	f001 fd4e 	bl	8004624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e062      	b.n	8002c52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fe60 	bl	800385c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ba0:	f001 fd40 	bl	8004624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ba4:	f000 fbd2 	bl	800334c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ba8:	f001 fd0c 	bl	80045c4 <vPortEnterCritical>
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d103      	bne.n	8002bc2 <xQueueReceive+0x122>
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d103      	bne.n	8002bd8 <xQueueReceive+0x138>
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd8:	f001 fd24 	bl	8004624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bdc:	1d3a      	adds	r2, r7, #4
 8002bde:	f107 0310 	add.w	r3, r7, #16
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fe4f 	bl	8003888 <xTaskCheckForTimeOut>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d123      	bne.n	8002c38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf2:	f000 f917 	bl	8002e24 <prvIsQueueEmpty>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d017      	beq.n	8002c2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fd75 	bl	80036f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0c:	f000 f8b8 	bl	8002d80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c10:	f000 fbaa 	bl	8003368 <xTaskResumeAll>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d189      	bne.n	8002b2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <xQueueReceive+0x1bc>)
 8002c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	e780      	b.n	8002b2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c2e:	f000 f8a7 	bl	8002d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c32:	f000 fb99 	bl	8003368 <xTaskResumeAll>
 8002c36:	e77a      	b.n	8002b2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c3a:	f000 f8a1 	bl	8002d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c3e:	f000 fb93 	bl	8003368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c44:	f000 f8ee 	bl	8002e24 <prvIsQueueEmpty>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f43f af6f 	beq.w	8002b2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3730      	adds	r7, #48	; 0x30
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d14d      	bne.n	8002d22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 ff5e 	bl	8003b4c <xTaskPriorityDisinherit>
 8002c90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	e043      	b.n	8002d22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d119      	bne.n	8002cd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6858      	ldr	r0, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	f001 ffc2 	bl	8004c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	441a      	add	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d32b      	bcc.n	8002d22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	e026      	b.n	8002d22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68d8      	ldr	r0, [r3, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	f001 ffa8 	bl	8004c34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	425b      	negs	r3, r3
 8002cee:	441a      	add	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d207      	bcs.n	8002d10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	425b      	negs	r3, r3
 8002d0a:	441a      	add	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d105      	bne.n	8002d22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d2a:	697b      	ldr	r3, [r7, #20]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d018      	beq.n	8002d78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	441a      	add	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d303      	bcc.n	8002d68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68d9      	ldr	r1, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	461a      	mov	r2, r3
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	f001 ff5e 	bl	8004c34 <memcpy>
	}
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d88:	f001 fc1c 	bl	80045c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d94:	e011      	b.n	8002dba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3324      	adds	r3, #36	; 0x24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fcf6 	bl	8003794 <xTaskRemoveFromEventList>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002dae:	f000 fdcd 	bl	800394c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dce9      	bgt.n	8002d96 <prvUnlockQueue+0x16>
 8002dc2:	e000      	b.n	8002dc6 <prvUnlockQueue+0x46>
					break;
 8002dc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002dce:	f001 fc29 	bl	8004624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002dd2:	f001 fbf7 	bl	80045c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ddc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dde:	e011      	b.n	8002e04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d012      	beq.n	8002e0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3310      	adds	r3, #16
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fcd1 	bl	8003794 <xTaskRemoveFromEventList>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002df8:	f000 fda8 	bl	800394c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dfc:	7bbb      	ldrb	r3, [r7, #14]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	dce9      	bgt.n	8002de0 <prvUnlockQueue+0x60>
 8002e0c:	e000      	b.n	8002e10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e18:	f001 fc04 	bl	8004624 <vPortExitCritical>
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e2c:	f001 fbca 	bl	80045c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e001      	b.n	8002e42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e42:	f001 fbef 	bl	8004624 <vPortExitCritical>

	return xReturn;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e58:	f001 fbb4 	bl	80045c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d102      	bne.n	8002e6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e001      	b.n	8002e72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e72:	f001 fbd7 	bl	8004624 <vPortExitCritical>

	return xReturn;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	e014      	b.n	8002eba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <vQueueAddToRegistry+0x50>)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <vQueueAddToRegistry+0x50>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <vQueueAddToRegistry+0x50>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002eb2:	e006      	b.n	8002ec2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	d9e7      	bls.n	8002e90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000784 	.word	0x20000784

08002ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ee4:	f001 fb6e 	bl	80045c4 <vPortEnterCritical>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d103      	bne.n	8002efe <vQueueWaitForMessageRestricted+0x2a>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d103      	bne.n	8002f14 <vQueueWaitForMessageRestricted+0x40>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f14:	f001 fb86 	bl	8004624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3324      	adds	r3, #36	; 0x24
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fc07 	bl	800373c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7ff ff26 	bl	8002d80 <prvUnlockQueue>
	}
 8002f34:	bf00      	nop
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af04      	add	r7, sp, #16
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	623b      	str	r3, [r7, #32]
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61fb      	str	r3, [r7, #28]
}
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f82:	235c      	movs	r3, #92	; 0x5c
 8002f84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b5c      	cmp	r3, #92	; 0x5c
 8002f8a:	d00a      	beq.n	8002fa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61bb      	str	r3, [r7, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01e      	beq.n	8002fe8 <xTaskCreateStatic+0xac>
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9303      	str	r3, [sp, #12]
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	9302      	str	r3, [sp, #8]
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f850 	bl	8003080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fe2:	f000 f8dd 	bl	80031a0 <prvAddNewTaskToReadyList>
 8002fe6:	e001      	b.n	8002fec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fec:	697b      	ldr	r3, [r7, #20]
	}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08c      	sub	sp, #48	; 0x30
 8002ffa:	af04      	add	r7, sp, #16
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fbfc 	bl	8004808 <pvPortMalloc>
 8003010:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003018:	205c      	movs	r0, #92	; 0x5c
 800301a:	f001 fbf5 	bl	8004808 <pvPortMalloc>
 800301e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
 800302c:	e005      	b.n	800303a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f001 fcb6 	bl	80049a0 <vPortFree>
 8003034:	e001      	b.n	800303a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d017      	beq.n	8003070 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	2300      	movs	r3, #0
 800304c:	9303      	str	r3, [sp, #12]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	9302      	str	r3, [sp, #8]
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f80e 	bl	8003080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003064:	69f8      	ldr	r0, [r7, #28]
 8003066:	f000 f89b 	bl	80031a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800306a:	2301      	movs	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	e002      	b.n	8003076 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
 8003074:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003076:	69bb      	ldr	r3, [r7, #24]
	}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	21a5      	movs	r1, #165	; 0xa5
 800309a:	f001 fd9f 	bl	8004bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030a8:	3b01      	subs	r3, #1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	617b      	str	r3, [r7, #20]
}
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01f      	beq.n	800311e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e012      	b.n	800310a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	7819      	ldrb	r1, [r3, #0]
 80030ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	3334      	adds	r3, #52	; 0x34
 80030f4:	460a      	mov	r2, r1
 80030f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	3301      	adds	r3, #1
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d9e9      	bls.n	80030e4 <prvInitialiseNewTask+0x64>
 8003110:	e000      	b.n	8003114 <prvInitialiseNewTask+0x94>
			{
				break;
 8003112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800311c:	e003      	b.n	8003126 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	2b37      	cmp	r3, #55	; 0x37
 800312a:	d901      	bls.n	8003130 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800312c:	2337      	movs	r3, #55	; 0x37
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	2200      	movs	r2, #0
 8003140:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	3304      	adds	r3, #4
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f93e 	bl	80023c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	3318      	adds	r3, #24
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f939 	bl	80023c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	69b8      	ldr	r0, [r7, #24]
 8003180:	f001 f8f4 	bl	800436c <pxPortInitialiseStack>
 8003184:	4602      	mov	r2, r0
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003196:	bf00      	nop
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031a8:	f001 fa0c 	bl	80045c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031be:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <prvAddNewTaskToReadyList+0xc4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d110      	bne.n	80031ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031cc:	f000 fbe2 	bl	8003994 <prvInitialiseTaskLists>
 80031d0:	e00d      	b.n	80031ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <prvAddNewTaskToReadyList+0xcc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d802      	bhi.n	80031ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <prvAddNewTaskToReadyList+0xd0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <prvAddNewTaskToReadyList+0xd0>)
 80031f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <prvAddNewTaskToReadyList+0xd0>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <prvAddNewTaskToReadyList+0xd4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d903      	bls.n	8003214 <prvAddNewTaskToReadyList+0x74>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <prvAddNewTaskToReadyList+0xd4>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <prvAddNewTaskToReadyList+0xd8>)
 8003222:	441a      	add	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f7ff f8d9 	bl	80023e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003230:	f001 f9f8 	bl	8004624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <prvAddNewTaskToReadyList+0xcc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvAddNewTaskToReadyList+0xc8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	d207      	bcs.n	800325a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <prvAddNewTaskToReadyList+0xdc>)
 800324c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000c98 	.word	0x20000c98
 8003268:	200007c4 	.word	0x200007c4
 800326c:	20000ca4 	.word	0x20000ca4
 8003270:	20000cb4 	.word	0x20000cb4
 8003274:	20000ca0 	.word	0x20000ca0
 8003278:	200007c8 	.word	0x200007c8
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800328e:	463a      	mov	r2, r7
 8003290:	1d39      	adds	r1, r7, #4
 8003292:	f107 0308 	add.w	r3, r7, #8
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f842 	bl	8002320 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	9202      	str	r2, [sp, #8]
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2300      	movs	r3, #0
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	460a      	mov	r2, r1
 80032ae:	4921      	ldr	r1, [pc, #132]	; (8003334 <vTaskStartScheduler+0xb4>)
 80032b0:	4821      	ldr	r0, [pc, #132]	; (8003338 <vTaskStartScheduler+0xb8>)
 80032b2:	f7ff fe43 	bl	8002f3c <xTaskCreateStatic>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <vTaskStartScheduler+0xbc>)
 80032ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <vTaskStartScheduler+0xbc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032c4:	2301      	movs	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e001      	b.n	80032ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d102      	bne.n	80032da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032d4:	f000 fcfc 	bl	8003cd0 <xTimerCreateTimerTask>
 80032d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d116      	bne.n	800330e <vTaskStartScheduler+0x8e>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	613b      	str	r3, [r7, #16]
}
 80032f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <vTaskStartScheduler+0xc0>)
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295
 80032fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <vTaskStartScheduler+0xc4>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <vTaskStartScheduler+0xc8>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003308:	f001 f8ba 	bl	8004480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800330c:	e00e      	b.n	800332c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d10a      	bne.n	800332c <vTaskStartScheduler+0xac>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	60fb      	str	r3, [r7, #12]
}
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <vTaskStartScheduler+0xaa>
}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	08004c88 	.word	0x08004c88
 8003338:	08003965 	.word	0x08003965
 800333c:	20000cbc 	.word	0x20000cbc
 8003340:	20000cb8 	.word	0x20000cb8
 8003344:	20000ca4 	.word	0x20000ca4
 8003348:	20000c9c 	.word	0x20000c9c

0800334c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <vTaskSuspendAll+0x18>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	4a03      	ldr	r2, [pc, #12]	; (8003364 <vTaskSuspendAll+0x18>)
 8003358:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	20000cc0 	.word	0x20000cc0

08003368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003376:	4b42      	ldr	r3, [pc, #264]	; (8003480 <xTaskResumeAll+0x118>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <xTaskResumeAll+0x2c>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	603b      	str	r3, [r7, #0]
}
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003394:	f001 f916 	bl	80045c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003398:	4b39      	ldr	r3, [pc, #228]	; (8003480 <xTaskResumeAll+0x118>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3b01      	subs	r3, #1
 800339e:	4a38      	ldr	r2, [pc, #224]	; (8003480 <xTaskResumeAll+0x118>)
 80033a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <xTaskResumeAll+0x118>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d162      	bne.n	8003470 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <xTaskResumeAll+0x11c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d05e      	beq.n	8003470 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033b2:	e02f      	b.n	8003414 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b4:	4b34      	ldr	r3, [pc, #208]	; (8003488 <xTaskResumeAll+0x120>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3318      	adds	r3, #24
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f86b 	bl	800249c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff f866 	bl	800249c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <xTaskResumeAll+0x124>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d903      	bls.n	80033e4 <xTaskResumeAll+0x7c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	4a2a      	ldr	r2, [pc, #168]	; (800348c <xTaskResumeAll+0x124>)
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <xTaskResumeAll+0x128>)
 80033f2:	441a      	add	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7fe fff1 	bl	80023e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <xTaskResumeAll+0x12c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <xTaskResumeAll+0x130>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <xTaskResumeAll+0x120>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1cb      	bne.n	80033b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003422:	f000 fb55 	bl	8003ad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <xTaskResumeAll+0x134>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d010      	beq.n	8003454 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003432:	f000 f847 	bl	80034c4 <xTaskIncrementTick>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <xTaskResumeAll+0x130>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3b01      	subs	r3, #1
 8003446:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f1      	bne.n	8003432 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <xTaskResumeAll+0x134>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <xTaskResumeAll+0x130>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800345c:	2301      	movs	r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <xTaskResumeAll+0x138>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003470:	f001 f8d8 	bl	8004624 <vPortExitCritical>

	return xAlreadyYielded;
 8003474:	68bb      	ldr	r3, [r7, #8]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000cc0 	.word	0x20000cc0
 8003484:	20000c98 	.word	0x20000c98
 8003488:	20000c58 	.word	0x20000c58
 800348c:	20000ca0 	.word	0x20000ca0
 8003490:	200007c8 	.word	0x200007c8
 8003494:	200007c4 	.word	0x200007c4
 8003498:	20000cac 	.word	0x20000cac
 800349c:	20000ca8 	.word	0x20000ca8
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <xTaskGetTickCount+0x1c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034b0:	687b      	ldr	r3, [r7, #4]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000c9c 	.word	0x20000c9c

080034c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ce:	4b4f      	ldr	r3, [pc, #316]	; (800360c <xTaskIncrementTick+0x148>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 808f 	bne.w	80035f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034d8:	4b4d      	ldr	r3, [pc, #308]	; (8003610 <xTaskIncrementTick+0x14c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034e0:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <xTaskIncrementTick+0x14c>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d120      	bne.n	800352e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034ec:	4b49      	ldr	r3, [pc, #292]	; (8003614 <xTaskIncrementTick+0x150>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <xTaskIncrementTick+0x48>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	603b      	str	r3, [r7, #0]
}
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <xTaskIncrementTick+0x46>
 800350c:	4b41      	ldr	r3, [pc, #260]	; (8003614 <xTaskIncrementTick+0x150>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <xTaskIncrementTick+0x154>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3f      	ldr	r2, [pc, #252]	; (8003614 <xTaskIncrementTick+0x150>)
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4a3f      	ldr	r2, [pc, #252]	; (8003618 <xTaskIncrementTick+0x154>)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <xTaskIncrementTick+0x158>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a3d      	ldr	r2, [pc, #244]	; (800361c <xTaskIncrementTick+0x158>)
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	f000 fad1 	bl	8003ad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800352e:	4b3c      	ldr	r3, [pc, #240]	; (8003620 <xTaskIncrementTick+0x15c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d349      	bcc.n	80035cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <xTaskIncrementTick+0x150>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003542:	4b37      	ldr	r3, [pc, #220]	; (8003620 <xTaskIncrementTick+0x15c>)
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	601a      	str	r2, [r3, #0]
					break;
 800354a:	e03f      	b.n	80035cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <xTaskIncrementTick+0x150>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d203      	bcs.n	800356c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003564:	4a2e      	ldr	r2, [pc, #184]	; (8003620 <xTaskIncrementTick+0x15c>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800356a:	e02f      	b.n	80035cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	3304      	adds	r3, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ff93 	bl	800249c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3318      	adds	r3, #24
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe ff8a 	bl	800249c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <xTaskIncrementTick+0x160>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d903      	bls.n	800359c <xTaskIncrementTick+0xd8>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	4a22      	ldr	r2, [pc, #136]	; (8003624 <xTaskIncrementTick+0x160>)
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <xTaskIncrementTick+0x164>)
 80035aa:	441a      	add	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f7fe ff15 	bl	80023e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <xTaskIncrementTick+0x168>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d3b8      	bcc.n	8003538 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ca:	e7b5      	b.n	8003538 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035cc:	4b17      	ldr	r3, [pc, #92]	; (800362c <xTaskIncrementTick+0x168>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	4915      	ldr	r1, [pc, #84]	; (8003628 <xTaskIncrementTick+0x164>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d901      	bls.n	80035e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <xTaskIncrementTick+0x16c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e004      	b.n	8003600 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <xTaskIncrementTick+0x170>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3301      	adds	r3, #1
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <xTaskIncrementTick+0x170>)
 80035fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003600:	697b      	ldr	r3, [r7, #20]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000cc0 	.word	0x20000cc0
 8003610:	20000c9c 	.word	0x20000c9c
 8003614:	20000c50 	.word	0x20000c50
 8003618:	20000c54 	.word	0x20000c54
 800361c:	20000cb0 	.word	0x20000cb0
 8003620:	20000cb8 	.word	0x20000cb8
 8003624:	20000ca0 	.word	0x20000ca0
 8003628:	200007c8 	.word	0x200007c8
 800362c:	200007c4 	.word	0x200007c4
 8003630:	20000cac 	.word	0x20000cac
 8003634:	20000ca8 	.word	0x20000ca8

08003638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800363e:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <vTaskSwitchContext+0xa8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003646:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <vTaskSwitchContext+0xac>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800364c:	e041      	b.n	80036d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800364e:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <vTaskSwitchContext+0xac>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <vTaskSwitchContext+0xb0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e010      	b.n	800367e <vTaskSwitchContext+0x46>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <vTaskSwitchContext+0x40>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	607b      	str	r3, [r7, #4]
}
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <vTaskSwitchContext+0x3e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3b01      	subs	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	491b      	ldr	r1, [pc, #108]	; (80036ec <vTaskSwitchContext+0xb4>)
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0e4      	beq.n	800365c <vTaskSwitchContext+0x24>
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4a13      	ldr	r2, [pc, #76]	; (80036ec <vTaskSwitchContext+0xb4>)
 800369e:	4413      	add	r3, r2
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	3308      	adds	r3, #8
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d104      	bne.n	80036c2 <vTaskSwitchContext+0x8a>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <vTaskSwitchContext+0xb8>)
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <vTaskSwitchContext+0xb0>)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6013      	str	r3, [r2, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000cc0 	.word	0x20000cc0
 80036e4:	20000cac 	.word	0x20000cac
 80036e8:	20000ca0 	.word	0x20000ca0
 80036ec:	200007c8 	.word	0x200007c8
 80036f0:	200007c4 	.word	0x200007c4

080036f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	60fb      	str	r3, [r7, #12]
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <vTaskPlaceOnEventList+0x44>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3318      	adds	r3, #24
 8003720:	4619      	mov	r1, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fe81 	bl	800242a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003728:	2101      	movs	r1, #1
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f000 fa7c 	bl	8003c28 <prvAddCurrentTaskToDelayedList>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200007c4 	.word	0x200007c4

0800373c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	617b      	str	r3, [r7, #20]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <vTaskPlaceOnEventListRestricted+0x54>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3318      	adds	r3, #24
 800376a:	4619      	mov	r1, r3
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7fe fe38 	bl	80023e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	68b8      	ldr	r0, [r7, #8]
 8003782:	f000 fa51 	bl	8003c28 <prvAddCurrentTaskToDelayedList>
	}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200007c4 	.word	0x200007c4

08003794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	60fb      	str	r3, [r7, #12]
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	3318      	adds	r3, #24
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe fe69 	bl	800249c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <xTaskRemoveFromEventList+0xb0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11d      	bne.n	800380e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fe60 	bl	800249c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <xTaskRemoveFromEventList+0xb4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d903      	bls.n	80037f0 <xTaskRemoveFromEventList+0x5c>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	4a16      	ldr	r2, [pc, #88]	; (8003848 <xTaskRemoveFromEventList+0xb4>)
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <xTaskRemoveFromEventList+0xb8>)
 80037fe:	441a      	add	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	3304      	adds	r3, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f7fe fdeb 	bl	80023e2 <vListInsertEnd>
 800380c:	e005      	b.n	800381a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3318      	adds	r3, #24
 8003812:	4619      	mov	r1, r3
 8003814:	480e      	ldr	r0, [pc, #56]	; (8003850 <xTaskRemoveFromEventList+0xbc>)
 8003816:	f7fe fde4 	bl	80023e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <xTaskRemoveFromEventList+0xc0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d905      	bls.n	8003834 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <xTaskRemoveFromEventList+0xc4>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e001      	b.n	8003838 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003838:	697b      	ldr	r3, [r7, #20]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000cc0 	.word	0x20000cc0
 8003848:	20000ca0 	.word	0x20000ca0
 800384c:	200007c8 	.word	0x200007c8
 8003850:	20000c58 	.word	0x20000c58
 8003854:	200007c4 	.word	0x200007c4
 8003858:	20000cac 	.word	0x20000cac

0800385c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <vTaskInternalSetTimeOutState+0x24>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <vTaskInternalSetTimeOutState+0x28>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	605a      	str	r2, [r3, #4]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	20000cb0 	.word	0x20000cb0
 8003884:	20000c9c 	.word	0x20000c9c

08003888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	613b      	str	r3, [r7, #16]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	60fb      	str	r3, [r7, #12]
}
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80038ca:	f000 fe7b 	bl	80045c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <xTaskCheckForTimeOut+0xbc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d102      	bne.n	80038ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	e023      	b.n	8003936 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <xTaskCheckForTimeOut+0xc0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d007      	beq.n	800390a <xTaskCheckForTimeOut+0x82>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e015      	b.n	8003936 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	d20b      	bcs.n	800392c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	1ad2      	subs	r2, r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff9b 	bl	800385c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e004      	b.n	8003936 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003932:	2301      	movs	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003936:	f000 fe75 	bl	8004624 <vPortExitCritical>

	return xReturn;
 800393a:	69fb      	ldr	r3, [r7, #28]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000c9c 	.word	0x20000c9c
 8003948:	20000cb0 	.word	0x20000cb0

0800394c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <vTaskMissedYield+0x14>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	20000cac 	.word	0x20000cac

08003964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800396c:	f000 f852 	bl	8003a14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <prvIdleTask+0x28>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d9f9      	bls.n	800396c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <prvIdleTask+0x2c>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003988:	e7f0      	b.n	800396c <prvIdleTask+0x8>
 800398a:	bf00      	nop
 800398c:	200007c8 	.word	0x200007c8
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	e00c      	b.n	80039ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <prvInitialiseTaskLists+0x60>)
 80039ac:	4413      	add	r3, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fcea 	bl	8002388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3301      	adds	r3, #1
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b37      	cmp	r3, #55	; 0x37
 80039be:	d9ef      	bls.n	80039a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039c0:	480d      	ldr	r0, [pc, #52]	; (80039f8 <prvInitialiseTaskLists+0x64>)
 80039c2:	f7fe fce1 	bl	8002388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039c6:	480d      	ldr	r0, [pc, #52]	; (80039fc <prvInitialiseTaskLists+0x68>)
 80039c8:	f7fe fcde 	bl	8002388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039cc:	480c      	ldr	r0, [pc, #48]	; (8003a00 <prvInitialiseTaskLists+0x6c>)
 80039ce:	f7fe fcdb 	bl	8002388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039d2:	480c      	ldr	r0, [pc, #48]	; (8003a04 <prvInitialiseTaskLists+0x70>)
 80039d4:	f7fe fcd8 	bl	8002388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039d8:	480b      	ldr	r0, [pc, #44]	; (8003a08 <prvInitialiseTaskLists+0x74>)
 80039da:	f7fe fcd5 	bl	8002388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <prvInitialiseTaskLists+0x78>)
 80039e0:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <prvInitialiseTaskLists+0x64>)
 80039e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <prvInitialiseTaskLists+0x7c>)
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <prvInitialiseTaskLists+0x68>)
 80039e8:	601a      	str	r2, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200007c8 	.word	0x200007c8
 80039f8:	20000c28 	.word	0x20000c28
 80039fc:	20000c3c 	.word	0x20000c3c
 8003a00:	20000c58 	.word	0x20000c58
 8003a04:	20000c6c 	.word	0x20000c6c
 8003a08:	20000c84 	.word	0x20000c84
 8003a0c:	20000c50 	.word	0x20000c50
 8003a10:	20000c54 	.word	0x20000c54

08003a14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a1a:	e019      	b.n	8003a50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a1c:	f000 fdd2 	bl	80045c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <prvCheckTasksWaitingTermination+0x50>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe fd35 	bl	800249c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <prvCheckTasksWaitingTermination+0x54>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <prvCheckTasksWaitingTermination+0x54>)
 8003a3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <prvCheckTasksWaitingTermination+0x58>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <prvCheckTasksWaitingTermination+0x58>)
 8003a44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a46:	f000 fded 	bl	8004624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f810 	bl	8003a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <prvCheckTasksWaitingTermination+0x58>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e1      	bne.n	8003a1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000c6c 	.word	0x20000c6c
 8003a68:	20000c98 	.word	0x20000c98
 8003a6c:	20000c80 	.word	0x20000c80

08003a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d108      	bne.n	8003a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 ff8a 	bl	80049a0 <vPortFree>
				vPortFree( pxTCB );
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 ff87 	bl	80049a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a92:	e018      	b.n	8003ac6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d103      	bne.n	8003aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 ff7e 	bl	80049a0 <vPortFree>
	}
 8003aa4:	e00f      	b.n	8003ac6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d00a      	beq.n	8003ac6 <prvDeleteTCB+0x56>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <prvDeleteTCB+0x54>
	}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <prvResetNextTaskUnblockTime+0x38>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <prvResetNextTaskUnblockTime+0x3c>)
 8003ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ae8:	e008      	b.n	8003afc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <prvResetNextTaskUnblockTime+0x38>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <prvResetNextTaskUnblockTime+0x3c>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20000c50 	.word	0x20000c50
 8003b0c:	20000cb8 	.word	0x20000cb8

08003b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <xTaskGetSchedulerState+0x34>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	e008      	b.n	8003b36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <xTaskGetSchedulerState+0x38>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	e001      	b.n	8003b36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b36:	687b      	ldr	r3, [r7, #4]
	}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	20000ca4 	.word	0x20000ca4
 8003b48:	20000cc0 	.word	0x20000cc0

08003b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d056      	beq.n	8003c10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <xTaskPriorityDisinherit+0xd0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d00a      	beq.n	8003b82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	60fb      	str	r3, [r7, #12]
}
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	60bb      	str	r3, [r7, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	e7fe      	b.n	8003b9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d02c      	beq.n	8003c10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d128      	bne.n	8003c10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fc6a 	bl	800249c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <xTaskPriorityDisinherit+0xd4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d903      	bls.n	8003bf0 <xTaskPriorityDisinherit+0xa4>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <xTaskPriorityDisinherit+0xd4>)
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <xTaskPriorityDisinherit+0xd8>)
 8003bfe:	441a      	add	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7fe fbeb 	bl	80023e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c10:	697b      	ldr	r3, [r7, #20]
	}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200007c4 	.word	0x200007c4
 8003c20:	20000ca0 	.word	0x20000ca0
 8003c24:	200007c8 	.word	0x200007c8

08003c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c38:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fc2c 	bl	800249c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d10a      	bne.n	8003c62 <prvAddCurrentTaskToDelayedList+0x3a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4819      	ldr	r0, [pc, #100]	; (8003cc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c5c:	f7fe fbc1 	bl	80023e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c60:	e026      	b.n	8003cb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d209      	bcs.n	8003c8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c7a:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7fe fbcf 	bl	800242a <vListInsert>
}
 8003c8c:	e010      	b.n	8003cb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7fe fbc5 	bl	800242a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d202      	bcs.n	8003cb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000c9c 	.word	0x20000c9c
 8003cbc:	200007c4 	.word	0x200007c4
 8003cc0:	20000c84 	.word	0x20000c84
 8003cc4:	20000c54 	.word	0x20000c54
 8003cc8:	20000c50 	.word	0x20000c50
 8003ccc:	20000cb8 	.word	0x20000cb8

08003cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003cda:	f000 fb07 	bl	80042ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003cde:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <xTimerCreateTimerTask+0x80>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cee:	1d3a      	adds	r2, r7, #4
 8003cf0:	f107 0108 	add.w	r1, r7, #8
 8003cf4:	f107 030c 	add.w	r3, r7, #12
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fb2b 	bl	8002354 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	9202      	str	r2, [sp, #8]
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	2302      	movs	r3, #2
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	460a      	mov	r2, r1
 8003d10:	4910      	ldr	r1, [pc, #64]	; (8003d54 <xTimerCreateTimerTask+0x84>)
 8003d12:	4811      	ldr	r0, [pc, #68]	; (8003d58 <xTimerCreateTimerTask+0x88>)
 8003d14:	f7ff f912 	bl	8002f3c <xTaskCreateStatic>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <xTimerCreateTimerTask+0x8c>)
 8003d1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <xTimerCreateTimerTask+0x8c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d26:	2301      	movs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	613b      	str	r3, [r7, #16]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d46:	697b      	ldr	r3, [r7, #20]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000cf4 	.word	0x20000cf4
 8003d54:	08004c90 	.word	0x08004c90
 8003d58:	08003e95 	.word	0x08003e95
 8003d5c:	20000cf8 	.word	0x20000cf8

08003d60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	623b      	str	r3, [r7, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <xTimerGenericCommand+0x98>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d02a      	beq.n	8003dec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	dc18      	bgt.n	8003dda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003da8:	f7ff feb2 	bl	8003b10 <xTaskGetSchedulerState>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d109      	bne.n	8003dc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <xTimerGenericCommand+0x98>)
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f107 0110 	add.w	r1, r7, #16
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	f7fe fcd5 	bl	800276c <xQueueGenericSend>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8003dc4:	e012      	b.n	8003dec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <xTimerGenericCommand+0x98>)
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f107 0110 	add.w	r1, r7, #16
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f7fe fccb 	bl	800276c <xQueueGenericSend>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8003dd8:	e008      	b.n	8003dec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <xTimerGenericCommand+0x98>)
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f107 0110 	add.w	r1, r7, #16
 8003de2:	2300      	movs	r3, #0
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	f7fe fdbf 	bl	8002968 <xQueueGenericSendFromISR>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3728      	adds	r7, #40	; 0x28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000cf4 	.word	0x20000cf4

08003dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <prvProcessExpiredTimer+0x94>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fb41 	bl	800249c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d022      	beq.n	8003e6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	18d1      	adds	r1, r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f000 f8d1 	bl	8003fdc <prvInsertTimerInActiveList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01f      	beq.n	8003e80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e40:	2300      	movs	r3, #0
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f7ff ff88 	bl	8003d60 <xTimerGenericCommand>
 8003e50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d113      	bne.n	8003e80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60fb      	str	r3, [r7, #12]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	6978      	ldr	r0, [r7, #20]
 8003e86:	4798      	blx	r3
}
 8003e88:	bf00      	nop
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000cec 	.word	0x20000cec

08003e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f857 	bl	8003f54 <prvGetNextExpireTime>
 8003ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f803 	bl	8003eb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003eb2:	f000 f8d5 	bl	8004060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eb6:	e7f1      	b.n	8003e9c <prvTimerTask+0x8>

08003eb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ec2:	f7ff fa43 	bl	800334c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ec6:	f107 0308 	add.w	r3, r7, #8
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f866 	bl	8003f9c <prvSampleTimeNow>
 8003ed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d130      	bne.n	8003f3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <prvProcessTimerOrBlockTask+0x3c>
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d806      	bhi.n	8003ef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ee6:	f7ff fa3f 	bl	8003368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff85 	bl	8003dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ef2:	e024      	b.n	8003f3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <prvProcessTimerOrBlockTask+0x90>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <prvProcessTimerOrBlockTask+0x50>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <prvProcessTimerOrBlockTask+0x52>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <prvProcessTimerOrBlockTask+0x94>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7fe ffdb 	bl	8002ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f1e:	f7ff fa23 	bl	8003368 <xTaskResumeAll>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <prvProcessTimerOrBlockTask+0x98>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
}
 8003f38:	e001      	b.n	8003f3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f3a:	f7ff fa15 	bl	8003368 <xTaskResumeAll>
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000cf0 	.word	0x20000cf0
 8003f4c:	20000cf4 	.word	0x20000cf4
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <prvGetNextExpireTime+0x44>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <prvGetNextExpireTime+0x16>
 8003f66:	2201      	movs	r2, #1
 8003f68:	e000      	b.n	8003f6c <prvGetNextExpireTime+0x18>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <prvGetNextExpireTime+0x44>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	e001      	b.n	8003f88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000cec 	.word	0x20000cec

08003f9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fa4:	f7ff fa7e 	bl	80034a4 <xTaskGetTickCount>
 8003fa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <prvSampleTimeNow+0x3c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d205      	bcs.n	8003fc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fb4:	f000 f936 	bl	8004224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e002      	b.n	8003fc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fc6:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <prvSampleTimeNow+0x3c>)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000cfc 	.word	0x20000cfc

08003fdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d812      	bhi.n	8004028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e01b      	b.n	800404e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <prvInsertTimerInActiveList+0x7c>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7fe fa02 	bl	800242a <vListInsert>
 8004026:	e012      	b.n	800404e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d206      	bcs.n	800403e <prvInsertTimerInActiveList+0x62>
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d302      	bcc.n	800403e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004038:	2301      	movs	r3, #1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e007      	b.n	800404e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <prvInsertTimerInActiveList+0x80>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3304      	adds	r3, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f7fe f9ee 	bl	800242a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800404e:	697b      	ldr	r3, [r7, #20]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000cf0 	.word	0x20000cf0
 800405c:	20000cec 	.word	0x20000cec

08004060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004066:	e0ca      	b.n	80041fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	da18      	bge.n	80040a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	3304      	adds	r3, #4
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	61fb      	str	r3, [r7, #28]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004096:	6850      	ldr	r0, [r2, #4]
 8004098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800409a:	6892      	ldr	r2, [r2, #8]
 800409c:	4611      	mov	r1, r2
 800409e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f2c0 80ab 	blt.w	80041fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	3304      	adds	r3, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe f9ef 	bl	800249c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040be:	463b      	mov	r3, r7
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff ff6b 	bl	8003f9c <prvSampleTimeNow>
 80040c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b09      	cmp	r3, #9
 80040cc:	f200 8096 	bhi.w	80041fc <prvProcessReceivedCommands+0x19c>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <prvProcessReceivedCommands+0x78>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004101 	.word	0x08004101
 80040e0:	08004101 	.word	0x08004101
 80040e4:	08004175 	.word	0x08004175
 80040e8:	08004189 	.word	0x08004189
 80040ec:	080041d3 	.word	0x080041d3
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004101 	.word	0x08004101
 80040f8:	08004175 	.word	0x08004175
 80040fc:	08004189 	.word	0x08004189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	18d1      	adds	r1, r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004120:	f7ff ff5c 	bl	8003fdc <prvInsertTimerInActiveList>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d069      	beq.n	80041fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d05e      	beq.n	80041fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	441a      	add	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2300      	movs	r3, #0
 800414e:	2100      	movs	r1, #0
 8004150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004152:	f7ff fe05 	bl	8003d60 <xTimerGenericCommand>
 8004156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d14f      	bne.n	80041fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	61bb      	str	r3, [r7, #24]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004186:	e03a      	b.n	80041fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	617b      	str	r3, [r7, #20]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	18d1      	adds	r1, r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041cc:	f7ff ff06 	bl	8003fdc <prvInsertTimerInActiveList>
					break;
 80041d0:	e015      	b.n	80041fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80041e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e2:	f000 fbdd 	bl	80049a0 <vPortFree>
 80041e6:	e00a      	b.n	80041fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041fa:	e000      	b.n	80041fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80041fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <prvProcessReceivedCommands+0x1c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1d39      	adds	r1, r7, #4
 8004204:	2200      	movs	r2, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fc4a 	bl	8002aa0 <xQueueReceive>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	f47f af2a 	bne.w	8004068 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3730      	adds	r7, #48	; 0x30
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000cf4 	.word	0x20000cf4

08004224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800422a:	e048      	b.n	80042be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800422c:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <prvSwitchTimerLists+0xc0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <prvSwitchTimerLists+0xc0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3304      	adds	r3, #4
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe f929 	bl	800249c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d02e      	beq.n	80042be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	429a      	cmp	r2, r3
 8004270:	d90e      	bls.n	8004290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800427e:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <prvSwitchTimerLists+0xc0>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7fe f8ce 	bl	800242a <vListInsert>
 800428e:	e016      	b.n	80042be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004290:	2300      	movs	r3, #0
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2300      	movs	r3, #0
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	2100      	movs	r1, #0
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7ff fd60 	bl	8003d60 <xTimerGenericCommand>
 80042a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	603b      	str	r3, [r7, #0]
}
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <prvSwitchTimerLists+0xc0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1b1      	bne.n	800422c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <prvSwitchTimerLists+0xc0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <prvSwitchTimerLists+0xc4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <prvSwitchTimerLists+0xc0>)
 80042d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <prvSwitchTimerLists+0xc4>)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000cec 	.word	0x20000cec
 80042e8:	20000cf0 	.word	0x20000cf0

080042ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042f2:	f000 f967 	bl	80045c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d120      	bne.n	8004340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042fe:	4814      	ldr	r0, [pc, #80]	; (8004350 <prvCheckForValidListAndQueue+0x64>)
 8004300:	f7fe f842 	bl	8002388 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004304:	4813      	ldr	r0, [pc, #76]	; (8004354 <prvCheckForValidListAndQueue+0x68>)
 8004306:	f7fe f83f 	bl	8002388 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <prvCheckForValidListAndQueue+0x6c>)
 800430c:	4a10      	ldr	r2, [pc, #64]	; (8004350 <prvCheckForValidListAndQueue+0x64>)
 800430e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <prvCheckForValidListAndQueue+0x70>)
 8004312:	4a10      	ldr	r2, [pc, #64]	; (8004354 <prvCheckForValidListAndQueue+0x68>)
 8004314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <prvCheckForValidListAndQueue+0x74>)
 800431c:	4a11      	ldr	r2, [pc, #68]	; (8004364 <prvCheckForValidListAndQueue+0x78>)
 800431e:	2110      	movs	r1, #16
 8004320:	200a      	movs	r0, #10
 8004322:	f7fe f94d 	bl	80025c0 <xQueueGenericCreateStatic>
 8004326:	4603      	mov	r3, r0
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 800432a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	490b      	ldr	r1, [pc, #44]	; (8004368 <prvCheckForValidListAndQueue+0x7c>)
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fda0 	bl	8002e80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004340:	f000 f970 	bl	8004624 <vPortExitCritical>
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000cf4 	.word	0x20000cf4
 8004350:	20000cc4 	.word	0x20000cc4
 8004354:	20000cd8 	.word	0x20000cd8
 8004358:	20000cec 	.word	0x20000cec
 800435c:	20000cf0 	.word	0x20000cf0
 8004360:	20000da0 	.word	0x20000da0
 8004364:	20000d00 	.word	0x20000d00
 8004368:	08004c98 	.word	0x08004c98

0800436c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b04      	subs	r3, #4
 800437c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b04      	subs	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3b04      	subs	r3, #4
 800439a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800439c:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <pxPortInitialiseStack+0x64>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b14      	subs	r3, #20
 80043a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f06f 0202 	mvn.w	r2, #2
 80043ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3b20      	subs	r3, #32
 80043c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	080043d5 	.word	0x080043d5

080043d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <prvTaskExitError+0x54>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d00a      	beq.n	80043fe <prvTaskExitError+0x2a>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60fb      	str	r3, [r7, #12]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <prvTaskExitError+0x28>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60bb      	str	r3, [r7, #8]
}
 8004410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004412:	bf00      	nop
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0fc      	beq.n	8004414 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	2000000c 	.word	0x2000000c
 800442c:	00000000 	.word	0x00000000

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800447a:	bf00      	nop
 800447c:	e000ed08 	.word	0xe000ed08

08004480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004486:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <xPortStartScheduler+0x120>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a46      	ldr	r2, [pc, #280]	; (80045a4 <xPortStartScheduler+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10a      	bne.n	80044a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	613b      	str	r3, [r7, #16]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044a6:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <xPortStartScheduler+0x120>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <xPortStartScheduler+0x128>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10a      	bne.n	80044c6 <xPortStartScheduler+0x46>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <xPortStartScheduler+0x12c>)
 80044c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <xPortStartScheduler+0x130>)
 80044ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <xPortStartScheduler+0x134>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f4:	e009      	b.n	800450a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80044f6:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <xPortStartScheduler+0x134>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	4a2d      	ldr	r2, [pc, #180]	; (80045b4 <xPortStartScheduler+0x134>)
 80044fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d0ef      	beq.n	80044f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004516:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <xPortStartScheduler+0x134>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1c3 0307 	rsb	r3, r3, #7
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00a      	beq.n	8004538 <xPortStartScheduler+0xb8>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60bb      	str	r3, [r7, #8]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <xPortStartScheduler+0x134>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <xPortStartScheduler+0x134>)
 8004540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <xPortStartScheduler+0x134>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <xPortStartScheduler+0x134>)
 800454c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <xPortStartScheduler+0x138>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <xPortStartScheduler+0x138>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <xPortStartScheduler+0x138>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <xPortStartScheduler+0x138>)
 8004568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800456c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800456e:	f000 f8dd 	bl	800472c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <xPortStartScheduler+0x13c>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004578:	f000 f8fc 	bl	8004774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <xPortStartScheduler+0x140>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <xPortStartScheduler+0x140>)
 8004582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004588:	f7ff ff66 	bl	8004458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800458c:	f7ff f854 	bl	8003638 <vTaskSwitchContext>
	prvTaskExitError();
 8004590:	f7ff ff20 	bl	80043d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00
 80045a4:	410fc271 	.word	0x410fc271
 80045a8:	410fc270 	.word	0x410fc270
 80045ac:	e000e400 	.word	0xe000e400
 80045b0:	20000df0 	.word	0x20000df0
 80045b4:	20000df4 	.word	0x20000df4
 80045b8:	e000ed20 	.word	0xe000ed20
 80045bc:	2000000c 	.word	0x2000000c
 80045c0:	e000ef34 	.word	0xe000ef34

080045c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	607b      	str	r3, [r7, #4]
}
 80045dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <vPortEnterCritical+0x58>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <vPortEnterCritical+0x58>)
 80045e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <vPortEnterCritical+0x58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10f      	bne.n	8004610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <vPortEnterCritical+0x5c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <vPortEnterCritical+0x4c>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	603b      	str	r3, [r7, #0]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <vPortEnterCritical+0x4a>
	}
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	2000000c 	.word	0x2000000c
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <vPortExitCritical+0x50>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <vPortExitCritical+0x24>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	607b      	str	r3, [r7, #4]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <vPortExitCritical+0x50>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3b01      	subs	r3, #1
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <vPortExitCritical+0x50>)
 8004650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <vPortExitCritical+0x50>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <vPortExitCritical+0x42>
 800465a:	2300      	movs	r3, #0
 800465c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f383 8811 	msr	BASEPRI, r3
}
 8004664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c
	...

08004680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004680:	f3ef 8009 	mrs	r0, PSP
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <pxCurrentTCBConst>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f01e 0f10 	tst.w	lr, #16
 8004690:	bf08      	it	eq
 8004692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	6010      	str	r0, [r2, #0]
 800469c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046a4:	f380 8811 	msr	BASEPRI, r0
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f7fe ffc2 	bl	8003638 <vTaskSwitchContext>
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f380 8811 	msr	BASEPRI, r0
 80046bc:	bc09      	pop	{r0, r3}
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	6808      	ldr	r0, [r1, #0]
 80046c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c6:	f01e 0f10 	tst.w	lr, #16
 80046ca:	bf08      	it	eq
 80046cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046d0:	f380 8809 	msr	PSP, r0
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	f3af 8000 	nop.w

080046e0 <pxCurrentTCBConst>:
 80046e0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
}
 8004700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004702:	f7fe fedf 	bl	80034c4 <xTaskIncrementTick>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <xPortSysTickHandler+0x40>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f383 8811 	msr	BASEPRI, r3
}
 800471e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <vPortSetupTimerInterrupt+0x34>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <vPortSetupTimerInterrupt+0x38>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <vPortSetupTimerInterrupt+0x3c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <vPortSetupTimerInterrupt+0x40>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <vPortSetupTimerInterrupt+0x44>)
 800474a:	3b01      	subs	r3, #1
 800474c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800474e:	4b04      	ldr	r3, [pc, #16]	; (8004760 <vPortSetupTimerInterrupt+0x34>)
 8004750:	2207      	movs	r2, #7
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010
 8004764:	e000e018 	.word	0xe000e018
 8004768:	20000000 	.word	0x20000000
 800476c:	10624dd3 	.word	0x10624dd3
 8004770:	e000e014 	.word	0xe000e014

08004774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004784 <vPortEnableVFP+0x10>
 8004778:	6801      	ldr	r1, [r0, #0]
 800477a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800477e:	6001      	str	r1, [r0, #0]
 8004780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004782:	bf00      	nop
 8004784:	e000ed88 	.word	0xe000ed88

08004788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800478e:	f3ef 8305 	mrs	r3, IPSR
 8004792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	d914      	bls.n	80047c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <vPortValidateInterruptPriority+0x70>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <vPortValidateInterruptPriority+0x74>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	7afa      	ldrb	r2, [r7, #11]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d20a      	bcs.n	80047c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <vPortValidateInterruptPriority+0x78>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <vPortValidateInterruptPriority+0x7c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d90a      	bls.n	80047ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	603b      	str	r3, [r7, #0]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <vPortValidateInterruptPriority+0x60>
	}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000e3f0 	.word	0xe000e3f0
 80047fc:	20000df0 	.word	0x20000df0
 8004800:	e000ed0c 	.word	0xe000ed0c
 8004804:	20000df4 	.word	0x20000df4

08004808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004814:	f7fe fd9a 	bl	800334c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004818:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <pvPortMalloc+0x180>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004820:	f000 f920 	bl	8004a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <pvPortMalloc+0x184>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8093 	bne.w	8004958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01d      	beq.n	8004874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004838:	2208      	movs	r2, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	2b00      	cmp	r3, #0
 8004848:	d014      	beq.n	8004874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	3308      	adds	r3, #8
 8004852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <pvPortMalloc+0x6c>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	617b      	str	r3, [r7, #20]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d06e      	beq.n	8004958 <pvPortMalloc+0x150>
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <pvPortMalloc+0x188>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d869      	bhi.n	8004958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004884:	4b43      	ldr	r3, [pc, #268]	; (8004994 <pvPortMalloc+0x18c>)
 8004886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <pvPortMalloc+0x18c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800488e:	e004      	b.n	800489a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <pvPortMalloc+0xa4>
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f1      	bne.n	8004890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <pvPortMalloc+0x180>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d050      	beq.n	8004958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	4413      	add	r3, r2
 80048be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad2      	subs	r2, r2, r3
 80048d0:	2308      	movs	r3, #8
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d91f      	bls.n	8004918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <pvPortMalloc+0xf8>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	613b      	str	r3, [r7, #16]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004912:	69b8      	ldr	r0, [r7, #24]
 8004914:	f000 f908 	bl	8004b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <pvPortMalloc+0x188>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <pvPortMalloc+0x188>)
 8004924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <pvPortMalloc+0x188>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <pvPortMalloc+0x190>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d203      	bcs.n	800493a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <pvPortMalloc+0x188>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a18      	ldr	r2, [pc, #96]	; (8004998 <pvPortMalloc+0x190>)
 8004938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <pvPortMalloc+0x184>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	431a      	orrs	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <pvPortMalloc+0x194>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a11      	ldr	r2, [pc, #68]	; (800499c <pvPortMalloc+0x194>)
 8004956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004958:	f7fe fd06 	bl	8003368 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <pvPortMalloc+0x174>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60fb      	str	r3, [r7, #12]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <pvPortMalloc+0x172>
	return pvReturn;
 800497c:	69fb      	ldr	r3, [r7, #28]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20004a00 	.word	0x20004a00
 800498c:	20004a14 	.word	0x20004a14
 8004990:	20004a04 	.word	0x20004a04
 8004994:	200049f8 	.word	0x200049f8
 8004998:	20004a08 	.word	0x20004a08
 800499c:	20004a0c 	.word	0x20004a0c

080049a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d04d      	beq.n	8004a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049b2:	2308      	movs	r3, #8
 80049b4:	425b      	negs	r3, r3
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <vPortFree+0xb8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <vPortFree+0x44>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <vPortFree+0x62>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60bb      	str	r3, [r7, #8]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <vPortFree+0xb8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01e      	beq.n	8004a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11a      	bne.n	8004a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <vPortFree+0xb8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a28:	f7fe fc90 	bl	800334c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <vPortFree+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <vPortFree+0xbc>)
 8004a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f000 f874 	bl	8004b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <vPortFree+0xc0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <vPortFree+0xc0>)
 8004a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a4a:	f7fe fc8d 	bl	8003368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20004a14 	.word	0x20004a14
 8004a5c:	20004a04 	.word	0x20004a04
 8004a60:	20004a10 	.word	0x20004a10

08004a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <prvHeapInit+0xac>)
 8004a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <prvHeapInit+0xac>)
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <prvHeapInit+0xb0>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <prvHeapInit+0xb0>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <prvHeapInit+0xb4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvHeapInit+0xb4>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <prvHeapInit+0xb8>)
 8004af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <prvHeapInit+0xbc>)
 8004afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <prvHeapInit+0xc0>)
 8004afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20000df8 	.word	0x20000df8
 8004b14:	200049f8 	.word	0x200049f8
 8004b18:	20004a00 	.word	0x20004a00
 8004b1c:	20004a08 	.word	0x20004a08
 8004b20:	20004a04 	.word	0x20004a04
 8004b24:	20004a14 	.word	0x20004a14

08004b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <prvInsertBlockIntoFreeList+0xac>)
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <prvInsertBlockIntoFreeList+0x14>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d8f7      	bhi.n	8004b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d108      	bne.n	8004b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d118      	bne.n	8004bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d00d      	beq.n	8004ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e008      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d002      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	200049f8 	.word	0x200049f8
 8004bd8:	20004a00 	.word	0x20004a00

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 f826 	bl	8004c50 <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004cc0 	.word	0x08004cc0
 8004c28:	08004cc0 	.word	0x08004cc0
 8004c2c:	08004cc0 	.word	0x08004cc0
 8004c30:	08004cc4 	.word	0x08004cc4

08004c34 <memcpy>:
 8004c34:	440a      	add	r2, r1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c3c:	d100      	bne.n	8004c40 <memcpy+0xc>
 8004c3e:	4770      	bx	lr
 8004c40:	b510      	push	{r4, lr}
 8004c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	d1f9      	bne.n	8004c42 <memcpy+0xe>
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
