
fr_16_SendingCmplxDataWithQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d98  08005d98  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da0  08005da0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  2000006c  08005e14  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bc4  08005e14  00024bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016609  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003345  00000000  00000000  000366e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  00039a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd5  00000000  00000000  0003ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000048ed  00000000  00000000  0003be6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163d3  00000000  00000000  0004075a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099e85  00000000  00000000  00056b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d80  00000000  00000000  000f09b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f6734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c78 	.word	0x08005c78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005c78 	.word	0x08005c78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

void SenderTask(void *pvParmaters);
void ReceiverTask(void *pvParmaters);

int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8

  HAL_Init();
 8000582:	f000 fb4d 	bl	8000c20 <HAL_Init>

  SystemClock_Config();
 8000586:	f000 f8ab 	bl	80006e0 <SystemClock_Config>


  MX_GPIO_Init();
 800058a:	f000 f931 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f905 	bl	800079c <MX_USART2_UART_Init>

  // Create queue to hold a maximum of 3 structures

  xQueue = xQueueCreate(3, sizeof(Data_t));
 8000592:	2200      	movs	r2, #0
 8000594:	2102      	movs	r1, #2
 8000596:	2003      	movs	r0, #3
 8000598:	f002 f98e 	bl	80028b8 <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <main+0x68>)
 80005a0:	6013      	str	r3, [r2, #0]
  // Create a receiver task with a priority of 1

	xTaskCreate(ReceiverTask, "Receiver Task", 100, NULL, 1, &receiver_handle);
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <main+0x6c>)
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	490f      	ldr	r1, [pc, #60]	; (80005ec <main+0x70>)
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x74>)
 80005b2:	f002 fe24 	bl	80031fe <xTaskCreate>


  // Create task to send humidity data with a priority of 2

	xTaskCreate(SenderTask, "Humidity Sender Task", 100, (void *) &(xStructstoSend[0]), 2, &hum_task_handle);
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x78>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0x7c>)
 80005c0:	2264      	movs	r2, #100	; 0x64
 80005c2:	490e      	ldr	r1, [pc, #56]	; (80005fc <main+0x80>)
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <main+0x84>)
 80005c6:	f002 fe1a 	bl	80031fe <xTaskCreate>


  // Create task to send pressure data with a priority of 2

	xTaskCreate(SenderTask, "Pressure Sender Task", 100, (void *) &(xStructstoSend[1]), 2, &press_task_handle);
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x88>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <main+0x8c>)
 80005d4:	2264      	movs	r2, #100	; 0x64
 80005d6:	490d      	ldr	r1, [pc, #52]	; (800060c <main+0x90>)
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x84>)
 80005da:	f002 fe10 	bl	80031fe <xTaskCreate>


	vTaskStartScheduler();
 80005de:	f002 ff53 	bl	8003488 <vTaskStartScheduler>

  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x66>
 80005e4:	200000d8 	.word	0x200000d8
 80005e8:	200000d4 	.word	0x200000d4
 80005ec:	08005c90 	.word	0x08005c90
 80005f0:	0800064d 	.word	0x0800064d
 80005f4:	200000cc 	.word	0x200000cc
 80005f8:	08005d48 	.word	0x08005d48
 80005fc:	08005ca0 	.word	0x08005ca0
 8000600:	08000611 	.word	0x08000611
 8000604:	200000d0 	.word	0x200000d0
 8000608:	08005d4a 	.word	0x08005d4a
 800060c:	08005cb8 	.word	0x08005cb8

08000610 <SenderTask>:
  }

}

void SenderTask(void *pvParams)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	BaseType_t qStatus;
	const TickType_t wait_time = pdMS_TO_TICKS(100);
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	613b      	str	r3, [r7, #16]

	while(1)
	{
		qStatus = xQueueSend(xQueue,pvParams, wait_time); // if the queue is full , then wait for the 'wait_time' until it gets a new slot
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <SenderTask+0x34>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	f002 f9a5 	bl	8002974 <xQueueGenericSend>
 800062a:	60f8      	str	r0, [r7, #12]
		if(qStatus != pdPASS)
		{
			//Do something cause it is an error
		}

		for(int i=0; i<100000; i++);
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e002      	b.n	8000638 <SenderTask+0x28>
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	4a03      	ldr	r2, [pc, #12]	; (8000648 <SenderTask+0x38>)
 800063c:	4293      	cmp	r3, r2
 800063e:	ddf8      	ble.n	8000632 <SenderTask+0x22>
		qStatus = xQueueSend(xQueue,pvParams, wait_time); // if the queue is full , then wait for the 'wait_time' until it gets a new slot
 8000640:	e7ec      	b.n	800061c <SenderTask+0xc>
 8000642:	bf00      	nop
 8000644:	200000d8 	.word	0x200000d8
 8000648:	0001869f 	.word	0x0001869f

0800064c <ReceiverTask>:
	}

}
void ReceiverTask(void *pvParams)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	BaseType_t qStatus;
	Data_t xStructReceived;

	while(1)
	{
		qStatus = xQueueReceive(xQueue, &xStructReceived, 0);
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <ReceiverTask+0x40>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f107 0108 	add.w	r1, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fb22 	bl	8002ca8 <xQueueReceive>
 8000664:	60f8      	str	r0, [r7, #12]

		//Determine to which member of the struct refers the incoming data

		if(qStatus == pdPASS)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d1f3      	bne.n	8000654 <ReceiverTask+0x8>
		{
			if(xStructReceived.sDataSource == humidity_sensor)
 800066c:	7a7b      	ldrb	r3, [r7, #9]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d105      	bne.n	800067e <ReceiverTask+0x32>
			{
				printf("The value read by the humidity sensor = %d. \r\n", xStructReceived.ucValue);
 8000672:	7a3b      	ldrb	r3, [r7, #8]
 8000674:	4619      	mov	r1, r3
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <ReceiverTask+0x44>)
 8000678:	f004 fc7a 	bl	8004f70 <iprintf>
 800067c:	e7ea      	b.n	8000654 <ReceiverTask+0x8>
			}
			else
			{
				printf("The value read by the pressure sensor = %d. \r\n", xStructReceived.ucValue);
 800067e:	7a3b      	ldrb	r3, [r7, #8]
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <ReceiverTask+0x48>)
 8000684:	f004 fc74 	bl	8004f70 <iprintf>
		qStatus = xQueueReceive(xQueue, &xStructReceived, 0);
 8000688:	e7e4      	b.n	8000654 <ReceiverTask+0x8>
 800068a:	bf00      	nop
 800068c:	200000d8 	.word	0x200000d8
 8000690:	08005cd0 	.word	0x08005cd0
 8000694:	08005d00 	.word	0x08005d00

08000698 <uart2_wrtie>:
			//some error occurred upon receiving data
		}
	}
}

int uart2_wrtie(int ch) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR &0x0080)) {}
 80006a0:	bf00      	nop
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <uart2_wrtie+0x2c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <uart2_wrtie+0xa>
	USART2->DR = (ch & 0xFF);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <uart2_wrtie+0x2c>)
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	6053      	str	r3, [r2, #4]

	return ch;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40004400 	.word	0x40004400

080006c8 <__io_putchar>:


int __io_putchar(int ch){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t *)&ch,1,0xFFFF);
	uart2_wrtie(ch);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ffe1 	bl	8000698 <uart2_wrtie>
	return ch;
 80006d6:	687b      	ldr	r3, [r7, #4]

//	for (uint32_t i = 0; i < 1000; i++) {
//	        __NOP();
//	}
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 fc93 	bl	800501a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xb4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xb4>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xb4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <SystemClock_Config+0xb8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <SystemClock_Config+0xb8>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <SystemClock_Config+0xb8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fd0d 	bl	8001170 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800075c:	f000 f874 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 ff70 	bl	8001660 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000786:	f000 f85f 	bl	8000848 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f001 fbd6 	bl	8001f84 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f833 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000088 	.word	0x20000088
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_GPIO_Init+0x30>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <MX_GPIO_Init+0x30>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_GPIO_Init+0x30>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 fa15 	bl	8000c64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010000 	.word	0x40010000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 fabb 	bl	8000e14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_UART_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_UART_MspInit+0x8c>)
 8000922:	f000 faa1 	bl	8000e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <HAL_InitTick+0xd0>)
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000954:	4a2d      	ldr	r2, [pc, #180]	; (8000a0c <HAL_InitTick+0xd0>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6453      	str	r3, [r2, #68]	; 0x44
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <HAL_InitTick+0xd0>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f854 	bl	8001a20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000978:	f001 f83e 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 800097c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_InitTick+0xd4>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0c9b      	lsrs	r3, r3, #18
 8000988:	3b01      	subs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_InitTick+0xd8>)
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <HAL_InitTick+0xdc>)
 8000990:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_InitTick+0xd8>)
 8000994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000998:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_InitTick+0xd8>)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_InitTick+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_InitTick+0xd8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_InitTick+0xd8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <HAL_InitTick+0xd8>)
 80009b4:	f001 f866 	bl	8001a84 <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d11b      	bne.n	80009fe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <HAL_InitTick+0xd8>)
 80009c8:	f001 f8b6 	bl	8001b38 <HAL_TIM_Base_Start_IT>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d111      	bne.n	80009fe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 fa36 	bl	8000e4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	d808      	bhi.n	80009f8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009e6:	2200      	movs	r2, #0
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	2019      	movs	r0, #25
 80009ec:	f000 fa12 	bl	8000e14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_InitTick+0xe0>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e002      	b.n	80009fe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a52:	f001 f8d3 	bl	8001bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000dc 	.word	0x200000dc

08000a60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
  }

  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe07 	bl	80006c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
  }
  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f004 faa4 	bl	80050b8 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20020000 	.word	0x20020000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000124 	.word	0x20000124
 8000ba4:	20004bc8 	.word	0x20004bc8

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ffd7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f004 fa63 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fcbd 	bl	800057c <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c10:	08005da8 	.word	0x08005da8
  ldr r2, =_sbss
 8000c14:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c18:	20004bc4 	.word	0x20004bc4

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f8d8 	bl	8000dfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f7ff fe74 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fdfe 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000128 	.word	0x20000128

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000128 	.word	0x20000128

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff4c 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e26:	f7ff ff61 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	6978      	ldr	r0, [r7, #20]
 8000e32:	f7ff ffb1 	bl	8000d98 <NVIC_EncodePriority>
 8000e36:	4602      	mov	r2, r0
 8000e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff80 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff54 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e159      	b.n	8001138 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8148 	bne.w	8001132 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d005      	beq.n	8000eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d130      	bne.n	8000f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a2 	beq.w	8001132 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a56      	ldr	r2, [pc, #344]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100a:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_GPIO_Init+0x2ec>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <HAL_GPIO_Init+0x2f0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x202>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a48      	ldr	r2, [pc, #288]	; (800115c <HAL_GPIO_Init+0x2f4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1fe>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a47      	ldr	r2, [pc, #284]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1fa>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <HAL_GPIO_Init+0x2fc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1f6>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a45      	ldr	r2, [pc, #276]	; (8001168 <HAL_GPIO_Init+0x300>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1f2>
 8001056:	2304      	movs	r3, #4
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x204>
 800105a:	2307      	movs	r3, #7
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x204>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x204>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x204>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x204>
 800106a:	2300      	movs	r3, #0
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <HAL_GPIO_Init+0x2ec>)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_GPIO_Init+0x304>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ae:	4a2f      	ldr	r2, [pc, #188]	; (800116c <HAL_GPIO_Init+0x304>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_GPIO_Init+0x304>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <HAL_GPIO_Init+0x304>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_GPIO_Init+0x304>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001102:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_GPIO_Init+0x304>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_GPIO_Init+0x304>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_GPIO_Init+0x304>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	f67f aea2 	bls.w	8000e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40013800 	.word	0x40013800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021000 	.word	0x40021000
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e267      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118e:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b82      	ldr	r3, [pc, #520]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b7e      	ldr	r3, [pc, #504]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e242      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a75      	ldr	r2, [pc, #468]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b70      	ldr	r3, [pc, #448]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6f      	ldr	r2, [pc, #444]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6c      	ldr	r2, [pc, #432]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a68      	ldr	r2, [pc, #416]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a65      	ldr	r2, [pc, #404]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fd30 	bl	8000c8c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fd2c 	bl	8000c8c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e207      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fd1c 	bl	8000c8c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fd18 	bl	8000c8c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1f3      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001286:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1c7      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4937      	ldr	r1, [pc, #220]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_RCC_OscConfig+0x244>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fcd1 	bl	8000c8c <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fccd 	bl	8000c8c <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1a8      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4925      	ldr	r1, [pc, #148]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_RCC_OscConfig+0x244>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fcb0 	bl	8000c8c <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fcac 	bl	8000c8c <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e187      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d036      	beq.n	80013c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc90 	bl	8000c8c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc8c 	bl	8000c8c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e167      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e01b      	b.n	80013c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc79 	bl	8000c8c <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e00e      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fc75 	bl	8000c8c <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d907      	bls.n	80013bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e150      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	42470000 	.word	0x42470000
 80013b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ea      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8097 	beq.w	8001504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a7c      	ldr	r2, [pc, #496]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7ff fc35 	bl	8000c8c <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff fc31 	bl	8000c8c <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e10c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x2ea>
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a63      	ldr	r2, [pc, #396]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	e01c      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x30c>
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a5e      	ldr	r2, [pc, #376]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800147c:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a57      	ldr	r2, [pc, #348]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a54      	ldr	r2, [pc, #336]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d015      	beq.n	80014c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fbf6 	bl	8000c8c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fbf2 	bl	8000c8c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0cb      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ee      	beq.n	80014a4 <HAL_RCC_OscConfig+0x334>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fbe0 	bl	8000c8c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fbdc 	bl	8000c8c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0b5      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e6:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ee      	bne.n	80014d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a1 	beq.w	8001650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d05c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d141      	bne.n	80015a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fbb0 	bl	8000c8c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fbac 	bl	8000c8c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e087      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	491b      	ldr	r1, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb85 	bl	8000c8c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fb81 	bl	8000c8c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e05c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x416>
 80015a4:	e054      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb6e 	bl	8000c8c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb6a 	bl	8000c8c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e045      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
 80015d2:	e03d      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e038      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000
 80015e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_OscConfig+0x4ec>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d028      	beq.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d121      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d11a      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	4293      	cmp	r3, r2
 8001626:	d111      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cc      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e067      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4934      	ldr	r1, [pc, #208]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa9c 	bl	8000c8c <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa98 	bl	8000c8c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490a      	ldr	r1, [pc, #40]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f898 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00
 800181c:	40023800 	.word	0x40023800
 8001820:	08005d4c 	.word	0x08005d4c
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001830:	b090      	sub	sp, #64	; 0x40
 8001832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
 8001838:	2300      	movs	r3, #0
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d00d      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x40>
 8001850:	2b08      	cmp	r3, #8
 8001852:	f200 80a1 	bhi.w	8001998 <HAL_RCC_GetSysClockFreq+0x16c>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x34>
 800185a:	2b04      	cmp	r3, #4
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x3a>
 800185e:	e09b      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001864:	e09b      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001866:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800186a:	e098      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186c:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001876:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d028      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	2200      	movs	r2, #0
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	627a      	str	r2, [r7, #36]	; 0x24
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001894:	2100      	movs	r1, #0
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001898:	fb03 f201 	mul.w	r2, r3, r1
 800189c:	2300      	movs	r3, #0
 800189e:	fb00 f303 	mul.w	r3, r0, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	4a43      	ldr	r2, [pc, #268]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018a6:	fba0 1202 	umull	r1, r2, r0, r2
 80018aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ac:	460a      	mov	r2, r1
 80018ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80018b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b2:	4413      	add	r3, r2
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b8:	2200      	movs	r2, #0
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	61fa      	str	r2, [r7, #28]
 80018be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018c6:	f7fe fcdb 	bl	8000280 <__aeabi_uldivmod>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4613      	mov	r3, r2
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018d2:	e053      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	2200      	movs	r2, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	617a      	str	r2, [r7, #20]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018e6:	f04f 0b00 	mov.w	fp, #0
 80018ea:	4652      	mov	r2, sl
 80018ec:	465b      	mov	r3, fp
 80018ee:	f04f 0000 	mov.w	r0, #0
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	0159      	lsls	r1, r3, #5
 80018f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018fc:	0150      	lsls	r0, r2, #5
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	ebb2 080a 	subs.w	r8, r2, sl
 8001906:	eb63 090b 	sbc.w	r9, r3, fp
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001916:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800191a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800191e:	ebb2 0408 	subs.w	r4, r2, r8
 8001922:	eb63 0509 	sbc.w	r5, r3, r9
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	00eb      	lsls	r3, r5, #3
 8001930:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001934:	00e2      	lsls	r2, r4, #3
 8001936:	4614      	mov	r4, r2
 8001938:	461d      	mov	r5, r3
 800193a:	eb14 030a 	adds.w	r3, r4, sl
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	eb45 030b 	adc.w	r3, r5, fp
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001952:	4629      	mov	r1, r5
 8001954:	028b      	lsls	r3, r1, #10
 8001956:	4621      	mov	r1, r4
 8001958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800195c:	4621      	mov	r1, r4
 800195e:	028a      	lsls	r2, r1, #10
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	2200      	movs	r2, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	60fa      	str	r2, [r7, #12]
 800196c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001970:	f7fe fc86 	bl	8000280 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4613      	mov	r3, r2
 800197a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800198c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001996:	e002      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800199c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3740      	adds	r7, #64	; 0x40
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	00f42400 	.word	0x00f42400
 80019b4:	017d7840 	.word	0x017d7840

080019b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_RCC_GetHCLKFreq+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019d4:	f7ff fff0 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0a9b      	lsrs	r3, r3, #10
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08005d5c 	.word	0x08005d5c

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019fc:	f7ff ffdc 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0b5b      	lsrs	r3, r3, #13
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08005d5c 	.word	0x08005d5c

08001a20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetClockConfig+0x60>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0207 	and.w	r2, r3, #7
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e041      	b.n	8001b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f839 	bl	8001b22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f000 f9ca 	bl	8001e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d001      	beq.n	8001b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e044      	b.n	8001bda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d018      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d013      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_TIM_Base_Start_IT+0xb4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00e      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d009      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x6c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d111      	bne.n	8001bc8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d010      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc6:	e007      	b.n	8001bd8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	40000c00 	.word	0x40000c00
 8001bf8:	40014000 	.word	0x40014000

08001bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d122      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d11b      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0202 	mvn.w	r2, #2
 8001c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8ee 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8e0 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8f1 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d122      	bne.n	8001cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d11b      	bne.n	8001cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0204 	mvn.w	r2, #4
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2202      	movs	r2, #2
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8c4 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8b6 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8c7 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0208 	mvn.w	r2, #8
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f89a 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f88c 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f89d 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0210 	mvn.w	r2, #16
 8001d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f870 	bl	8001e20 <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f862 	bl	8001e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f873 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10e      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0201 	mvn.w	r2, #1
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fd52 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	2b80      	cmp	r3, #128	; 0x80
 8001d8c:	d10e      	bne.n	8001dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d107      	bne.n	8001dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8e2 	bl	8001f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d10e      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d107      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f838 	bl	8001e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d10e      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d107      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0220 	mvn.w	r2, #32
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8ac 	bl	8001f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a34      	ldr	r2, [pc, #208]	; (8001f40 <TIM_Base_SetConfig+0xe4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00f      	beq.n	8001e94 <TIM_Base_SetConfig+0x38>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d00b      	beq.n	8001e94 <TIM_Base_SetConfig+0x38>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <TIM_Base_SetConfig+0xe8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <TIM_Base_SetConfig+0x38>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a30      	ldr	r2, [pc, #192]	; (8001f48 <TIM_Base_SetConfig+0xec>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d003      	beq.n	8001e94 <TIM_Base_SetConfig+0x38>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <TIM_Base_SetConfig+0xf0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d108      	bne.n	8001ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <TIM_Base_SetConfig+0xe4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01b      	beq.n	8001ee6 <TIM_Base_SetConfig+0x8a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb4:	d017      	beq.n	8001ee6 <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <TIM_Base_SetConfig+0xe8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <TIM_Base_SetConfig+0xec>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00f      	beq.n	8001ee6 <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <TIM_Base_SetConfig+0xf0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00b      	beq.n	8001ee6 <TIM_Base_SetConfig+0x8a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <TIM_Base_SetConfig+0xf4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <TIM_Base_SetConfig+0xf8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <TIM_Base_SetConfig+0xfc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <TIM_Base_SetConfig+0xe4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d103      	bne.n	8001f2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	615a      	str	r2, [r3, #20]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40000c00 	.word	0x40000c00
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40014400 	.word	0x40014400
 8001f58:	40014800 	.word	0x40014800

08001f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e03f      	b.n	8002016 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fc7e 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	; 0x24
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f829 	bl	8002020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002024:	b0c0      	sub	sp, #256	; 0x100
 8002026:	af00      	add	r7, sp, #0
 8002028:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203c:	68d9      	ldr	r1, [r3, #12]
 800203e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	ea40 0301 	orr.w	r3, r0, r1
 8002048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800204a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	431a      	orrs	r2, r3
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	431a      	orrs	r2, r3
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002078:	f021 010c 	bic.w	r1, r1, #12
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002086:	430b      	orrs	r3, r1
 8002088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800208a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209a:	6999      	ldr	r1, [r3, #24]
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	ea40 0301 	orr.w	r3, r0, r1
 80020a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <UART_SetConfig+0x2cc>)
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d005      	beq.n	80020c0 <UART_SetConfig+0xa0>
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b8d      	ldr	r3, [pc, #564]	; (80022f0 <UART_SetConfig+0x2d0>)
 80020bc:	429a      	cmp	r2, r3
 80020be:	d104      	bne.n	80020ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020c0:	f7ff fc9a 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 80020c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020c8:	e003      	b.n	80020d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ca:	f7ff fc81 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 80020ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020dc:	f040 810c 	bne.w	80022f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020e4:	2200      	movs	r2, #0
 80020e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020f2:	4622      	mov	r2, r4
 80020f4:	462b      	mov	r3, r5
 80020f6:	1891      	adds	r1, r2, r2
 80020f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80020fa:	415b      	adcs	r3, r3
 80020fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002102:	4621      	mov	r1, r4
 8002104:	eb12 0801 	adds.w	r8, r2, r1
 8002108:	4629      	mov	r1, r5
 800210a:	eb43 0901 	adc.w	r9, r3, r1
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800211e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002122:	4690      	mov	r8, r2
 8002124:	4699      	mov	r9, r3
 8002126:	4623      	mov	r3, r4
 8002128:	eb18 0303 	adds.w	r3, r8, r3
 800212c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002130:	462b      	mov	r3, r5
 8002132:	eb49 0303 	adc.w	r3, r9, r3
 8002136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800213a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002146:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800214a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800214e:	460b      	mov	r3, r1
 8002150:	18db      	adds	r3, r3, r3
 8002152:	653b      	str	r3, [r7, #80]	; 0x50
 8002154:	4613      	mov	r3, r2
 8002156:	eb42 0303 	adc.w	r3, r2, r3
 800215a:	657b      	str	r3, [r7, #84]	; 0x54
 800215c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002164:	f7fe f88c 	bl	8000280 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <UART_SetConfig+0x2d4>)
 800216e:	fba3 2302 	umull	r2, r3, r3, r2
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	011c      	lsls	r4, r3, #4
 8002176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217a:	2200      	movs	r2, #0
 800217c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002180:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002188:	4642      	mov	r2, r8
 800218a:	464b      	mov	r3, r9
 800218c:	1891      	adds	r1, r2, r2
 800218e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002190:	415b      	adcs	r3, r3
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002198:	4641      	mov	r1, r8
 800219a:	eb12 0a01 	adds.w	sl, r2, r1
 800219e:	4649      	mov	r1, r9
 80021a0:	eb43 0b01 	adc.w	fp, r3, r1
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021b8:	4692      	mov	sl, r2
 80021ba:	469b      	mov	fp, r3
 80021bc:	4643      	mov	r3, r8
 80021be:	eb1a 0303 	adds.w	r3, sl, r3
 80021c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021c6:	464b      	mov	r3, r9
 80021c8:	eb4b 0303 	adc.w	r3, fp, r3
 80021cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021e4:	460b      	mov	r3, r1
 80021e6:	18db      	adds	r3, r3, r3
 80021e8:	643b      	str	r3, [r7, #64]	; 0x40
 80021ea:	4613      	mov	r3, r2
 80021ec:	eb42 0303 	adc.w	r3, r2, r3
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
 80021f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021fa:	f7fe f841 	bl	8000280 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4611      	mov	r1, r2
 8002204:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <UART_SetConfig+0x2d4>)
 8002206:	fba3 2301 	umull	r2, r3, r3, r1
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2264      	movs	r2, #100	; 0x64
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	1acb      	subs	r3, r1, r3
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <UART_SetConfig+0x2d4>)
 800221c:	fba3 2302 	umull	r2, r3, r3, r2
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002228:	441c      	add	r4, r3
 800222a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800222e:	2200      	movs	r2, #0
 8002230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002234:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800223c:	4642      	mov	r2, r8
 800223e:	464b      	mov	r3, r9
 8002240:	1891      	adds	r1, r2, r2
 8002242:	63b9      	str	r1, [r7, #56]	; 0x38
 8002244:	415b      	adcs	r3, r3
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800224c:	4641      	mov	r1, r8
 800224e:	1851      	adds	r1, r2, r1
 8002250:	6339      	str	r1, [r7, #48]	; 0x30
 8002252:	4649      	mov	r1, r9
 8002254:	414b      	adcs	r3, r1
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002264:	4659      	mov	r1, fp
 8002266:	00cb      	lsls	r3, r1, #3
 8002268:	4651      	mov	r1, sl
 800226a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800226e:	4651      	mov	r1, sl
 8002270:	00ca      	lsls	r2, r1, #3
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	4603      	mov	r3, r0
 8002278:	4642      	mov	r2, r8
 800227a:	189b      	adds	r3, r3, r2
 800227c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002280:	464b      	mov	r3, r9
 8002282:	460a      	mov	r2, r1
 8002284:	eb42 0303 	adc.w	r3, r2, r3
 8002288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800228c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002298:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800229c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022a0:	460b      	mov	r3, r1
 80022a2:	18db      	adds	r3, r3, r3
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a6:	4613      	mov	r3, r2
 80022a8:	eb42 0303 	adc.w	r3, r2, r3
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022b6:	f7fd ffe3 	bl	8000280 <__aeabi_uldivmod>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <UART_SetConfig+0x2d4>)
 80022c0:	fba3 1302 	umull	r1, r3, r3, r2
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	2164      	movs	r1, #100	; 0x64
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	3332      	adds	r3, #50	; 0x32
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <UART_SetConfig+0x2d4>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	f003 0207 	and.w	r2, r3, #7
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4422      	add	r2, r4
 80022e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022e8:	e106      	b.n	80024f8 <UART_SetConfig+0x4d8>
 80022ea:	bf00      	nop
 80022ec:	40011000 	.word	0x40011000
 80022f0:	40011400 	.word	0x40011400
 80022f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022fc:	2200      	movs	r2, #0
 80022fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800230a:	4642      	mov	r2, r8
 800230c:	464b      	mov	r3, r9
 800230e:	1891      	adds	r1, r2, r2
 8002310:	6239      	str	r1, [r7, #32]
 8002312:	415b      	adcs	r3, r3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800231a:	4641      	mov	r1, r8
 800231c:	1854      	adds	r4, r2, r1
 800231e:	4649      	mov	r1, r9
 8002320:	eb43 0501 	adc.w	r5, r3, r1
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	00eb      	lsls	r3, r5, #3
 800232e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002332:	00e2      	lsls	r2, r4, #3
 8002334:	4614      	mov	r4, r2
 8002336:	461d      	mov	r5, r3
 8002338:	4643      	mov	r3, r8
 800233a:	18e3      	adds	r3, r4, r3
 800233c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002340:	464b      	mov	r3, r9
 8002342:	eb45 0303 	adc.w	r3, r5, r3
 8002346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800234a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002366:	4629      	mov	r1, r5
 8002368:	008b      	lsls	r3, r1, #2
 800236a:	4621      	mov	r1, r4
 800236c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002370:	4621      	mov	r1, r4
 8002372:	008a      	lsls	r2, r1, #2
 8002374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002378:	f7fd ff82 	bl	8000280 <__aeabi_uldivmod>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4b60      	ldr	r3, [pc, #384]	; (8002504 <UART_SetConfig+0x4e4>)
 8002382:	fba3 2302 	umull	r2, r3, r3, r2
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	011c      	lsls	r4, r3, #4
 800238a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238e:	2200      	movs	r2, #0
 8002390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800239c:	4642      	mov	r2, r8
 800239e:	464b      	mov	r3, r9
 80023a0:	1891      	adds	r1, r2, r2
 80023a2:	61b9      	str	r1, [r7, #24]
 80023a4:	415b      	adcs	r3, r3
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ac:	4641      	mov	r1, r8
 80023ae:	1851      	adds	r1, r2, r1
 80023b0:	6139      	str	r1, [r7, #16]
 80023b2:	4649      	mov	r1, r9
 80023b4:	414b      	adcs	r3, r1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023c4:	4659      	mov	r1, fp
 80023c6:	00cb      	lsls	r3, r1, #3
 80023c8:	4651      	mov	r1, sl
 80023ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ce:	4651      	mov	r1, sl
 80023d0:	00ca      	lsls	r2, r1, #3
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	4642      	mov	r2, r8
 80023da:	189b      	adds	r3, r3, r2
 80023dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023e0:	464b      	mov	r3, r9
 80023e2:	460a      	mov	r2, r1
 80023e4:	eb42 0303 	adc.w	r3, r2, r3
 80023e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80023f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002404:	4649      	mov	r1, r9
 8002406:	008b      	lsls	r3, r1, #2
 8002408:	4641      	mov	r1, r8
 800240a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800240e:	4641      	mov	r1, r8
 8002410:	008a      	lsls	r2, r1, #2
 8002412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002416:	f7fd ff33 	bl	8000280 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4611      	mov	r1, r2
 8002420:	4b38      	ldr	r3, [pc, #224]	; (8002504 <UART_SetConfig+0x4e4>)
 8002422:	fba3 2301 	umull	r2, r3, r3, r1
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2264      	movs	r2, #100	; 0x64
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	1acb      	subs	r3, r1, r3
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	3332      	adds	r3, #50	; 0x32
 8002434:	4a33      	ldr	r2, [pc, #204]	; (8002504 <UART_SetConfig+0x4e4>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002440:	441c      	add	r4, r3
 8002442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002446:	2200      	movs	r2, #0
 8002448:	673b      	str	r3, [r7, #112]	; 0x70
 800244a:	677a      	str	r2, [r7, #116]	; 0x74
 800244c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002450:	4642      	mov	r2, r8
 8002452:	464b      	mov	r3, r9
 8002454:	1891      	adds	r1, r2, r2
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	415b      	adcs	r3, r3
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002460:	4641      	mov	r1, r8
 8002462:	1851      	adds	r1, r2, r1
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	4649      	mov	r1, r9
 8002468:	414b      	adcs	r3, r1
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002478:	4659      	mov	r1, fp
 800247a:	00cb      	lsls	r3, r1, #3
 800247c:	4651      	mov	r1, sl
 800247e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002482:	4651      	mov	r1, sl
 8002484:	00ca      	lsls	r2, r1, #3
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	4603      	mov	r3, r0
 800248c:	4642      	mov	r2, r8
 800248e:	189b      	adds	r3, r3, r2
 8002490:	66bb      	str	r3, [r7, #104]	; 0x68
 8002492:	464b      	mov	r3, r9
 8002494:	460a      	mov	r2, r1
 8002496:	eb42 0303 	adc.w	r3, r2, r3
 800249a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	663b      	str	r3, [r7, #96]	; 0x60
 80024a6:	667a      	str	r2, [r7, #100]	; 0x64
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024b4:	4649      	mov	r1, r9
 80024b6:	008b      	lsls	r3, r1, #2
 80024b8:	4641      	mov	r1, r8
 80024ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024be:	4641      	mov	r1, r8
 80024c0:	008a      	lsls	r2, r1, #2
 80024c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024c6:	f7fd fedb 	bl	8000280 <__aeabi_uldivmod>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <UART_SetConfig+0x4e4>)
 80024d0:	fba3 1302 	umull	r1, r3, r3, r2
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	2164      	movs	r1, #100	; 0x64
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	3332      	adds	r3, #50	; 0x32
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <UART_SetConfig+0x4e4>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4422      	add	r2, r4
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024fe:	46bd      	mov	sp, r7
 8002500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002504:	51eb851f 	.word	0x51eb851f

08002508 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Handler+0x1c>)
 800250e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002510:	f001 fc02 	bl	8003d18 <xTaskGetSchedulerState>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800251a:	f002 f9ed 	bl	80048f8 <xPortSysTickHandler>
  }
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <vApplicationGetIdleTaskMemory+0x2c>)
 8002538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <vApplicationGetIdleTaskMemory+0x30>)
 800253e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	2000012c 	.word	0x2000012c
 8002558:	20000188 	.word	0x20000188

0800255c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <vApplicationGetTimerTaskMemory+0x2c>)
 800256c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <vApplicationGetTimerTaskMemory+0x30>)
 8002572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	20000388 	.word	0x20000388
 800258c:	200003e4 	.word	0x200003e4

08002590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0208 	add.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f103 0208 	add.w	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d103      	bne.n	8002652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e00c      	b.n	800266c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3308      	adds	r3, #8
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e002      	b.n	8002660 <vListInsert+0x2e>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d2f6      	bcs.n	800265a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6892      	ldr	r2, [r2, #8]
 80026ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6852      	ldr	r2, [r2, #4]
 80026c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d103      	bne.n	80026d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1e5a      	subs	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800271e:	bf00      	nop
 8002720:	e7fe      	b.n	8002720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002722:	f002 f857 	bl	80047d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	441a      	add	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	3b01      	subs	r3, #1
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d114      	bne.n	80027a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01a      	beq.n	80027b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3310      	adds	r3, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f001 f909 	bl	800399c <xTaskRemoveFromEventList>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <xQueueGenericReset+0xcc>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	e009      	b.n	80027b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3310      	adds	r3, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fef2 	bl	8002590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3324      	adds	r3, #36	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff feed 	bl	8002590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027b6:	f002 f83d 	bl	8004834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <xQueueGenericCreateStatic+0x52>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <xQueueGenericCreateStatic+0x56>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <xQueueGenericCreateStatic+0x58>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	623b      	str	r3, [r7, #32]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <xQueueGenericCreateStatic+0x7e>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <xQueueGenericCreateStatic+0x82>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <xQueueGenericCreateStatic+0x84>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	61fb      	str	r3, [r7, #28]
}
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002866:	2350      	movs	r3, #80	; 0x50
 8002868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d00a      	beq.n	8002886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61bb      	str	r3, [r7, #24]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800289a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f83f 	bl	800292c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	4613      	mov	r3, r2
 80028c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	613b      	str	r3, [r7, #16]
}
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3350      	adds	r3, #80	; 0x50
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 f891 	bl	8004a18 <pvPortMalloc>
 80028f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d011      	beq.n	8002922 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3350      	adds	r3, #80	; 0x50
 8002906:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002910:	79fa      	ldrb	r2, [r7, #7]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f805 	bl	800292c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002922:	69bb      	ldr	r3, [r7, #24]
	}
 8002924:	4618      	mov	r0, r3
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d103      	bne.n	8002948 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e002      	b.n	800294e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800295a:	2101      	movs	r1, #1
 800295c:	69b8      	ldr	r0, [r7, #24]
 800295e:	f7ff fecb 	bl	80026f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08e      	sub	sp, #56	; 0x38
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueGenericSend+0x32>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <xQueueGenericSend+0x40>
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <xQueueGenericSend+0x44>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <xQueueGenericSend+0x46>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <xQueueGenericSend+0x60>
	__asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d103      	bne.n	80029e2 <xQueueGenericSend+0x6e>
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <xQueueGenericSend+0x72>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <xQueueGenericSend+0x74>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <xQueueGenericSend+0x8e>
	__asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	623b      	str	r3, [r7, #32]
}
 80029fe:	bf00      	nop
 8002a00:	e7fe      	b.n	8002a00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a02:	f001 f989 	bl	8003d18 <xTaskGetSchedulerState>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <xQueueGenericSend+0x9e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <xQueueGenericSend+0xa2>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <xQueueGenericSend+0xa4>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	61fb      	str	r3, [r7, #28]
}
 8002a2e:	bf00      	nop
 8002a30:	e7fe      	b.n	8002a30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a32:	f001 fecf 	bl	80047d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <xQueueGenericSend+0xd4>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d129      	bne.n	8002a9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4e:	f000 fa0b 	bl	8002e68 <prvCopyDataToQueue>
 8002a52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d010      	beq.n	8002a7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 ff9b 	bl	800399c <xTaskRemoveFromEventList>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <xQueueGenericSend+0x1f8>)
 8002a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	e00a      	b.n	8002a94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a84:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <xQueueGenericSend+0x1f8>)
 8002a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a94:	f001 fece 	bl	8004834 <vPortExitCritical>
				return pdPASS;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e063      	b.n	8002b64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aa2:	f001 fec7 	bl	8004834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e05c      	b.n	8002b64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 ffd5 	bl	8003a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002abe:	f001 feb9 	bl	8004834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ac2:	f000 fd47 	bl	8003554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ac6:	f001 fe85 	bl	80047d4 <vPortEnterCritical>
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d103      	bne.n	8002ae0 <xQueueGenericSend+0x16c>
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d103      	bne.n	8002af6 <xQueueGenericSend+0x182>
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002af6:	f001 fe9d 	bl	8004834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002afa:	1d3a      	adds	r2, r7, #4
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 ffc4 	bl	8003a90 <xTaskCheckForTimeOut>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d124      	bne.n	8002b58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b10:	f000 faa2 	bl	8003058 <prvIsQueueFull>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d018      	beq.n	8002b4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	3310      	adds	r3, #16
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 feea 	bl	80038fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b2a:	f000 fa2d 	bl	8002f88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b2e:	f000 fd1f 	bl	8003570 <xTaskResumeAll>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f af7c 	bne.w	8002a32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <xQueueGenericSend+0x1f8>)
 8002b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	e772      	b.n	8002a32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b4e:	f000 fa1b 	bl	8002f88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b52:	f000 fd0d 	bl	8003570 <xTaskResumeAll>
 8002b56:	e76c      	b.n	8002a32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5a:	f000 fa15 	bl	8002f88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b5e:	f000 fd07 	bl	8003570 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3738      	adds	r7, #56	; 0x38
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b090      	sub	sp, #64	; 0x40
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <xQueueGenericSendFromISR+0x3c>
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <xQueueGenericSendFromISR+0x40>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <xQueueGenericSendFromISR+0x42>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d103      	bne.n	8002bda <xQueueGenericSendFromISR+0x6a>
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <xQueueGenericSendFromISR+0x6e>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <xQueueGenericSendFromISR+0x70>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	623b      	str	r3, [r7, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bfa:	f001 fecd 	bl	8004998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bfe:	f3ef 8211 	mrs	r2, BASEPRI
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	61fa      	str	r2, [r7, #28]
 8002c14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <xQueueGenericSendFromISR+0xbc>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d12f      	bne.n	8002c8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c42:	f000 f911 	bl	8002e68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d112      	bne.n	8002c76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d016      	beq.n	8002c86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	3324      	adds	r3, #36	; 0x24
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fe9d 	bl	800399c <xTaskRemoveFromEventList>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00e      	beq.n	8002c86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e007      	b.n	8002c86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	b25a      	sxtb	r2, r3
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c86:	2301      	movs	r3, #1
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c8a:	e001      	b.n	8002c90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3740      	adds	r7, #64	; 0x40
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <xQueueReceive+0x30>
	__asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	623b      	str	r3, [r7, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <xQueueReceive+0x3e>
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <xQueueReceive+0x42>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueReceive+0x44>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xQueueReceive+0x5e>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	61fb      	str	r3, [r7, #28]
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d06:	f001 f807 	bl	8003d18 <xTaskGetSchedulerState>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <xQueueReceive+0x6e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <xQueueReceive+0x72>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <xQueueReceive+0x74>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <xQueueReceive+0x8e>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	61bb      	str	r3, [r7, #24]
}
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d36:	f001 fd4d 	bl	80047d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01f      	beq.n	8002d86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4a:	f000 f8f7 	bl	8002f3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1e5a      	subs	r2, r3, #1
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00f      	beq.n	8002d7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	3310      	adds	r3, #16
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fe1a 	bl	800399c <xTaskRemoveFromEventList>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <xQueueReceive+0x1bc>)
 8002d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d7e:	f001 fd59 	bl	8004834 <vPortExitCritical>
				return pdPASS;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e069      	b.n	8002e5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d8c:	f001 fd52 	bl	8004834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e062      	b.n	8002e5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fe60 	bl	8003a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002da8:	f001 fd44 	bl	8004834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dac:	f000 fbd2 	bl	8003554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002db0:	f001 fd10 	bl	80047d4 <vPortEnterCritical>
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d103      	bne.n	8002dca <xQueueReceive+0x122>
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d103      	bne.n	8002de0 <xQueueReceive+0x138>
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de0:	f001 fd28 	bl	8004834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002de4:	1d3a      	adds	r2, r7, #4
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fe4f 	bl	8003a90 <xTaskCheckForTimeOut>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d123      	bne.n	8002e40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfa:	f000 f917 	bl	800302c <prvIsQueueEmpty>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	3324      	adds	r3, #36	; 0x24
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fd75 	bl	80038fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e14:	f000 f8b8 	bl	8002f88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e18:	f000 fbaa 	bl	8003570 <xTaskResumeAll>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d189      	bne.n	8002d36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <xQueueReceive+0x1bc>)
 8002e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	e780      	b.n	8002d36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e36:	f000 f8a7 	bl	8002f88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e3a:	f000 fb99 	bl	8003570 <xTaskResumeAll>
 8002e3e:	e77a      	b.n	8002d36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e42:	f000 f8a1 	bl	8002f88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e46:	f000 fb93 	bl	8003570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e4c:	f000 f8ee 	bl	800302c <prvIsQueueEmpty>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f43f af6f 	beq.w	8002d36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3730      	adds	r7, #48	; 0x30
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000ed04 	.word	0xe000ed04

08002e68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d14d      	bne.n	8002f2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 ff5e 	bl	8003d54 <xTaskPriorityDisinherit>
 8002e98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e043      	b.n	8002f2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d119      	bne.n	8002edc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6858      	ldr	r0, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	f002 f92d 	bl	8005112 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d32b      	bcc.n	8002f2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	e026      	b.n	8002f2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68d8      	ldr	r0, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	f002 f913 	bl	8005112 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	425b      	negs	r3, r3
 8002f12:	441a      	add	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d105      	bne.n	8002f2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f32:	697b      	ldr	r3, [r7, #20]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	441a      	add	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d303      	bcc.n	8002f70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68d9      	ldr	r1, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6838      	ldr	r0, [r7, #0]
 8002f7c:	f002 f8c9 	bl	8005112 <memcpy>
	}
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f90:	f001 fc20 	bl	80047d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f9c:	e011      	b.n	8002fc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3324      	adds	r3, #36	; 0x24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fcf6 	bl	800399c <xTaskRemoveFromEventList>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fb6:	f000 fdcd 	bl	8003b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	dce9      	bgt.n	8002f9e <prvUnlockQueue+0x16>
 8002fca:	e000      	b.n	8002fce <prvUnlockQueue+0x46>
					break;
 8002fcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fd6:	f001 fc2d 	bl	8004834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fda:	f001 fbfb 	bl	80047d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fe6:	e011      	b.n	800300c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fcd1 	bl	800399c <xTaskRemoveFromEventList>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003000:	f000 fda8 	bl	8003b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	3b01      	subs	r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800300c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003010:	2b00      	cmp	r3, #0
 8003012:	dce9      	bgt.n	8002fe8 <prvUnlockQueue+0x60>
 8003014:	e000      	b.n	8003018 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003016:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003020:	f001 fc08 	bl	8004834 <vPortExitCritical>
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003034:	f001 fbce 	bl	80047d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003040:	2301      	movs	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e001      	b.n	800304a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800304a:	f001 fbf3 	bl	8004834 <vPortExitCritical>

	return xReturn;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003060:	f001 fbb8 	bl	80047d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	429a      	cmp	r2, r3
 800306e:	d102      	bne.n	8003076 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003070:	2301      	movs	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e001      	b.n	800307a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800307a:	f001 fbdb 	bl	8004834 <vPortExitCritical>

	return xReturn;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e014      	b.n	80030c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003098:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <vQueueAddToRegistry+0x50>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <vQueueAddToRegistry+0x50>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <vQueueAddToRegistry+0x50>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030ba:	e006      	b.n	80030ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3301      	adds	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b07      	cmp	r3, #7
 80030c6:	d9e7      	bls.n	8003098 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	200007e4 	.word	0x200007e4

080030dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030ec:	f001 fb72 	bl	80047d4 <vPortEnterCritical>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f6:	b25b      	sxtb	r3, r3
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d103      	bne.n	8003106 <vQueueWaitForMessageRestricted+0x2a>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310c:	b25b      	sxtb	r3, r3
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d103      	bne.n	800311c <vQueueWaitForMessageRestricted+0x40>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800311c:	f001 fb8a 	bl	8004834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fc07 	bl	8003944 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff ff26 	bl	8002f88 <prvUnlockQueue>
	}
 800313c:	bf00      	nop
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08e      	sub	sp, #56	; 0x38
 8003148:	af04      	add	r7, sp, #16
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	623b      	str	r3, [r7, #32]
}
 800316a:	bf00      	nop
 800316c:	e7fe      	b.n	800316c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <xTaskCreateStatic+0x46>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	61fb      	str	r3, [r7, #28]
}
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800318a:	235c      	movs	r3, #92	; 0x5c
 800318c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b5c      	cmp	r3, #92	; 0x5c
 8003192:	d00a      	beq.n	80031aa <xTaskCreateStatic+0x66>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	61bb      	str	r3, [r7, #24]
}
 80031a6:	bf00      	nop
 80031a8:	e7fe      	b.n	80031a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01e      	beq.n	80031f0 <xTaskCreateStatic+0xac>
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031ca:	2300      	movs	r3, #0
 80031cc:	9303      	str	r3, [sp, #12]
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f850 	bl	8003288 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ea:	f000 f8dd 	bl	80033a8 <prvAddNewTaskToReadyList>
 80031ee:	e001      	b.n	80031f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031f4:	697b      	ldr	r3, [r7, #20]
	}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b08c      	sub	sp, #48	; 0x30
 8003202:	af04      	add	r7, sp, #16
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4618      	mov	r0, r3
 8003214:	f001 fc00 	bl	8004a18 <pvPortMalloc>
 8003218:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00e      	beq.n	800323e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003220:	205c      	movs	r0, #92	; 0x5c
 8003222:	f001 fbf9 	bl	8004a18 <pvPortMalloc>
 8003226:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
 8003234:	e005      	b.n	8003242 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003236:	6978      	ldr	r0, [r7, #20]
 8003238:	f001 fcba 	bl	8004bb0 <vPortFree>
 800323c:	e001      	b.n	8003242 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	2300      	movs	r3, #0
 8003254:	9303      	str	r3, [sp, #12]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f80e 	bl	8003288 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800326c:	69f8      	ldr	r0, [r7, #28]
 800326e:	f000 f89b 	bl	80033a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003272:	2301      	movs	r3, #1
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e002      	b.n	800327e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800327e:	69bb      	ldr	r3, [r7, #24]
	}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	461a      	mov	r2, r3
 80032a0:	21a5      	movs	r1, #165	; 0xa5
 80032a2:	f001 feba 	bl	800501a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032b0:	3b01      	subs	r3, #1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	617b      	str	r3, [r7, #20]
}
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01f      	beq.n	8003326 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e012      	b.n	8003312 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	7819      	ldrb	r1, [r3, #0]
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	3334      	adds	r3, #52	; 0x34
 80032fc:	460a      	mov	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3301      	adds	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d9e9      	bls.n	80032ec <prvInitialiseNewTask+0x64>
 8003318:	e000      	b.n	800331c <prvInitialiseNewTask+0x94>
			{
				break;
 800331a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	e003      	b.n	800332e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2b37      	cmp	r3, #55	; 0x37
 8003332:	d901      	bls.n	8003338 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003334:	2337      	movs	r3, #55	; 0x37
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003342:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	2200      	movs	r2, #0
 8003348:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	3304      	adds	r3, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff f93e 	bl	80025d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	3318      	adds	r3, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f939 	bl	80025d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	2200      	movs	r2, #0
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	69b8      	ldr	r0, [r7, #24]
 8003388:	f001 f8f4 	bl	8004574 <pxPortInitialiseStack>
 800338c:	4602      	mov	r2, r0
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800339e:	bf00      	nop
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033b0:	f001 fa10 	bl	80047d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a2c      	ldr	r2, [pc, #176]	; (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033be:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033c6:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033cc:	4b27      	ldr	r3, [pc, #156]	; (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d110      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033d4:	f000 fbe2 	bl	8003b9c <prvInitialiseTaskLists>
 80033d8:	e00d      	b.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <prvAddNewTaskToReadyList+0xcc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d802      	bhi.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <prvAddNewTaskToReadyList+0xc8>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <prvAddNewTaskToReadyList+0xd0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <prvAddNewTaskToReadyList+0xd0>)
 80033fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <prvAddNewTaskToReadyList+0xd0>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <prvAddNewTaskToReadyList+0xd4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d903      	bls.n	800341c <prvAddNewTaskToReadyList+0x74>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	4a18      	ldr	r2, [pc, #96]	; (800347c <prvAddNewTaskToReadyList+0xd4>)
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4a15      	ldr	r2, [pc, #84]	; (8003480 <prvAddNewTaskToReadyList+0xd8>)
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f7ff f8d9 	bl	80025ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003438:	f001 f9fc 	bl	8004834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <prvAddNewTaskToReadyList+0xcc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <prvAddNewTaskToReadyList+0xc8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d207      	bcs.n	8003462 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <prvAddNewTaskToReadyList+0xdc>)
 8003454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000cf8 	.word	0x20000cf8
 8003470:	20000824 	.word	0x20000824
 8003474:	20000d04 	.word	0x20000d04
 8003478:	20000d14 	.word	0x20000d14
 800347c:	20000d00 	.word	0x20000d00
 8003480:	20000828 	.word	0x20000828
 8003484:	e000ed04 	.word	0xe000ed04

08003488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003496:	463a      	mov	r2, r7
 8003498:	1d39      	adds	r1, r7, #4
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f842 	bl	8002528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	9202      	str	r2, [sp, #8]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	460a      	mov	r2, r1
 80034b6:	4921      	ldr	r1, [pc, #132]	; (800353c <vTaskStartScheduler+0xb4>)
 80034b8:	4821      	ldr	r0, [pc, #132]	; (8003540 <vTaskStartScheduler+0xb8>)
 80034ba:	f7ff fe43 	bl	8003144 <xTaskCreateStatic>
 80034be:	4603      	mov	r3, r0
 80034c0:	4a20      	ldr	r2, [pc, #128]	; (8003544 <vTaskStartScheduler+0xbc>)
 80034c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <vTaskStartScheduler+0xbc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034cc:	2301      	movs	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e001      	b.n	80034d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034dc:	f000 fcfc 	bl	8003ed8 <xTimerCreateTimerTask>
 80034e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d116      	bne.n	8003516 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	613b      	str	r3, [r7, #16]
}
 80034fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <vTaskStartScheduler+0xc0>)
 80034fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <vTaskStartScheduler+0xc4>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <vTaskStartScheduler+0xc8>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003510:	f001 f8be 	bl	8004690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003514:	e00e      	b.n	8003534 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d10a      	bne.n	8003534 <vTaskStartScheduler+0xac>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60fb      	str	r3, [r7, #12]
}
 8003530:	bf00      	nop
 8003532:	e7fe      	b.n	8003532 <vTaskStartScheduler+0xaa>
}
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	08005d30 	.word	0x08005d30
 8003540:	08003b6d 	.word	0x08003b6d
 8003544:	20000d1c 	.word	0x20000d1c
 8003548:	20000d18 	.word	0x20000d18
 800354c:	20000d04 	.word	0x20000d04
 8003550:	20000cfc 	.word	0x20000cfc

08003554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <vTaskSuspendAll+0x18>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	4a03      	ldr	r2, [pc, #12]	; (800356c <vTaskSuspendAll+0x18>)
 8003560:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000d20 	.word	0x20000d20

08003570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800357e:	4b42      	ldr	r3, [pc, #264]	; (8003688 <xTaskResumeAll+0x118>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <xTaskResumeAll+0x2c>
	__asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	603b      	str	r3, [r7, #0]
}
 8003598:	bf00      	nop
 800359a:	e7fe      	b.n	800359a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800359c:	f001 f91a 	bl	80047d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035a0:	4b39      	ldr	r3, [pc, #228]	; (8003688 <xTaskResumeAll+0x118>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	4a38      	ldr	r2, [pc, #224]	; (8003688 <xTaskResumeAll+0x118>)
 80035a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <xTaskResumeAll+0x118>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d162      	bne.n	8003678 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <xTaskResumeAll+0x11c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d05e      	beq.n	8003678 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ba:	e02f      	b.n	800361c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <xTaskResumeAll+0x120>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3318      	adds	r3, #24
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff f86b 	bl	80026a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f866 	bl	80026a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <xTaskResumeAll+0x124>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d903      	bls.n	80035ec <xTaskResumeAll+0x7c>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <xTaskResumeAll+0x124>)
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <xTaskResumeAll+0x128>)
 80035fa:	441a      	add	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f7fe fff1 	bl	80025ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	4b23      	ldr	r3, [pc, #140]	; (800369c <xTaskResumeAll+0x12c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <xTaskResumeAll+0x130>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <xTaskResumeAll+0x120>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1cb      	bne.n	80035bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800362a:	f000 fb55 	bl	8003cd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <xTaskResumeAll+0x134>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800363a:	f000 f847 	bl	80036cc <xTaskIncrementTick>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <xTaskResumeAll+0x130>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3b01      	subs	r3, #1
 800364e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f1      	bne.n	800363a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <xTaskResumeAll+0x134>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <xTaskResumeAll+0x130>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003664:	2301      	movs	r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <xTaskResumeAll+0x138>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003678:	f001 f8dc 	bl	8004834 <vPortExitCritical>

	return xAlreadyYielded;
 800367c:	68bb      	ldr	r3, [r7, #8]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000d20 	.word	0x20000d20
 800368c:	20000cf8 	.word	0x20000cf8
 8003690:	20000cb8 	.word	0x20000cb8
 8003694:	20000d00 	.word	0x20000d00
 8003698:	20000828 	.word	0x20000828
 800369c:	20000824 	.word	0x20000824
 80036a0:	20000d0c 	.word	0x20000d0c
 80036a4:	20000d08 	.word	0x20000d08
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <xTaskGetTickCount+0x1c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036b8:	687b      	ldr	r3, [r7, #4]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000cfc 	.word	0x20000cfc

080036cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d6:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <xTaskIncrementTick+0x148>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 808f 	bne.w	80037fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036e0:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <xTaskIncrementTick+0x14c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036e8:	4a4b      	ldr	r2, [pc, #300]	; (8003818 <xTaskIncrementTick+0x14c>)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d120      	bne.n	8003736 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036f4:	4b49      	ldr	r3, [pc, #292]	; (800381c <xTaskIncrementTick+0x150>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <xTaskIncrementTick+0x48>
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	603b      	str	r3, [r7, #0]
}
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <xTaskIncrementTick+0x46>
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <xTaskIncrementTick+0x150>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	4b41      	ldr	r3, [pc, #260]	; (8003820 <xTaskIncrementTick+0x154>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3f      	ldr	r2, [pc, #252]	; (800381c <xTaskIncrementTick+0x150>)
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4a3f      	ldr	r2, [pc, #252]	; (8003820 <xTaskIncrementTick+0x154>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <xTaskIncrementTick+0x158>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	4a3d      	ldr	r2, [pc, #244]	; (8003824 <xTaskIncrementTick+0x158>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	f000 fad1 	bl	8003cd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003736:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <xTaskIncrementTick+0x15c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d349      	bcc.n	80037d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003740:	4b36      	ldr	r3, [pc, #216]	; (800381c <xTaskIncrementTick+0x150>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374a:	4b37      	ldr	r3, [pc, #220]	; (8003828 <xTaskIncrementTick+0x15c>)
 800374c:	f04f 32ff 	mov.w	r2, #4294967295
 8003750:	601a      	str	r2, [r3, #0]
					break;
 8003752:	e03f      	b.n	80037d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003754:	4b31      	ldr	r3, [pc, #196]	; (800381c <xTaskIncrementTick+0x150>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d203      	bcs.n	8003774 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800376c:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <xTaskIncrementTick+0x15c>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003772:	e02f      	b.n	80037d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3304      	adds	r3, #4
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe ff93 	bl	80026a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3318      	adds	r3, #24
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe ff8a 	bl	80026a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <xTaskIncrementTick+0x160>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d903      	bls.n	80037a4 <xTaskIncrementTick+0xd8>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	4a22      	ldr	r2, [pc, #136]	; (800382c <xTaskIncrementTick+0x160>)
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <xTaskIncrementTick+0x164>)
 80037b2:	441a      	add	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7fe ff15 	bl	80025ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <xTaskIncrementTick+0x168>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d3b8      	bcc.n	8003740 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037ce:	2301      	movs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d2:	e7b5      	b.n	8003740 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <xTaskIncrementTick+0x168>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	4915      	ldr	r1, [pc, #84]	; (8003830 <xTaskIncrementTick+0x164>)
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d901      	bls.n	80037f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <xTaskIncrementTick+0x16c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e004      	b.n	8003808 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <xTaskIncrementTick+0x170>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <xTaskIncrementTick+0x170>)
 8003806:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003808:	697b      	ldr	r3, [r7, #20]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000d20 	.word	0x20000d20
 8003818:	20000cfc 	.word	0x20000cfc
 800381c:	20000cb0 	.word	0x20000cb0
 8003820:	20000cb4 	.word	0x20000cb4
 8003824:	20000d10 	.word	0x20000d10
 8003828:	20000d18 	.word	0x20000d18
 800382c:	20000d00 	.word	0x20000d00
 8003830:	20000828 	.word	0x20000828
 8003834:	20000824 	.word	0x20000824
 8003838:	20000d0c 	.word	0x20000d0c
 800383c:	20000d08 	.word	0x20000d08

08003840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003846:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <vTaskSwitchContext+0xa8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800384e:	4b27      	ldr	r3, [pc, #156]	; (80038ec <vTaskSwitchContext+0xac>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003854:	e041      	b.n	80038da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003856:	4b25      	ldr	r3, [pc, #148]	; (80038ec <vTaskSwitchContext+0xac>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <vTaskSwitchContext+0xb0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e010      	b.n	8003886 <vTaskSwitchContext+0x46>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <vTaskSwitchContext+0x40>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	607b      	str	r3, [r7, #4]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <vTaskSwitchContext+0x3e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3b01      	subs	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	491b      	ldr	r1, [pc, #108]	; (80038f4 <vTaskSwitchContext+0xb4>)
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0e4      	beq.n	8003864 <vTaskSwitchContext+0x24>
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <vTaskSwitchContext+0xb4>)
 80038a6:	4413      	add	r3, r2
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3308      	adds	r3, #8
 80038bc:	429a      	cmp	r2, r3
 80038be:	d104      	bne.n	80038ca <vTaskSwitchContext+0x8a>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <vTaskSwitchContext+0xb8>)
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4a06      	ldr	r2, [pc, #24]	; (80038f0 <vTaskSwitchContext+0xb0>)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6013      	str	r3, [r2, #0]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000d20 	.word	0x20000d20
 80038ec:	20000d0c 	.word	0x20000d0c
 80038f0:	20000d00 	.word	0x20000d00
 80038f4:	20000828 	.word	0x20000828
 80038f8:	20000824 	.word	0x20000824

080038fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	60fb      	str	r3, [r7, #12]
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <vTaskPlaceOnEventList+0x44>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3318      	adds	r3, #24
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe fe81 	bl	8002632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003930:	2101      	movs	r1, #1
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	f000 fa7c 	bl	8003e30 <prvAddCurrentTaskToDelayedList>
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000824 	.word	0x20000824

08003944 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	617b      	str	r3, [r7, #20]
}
 8003968:	bf00      	nop
 800396a:	e7fe      	b.n	800396a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <vTaskPlaceOnEventListRestricted+0x54>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3318      	adds	r3, #24
 8003972:	4619      	mov	r1, r3
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7fe fe38 	bl	80025ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f000 fa51 	bl	8003e30 <prvAddCurrentTaskToDelayedList>
	}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000824 	.word	0x20000824

0800399c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60fb      	str	r3, [r7, #12]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	3318      	adds	r3, #24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fe69 	bl	80026a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <xTaskRemoveFromEventList+0xb0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11d      	bne.n	8003a16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3304      	adds	r3, #4
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe fe60 	bl	80026a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <xTaskRemoveFromEventList+0xb4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d903      	bls.n	80039f8 <xTaskRemoveFromEventList+0x5c>
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <xTaskRemoveFromEventList+0xb4>)
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <xTaskRemoveFromEventList+0xb8>)
 8003a06:	441a      	add	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7fe fdeb 	bl	80025ea <vListInsertEnd>
 8003a14:	e005      	b.n	8003a22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	3318      	adds	r3, #24
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	480e      	ldr	r0, [pc, #56]	; (8003a58 <xTaskRemoveFromEventList+0xbc>)
 8003a1e:	f7fe fde4 	bl	80025ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <xTaskRemoveFromEventList+0xc0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d905      	bls.n	8003a3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <xTaskRemoveFromEventList+0xc4>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e001      	b.n	8003a40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a40:	697b      	ldr	r3, [r7, #20]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000d20 	.word	0x20000d20
 8003a50:	20000d00 	.word	0x20000d00
 8003a54:	20000828 	.word	0x20000828
 8003a58:	20000cb8 	.word	0x20000cb8
 8003a5c:	20000824 	.word	0x20000824
 8003a60:	20000d0c 	.word	0x20000d0c

08003a64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <vTaskInternalSetTimeOutState+0x24>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <vTaskInternalSetTimeOutState+0x28>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	605a      	str	r2, [r3, #4]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	20000d10 	.word	0x20000d10
 8003a8c:	20000cfc 	.word	0x20000cfc

08003a90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	613b      	str	r3, [r7, #16]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	60fb      	str	r3, [r7, #12]
}
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ad2:	f000 fe7f 	bl	80047d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <xTaskCheckForTimeOut+0xbc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d102      	bne.n	8003af6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e023      	b.n	8003b3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <xTaskCheckForTimeOut+0xc0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d007      	beq.n	8003b12 <xTaskCheckForTimeOut+0x82>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e015      	b.n	8003b3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d20b      	bcs.n	8003b34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	1ad2      	subs	r2, r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff9b 	bl	8003a64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e004      	b.n	8003b3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b3e:	f000 fe79 	bl	8004834 <vPortExitCritical>

	return xReturn;
 8003b42:	69fb      	ldr	r3, [r7, #28]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000cfc 	.word	0x20000cfc
 8003b50:	20000d10 	.word	0x20000d10

08003b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <vTaskMissedYield+0x14>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	20000d0c 	.word	0x20000d0c

08003b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b74:	f000 f852 	bl	8003c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <prvIdleTask+0x28>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d9f9      	bls.n	8003b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <prvIdleTask+0x2c>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b90:	e7f0      	b.n	8003b74 <prvIdleTask+0x8>
 8003b92:	bf00      	nop
 8003b94:	20000828 	.word	0x20000828
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	e00c      	b.n	8003bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <prvInitialiseTaskLists+0x60>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fcea 	bl	8002590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b37      	cmp	r3, #55	; 0x37
 8003bc6:	d9ef      	bls.n	8003ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bc8:	480d      	ldr	r0, [pc, #52]	; (8003c00 <prvInitialiseTaskLists+0x64>)
 8003bca:	f7fe fce1 	bl	8002590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bce:	480d      	ldr	r0, [pc, #52]	; (8003c04 <prvInitialiseTaskLists+0x68>)
 8003bd0:	f7fe fcde 	bl	8002590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bd4:	480c      	ldr	r0, [pc, #48]	; (8003c08 <prvInitialiseTaskLists+0x6c>)
 8003bd6:	f7fe fcdb 	bl	8002590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bda:	480c      	ldr	r0, [pc, #48]	; (8003c0c <prvInitialiseTaskLists+0x70>)
 8003bdc:	f7fe fcd8 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003be0:	480b      	ldr	r0, [pc, #44]	; (8003c10 <prvInitialiseTaskLists+0x74>)
 8003be2:	f7fe fcd5 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <prvInitialiseTaskLists+0x78>)
 8003be8:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <prvInitialiseTaskLists+0x64>)
 8003bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <prvInitialiseTaskLists+0x7c>)
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <prvInitialiseTaskLists+0x68>)
 8003bf0:	601a      	str	r2, [r3, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000828 	.word	0x20000828
 8003c00:	20000c88 	.word	0x20000c88
 8003c04:	20000c9c 	.word	0x20000c9c
 8003c08:	20000cb8 	.word	0x20000cb8
 8003c0c:	20000ccc 	.word	0x20000ccc
 8003c10:	20000ce4 	.word	0x20000ce4
 8003c14:	20000cb0 	.word	0x20000cb0
 8003c18:	20000cb4 	.word	0x20000cb4

08003c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c22:	e019      	b.n	8003c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c24:	f000 fdd6 	bl	80047d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c28:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <prvCheckTasksWaitingTermination+0x50>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fd35 	bl	80026a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <prvCheckTasksWaitingTermination+0x54>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <prvCheckTasksWaitingTermination+0x54>)
 8003c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <prvCheckTasksWaitingTermination+0x58>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <prvCheckTasksWaitingTermination+0x58>)
 8003c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c4e:	f000 fdf1 	bl	8004834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f810 	bl	8003c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <prvCheckTasksWaitingTermination+0x58>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e1      	bne.n	8003c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000ccc 	.word	0x20000ccc
 8003c70:	20000cf8 	.word	0x20000cf8
 8003c74:	20000ce0 	.word	0x20000ce0

08003c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ff8e 	bl	8004bb0 <vPortFree>
				vPortFree( pxTCB );
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 ff8b 	bl	8004bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c9a:	e018      	b.n	8003cce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d103      	bne.n	8003cae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 ff82 	bl	8004bb0 <vPortFree>
	}
 8003cac:	e00f      	b.n	8003cce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d00a      	beq.n	8003cce <prvDeleteTCB+0x56>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	60fb      	str	r3, [r7, #12]
}
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <prvDeleteTCB+0x54>
	}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <prvResetNextTaskUnblockTime+0x38>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <prvResetNextTaskUnblockTime+0x3c>)
 8003cea:	f04f 32ff 	mov.w	r2, #4294967295
 8003cee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cf0:	e008      	b.n	8003d04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <prvResetNextTaskUnblockTime+0x38>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <prvResetNextTaskUnblockTime+0x3c>)
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20000cb0 	.word	0x20000cb0
 8003d14:	20000d18 	.word	0x20000d18

08003d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <xTaskGetSchedulerState+0x34>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d26:	2301      	movs	r3, #1
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	e008      	b.n	8003d3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <xTaskGetSchedulerState+0x38>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d34:	2302      	movs	r3, #2
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	e001      	b.n	8003d3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d3e:	687b      	ldr	r3, [r7, #4]
	}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	20000d04 	.word	0x20000d04
 8003d50:	20000d20 	.word	0x20000d20

08003d54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d056      	beq.n	8003e18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d6a:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <xTaskPriorityDisinherit+0xd0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d00a      	beq.n	8003d8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	60bb      	str	r3, [r7, #8]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d02c      	beq.n	8003e18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d128      	bne.n	8003e18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fc6a 	bl	80026a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <xTaskPriorityDisinherit+0xd4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d903      	bls.n	8003df8 <xTaskPriorityDisinherit+0xa4>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <xTaskPriorityDisinherit+0xd4>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <xTaskPriorityDisinherit+0xd8>)
 8003e06:	441a      	add	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f7fe fbeb 	bl	80025ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e18:	697b      	ldr	r3, [r7, #20]
	}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000824 	.word	0x20000824
 8003e28:	20000d00 	.word	0x20000d00
 8003e2c:	20000828 	.word	0x20000828

08003e30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e3a:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3304      	adds	r3, #4
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fc2c 	bl	80026a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d10a      	bne.n	8003e6a <prvAddCurrentTaskToDelayedList+0x3a>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4819      	ldr	r0, [pc, #100]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e64:	f7fe fbc1 	bl	80025ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e68:	e026      	b.n	8003eb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d209      	bcs.n	8003e96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fe fbcf 	bl	8002632 <vListInsert>
}
 8003e94:	e010      	b.n	8003eb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f7fe fbc5 	bl	8002632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d202      	bcs.n	8003eb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003eb2:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6013      	str	r3, [r2, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000cfc 	.word	0x20000cfc
 8003ec4:	20000824 	.word	0x20000824
 8003ec8:	20000ce4 	.word	0x20000ce4
 8003ecc:	20000cb4 	.word	0x20000cb4
 8003ed0:	20000cb0 	.word	0x20000cb0
 8003ed4:	20000d18 	.word	0x20000d18

08003ed8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ee2:	f000 fb07 	bl	80044f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <xTimerCreateTimerTask+0x80>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d021      	beq.n	8003f32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ef6:	1d3a      	adds	r2, r7, #4
 8003ef8:	f107 0108 	add.w	r1, r7, #8
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fb2b 	bl	800255c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	9202      	str	r2, [sp, #8]
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	2302      	movs	r3, #2
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2300      	movs	r3, #0
 8003f16:	460a      	mov	r2, r1
 8003f18:	4910      	ldr	r1, [pc, #64]	; (8003f5c <xTimerCreateTimerTask+0x84>)
 8003f1a:	4811      	ldr	r0, [pc, #68]	; (8003f60 <xTimerCreateTimerTask+0x88>)
 8003f1c:	f7ff f912 	bl	8003144 <xTaskCreateStatic>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <xTimerCreateTimerTask+0x8c>)
 8003f24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <xTimerCreateTimerTask+0x8c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	613b      	str	r3, [r7, #16]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f4e:	697b      	ldr	r3, [r7, #20]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000d54 	.word	0x20000d54
 8003f5c:	08005d38 	.word	0x08005d38
 8003f60:	0800409d 	.word	0x0800409d
 8003f64:	20000d58 	.word	0x20000d58

08003f68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	623b      	str	r3, [r7, #32]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f96:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <xTimerGenericCommand+0x98>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d02a      	beq.n	8003ff4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	dc18      	bgt.n	8003fe2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fb0:	f7ff feb2 	bl	8003d18 <xTaskGetSchedulerState>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d109      	bne.n	8003fce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <xTimerGenericCommand+0x98>)
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	f107 0110 	add.w	r1, r7, #16
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc6:	f7fe fcd5 	bl	8002974 <xQueueGenericSend>
 8003fca:	6278      	str	r0, [r7, #36]	; 0x24
 8003fcc:	e012      	b.n	8003ff4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <xTimerGenericCommand+0x98>)
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	f107 0110 	add.w	r1, r7, #16
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f7fe fccb 	bl	8002974 <xQueueGenericSend>
 8003fde:	6278      	str	r0, [r7, #36]	; 0x24
 8003fe0:	e008      	b.n	8003ff4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <xTimerGenericCommand+0x98>)
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	f107 0110 	add.w	r1, r7, #16
 8003fea:	2300      	movs	r3, #0
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	f7fe fdbf 	bl	8002b70 <xQueueGenericSendFromISR>
 8003ff2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3728      	adds	r7, #40	; 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000d54 	.word	0x20000d54

08004004 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400e:	4b22      	ldr	r3, [pc, #136]	; (8004098 <prvProcessExpiredTimer+0x94>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3304      	adds	r3, #4
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe fb41 	bl	80026a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d022      	beq.n	8004076 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	18d1      	adds	r1, r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	f000 f8d1 	bl	80041e4 <prvInsertTimerInActiveList>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01f      	beq.n	8004088 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004048:	2300      	movs	r3, #0
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	2100      	movs	r1, #0
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff88 	bl	8003f68 <xTimerGenericCommand>
 8004058:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d113      	bne.n	8004088 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60fb      	str	r3, [r7, #12]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	6978      	ldr	r0, [r7, #20]
 800408e:	4798      	blx	r3
}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000d4c 	.word	0x20000d4c

0800409c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a4:	f107 0308 	add.w	r3, r7, #8
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f857 	bl	800415c <prvGetNextExpireTime>
 80040ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4619      	mov	r1, r3
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f803 	bl	80040c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040ba:	f000 f8d5 	bl	8004268 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040be:	e7f1      	b.n	80040a4 <prvTimerTask+0x8>

080040c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040ca:	f7ff fa43 	bl	8003554 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ce:	f107 0308 	add.w	r3, r7, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f866 	bl	80041a4 <prvSampleTimeNow>
 80040d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d130      	bne.n	8004142 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <prvProcessTimerOrBlockTask+0x3c>
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d806      	bhi.n	80040fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040ee:	f7ff fa3f 	bl	8003570 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff85 	bl	8004004 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040fa:	e024      	b.n	8004146 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004102:	4b13      	ldr	r3, [pc, #76]	; (8004150 <prvProcessTimerOrBlockTask+0x90>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <prvProcessTimerOrBlockTask+0x50>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <prvProcessTimerOrBlockTask+0x52>
 8004110:	2300      	movs	r3, #0
 8004112:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <prvProcessTimerOrBlockTask+0x94>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	f7fe ffdb 	bl	80030dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004126:	f7ff fa23 	bl	8003570 <xTaskResumeAll>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <prvProcessTimerOrBlockTask+0x98>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
}
 8004140:	e001      	b.n	8004146 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004142:	f7ff fa15 	bl	8003570 <xTaskResumeAll>
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000d50 	.word	0x20000d50
 8004154:	20000d54 	.word	0x20000d54
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <prvGetNextExpireTime+0x44>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <prvGetNextExpireTime+0x16>
 800416e:	2201      	movs	r2, #1
 8004170:	e000      	b.n	8004174 <prvGetNextExpireTime+0x18>
 8004172:	2200      	movs	r2, #0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <prvGetNextExpireTime+0x44>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e001      	b.n	8004190 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004190:	68fb      	ldr	r3, [r7, #12]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000d4c 	.word	0x20000d4c

080041a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041ac:	f7ff fa7e 	bl	80036ac <xTaskGetTickCount>
 80041b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <prvSampleTimeNow+0x3c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d205      	bcs.n	80041c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041bc:	f000 f936 	bl	800442c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e002      	b.n	80041ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041ce:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <prvSampleTimeNow+0x3c>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000d5c 	.word	0x20000d5c

080041e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d812      	bhi.n	8004230 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	1ad2      	subs	r2, r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e01b      	b.n	8004256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <prvInsertTimerInActiveList+0x7c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7fe fa02 	bl	8002632 <vListInsert>
 800422e:	e012      	b.n	8004256 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d206      	bcs.n	8004246 <prvInsertTimerInActiveList+0x62>
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004240:	2301      	movs	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e007      	b.n	8004256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <prvInsertTimerInActiveList+0x80>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3304      	adds	r3, #4
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f7fe f9ee 	bl	8002632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004256:	697b      	ldr	r3, [r7, #20]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000d50 	.word	0x20000d50
 8004264:	20000d4c 	.word	0x20000d4c

08004268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08e      	sub	sp, #56	; 0x38
 800426c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800426e:	e0ca      	b.n	8004406 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	da18      	bge.n	80042a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	3304      	adds	r3, #4
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	61fb      	str	r3, [r7, #28]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429e:	6850      	ldr	r0, [r2, #4]
 80042a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a2:	6892      	ldr	r2, [r2, #8]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f2c0 80ab 	blt.w	8004406 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	3304      	adds	r3, #4
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe f9ef 	bl	80026a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042c6:	463b      	mov	r3, r7
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff6b 	bl	80041a4 <prvSampleTimeNow>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	f200 8096 	bhi.w	8004404 <prvProcessReceivedCommands+0x19c>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <prvProcessReceivedCommands+0x78>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004309 	.word	0x08004309
 80042ec:	0800437d 	.word	0x0800437d
 80042f0:	08004391 	.word	0x08004391
 80042f4:	080043db 	.word	0x080043db
 80042f8:	08004309 	.word	0x08004309
 80042fc:	08004309 	.word	0x08004309
 8004300:	0800437d 	.word	0x0800437d
 8004304:	08004391 	.word	0x08004391
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	b2da      	uxtb	r2, r3
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	18d1      	adds	r1, r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004328:	f7ff ff5c 	bl	80041e4 <prvInsertTimerInActiveList>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d069      	beq.n	8004406 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004338:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d05e      	beq.n	8004406 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	441a      	add	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	2100      	movs	r1, #0
 8004358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435a:	f7ff fe05 	bl	8003f68 <xTimerGenericCommand>
 800435e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d14f      	bne.n	8004406 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	61bb      	str	r3, [r7, #24]
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800438e:	e03a      	b.n	8004406 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	b2da      	uxtb	r2, r3
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	617b      	str	r3, [r7, #20]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	18d1      	adds	r1, r2, r3
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d4:	f7ff ff06 	bl	80041e4 <prvInsertTimerInActiveList>
					break;
 80043d8:	e015      	b.n	8004406 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80043e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ea:	f000 fbe1 	bl	8004bb0 <vPortFree>
 80043ee:	e00a      	b.n	8004406 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004402:	e000      	b.n	8004406 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004404:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <prvProcessReceivedCommands+0x1c0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1d39      	adds	r1, r7, #4
 800440c:	2200      	movs	r2, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fc4a 	bl	8002ca8 <xQueueReceive>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	f47f af2a 	bne.w	8004270 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	3730      	adds	r7, #48	; 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000d54 	.word	0x20000d54

0800442c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004432:	e048      	b.n	80044c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004434:	4b2d      	ldr	r3, [pc, #180]	; (80044ec <prvSwitchTimerLists+0xc0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443e:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <prvSwitchTimerLists+0xc0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3304      	adds	r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe f929 	bl	80026a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02e      	beq.n	80044c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d90e      	bls.n	8004498 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004486:	4b19      	ldr	r3, [pc, #100]	; (80044ec <prvSwitchTimerLists+0xc0>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe f8ce 	bl	8002632 <vListInsert>
 8004496:	e016      	b.n	80044c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004498:	2300      	movs	r3, #0
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2300      	movs	r3, #0
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	2100      	movs	r1, #0
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff fd60 	bl	8003f68 <xTimerGenericCommand>
 80044a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	603b      	str	r3, [r7, #0]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044c6:	4b09      	ldr	r3, [pc, #36]	; (80044ec <prvSwitchTimerLists+0xc0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1b1      	bne.n	8004434 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <prvSwitchTimerLists+0xc0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <prvSwitchTimerLists+0xc4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <prvSwitchTimerLists+0xc0>)
 80044dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044de:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <prvSwitchTimerLists+0xc4>)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6013      	str	r3, [r2, #0]
}
 80044e4:	bf00      	nop
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000d4c 	.word	0x20000d4c
 80044f0:	20000d50 	.word	0x20000d50

080044f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044fa:	f000 f96b 	bl	80047d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <prvCheckForValidListAndQueue+0x60>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d120      	bne.n	8004548 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004506:	4814      	ldr	r0, [pc, #80]	; (8004558 <prvCheckForValidListAndQueue+0x64>)
 8004508:	f7fe f842 	bl	8002590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800450c:	4813      	ldr	r0, [pc, #76]	; (800455c <prvCheckForValidListAndQueue+0x68>)
 800450e:	f7fe f83f 	bl	8002590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <prvCheckForValidListAndQueue+0x6c>)
 8004514:	4a10      	ldr	r2, [pc, #64]	; (8004558 <prvCheckForValidListAndQueue+0x64>)
 8004516:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004518:	4b12      	ldr	r3, [pc, #72]	; (8004564 <prvCheckForValidListAndQueue+0x70>)
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <prvCheckForValidListAndQueue+0x68>)
 800451c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800451e:	2300      	movs	r3, #0
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <prvCheckForValidListAndQueue+0x74>)
 8004524:	4a11      	ldr	r2, [pc, #68]	; (800456c <prvCheckForValidListAndQueue+0x78>)
 8004526:	2110      	movs	r1, #16
 8004528:	200a      	movs	r0, #10
 800452a:	f7fe f94d 	bl	80027c8 <xQueueGenericCreateStatic>
 800452e:	4603      	mov	r3, r0
 8004530:	4a08      	ldr	r2, [pc, #32]	; (8004554 <prvCheckForValidListAndQueue+0x60>)
 8004532:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <prvCheckForValidListAndQueue+0x60>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <prvCheckForValidListAndQueue+0x60>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	490b      	ldr	r1, [pc, #44]	; (8004570 <prvCheckForValidListAndQueue+0x7c>)
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fda0 	bl	8003088 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004548:	f000 f974 	bl	8004834 <vPortExitCritical>
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000d54 	.word	0x20000d54
 8004558:	20000d24 	.word	0x20000d24
 800455c:	20000d38 	.word	0x20000d38
 8004560:	20000d4c 	.word	0x20000d4c
 8004564:	20000d50 	.word	0x20000d50
 8004568:	20000e00 	.word	0x20000e00
 800456c:	20000d60 	.word	0x20000d60
 8004570:	08005d40 	.word	0x08005d40

08004574 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b04      	subs	r3, #4
 8004584:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800458c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b04      	subs	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b04      	subs	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045a4:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <pxPortInitialiseStack+0x64>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b14      	subs	r3, #20
 80045ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b04      	subs	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f06f 0202 	mvn.w	r2, #2
 80045c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b20      	subs	r3, #32
 80045c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	080045dd 	.word	0x080045dd

080045dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <prvTaskExitError+0x54>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d00a      	beq.n	8004606 <prvTaskExitError+0x2a>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <prvTaskExitError+0x28>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60bb      	str	r3, [r7, #8]
}
 8004618:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800461a:	bf00      	nop
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0fc      	beq.n	800461c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	2000000c 	.word	0x2000000c
	...

08004640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <pxCurrentTCBConst2>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	f380 8809 	msr	PSP, r0
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	4770      	bx	lr
 800465c:	f3af 8000 	nop.w

08004660 <pxCurrentTCBConst2>:
 8004660:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004668:	4808      	ldr	r0, [pc, #32]	; (800468c <prvPortStartFirstTask+0x24>)
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	f380 8808 	msr	MSP, r0
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8814 	msr	CONTROL, r0
 800467a:	b662      	cpsie	i
 800467c:	b661      	cpsie	f
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	df00      	svc	0
 8004688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800468a:	bf00      	nop
 800468c:	e000ed08 	.word	0xe000ed08

08004690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004696:	4b46      	ldr	r3, [pc, #280]	; (80047b0 <xPortStartScheduler+0x120>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a46      	ldr	r2, [pc, #280]	; (80047b4 <xPortStartScheduler+0x124>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10a      	bne.n	80046b6 <xPortStartScheduler+0x26>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	613b      	str	r3, [r7, #16]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <xPortStartScheduler+0x120>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3f      	ldr	r2, [pc, #252]	; (80047b8 <xPortStartScheduler+0x128>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10a      	bne.n	80046d6 <xPortStartScheduler+0x46>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60fb      	str	r3, [r7, #12]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <xPortStartScheduler+0x12c>)
 80046d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	22ff      	movs	r2, #255	; 0xff
 80046e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <xPortStartScheduler+0x130>)
 80046fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <xPortStartScheduler+0x134>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004704:	e009      	b.n	800471a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <xPortStartScheduler+0x134>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3b01      	subs	r3, #1
 800470c:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <xPortStartScheduler+0x134>)
 800470e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	b2db      	uxtb	r3, r3
 8004718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b80      	cmp	r3, #128	; 0x80
 8004724:	d0ef      	beq.n	8004706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004726:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <xPortStartScheduler+0x134>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1c3 0307 	rsb	r3, r3, #7
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00a      	beq.n	8004748 <xPortStartScheduler+0xb8>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60bb      	str	r3, [r7, #8]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <xPortStartScheduler+0x134>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <xPortStartScheduler+0x134>)
 8004750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <xPortStartScheduler+0x134>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <xPortStartScheduler+0x134>)
 800475c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004766:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <xPortStartScheduler+0x138>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a17      	ldr	r2, [pc, #92]	; (80047c8 <xPortStartScheduler+0x138>)
 800476c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <xPortStartScheduler+0x138>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <xPortStartScheduler+0x138>)
 8004778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800477c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800477e:	f000 f8dd 	bl	800493c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <xPortStartScheduler+0x13c>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004788:	f000 f8fc 	bl	8004984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800478c:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <xPortStartScheduler+0x140>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <xPortStartScheduler+0x140>)
 8004792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004798:	f7ff ff66 	bl	8004668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800479c:	f7ff f850 	bl	8003840 <vTaskSwitchContext>
	prvTaskExitError();
 80047a0:	f7ff ff1c 	bl	80045dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	e000ed00 	.word	0xe000ed00
 80047b4:	410fc271 	.word	0x410fc271
 80047b8:	410fc270 	.word	0x410fc270
 80047bc:	e000e400 	.word	0xe000e400
 80047c0:	20000e50 	.word	0x20000e50
 80047c4:	20000e54 	.word	0x20000e54
 80047c8:	e000ed20 	.word	0xe000ed20
 80047cc:	2000000c 	.word	0x2000000c
 80047d0:	e000ef34 	.word	0xe000ef34

080047d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
}
 80047ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <vPortEnterCritical+0x58>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <vPortEnterCritical+0x58>)
 80047f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <vPortEnterCritical+0x58>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10f      	bne.n	8004820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <vPortEnterCritical+0x5c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <vPortEnterCritical+0x4c>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	603b      	str	r3, [r7, #0]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <vPortEnterCritical+0x4a>
	}
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	2000000c 	.word	0x2000000c
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <vPortExitCritical+0x50>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <vPortExitCritical+0x24>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	607b      	str	r3, [r7, #4]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <vPortExitCritical+0x50>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <vPortExitCritical+0x50>)
 8004860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <vPortExitCritical+0x50>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <vPortExitCritical+0x42>
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f383 8811 	msr	BASEPRI, r3
}
 8004874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	2000000c 	.word	0x2000000c
	...

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f01e 0f10 	tst.w	lr, #16
 80048a0:	bf08      	it	eq
 80048a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	6010      	str	r0, [r2, #0]
 80048ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048b4:	f380 8811 	msr	BASEPRI, r0
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f7fe ffbe 	bl	8003840 <vTaskSwitchContext>
 80048c4:	f04f 0000 	mov.w	r0, #0
 80048c8:	f380 8811 	msr	BASEPRI, r0
 80048cc:	bc09      	pop	{r0, r3}
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d6:	f01e 0f10 	tst.w	lr, #16
 80048da:	bf08      	it	eq
 80048dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048e0:	f380 8809 	msr	PSP, r0
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst>:
 80048f0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	607b      	str	r3, [r7, #4]
}
 8004910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004912:	f7fe fedb 	bl	80036cc <xTaskIncrementTick>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <xPortSysTickHandler+0x40>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	2300      	movs	r3, #0
 8004926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f383 8811 	msr	BASEPRI, r3
}
 800492e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <vPortSetupTimerInterrupt+0x38>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <vPortSetupTimerInterrupt+0x3c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0a      	ldr	r2, [pc, #40]	; (800497c <vPortSetupTimerInterrupt+0x40>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	099b      	lsrs	r3, r3, #6
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <vPortSetupTimerInterrupt+0x44>)
 800495a:	3b01      	subs	r3, #1
 800495c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <vPortSetupTimerInterrupt+0x34>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e010 	.word	0xe000e010
 8004974:	e000e018 	.word	0xe000e018
 8004978:	20000000 	.word	0x20000000
 800497c:	10624dd3 	.word	0x10624dd3
 8004980:	e000e014 	.word	0xe000e014

08004984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004994 <vPortEnableVFP+0x10>
 8004988:	6801      	ldr	r1, [r0, #0]
 800498a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800498e:	6001      	str	r1, [r0, #0]
 8004990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004992:	bf00      	nop
 8004994:	e000ed88 	.word	0xe000ed88

08004998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800499e:	f3ef 8305 	mrs	r3, IPSR
 80049a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	d914      	bls.n	80049d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <vPortValidateInterruptPriority+0x70>)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <vPortValidateInterruptPriority+0x74>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	7afa      	ldrb	r2, [r7, #11]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d20a      	bcs.n	80049d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <vPortValidateInterruptPriority+0x78>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <vPortValidateInterruptPriority+0x7c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d90a      	bls.n	80049fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	603b      	str	r3, [r7, #0]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <vPortValidateInterruptPriority+0x60>
	}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	e000e3f0 	.word	0xe000e3f0
 8004a0c:	20000e50 	.word	0x20000e50
 8004a10:	e000ed0c 	.word	0xe000ed0c
 8004a14:	20000e54 	.word	0x20000e54

08004a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a24:	f7fe fd96 	bl	8003554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a28:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <pvPortMalloc+0x180>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a30:	f000 f920 	bl	8004c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a34:	4b59      	ldr	r3, [pc, #356]	; (8004b9c <pvPortMalloc+0x184>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 8093 	bne.w	8004b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01d      	beq.n	8004a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a48:	2208      	movs	r2, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d014      	beq.n	8004a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	3308      	adds	r3, #8
 8004a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <pvPortMalloc+0x6c>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d06e      	beq.n	8004b68 <pvPortMalloc+0x150>
 8004a8a:	4b45      	ldr	r3, [pc, #276]	; (8004ba0 <pvPortMalloc+0x188>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d869      	bhi.n	8004b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a94:	4b43      	ldr	r3, [pc, #268]	; (8004ba4 <pvPortMalloc+0x18c>)
 8004a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <pvPortMalloc+0x18c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9e:	e004      	b.n	8004aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d903      	bls.n	8004abc <pvPortMalloc+0xa4>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f1      	bne.n	8004aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <pvPortMalloc+0x180>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d050      	beq.n	8004b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2208      	movs	r2, #8
 8004acc:	4413      	add	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d91f      	bls.n	8004b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <pvPortMalloc+0xf8>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	613b      	str	r3, [r7, #16]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b22:	69b8      	ldr	r0, [r7, #24]
 8004b24:	f000 f908 	bl	8004d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <pvPortMalloc+0x190>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d203      	bcs.n	8004b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <pvPortMalloc+0x188>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <pvPortMalloc+0x190>)
 8004b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <pvPortMalloc+0x184>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <pvPortMalloc+0x194>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a11      	ldr	r2, [pc, #68]	; (8004bac <pvPortMalloc+0x194>)
 8004b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b68:	f7fe fd02 	bl	8003570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <pvPortMalloc+0x174>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60fb      	str	r3, [r7, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <pvPortMalloc+0x172>
	return pvReturn;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20004a60 	.word	0x20004a60
 8004b9c:	20004a74 	.word	0x20004a74
 8004ba0:	20004a64 	.word	0x20004a64
 8004ba4:	20004a58 	.word	0x20004a58
 8004ba8:	20004a68 	.word	0x20004a68
 8004bac:	20004a6c 	.word	0x20004a6c

08004bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04d      	beq.n	8004c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4413      	add	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <vPortFree+0xb8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <vPortFree+0x44>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <vPortFree+0x62>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	60bb      	str	r3, [r7, #8]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <vPortFree+0xb8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01e      	beq.n	8004c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d11a      	bne.n	8004c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <vPortFree+0xb8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c38:	f7fe fc8c 	bl	8003554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <vPortFree+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <vPortFree+0xbc>)
 8004c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c4a:	6938      	ldr	r0, [r7, #16]
 8004c4c:	f000 f874 	bl	8004d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <vPortFree+0xc0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4a06      	ldr	r2, [pc, #24]	; (8004c70 <vPortFree+0xc0>)
 8004c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c5a:	f7fe fc89 	bl	8003570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c5e:	bf00      	nop
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20004a74 	.word	0x20004a74
 8004c6c:	20004a64 	.word	0x20004a64
 8004c70:	20004a70 	.word	0x20004a70

08004c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <prvHeapInit+0xac>)
 8004c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3307      	adds	r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <prvHeapInit+0xac>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <prvHeapInit+0xb0>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <prvHeapInit+0xb0>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <prvHeapInit+0xb4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <prvHeapInit+0xb4>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <prvHeapInit+0xb8>)
 8004d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <prvHeapInit+0xbc>)
 8004d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <prvHeapInit+0xc0>)
 8004d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000e58 	.word	0x20000e58
 8004d24:	20004a58 	.word	0x20004a58
 8004d28:	20004a60 	.word	0x20004a60
 8004d2c:	20004a68 	.word	0x20004a68
 8004d30:	20004a64 	.word	0x20004a64
 8004d34:	20004a74 	.word	0x20004a74

08004d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <prvInsertBlockIntoFreeList+0xac>)
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e002      	b.n	8004d4c <prvInsertBlockIntoFreeList+0x14>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d8f7      	bhi.n	8004d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d108      	bne.n	8004d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d118      	bne.n	8004dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d00d      	beq.n	8004db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	441a      	add	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e008      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e003      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d002      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20004a58 	.word	0x20004a58
 8004de8:	20004a60 	.word	0x20004a60

08004dec <std>:
 8004dec:	2300      	movs	r3, #0
 8004dee:	b510      	push	{r4, lr}
 8004df0:	4604      	mov	r4, r0
 8004df2:	e9c0 3300 	strd	r3, r3, [r0]
 8004df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dfa:	6083      	str	r3, [r0, #8]
 8004dfc:	8181      	strh	r1, [r0, #12]
 8004dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8004e00:	81c2      	strh	r2, [r0, #14]
 8004e02:	6183      	str	r3, [r0, #24]
 8004e04:	4619      	mov	r1, r3
 8004e06:	2208      	movs	r2, #8
 8004e08:	305c      	adds	r0, #92	; 0x5c
 8004e0a:	f000 f906 	bl	800501a <memset>
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <std+0x58>)
 8004e10:	6263      	str	r3, [r4, #36]	; 0x24
 8004e12:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <std+0x5c>)
 8004e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <std+0x60>)
 8004e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <std+0x64>)
 8004e1c:	6323      	str	r3, [r4, #48]	; 0x30
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <std+0x68>)
 8004e20:	6224      	str	r4, [r4, #32]
 8004e22:	429c      	cmp	r4, r3
 8004e24:	d006      	beq.n	8004e34 <std+0x48>
 8004e26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e2a:	4294      	cmp	r4, r2
 8004e2c:	d002      	beq.n	8004e34 <std+0x48>
 8004e2e:	33d0      	adds	r3, #208	; 0xd0
 8004e30:	429c      	cmp	r4, r3
 8004e32:	d105      	bne.n	8004e40 <std+0x54>
 8004e34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3c:	f000 b966 	b.w	800510c <__retarget_lock_init_recursive>
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	08004f95 	.word	0x08004f95
 8004e48:	08004fb7 	.word	0x08004fb7
 8004e4c:	08004fef 	.word	0x08004fef
 8004e50:	08005013 	.word	0x08005013
 8004e54:	20004a78 	.word	0x20004a78

08004e58 <stdio_exit_handler>:
 8004e58:	4a02      	ldr	r2, [pc, #8]	; (8004e64 <stdio_exit_handler+0xc>)
 8004e5a:	4903      	ldr	r1, [pc, #12]	; (8004e68 <stdio_exit_handler+0x10>)
 8004e5c:	4803      	ldr	r0, [pc, #12]	; (8004e6c <stdio_exit_handler+0x14>)
 8004e5e:	f000 b869 	b.w	8004f34 <_fwalk_sglue>
 8004e62:	bf00      	nop
 8004e64:	20000010 	.word	0x20000010
 8004e68:	080059d5 	.word	0x080059d5
 8004e6c:	2000001c 	.word	0x2000001c

08004e70 <cleanup_stdio>:
 8004e70:	6841      	ldr	r1, [r0, #4]
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <cleanup_stdio+0x34>)
 8004e74:	4299      	cmp	r1, r3
 8004e76:	b510      	push	{r4, lr}
 8004e78:	4604      	mov	r4, r0
 8004e7a:	d001      	beq.n	8004e80 <cleanup_stdio+0x10>
 8004e7c:	f000 fdaa 	bl	80059d4 <_fflush_r>
 8004e80:	68a1      	ldr	r1, [r4, #8]
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <cleanup_stdio+0x38>)
 8004e84:	4299      	cmp	r1, r3
 8004e86:	d002      	beq.n	8004e8e <cleanup_stdio+0x1e>
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 fda3 	bl	80059d4 <_fflush_r>
 8004e8e:	68e1      	ldr	r1, [r4, #12]
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <cleanup_stdio+0x3c>)
 8004e92:	4299      	cmp	r1, r3
 8004e94:	d004      	beq.n	8004ea0 <cleanup_stdio+0x30>
 8004e96:	4620      	mov	r0, r4
 8004e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e9c:	f000 bd9a 	b.w	80059d4 <_fflush_r>
 8004ea0:	bd10      	pop	{r4, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20004a78 	.word	0x20004a78
 8004ea8:	20004ae0 	.word	0x20004ae0
 8004eac:	20004b48 	.word	0x20004b48

08004eb0 <global_stdio_init.part.0>:
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <global_stdio_init.part.0+0x30>)
 8004eb4:	4c0b      	ldr	r4, [pc, #44]	; (8004ee4 <global_stdio_init.part.0+0x34>)
 8004eb6:	4a0c      	ldr	r2, [pc, #48]	; (8004ee8 <global_stdio_init.part.0+0x38>)
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	4620      	mov	r0, r4
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	f7ff ff94 	bl	8004dec <std>
 8004ec4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2109      	movs	r1, #9
 8004ecc:	f7ff ff8e 	bl	8004dec <std>
 8004ed0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eda:	2112      	movs	r1, #18
 8004edc:	f7ff bf86 	b.w	8004dec <std>
 8004ee0:	20004bb0 	.word	0x20004bb0
 8004ee4:	20004a78 	.word	0x20004a78
 8004ee8:	08004e59 	.word	0x08004e59

08004eec <__sfp_lock_acquire>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__sfp_lock_acquire+0x8>)
 8004eee:	f000 b90e 	b.w	800510e <__retarget_lock_acquire_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	20004bb9 	.word	0x20004bb9

08004ef8 <__sfp_lock_release>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <__sfp_lock_release+0x8>)
 8004efa:	f000 b909 	b.w	8005110 <__retarget_lock_release_recursive>
 8004efe:	bf00      	nop
 8004f00:	20004bb9 	.word	0x20004bb9

08004f04 <__sinit>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4604      	mov	r4, r0
 8004f08:	f7ff fff0 	bl	8004eec <__sfp_lock_acquire>
 8004f0c:	6a23      	ldr	r3, [r4, #32]
 8004f0e:	b11b      	cbz	r3, 8004f18 <__sinit+0x14>
 8004f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f14:	f7ff bff0 	b.w	8004ef8 <__sfp_lock_release>
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <__sinit+0x28>)
 8004f1a:	6223      	str	r3, [r4, #32]
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <__sinit+0x2c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f5      	bne.n	8004f10 <__sinit+0xc>
 8004f24:	f7ff ffc4 	bl	8004eb0 <global_stdio_init.part.0>
 8004f28:	e7f2      	b.n	8004f10 <__sinit+0xc>
 8004f2a:	bf00      	nop
 8004f2c:	08004e71 	.word	0x08004e71
 8004f30:	20004bb0 	.word	0x20004bb0

08004f34 <_fwalk_sglue>:
 8004f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f38:	4607      	mov	r7, r0
 8004f3a:	4688      	mov	r8, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	2600      	movs	r6, #0
 8004f40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f44:	f1b9 0901 	subs.w	r9, r9, #1
 8004f48:	d505      	bpl.n	8004f56 <_fwalk_sglue+0x22>
 8004f4a:	6824      	ldr	r4, [r4, #0]
 8004f4c:	2c00      	cmp	r4, #0
 8004f4e:	d1f7      	bne.n	8004f40 <_fwalk_sglue+0xc>
 8004f50:	4630      	mov	r0, r6
 8004f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f56:	89ab      	ldrh	r3, [r5, #12]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d907      	bls.n	8004f6c <_fwalk_sglue+0x38>
 8004f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f60:	3301      	adds	r3, #1
 8004f62:	d003      	beq.n	8004f6c <_fwalk_sglue+0x38>
 8004f64:	4629      	mov	r1, r5
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	4306      	orrs	r6, r0
 8004f6c:	3568      	adds	r5, #104	; 0x68
 8004f6e:	e7e9      	b.n	8004f44 <_fwalk_sglue+0x10>

08004f70 <iprintf>:
 8004f70:	b40f      	push	{r0, r1, r2, r3}
 8004f72:	b507      	push	{r0, r1, r2, lr}
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <iprintf+0x20>)
 8004f76:	ab04      	add	r3, sp, #16
 8004f78:	6808      	ldr	r0, [r1, #0]
 8004f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f7e:	6881      	ldr	r1, [r0, #8]
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	f000 f9f7 	bl	8005374 <_vfiprintf_r>
 8004f86:	b003      	add	sp, #12
 8004f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr
 8004f90:	20000068 	.word	0x20000068

08004f94 <__sread>:
 8004f94:	b510      	push	{r4, lr}
 8004f96:	460c      	mov	r4, r1
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	f000 f868 	bl	8005070 <_read_r>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	bfab      	itete	ge
 8004fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fa8:	181b      	addge	r3, r3, r0
 8004faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fae:	bfac      	ite	ge
 8004fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fb2:	81a3      	strhlt	r3, [r4, #12]
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <__swrite>:
 8004fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fba:	461f      	mov	r7, r3
 8004fbc:	898b      	ldrh	r3, [r1, #12]
 8004fbe:	05db      	lsls	r3, r3, #23
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	d505      	bpl.n	8004fd4 <__swrite+0x1e>
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	2302      	movs	r3, #2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f000 f83c 	bl	800504c <_lseek_r>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fea:	f000 b853 	b.w	8005094 <_write_r>

08004fee <__sseek>:
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff6:	f000 f829 	bl	800504c <_lseek_r>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	bf15      	itete	ne
 8005000:	6560      	strne	r0, [r4, #84]	; 0x54
 8005002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800500a:	81a3      	strheq	r3, [r4, #12]
 800500c:	bf18      	it	ne
 800500e:	81a3      	strhne	r3, [r4, #12]
 8005010:	bd10      	pop	{r4, pc}

08005012 <__sclose>:
 8005012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005016:	f000 b809 	b.w	800502c <_close_r>

0800501a <memset>:
 800501a:	4402      	add	r2, r0
 800501c:	4603      	mov	r3, r0
 800501e:	4293      	cmp	r3, r2
 8005020:	d100      	bne.n	8005024 <memset+0xa>
 8005022:	4770      	bx	lr
 8005024:	f803 1b01 	strb.w	r1, [r3], #1
 8005028:	e7f9      	b.n	800501e <memset+0x4>
	...

0800502c <_close_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d06      	ldr	r5, [pc, #24]	; (8005048 <_close_r+0x1c>)
 8005030:	2300      	movs	r3, #0
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fb fd4b 	bl	8000ad2 <_close>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_close_r+0x1a>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_close_r+0x1a>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20004bb4 	.word	0x20004bb4

0800504c <_lseek_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d07      	ldr	r5, [pc, #28]	; (800506c <_lseek_r+0x20>)
 8005050:	4604      	mov	r4, r0
 8005052:	4608      	mov	r0, r1
 8005054:	4611      	mov	r1, r2
 8005056:	2200      	movs	r2, #0
 8005058:	602a      	str	r2, [r5, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	f7fb fd60 	bl	8000b20 <_lseek>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_lseek_r+0x1e>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_lseek_r+0x1e>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20004bb4 	.word	0x20004bb4

08005070 <_read_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4d07      	ldr	r5, [pc, #28]	; (8005090 <_read_r+0x20>)
 8005074:	4604      	mov	r4, r0
 8005076:	4608      	mov	r0, r1
 8005078:	4611      	mov	r1, r2
 800507a:	2200      	movs	r2, #0
 800507c:	602a      	str	r2, [r5, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	f7fb fcee 	bl	8000a60 <_read>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_read_r+0x1e>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	b103      	cbz	r3, 800508e <_read_r+0x1e>
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	20004bb4 	.word	0x20004bb4

08005094 <_write_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d07      	ldr	r5, [pc, #28]	; (80050b4 <_write_r+0x20>)
 8005098:	4604      	mov	r4, r0
 800509a:	4608      	mov	r0, r1
 800509c:	4611      	mov	r1, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	602a      	str	r2, [r5, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f7fb fcf9 	bl	8000a9a <_write>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_write_r+0x1e>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_write_r+0x1e>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20004bb4 	.word	0x20004bb4

080050b8 <__errno>:
 80050b8:	4b01      	ldr	r3, [pc, #4]	; (80050c0 <__errno+0x8>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000068 	.word	0x20000068

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	; (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	; (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	; (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	; (8005108 <__libc_init_array+0x44>)
 80050d8:	f000 fdce 	bl	8005c78 <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	08005da0 	.word	0x08005da0
 8005100:	08005da0 	.word	0x08005da0
 8005104:	08005da0 	.word	0x08005da0
 8005108:	08005da4 	.word	0x08005da4

0800510c <__retarget_lock_init_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_acquire_recursive>:
 800510e:	4770      	bx	lr

08005110 <__retarget_lock_release_recursive>:
 8005110:	4770      	bx	lr

08005112 <memcpy>:
 8005112:	440a      	add	r2, r1
 8005114:	4291      	cmp	r1, r2
 8005116:	f100 33ff 	add.w	r3, r0, #4294967295
 800511a:	d100      	bne.n	800511e <memcpy+0xc>
 800511c:	4770      	bx	lr
 800511e:	b510      	push	{r4, lr}
 8005120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005128:	4291      	cmp	r1, r2
 800512a:	d1f9      	bne.n	8005120 <memcpy+0xe>
 800512c:	bd10      	pop	{r4, pc}
	...

08005130 <_free_r>:
 8005130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005132:	2900      	cmp	r1, #0
 8005134:	d044      	beq.n	80051c0 <_free_r+0x90>
 8005136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800513a:	9001      	str	r0, [sp, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f1a1 0404 	sub.w	r4, r1, #4
 8005142:	bfb8      	it	lt
 8005144:	18e4      	addlt	r4, r4, r3
 8005146:	f000 f8df 	bl	8005308 <__malloc_lock>
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <_free_r+0x94>)
 800514c:	9801      	ldr	r0, [sp, #4]
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	b933      	cbnz	r3, 8005160 <_free_r+0x30>
 8005152:	6063      	str	r3, [r4, #4]
 8005154:	6014      	str	r4, [r2, #0]
 8005156:	b003      	add	sp, #12
 8005158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800515c:	f000 b8da 	b.w	8005314 <__malloc_unlock>
 8005160:	42a3      	cmp	r3, r4
 8005162:	d908      	bls.n	8005176 <_free_r+0x46>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1961      	adds	r1, r4, r5
 8005168:	428b      	cmp	r3, r1
 800516a:	bf01      	itttt	eq
 800516c:	6819      	ldreq	r1, [r3, #0]
 800516e:	685b      	ldreq	r3, [r3, #4]
 8005170:	1949      	addeq	r1, r1, r5
 8005172:	6021      	streq	r1, [r4, #0]
 8005174:	e7ed      	b.n	8005152 <_free_r+0x22>
 8005176:	461a      	mov	r2, r3
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	b10b      	cbz	r3, 8005180 <_free_r+0x50>
 800517c:	42a3      	cmp	r3, r4
 800517e:	d9fa      	bls.n	8005176 <_free_r+0x46>
 8005180:	6811      	ldr	r1, [r2, #0]
 8005182:	1855      	adds	r5, r2, r1
 8005184:	42a5      	cmp	r5, r4
 8005186:	d10b      	bne.n	80051a0 <_free_r+0x70>
 8005188:	6824      	ldr	r4, [r4, #0]
 800518a:	4421      	add	r1, r4
 800518c:	1854      	adds	r4, r2, r1
 800518e:	42a3      	cmp	r3, r4
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	d1e0      	bne.n	8005156 <_free_r+0x26>
 8005194:	681c      	ldr	r4, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	6053      	str	r3, [r2, #4]
 800519a:	440c      	add	r4, r1
 800519c:	6014      	str	r4, [r2, #0]
 800519e:	e7da      	b.n	8005156 <_free_r+0x26>
 80051a0:	d902      	bls.n	80051a8 <_free_r+0x78>
 80051a2:	230c      	movs	r3, #12
 80051a4:	6003      	str	r3, [r0, #0]
 80051a6:	e7d6      	b.n	8005156 <_free_r+0x26>
 80051a8:	6825      	ldr	r5, [r4, #0]
 80051aa:	1961      	adds	r1, r4, r5
 80051ac:	428b      	cmp	r3, r1
 80051ae:	bf04      	itt	eq
 80051b0:	6819      	ldreq	r1, [r3, #0]
 80051b2:	685b      	ldreq	r3, [r3, #4]
 80051b4:	6063      	str	r3, [r4, #4]
 80051b6:	bf04      	itt	eq
 80051b8:	1949      	addeq	r1, r1, r5
 80051ba:	6021      	streq	r1, [r4, #0]
 80051bc:	6054      	str	r4, [r2, #4]
 80051be:	e7ca      	b.n	8005156 <_free_r+0x26>
 80051c0:	b003      	add	sp, #12
 80051c2:	bd30      	pop	{r4, r5, pc}
 80051c4:	20004bbc 	.word	0x20004bbc

080051c8 <sbrk_aligned>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4e0e      	ldr	r6, [pc, #56]	; (8005204 <sbrk_aligned+0x3c>)
 80051cc:	460c      	mov	r4, r1
 80051ce:	6831      	ldr	r1, [r6, #0]
 80051d0:	4605      	mov	r5, r0
 80051d2:	b911      	cbnz	r1, 80051da <sbrk_aligned+0x12>
 80051d4:	f000 fcbc 	bl	8005b50 <_sbrk_r>
 80051d8:	6030      	str	r0, [r6, #0]
 80051da:	4621      	mov	r1, r4
 80051dc:	4628      	mov	r0, r5
 80051de:	f000 fcb7 	bl	8005b50 <_sbrk_r>
 80051e2:	1c43      	adds	r3, r0, #1
 80051e4:	d00a      	beq.n	80051fc <sbrk_aligned+0x34>
 80051e6:	1cc4      	adds	r4, r0, #3
 80051e8:	f024 0403 	bic.w	r4, r4, #3
 80051ec:	42a0      	cmp	r0, r4
 80051ee:	d007      	beq.n	8005200 <sbrk_aligned+0x38>
 80051f0:	1a21      	subs	r1, r4, r0
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 fcac 	bl	8005b50 <_sbrk_r>
 80051f8:	3001      	adds	r0, #1
 80051fa:	d101      	bne.n	8005200 <sbrk_aligned+0x38>
 80051fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005200:	4620      	mov	r0, r4
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	20004bc0 	.word	0x20004bc0

08005208 <_malloc_r>:
 8005208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800520c:	1ccd      	adds	r5, r1, #3
 800520e:	f025 0503 	bic.w	r5, r5, #3
 8005212:	3508      	adds	r5, #8
 8005214:	2d0c      	cmp	r5, #12
 8005216:	bf38      	it	cc
 8005218:	250c      	movcc	r5, #12
 800521a:	2d00      	cmp	r5, #0
 800521c:	4607      	mov	r7, r0
 800521e:	db01      	blt.n	8005224 <_malloc_r+0x1c>
 8005220:	42a9      	cmp	r1, r5
 8005222:	d905      	bls.n	8005230 <_malloc_r+0x28>
 8005224:	230c      	movs	r3, #12
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	2600      	movs	r6, #0
 800522a:	4630      	mov	r0, r6
 800522c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005304 <_malloc_r+0xfc>
 8005234:	f000 f868 	bl	8005308 <__malloc_lock>
 8005238:	f8d8 3000 	ldr.w	r3, [r8]
 800523c:	461c      	mov	r4, r3
 800523e:	bb5c      	cbnz	r4, 8005298 <_malloc_r+0x90>
 8005240:	4629      	mov	r1, r5
 8005242:	4638      	mov	r0, r7
 8005244:	f7ff ffc0 	bl	80051c8 <sbrk_aligned>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	4604      	mov	r4, r0
 800524c:	d155      	bne.n	80052fa <_malloc_r+0xf2>
 800524e:	f8d8 4000 	ldr.w	r4, [r8]
 8005252:	4626      	mov	r6, r4
 8005254:	2e00      	cmp	r6, #0
 8005256:	d145      	bne.n	80052e4 <_malloc_r+0xdc>
 8005258:	2c00      	cmp	r4, #0
 800525a:	d048      	beq.n	80052ee <_malloc_r+0xe6>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	4631      	mov	r1, r6
 8005260:	4638      	mov	r0, r7
 8005262:	eb04 0903 	add.w	r9, r4, r3
 8005266:	f000 fc73 	bl	8005b50 <_sbrk_r>
 800526a:	4581      	cmp	r9, r0
 800526c:	d13f      	bne.n	80052ee <_malloc_r+0xe6>
 800526e:	6821      	ldr	r1, [r4, #0]
 8005270:	1a6d      	subs	r5, r5, r1
 8005272:	4629      	mov	r1, r5
 8005274:	4638      	mov	r0, r7
 8005276:	f7ff ffa7 	bl	80051c8 <sbrk_aligned>
 800527a:	3001      	adds	r0, #1
 800527c:	d037      	beq.n	80052ee <_malloc_r+0xe6>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	442b      	add	r3, r5
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	f8d8 3000 	ldr.w	r3, [r8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d038      	beq.n	80052fe <_malloc_r+0xf6>
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	42a2      	cmp	r2, r4
 8005290:	d12b      	bne.n	80052ea <_malloc_r+0xe2>
 8005292:	2200      	movs	r2, #0
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	e00f      	b.n	80052b8 <_malloc_r+0xb0>
 8005298:	6822      	ldr	r2, [r4, #0]
 800529a:	1b52      	subs	r2, r2, r5
 800529c:	d41f      	bmi.n	80052de <_malloc_r+0xd6>
 800529e:	2a0b      	cmp	r2, #11
 80052a0:	d917      	bls.n	80052d2 <_malloc_r+0xca>
 80052a2:	1961      	adds	r1, r4, r5
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	6025      	str	r5, [r4, #0]
 80052a8:	bf18      	it	ne
 80052aa:	6059      	strne	r1, [r3, #4]
 80052ac:	6863      	ldr	r3, [r4, #4]
 80052ae:	bf08      	it	eq
 80052b0:	f8c8 1000 	streq.w	r1, [r8]
 80052b4:	5162      	str	r2, [r4, r5]
 80052b6:	604b      	str	r3, [r1, #4]
 80052b8:	4638      	mov	r0, r7
 80052ba:	f104 060b 	add.w	r6, r4, #11
 80052be:	f000 f829 	bl	8005314 <__malloc_unlock>
 80052c2:	f026 0607 	bic.w	r6, r6, #7
 80052c6:	1d23      	adds	r3, r4, #4
 80052c8:	1af2      	subs	r2, r6, r3
 80052ca:	d0ae      	beq.n	800522a <_malloc_r+0x22>
 80052cc:	1b9b      	subs	r3, r3, r6
 80052ce:	50a3      	str	r3, [r4, r2]
 80052d0:	e7ab      	b.n	800522a <_malloc_r+0x22>
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	6862      	ldr	r2, [r4, #4]
 80052d6:	d1dd      	bne.n	8005294 <_malloc_r+0x8c>
 80052d8:	f8c8 2000 	str.w	r2, [r8]
 80052dc:	e7ec      	b.n	80052b8 <_malloc_r+0xb0>
 80052de:	4623      	mov	r3, r4
 80052e0:	6864      	ldr	r4, [r4, #4]
 80052e2:	e7ac      	b.n	800523e <_malloc_r+0x36>
 80052e4:	4634      	mov	r4, r6
 80052e6:	6876      	ldr	r6, [r6, #4]
 80052e8:	e7b4      	b.n	8005254 <_malloc_r+0x4c>
 80052ea:	4613      	mov	r3, r2
 80052ec:	e7cc      	b.n	8005288 <_malloc_r+0x80>
 80052ee:	230c      	movs	r3, #12
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4638      	mov	r0, r7
 80052f4:	f000 f80e 	bl	8005314 <__malloc_unlock>
 80052f8:	e797      	b.n	800522a <_malloc_r+0x22>
 80052fa:	6025      	str	r5, [r4, #0]
 80052fc:	e7dc      	b.n	80052b8 <_malloc_r+0xb0>
 80052fe:	605b      	str	r3, [r3, #4]
 8005300:	deff      	udf	#255	; 0xff
 8005302:	bf00      	nop
 8005304:	20004bbc 	.word	0x20004bbc

08005308 <__malloc_lock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_lock+0x8>)
 800530a:	f7ff bf00 	b.w	800510e <__retarget_lock_acquire_recursive>
 800530e:	bf00      	nop
 8005310:	20004bb8 	.word	0x20004bb8

08005314 <__malloc_unlock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_unlock+0x8>)
 8005316:	f7ff befb 	b.w	8005110 <__retarget_lock_release_recursive>
 800531a:	bf00      	nop
 800531c:	20004bb8 	.word	0x20004bb8

08005320 <__sfputc_r>:
 8005320:	6893      	ldr	r3, [r2, #8]
 8005322:	3b01      	subs	r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	b410      	push	{r4}
 8005328:	6093      	str	r3, [r2, #8]
 800532a:	da08      	bge.n	800533e <__sfputc_r+0x1e>
 800532c:	6994      	ldr	r4, [r2, #24]
 800532e:	42a3      	cmp	r3, r4
 8005330:	db01      	blt.n	8005336 <__sfputc_r+0x16>
 8005332:	290a      	cmp	r1, #10
 8005334:	d103      	bne.n	800533e <__sfputc_r+0x1e>
 8005336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800533a:	f000 bb73 	b.w	8005a24 <__swbuf_r>
 800533e:	6813      	ldr	r3, [r2, #0]
 8005340:	1c58      	adds	r0, r3, #1
 8005342:	6010      	str	r0, [r2, #0]
 8005344:	7019      	strb	r1, [r3, #0]
 8005346:	4608      	mov	r0, r1
 8005348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800534c:	4770      	bx	lr

0800534e <__sfputs_r>:
 800534e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005350:	4606      	mov	r6, r0
 8005352:	460f      	mov	r7, r1
 8005354:	4614      	mov	r4, r2
 8005356:	18d5      	adds	r5, r2, r3
 8005358:	42ac      	cmp	r4, r5
 800535a:	d101      	bne.n	8005360 <__sfputs_r+0x12>
 800535c:	2000      	movs	r0, #0
 800535e:	e007      	b.n	8005370 <__sfputs_r+0x22>
 8005360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005364:	463a      	mov	r2, r7
 8005366:	4630      	mov	r0, r6
 8005368:	f7ff ffda 	bl	8005320 <__sfputc_r>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d1f3      	bne.n	8005358 <__sfputs_r+0xa>
 8005370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005374 <_vfiprintf_r>:
 8005374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	460d      	mov	r5, r1
 800537a:	b09d      	sub	sp, #116	; 0x74
 800537c:	4614      	mov	r4, r2
 800537e:	4698      	mov	r8, r3
 8005380:	4606      	mov	r6, r0
 8005382:	b118      	cbz	r0, 800538c <_vfiprintf_r+0x18>
 8005384:	6a03      	ldr	r3, [r0, #32]
 8005386:	b90b      	cbnz	r3, 800538c <_vfiprintf_r+0x18>
 8005388:	f7ff fdbc 	bl	8004f04 <__sinit>
 800538c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800538e:	07d9      	lsls	r1, r3, #31
 8005390:	d405      	bmi.n	800539e <_vfiprintf_r+0x2a>
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	059a      	lsls	r2, r3, #22
 8005396:	d402      	bmi.n	800539e <_vfiprintf_r+0x2a>
 8005398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800539a:	f7ff feb8 	bl	800510e <__retarget_lock_acquire_recursive>
 800539e:	89ab      	ldrh	r3, [r5, #12]
 80053a0:	071b      	lsls	r3, r3, #28
 80053a2:	d501      	bpl.n	80053a8 <_vfiprintf_r+0x34>
 80053a4:	692b      	ldr	r3, [r5, #16]
 80053a6:	b99b      	cbnz	r3, 80053d0 <_vfiprintf_r+0x5c>
 80053a8:	4629      	mov	r1, r5
 80053aa:	4630      	mov	r0, r6
 80053ac:	f000 fb78 	bl	8005aa0 <__swsetup_r>
 80053b0:	b170      	cbz	r0, 80053d0 <_vfiprintf_r+0x5c>
 80053b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b4:	07dc      	lsls	r4, r3, #31
 80053b6:	d504      	bpl.n	80053c2 <_vfiprintf_r+0x4e>
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	b01d      	add	sp, #116	; 0x74
 80053be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c2:	89ab      	ldrh	r3, [r5, #12]
 80053c4:	0598      	lsls	r0, r3, #22
 80053c6:	d4f7      	bmi.n	80053b8 <_vfiprintf_r+0x44>
 80053c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ca:	f7ff fea1 	bl	8005110 <__retarget_lock_release_recursive>
 80053ce:	e7f3      	b.n	80053b8 <_vfiprintf_r+0x44>
 80053d0:	2300      	movs	r3, #0
 80053d2:	9309      	str	r3, [sp, #36]	; 0x24
 80053d4:	2320      	movs	r3, #32
 80053d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053da:	f8cd 800c 	str.w	r8, [sp, #12]
 80053de:	2330      	movs	r3, #48	; 0x30
 80053e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005594 <_vfiprintf_r+0x220>
 80053e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053e8:	f04f 0901 	mov.w	r9, #1
 80053ec:	4623      	mov	r3, r4
 80053ee:	469a      	mov	sl, r3
 80053f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f4:	b10a      	cbz	r2, 80053fa <_vfiprintf_r+0x86>
 80053f6:	2a25      	cmp	r2, #37	; 0x25
 80053f8:	d1f9      	bne.n	80053ee <_vfiprintf_r+0x7a>
 80053fa:	ebba 0b04 	subs.w	fp, sl, r4
 80053fe:	d00b      	beq.n	8005418 <_vfiprintf_r+0xa4>
 8005400:	465b      	mov	r3, fp
 8005402:	4622      	mov	r2, r4
 8005404:	4629      	mov	r1, r5
 8005406:	4630      	mov	r0, r6
 8005408:	f7ff ffa1 	bl	800534e <__sfputs_r>
 800540c:	3001      	adds	r0, #1
 800540e:	f000 80a9 	beq.w	8005564 <_vfiprintf_r+0x1f0>
 8005412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005414:	445a      	add	r2, fp
 8005416:	9209      	str	r2, [sp, #36]	; 0x24
 8005418:	f89a 3000 	ldrb.w	r3, [sl]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a1 	beq.w	8005564 <_vfiprintf_r+0x1f0>
 8005422:	2300      	movs	r3, #0
 8005424:	f04f 32ff 	mov.w	r2, #4294967295
 8005428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800542c:	f10a 0a01 	add.w	sl, sl, #1
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	9307      	str	r3, [sp, #28]
 8005434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005438:	931a      	str	r3, [sp, #104]	; 0x68
 800543a:	4654      	mov	r4, sl
 800543c:	2205      	movs	r2, #5
 800543e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005442:	4854      	ldr	r0, [pc, #336]	; (8005594 <_vfiprintf_r+0x220>)
 8005444:	f7fa fecc 	bl	80001e0 <memchr>
 8005448:	9a04      	ldr	r2, [sp, #16]
 800544a:	b9d8      	cbnz	r0, 8005484 <_vfiprintf_r+0x110>
 800544c:	06d1      	lsls	r1, r2, #27
 800544e:	bf44      	itt	mi
 8005450:	2320      	movmi	r3, #32
 8005452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005456:	0713      	lsls	r3, r2, #28
 8005458:	bf44      	itt	mi
 800545a:	232b      	movmi	r3, #43	; 0x2b
 800545c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005460:	f89a 3000 	ldrb.w	r3, [sl]
 8005464:	2b2a      	cmp	r3, #42	; 0x2a
 8005466:	d015      	beq.n	8005494 <_vfiprintf_r+0x120>
 8005468:	9a07      	ldr	r2, [sp, #28]
 800546a:	4654      	mov	r4, sl
 800546c:	2000      	movs	r0, #0
 800546e:	f04f 0c0a 	mov.w	ip, #10
 8005472:	4621      	mov	r1, r4
 8005474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005478:	3b30      	subs	r3, #48	; 0x30
 800547a:	2b09      	cmp	r3, #9
 800547c:	d94d      	bls.n	800551a <_vfiprintf_r+0x1a6>
 800547e:	b1b0      	cbz	r0, 80054ae <_vfiprintf_r+0x13a>
 8005480:	9207      	str	r2, [sp, #28]
 8005482:	e014      	b.n	80054ae <_vfiprintf_r+0x13a>
 8005484:	eba0 0308 	sub.w	r3, r0, r8
 8005488:	fa09 f303 	lsl.w	r3, r9, r3
 800548c:	4313      	orrs	r3, r2
 800548e:	9304      	str	r3, [sp, #16]
 8005490:	46a2      	mov	sl, r4
 8005492:	e7d2      	b.n	800543a <_vfiprintf_r+0xc6>
 8005494:	9b03      	ldr	r3, [sp, #12]
 8005496:	1d19      	adds	r1, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	9103      	str	r1, [sp, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	bfbb      	ittet	lt
 80054a0:	425b      	neglt	r3, r3
 80054a2:	f042 0202 	orrlt.w	r2, r2, #2
 80054a6:	9307      	strge	r3, [sp, #28]
 80054a8:	9307      	strlt	r3, [sp, #28]
 80054aa:	bfb8      	it	lt
 80054ac:	9204      	strlt	r2, [sp, #16]
 80054ae:	7823      	ldrb	r3, [r4, #0]
 80054b0:	2b2e      	cmp	r3, #46	; 0x2e
 80054b2:	d10c      	bne.n	80054ce <_vfiprintf_r+0x15a>
 80054b4:	7863      	ldrb	r3, [r4, #1]
 80054b6:	2b2a      	cmp	r3, #42	; 0x2a
 80054b8:	d134      	bne.n	8005524 <_vfiprintf_r+0x1b0>
 80054ba:	9b03      	ldr	r3, [sp, #12]
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	9203      	str	r2, [sp, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bfb8      	it	lt
 80054c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80054ca:	3402      	adds	r4, #2
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80055a4 <_vfiprintf_r+0x230>
 80054d2:	7821      	ldrb	r1, [r4, #0]
 80054d4:	2203      	movs	r2, #3
 80054d6:	4650      	mov	r0, sl
 80054d8:	f7fa fe82 	bl	80001e0 <memchr>
 80054dc:	b138      	cbz	r0, 80054ee <_vfiprintf_r+0x17a>
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	eba0 000a 	sub.w	r0, r0, sl
 80054e4:	2240      	movs	r2, #64	; 0x40
 80054e6:	4082      	lsls	r2, r0
 80054e8:	4313      	orrs	r3, r2
 80054ea:	3401      	adds	r4, #1
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f2:	4829      	ldr	r0, [pc, #164]	; (8005598 <_vfiprintf_r+0x224>)
 80054f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054f8:	2206      	movs	r2, #6
 80054fa:	f7fa fe71 	bl	80001e0 <memchr>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d03f      	beq.n	8005582 <_vfiprintf_r+0x20e>
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <_vfiprintf_r+0x228>)
 8005504:	bb1b      	cbnz	r3, 800554e <_vfiprintf_r+0x1da>
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	3307      	adds	r3, #7
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	3308      	adds	r3, #8
 8005510:	9303      	str	r3, [sp, #12]
 8005512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005514:	443b      	add	r3, r7
 8005516:	9309      	str	r3, [sp, #36]	; 0x24
 8005518:	e768      	b.n	80053ec <_vfiprintf_r+0x78>
 800551a:	fb0c 3202 	mla	r2, ip, r2, r3
 800551e:	460c      	mov	r4, r1
 8005520:	2001      	movs	r0, #1
 8005522:	e7a6      	b.n	8005472 <_vfiprintf_r+0xfe>
 8005524:	2300      	movs	r3, #0
 8005526:	3401      	adds	r4, #1
 8005528:	9305      	str	r3, [sp, #20]
 800552a:	4619      	mov	r1, r3
 800552c:	f04f 0c0a 	mov.w	ip, #10
 8005530:	4620      	mov	r0, r4
 8005532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005536:	3a30      	subs	r2, #48	; 0x30
 8005538:	2a09      	cmp	r2, #9
 800553a:	d903      	bls.n	8005544 <_vfiprintf_r+0x1d0>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0c6      	beq.n	80054ce <_vfiprintf_r+0x15a>
 8005540:	9105      	str	r1, [sp, #20]
 8005542:	e7c4      	b.n	80054ce <_vfiprintf_r+0x15a>
 8005544:	fb0c 2101 	mla	r1, ip, r1, r2
 8005548:	4604      	mov	r4, r0
 800554a:	2301      	movs	r3, #1
 800554c:	e7f0      	b.n	8005530 <_vfiprintf_r+0x1bc>
 800554e:	ab03      	add	r3, sp, #12
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	462a      	mov	r2, r5
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <_vfiprintf_r+0x22c>)
 8005556:	a904      	add	r1, sp, #16
 8005558:	4630      	mov	r0, r6
 800555a:	f3af 8000 	nop.w
 800555e:	4607      	mov	r7, r0
 8005560:	1c78      	adds	r0, r7, #1
 8005562:	d1d6      	bne.n	8005512 <_vfiprintf_r+0x19e>
 8005564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005566:	07d9      	lsls	r1, r3, #31
 8005568:	d405      	bmi.n	8005576 <_vfiprintf_r+0x202>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	059a      	lsls	r2, r3, #22
 800556e:	d402      	bmi.n	8005576 <_vfiprintf_r+0x202>
 8005570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005572:	f7ff fdcd 	bl	8005110 <__retarget_lock_release_recursive>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	065b      	lsls	r3, r3, #25
 800557a:	f53f af1d 	bmi.w	80053b8 <_vfiprintf_r+0x44>
 800557e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005580:	e71c      	b.n	80053bc <_vfiprintf_r+0x48>
 8005582:	ab03      	add	r3, sp, #12
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	462a      	mov	r2, r5
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <_vfiprintf_r+0x22c>)
 800558a:	a904      	add	r1, sp, #16
 800558c:	4630      	mov	r0, r6
 800558e:	f000 f879 	bl	8005684 <_printf_i>
 8005592:	e7e4      	b.n	800555e <_vfiprintf_r+0x1ea>
 8005594:	08005d64 	.word	0x08005d64
 8005598:	08005d6e 	.word	0x08005d6e
 800559c:	00000000 	.word	0x00000000
 80055a0:	0800534f 	.word	0x0800534f
 80055a4:	08005d6a 	.word	0x08005d6a

080055a8 <_printf_common>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4616      	mov	r6, r2
 80055ae:	4699      	mov	r9, r3
 80055b0:	688a      	ldr	r2, [r1, #8]
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bfb8      	it	lt
 80055bc:	4613      	movlt	r3, r2
 80055be:	6033      	str	r3, [r6, #0]
 80055c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c4:	4607      	mov	r7, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	b10a      	cbz	r2, 80055ce <_printf_common+0x26>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	0699      	lsls	r1, r3, #26
 80055d2:	bf42      	ittt	mi
 80055d4:	6833      	ldrmi	r3, [r6, #0]
 80055d6:	3302      	addmi	r3, #2
 80055d8:	6033      	strmi	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	f015 0506 	ands.w	r5, r5, #6
 80055e0:	d106      	bne.n	80055f0 <_printf_common+0x48>
 80055e2:	f104 0a19 	add.w	sl, r4, #25
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dc26      	bgt.n	800563e <_printf_common+0x96>
 80055f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f4:	1e13      	subs	r3, r2, #0
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	0692      	lsls	r2, r2, #26
 80055fe:	d42b      	bmi.n	8005658 <_printf_common+0xb0>
 8005600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005604:	4649      	mov	r1, r9
 8005606:	4638      	mov	r0, r7
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d01e      	beq.n	800564c <_printf_common+0xa4>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	6922      	ldr	r2, [r4, #16]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	2b04      	cmp	r3, #4
 8005618:	bf02      	ittt	eq
 800561a:	68e5      	ldreq	r5, [r4, #12]
 800561c:	6833      	ldreq	r3, [r6, #0]
 800561e:	1aed      	subeq	r5, r5, r3
 8005620:	68a3      	ldr	r3, [r4, #8]
 8005622:	bf0c      	ite	eq
 8005624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005628:	2500      	movne	r5, #0
 800562a:	4293      	cmp	r3, r2
 800562c:	bfc4      	itt	gt
 800562e:	1a9b      	subgt	r3, r3, r2
 8005630:	18ed      	addgt	r5, r5, r3
 8005632:	2600      	movs	r6, #0
 8005634:	341a      	adds	r4, #26
 8005636:	42b5      	cmp	r5, r6
 8005638:	d11a      	bne.n	8005670 <_printf_common+0xc8>
 800563a:	2000      	movs	r0, #0
 800563c:	e008      	b.n	8005650 <_printf_common+0xa8>
 800563e:	2301      	movs	r3, #1
 8005640:	4652      	mov	r2, sl
 8005642:	4649      	mov	r1, r9
 8005644:	4638      	mov	r0, r7
 8005646:	47c0      	blx	r8
 8005648:	3001      	adds	r0, #1
 800564a:	d103      	bne.n	8005654 <_printf_common+0xac>
 800564c:	f04f 30ff 	mov.w	r0, #4294967295
 8005650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005654:	3501      	adds	r5, #1
 8005656:	e7c6      	b.n	80055e6 <_printf_common+0x3e>
 8005658:	18e1      	adds	r1, r4, r3
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	2030      	movs	r0, #48	; 0x30
 800565e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005662:	4422      	add	r2, r4
 8005664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800566c:	3302      	adds	r3, #2
 800566e:	e7c7      	b.n	8005600 <_printf_common+0x58>
 8005670:	2301      	movs	r3, #1
 8005672:	4622      	mov	r2, r4
 8005674:	4649      	mov	r1, r9
 8005676:	4638      	mov	r0, r7
 8005678:	47c0      	blx	r8
 800567a:	3001      	adds	r0, #1
 800567c:	d0e6      	beq.n	800564c <_printf_common+0xa4>
 800567e:	3601      	adds	r6, #1
 8005680:	e7d9      	b.n	8005636 <_printf_common+0x8e>
	...

08005684 <_printf_i>:
 8005684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	7e0f      	ldrb	r7, [r1, #24]
 800568a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800568c:	2f78      	cmp	r7, #120	; 0x78
 800568e:	4691      	mov	r9, r2
 8005690:	4680      	mov	r8, r0
 8005692:	460c      	mov	r4, r1
 8005694:	469a      	mov	sl, r3
 8005696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800569a:	d807      	bhi.n	80056ac <_printf_i+0x28>
 800569c:	2f62      	cmp	r7, #98	; 0x62
 800569e:	d80a      	bhi.n	80056b6 <_printf_i+0x32>
 80056a0:	2f00      	cmp	r7, #0
 80056a2:	f000 80d4 	beq.w	800584e <_printf_i+0x1ca>
 80056a6:	2f58      	cmp	r7, #88	; 0x58
 80056a8:	f000 80c0 	beq.w	800582c <_printf_i+0x1a8>
 80056ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b4:	e03a      	b.n	800572c <_printf_i+0xa8>
 80056b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ba:	2b15      	cmp	r3, #21
 80056bc:	d8f6      	bhi.n	80056ac <_printf_i+0x28>
 80056be:	a101      	add	r1, pc, #4	; (adr r1, 80056c4 <_printf_i+0x40>)
 80056c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c4:	0800571d 	.word	0x0800571d
 80056c8:	08005731 	.word	0x08005731
 80056cc:	080056ad 	.word	0x080056ad
 80056d0:	080056ad 	.word	0x080056ad
 80056d4:	080056ad 	.word	0x080056ad
 80056d8:	080056ad 	.word	0x080056ad
 80056dc:	08005731 	.word	0x08005731
 80056e0:	080056ad 	.word	0x080056ad
 80056e4:	080056ad 	.word	0x080056ad
 80056e8:	080056ad 	.word	0x080056ad
 80056ec:	080056ad 	.word	0x080056ad
 80056f0:	08005835 	.word	0x08005835
 80056f4:	0800575d 	.word	0x0800575d
 80056f8:	080057ef 	.word	0x080057ef
 80056fc:	080056ad 	.word	0x080056ad
 8005700:	080056ad 	.word	0x080056ad
 8005704:	08005857 	.word	0x08005857
 8005708:	080056ad 	.word	0x080056ad
 800570c:	0800575d 	.word	0x0800575d
 8005710:	080056ad 	.word	0x080056ad
 8005714:	080056ad 	.word	0x080056ad
 8005718:	080057f7 	.word	0x080057f7
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	602a      	str	r2, [r5, #0]
 8005724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800572c:	2301      	movs	r3, #1
 800572e:	e09f      	b.n	8005870 <_printf_i+0x1ec>
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	682b      	ldr	r3, [r5, #0]
 8005734:	0607      	lsls	r7, r0, #24
 8005736:	f103 0104 	add.w	r1, r3, #4
 800573a:	6029      	str	r1, [r5, #0]
 800573c:	d501      	bpl.n	8005742 <_printf_i+0xbe>
 800573e:	681e      	ldr	r6, [r3, #0]
 8005740:	e003      	b.n	800574a <_printf_i+0xc6>
 8005742:	0646      	lsls	r6, r0, #25
 8005744:	d5fb      	bpl.n	800573e <_printf_i+0xba>
 8005746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800574a:	2e00      	cmp	r6, #0
 800574c:	da03      	bge.n	8005756 <_printf_i+0xd2>
 800574e:	232d      	movs	r3, #45	; 0x2d
 8005750:	4276      	negs	r6, r6
 8005752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005756:	485a      	ldr	r0, [pc, #360]	; (80058c0 <_printf_i+0x23c>)
 8005758:	230a      	movs	r3, #10
 800575a:	e012      	b.n	8005782 <_printf_i+0xfe>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	1d19      	adds	r1, r3, #4
 8005762:	6029      	str	r1, [r5, #0]
 8005764:	0605      	lsls	r5, r0, #24
 8005766:	d501      	bpl.n	800576c <_printf_i+0xe8>
 8005768:	681e      	ldr	r6, [r3, #0]
 800576a:	e002      	b.n	8005772 <_printf_i+0xee>
 800576c:	0641      	lsls	r1, r0, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0xe4>
 8005770:	881e      	ldrh	r6, [r3, #0]
 8005772:	4853      	ldr	r0, [pc, #332]	; (80058c0 <_printf_i+0x23c>)
 8005774:	2f6f      	cmp	r7, #111	; 0x6f
 8005776:	bf0c      	ite	eq
 8005778:	2308      	moveq	r3, #8
 800577a:	230a      	movne	r3, #10
 800577c:	2100      	movs	r1, #0
 800577e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005782:	6865      	ldr	r5, [r4, #4]
 8005784:	60a5      	str	r5, [r4, #8]
 8005786:	2d00      	cmp	r5, #0
 8005788:	bfa2      	ittt	ge
 800578a:	6821      	ldrge	r1, [r4, #0]
 800578c:	f021 0104 	bicge.w	r1, r1, #4
 8005790:	6021      	strge	r1, [r4, #0]
 8005792:	b90e      	cbnz	r6, 8005798 <_printf_i+0x114>
 8005794:	2d00      	cmp	r5, #0
 8005796:	d04b      	beq.n	8005830 <_printf_i+0x1ac>
 8005798:	4615      	mov	r5, r2
 800579a:	fbb6 f1f3 	udiv	r1, r6, r3
 800579e:	fb03 6711 	mls	r7, r3, r1, r6
 80057a2:	5dc7      	ldrb	r7, [r0, r7]
 80057a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057a8:	4637      	mov	r7, r6
 80057aa:	42bb      	cmp	r3, r7
 80057ac:	460e      	mov	r6, r1
 80057ae:	d9f4      	bls.n	800579a <_printf_i+0x116>
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d10b      	bne.n	80057cc <_printf_i+0x148>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	07de      	lsls	r6, r3, #31
 80057b8:	d508      	bpl.n	80057cc <_printf_i+0x148>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	6861      	ldr	r1, [r4, #4]
 80057be:	4299      	cmp	r1, r3
 80057c0:	bfde      	ittt	le
 80057c2:	2330      	movle	r3, #48	; 0x30
 80057c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057cc:	1b52      	subs	r2, r2, r5
 80057ce:	6122      	str	r2, [r4, #16]
 80057d0:	f8cd a000 	str.w	sl, [sp]
 80057d4:	464b      	mov	r3, r9
 80057d6:	aa03      	add	r2, sp, #12
 80057d8:	4621      	mov	r1, r4
 80057da:	4640      	mov	r0, r8
 80057dc:	f7ff fee4 	bl	80055a8 <_printf_common>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d14a      	bne.n	800587a <_printf_i+0x1f6>
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	b004      	add	sp, #16
 80057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f043 0320 	orr.w	r3, r3, #32
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	4833      	ldr	r0, [pc, #204]	; (80058c4 <_printf_i+0x240>)
 80057f8:	2778      	movs	r7, #120	; 0x78
 80057fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	6829      	ldr	r1, [r5, #0]
 8005802:	061f      	lsls	r7, r3, #24
 8005804:	f851 6b04 	ldr.w	r6, [r1], #4
 8005808:	d402      	bmi.n	8005810 <_printf_i+0x18c>
 800580a:	065f      	lsls	r7, r3, #25
 800580c:	bf48      	it	mi
 800580e:	b2b6      	uxthmi	r6, r6
 8005810:	07df      	lsls	r7, r3, #31
 8005812:	bf48      	it	mi
 8005814:	f043 0320 	orrmi.w	r3, r3, #32
 8005818:	6029      	str	r1, [r5, #0]
 800581a:	bf48      	it	mi
 800581c:	6023      	strmi	r3, [r4, #0]
 800581e:	b91e      	cbnz	r6, 8005828 <_printf_i+0x1a4>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	f023 0320 	bic.w	r3, r3, #32
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	2310      	movs	r3, #16
 800582a:	e7a7      	b.n	800577c <_printf_i+0xf8>
 800582c:	4824      	ldr	r0, [pc, #144]	; (80058c0 <_printf_i+0x23c>)
 800582e:	e7e4      	b.n	80057fa <_printf_i+0x176>
 8005830:	4615      	mov	r5, r2
 8005832:	e7bd      	b.n	80057b0 <_printf_i+0x12c>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	6826      	ldr	r6, [r4, #0]
 8005838:	6961      	ldr	r1, [r4, #20]
 800583a:	1d18      	adds	r0, r3, #4
 800583c:	6028      	str	r0, [r5, #0]
 800583e:	0635      	lsls	r5, r6, #24
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	d501      	bpl.n	8005848 <_printf_i+0x1c4>
 8005844:	6019      	str	r1, [r3, #0]
 8005846:	e002      	b.n	800584e <_printf_i+0x1ca>
 8005848:	0670      	lsls	r0, r6, #25
 800584a:	d5fb      	bpl.n	8005844 <_printf_i+0x1c0>
 800584c:	8019      	strh	r1, [r3, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	4615      	mov	r5, r2
 8005854:	e7bc      	b.n	80057d0 <_printf_i+0x14c>
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	1d1a      	adds	r2, r3, #4
 800585a:	602a      	str	r2, [r5, #0]
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	6862      	ldr	r2, [r4, #4]
 8005860:	2100      	movs	r1, #0
 8005862:	4628      	mov	r0, r5
 8005864:	f7fa fcbc 	bl	80001e0 <memchr>
 8005868:	b108      	cbz	r0, 800586e <_printf_i+0x1ea>
 800586a:	1b40      	subs	r0, r0, r5
 800586c:	6060      	str	r0, [r4, #4]
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	6123      	str	r3, [r4, #16]
 8005872:	2300      	movs	r3, #0
 8005874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005878:	e7aa      	b.n	80057d0 <_printf_i+0x14c>
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	462a      	mov	r2, r5
 800587e:	4649      	mov	r1, r9
 8005880:	4640      	mov	r0, r8
 8005882:	47d0      	blx	sl
 8005884:	3001      	adds	r0, #1
 8005886:	d0ad      	beq.n	80057e4 <_printf_i+0x160>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	079b      	lsls	r3, r3, #30
 800588c:	d413      	bmi.n	80058b6 <_printf_i+0x232>
 800588e:	68e0      	ldr	r0, [r4, #12]
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	4298      	cmp	r0, r3
 8005894:	bfb8      	it	lt
 8005896:	4618      	movlt	r0, r3
 8005898:	e7a6      	b.n	80057e8 <_printf_i+0x164>
 800589a:	2301      	movs	r3, #1
 800589c:	4632      	mov	r2, r6
 800589e:	4649      	mov	r1, r9
 80058a0:	4640      	mov	r0, r8
 80058a2:	47d0      	blx	sl
 80058a4:	3001      	adds	r0, #1
 80058a6:	d09d      	beq.n	80057e4 <_printf_i+0x160>
 80058a8:	3501      	adds	r5, #1
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	9903      	ldr	r1, [sp, #12]
 80058ae:	1a5b      	subs	r3, r3, r1
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dcf2      	bgt.n	800589a <_printf_i+0x216>
 80058b4:	e7eb      	b.n	800588e <_printf_i+0x20a>
 80058b6:	2500      	movs	r5, #0
 80058b8:	f104 0619 	add.w	r6, r4, #25
 80058bc:	e7f5      	b.n	80058aa <_printf_i+0x226>
 80058be:	bf00      	nop
 80058c0:	08005d75 	.word	0x08005d75
 80058c4:	08005d86 	.word	0x08005d86

080058c8 <__sflush_r>:
 80058c8:	898a      	ldrh	r2, [r1, #12]
 80058ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ce:	4605      	mov	r5, r0
 80058d0:	0710      	lsls	r0, r2, #28
 80058d2:	460c      	mov	r4, r1
 80058d4:	d458      	bmi.n	8005988 <__sflush_r+0xc0>
 80058d6:	684b      	ldr	r3, [r1, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dc05      	bgt.n	80058e8 <__sflush_r+0x20>
 80058dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	dc02      	bgt.n	80058e8 <__sflush_r+0x20>
 80058e2:	2000      	movs	r0, #0
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	d0f9      	beq.n	80058e2 <__sflush_r+0x1a>
 80058ee:	2300      	movs	r3, #0
 80058f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058f4:	682f      	ldr	r7, [r5, #0]
 80058f6:	6a21      	ldr	r1, [r4, #32]
 80058f8:	602b      	str	r3, [r5, #0]
 80058fa:	d032      	beq.n	8005962 <__sflush_r+0x9a>
 80058fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	075a      	lsls	r2, r3, #29
 8005902:	d505      	bpl.n	8005910 <__sflush_r+0x48>
 8005904:	6863      	ldr	r3, [r4, #4]
 8005906:	1ac0      	subs	r0, r0, r3
 8005908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800590a:	b10b      	cbz	r3, 8005910 <__sflush_r+0x48>
 800590c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800590e:	1ac0      	subs	r0, r0, r3
 8005910:	2300      	movs	r3, #0
 8005912:	4602      	mov	r2, r0
 8005914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005916:	6a21      	ldr	r1, [r4, #32]
 8005918:	4628      	mov	r0, r5
 800591a:	47b0      	blx	r6
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	d106      	bne.n	8005930 <__sflush_r+0x68>
 8005922:	6829      	ldr	r1, [r5, #0]
 8005924:	291d      	cmp	r1, #29
 8005926:	d82b      	bhi.n	8005980 <__sflush_r+0xb8>
 8005928:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <__sflush_r+0x108>)
 800592a:	410a      	asrs	r2, r1
 800592c:	07d6      	lsls	r6, r2, #31
 800592e:	d427      	bmi.n	8005980 <__sflush_r+0xb8>
 8005930:	2200      	movs	r2, #0
 8005932:	6062      	str	r2, [r4, #4]
 8005934:	04d9      	lsls	r1, r3, #19
 8005936:	6922      	ldr	r2, [r4, #16]
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	d504      	bpl.n	8005946 <__sflush_r+0x7e>
 800593c:	1c42      	adds	r2, r0, #1
 800593e:	d101      	bne.n	8005944 <__sflush_r+0x7c>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b903      	cbnz	r3, 8005946 <__sflush_r+0x7e>
 8005944:	6560      	str	r0, [r4, #84]	; 0x54
 8005946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005948:	602f      	str	r7, [r5, #0]
 800594a:	2900      	cmp	r1, #0
 800594c:	d0c9      	beq.n	80058e2 <__sflush_r+0x1a>
 800594e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005952:	4299      	cmp	r1, r3
 8005954:	d002      	beq.n	800595c <__sflush_r+0x94>
 8005956:	4628      	mov	r0, r5
 8005958:	f7ff fbea 	bl	8005130 <_free_r>
 800595c:	2000      	movs	r0, #0
 800595e:	6360      	str	r0, [r4, #52]	; 0x34
 8005960:	e7c0      	b.n	80058e4 <__sflush_r+0x1c>
 8005962:	2301      	movs	r3, #1
 8005964:	4628      	mov	r0, r5
 8005966:	47b0      	blx	r6
 8005968:	1c41      	adds	r1, r0, #1
 800596a:	d1c8      	bne.n	80058fe <__sflush_r+0x36>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0c5      	beq.n	80058fe <__sflush_r+0x36>
 8005972:	2b1d      	cmp	r3, #29
 8005974:	d001      	beq.n	800597a <__sflush_r+0xb2>
 8005976:	2b16      	cmp	r3, #22
 8005978:	d101      	bne.n	800597e <__sflush_r+0xb6>
 800597a:	602f      	str	r7, [r5, #0]
 800597c:	e7b1      	b.n	80058e2 <__sflush_r+0x1a>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	e7ad      	b.n	80058e4 <__sflush_r+0x1c>
 8005988:	690f      	ldr	r7, [r1, #16]
 800598a:	2f00      	cmp	r7, #0
 800598c:	d0a9      	beq.n	80058e2 <__sflush_r+0x1a>
 800598e:	0793      	lsls	r3, r2, #30
 8005990:	680e      	ldr	r6, [r1, #0]
 8005992:	bf08      	it	eq
 8005994:	694b      	ldreq	r3, [r1, #20]
 8005996:	600f      	str	r7, [r1, #0]
 8005998:	bf18      	it	ne
 800599a:	2300      	movne	r3, #0
 800599c:	eba6 0807 	sub.w	r8, r6, r7
 80059a0:	608b      	str	r3, [r1, #8]
 80059a2:	f1b8 0f00 	cmp.w	r8, #0
 80059a6:	dd9c      	ble.n	80058e2 <__sflush_r+0x1a>
 80059a8:	6a21      	ldr	r1, [r4, #32]
 80059aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059ac:	4643      	mov	r3, r8
 80059ae:	463a      	mov	r2, r7
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b0      	blx	r6
 80059b4:	2800      	cmp	r0, #0
 80059b6:	dc06      	bgt.n	80059c6 <__sflush_r+0xfe>
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059be:	81a3      	strh	r3, [r4, #12]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e78e      	b.n	80058e4 <__sflush_r+0x1c>
 80059c6:	4407      	add	r7, r0
 80059c8:	eba8 0800 	sub.w	r8, r8, r0
 80059cc:	e7e9      	b.n	80059a2 <__sflush_r+0xda>
 80059ce:	bf00      	nop
 80059d0:	dfbffffe 	.word	0xdfbffffe

080059d4 <_fflush_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	690b      	ldr	r3, [r1, #16]
 80059d8:	4605      	mov	r5, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	b913      	cbnz	r3, 80059e4 <_fflush_r+0x10>
 80059de:	2500      	movs	r5, #0
 80059e0:	4628      	mov	r0, r5
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	b118      	cbz	r0, 80059ee <_fflush_r+0x1a>
 80059e6:	6a03      	ldr	r3, [r0, #32]
 80059e8:	b90b      	cbnz	r3, 80059ee <_fflush_r+0x1a>
 80059ea:	f7ff fa8b 	bl	8004f04 <__sinit>
 80059ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f3      	beq.n	80059de <_fflush_r+0xa>
 80059f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059f8:	07d0      	lsls	r0, r2, #31
 80059fa:	d404      	bmi.n	8005a06 <_fflush_r+0x32>
 80059fc:	0599      	lsls	r1, r3, #22
 80059fe:	d402      	bmi.n	8005a06 <_fflush_r+0x32>
 8005a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a02:	f7ff fb84 	bl	800510e <__retarget_lock_acquire_recursive>
 8005a06:	4628      	mov	r0, r5
 8005a08:	4621      	mov	r1, r4
 8005a0a:	f7ff ff5d 	bl	80058c8 <__sflush_r>
 8005a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a10:	07da      	lsls	r2, r3, #31
 8005a12:	4605      	mov	r5, r0
 8005a14:	d4e4      	bmi.n	80059e0 <_fflush_r+0xc>
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	059b      	lsls	r3, r3, #22
 8005a1a:	d4e1      	bmi.n	80059e0 <_fflush_r+0xc>
 8005a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1e:	f7ff fb77 	bl	8005110 <__retarget_lock_release_recursive>
 8005a22:	e7dd      	b.n	80059e0 <_fflush_r+0xc>

08005a24 <__swbuf_r>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	460e      	mov	r6, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	b118      	cbz	r0, 8005a36 <__swbuf_r+0x12>
 8005a2e:	6a03      	ldr	r3, [r0, #32]
 8005a30:	b90b      	cbnz	r3, 8005a36 <__swbuf_r+0x12>
 8005a32:	f7ff fa67 	bl	8004f04 <__sinit>
 8005a36:	69a3      	ldr	r3, [r4, #24]
 8005a38:	60a3      	str	r3, [r4, #8]
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	071a      	lsls	r2, r3, #28
 8005a3e:	d525      	bpl.n	8005a8c <__swbuf_r+0x68>
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	b31b      	cbz	r3, 8005a8c <__swbuf_r+0x68>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	6922      	ldr	r2, [r4, #16]
 8005a48:	1a98      	subs	r0, r3, r2
 8005a4a:	6963      	ldr	r3, [r4, #20]
 8005a4c:	b2f6      	uxtb	r6, r6
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	4637      	mov	r7, r6
 8005a52:	dc04      	bgt.n	8005a5e <__swbuf_r+0x3a>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7ff ffbc 	bl	80059d4 <_fflush_r>
 8005a5c:	b9e0      	cbnz	r0, 8005a98 <__swbuf_r+0x74>
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	60a3      	str	r3, [r4, #8]
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	701e      	strb	r6, [r3, #0]
 8005a6c:	6962      	ldr	r2, [r4, #20]
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d004      	beq.n	8005a7e <__swbuf_r+0x5a>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	07db      	lsls	r3, r3, #31
 8005a78:	d506      	bpl.n	8005a88 <__swbuf_r+0x64>
 8005a7a:	2e0a      	cmp	r6, #10
 8005a7c:	d104      	bne.n	8005a88 <__swbuf_r+0x64>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	f7ff ffa7 	bl	80059d4 <_fflush_r>
 8005a86:	b938      	cbnz	r0, 8005a98 <__swbuf_r+0x74>
 8005a88:	4638      	mov	r0, r7
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 f806 	bl	8005aa0 <__swsetup_r>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d0d5      	beq.n	8005a44 <__swbuf_r+0x20>
 8005a98:	f04f 37ff 	mov.w	r7, #4294967295
 8005a9c:	e7f4      	b.n	8005a88 <__swbuf_r+0x64>
	...

08005aa0 <__swsetup_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4b2a      	ldr	r3, [pc, #168]	; (8005b4c <__swsetup_r+0xac>)
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	b118      	cbz	r0, 8005ab4 <__swsetup_r+0x14>
 8005aac:	6a03      	ldr	r3, [r0, #32]
 8005aae:	b90b      	cbnz	r3, 8005ab4 <__swsetup_r+0x14>
 8005ab0:	f7ff fa28 	bl	8004f04 <__sinit>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aba:	0718      	lsls	r0, r3, #28
 8005abc:	d422      	bmi.n	8005b04 <__swsetup_r+0x64>
 8005abe:	06d9      	lsls	r1, r3, #27
 8005ac0:	d407      	bmi.n	8005ad2 <__swsetup_r+0x32>
 8005ac2:	2309      	movs	r3, #9
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	e034      	b.n	8005b3c <__swsetup_r+0x9c>
 8005ad2:	0758      	lsls	r0, r3, #29
 8005ad4:	d512      	bpl.n	8005afc <__swsetup_r+0x5c>
 8005ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ad8:	b141      	cbz	r1, 8005aec <__swsetup_r+0x4c>
 8005ada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ade:	4299      	cmp	r1, r3
 8005ae0:	d002      	beq.n	8005ae8 <__swsetup_r+0x48>
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7ff fb24 	bl	8005130 <_free_r>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6363      	str	r3, [r4, #52]	; 0x34
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	2300      	movs	r3, #0
 8005af6:	6063      	str	r3, [r4, #4]
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f043 0308 	orr.w	r3, r3, #8
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	b94b      	cbnz	r3, 8005b1c <__swsetup_r+0x7c>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b12:	d003      	beq.n	8005b1c <__swsetup_r+0x7c>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f850 	bl	8005bbc <__smakebuf_r>
 8005b1c:	89a0      	ldrh	r0, [r4, #12]
 8005b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b22:	f010 0301 	ands.w	r3, r0, #1
 8005b26:	d00a      	beq.n	8005b3e <__swsetup_r+0x9e>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60a3      	str	r3, [r4, #8]
 8005b2c:	6963      	ldr	r3, [r4, #20]
 8005b2e:	425b      	negs	r3, r3
 8005b30:	61a3      	str	r3, [r4, #24]
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	b943      	cbnz	r3, 8005b48 <__swsetup_r+0xa8>
 8005b36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b3a:	d1c4      	bne.n	8005ac6 <__swsetup_r+0x26>
 8005b3c:	bd38      	pop	{r3, r4, r5, pc}
 8005b3e:	0781      	lsls	r1, r0, #30
 8005b40:	bf58      	it	pl
 8005b42:	6963      	ldrpl	r3, [r4, #20]
 8005b44:	60a3      	str	r3, [r4, #8]
 8005b46:	e7f4      	b.n	8005b32 <__swsetup_r+0x92>
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e7f7      	b.n	8005b3c <__swsetup_r+0x9c>
 8005b4c:	20000068 	.word	0x20000068

08005b50 <_sbrk_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d06      	ldr	r5, [pc, #24]	; (8005b6c <_sbrk_r+0x1c>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	f7fa ffee 	bl	8000b3c <_sbrk>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_sbrk_r+0x1a>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_sbrk_r+0x1a>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	20004bb4 	.word	0x20004bb4

08005b70 <__swhatbuf_r>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	460c      	mov	r4, r1
 8005b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	b096      	sub	sp, #88	; 0x58
 8005b7c:	4615      	mov	r5, r2
 8005b7e:	461e      	mov	r6, r3
 8005b80:	da0d      	bge.n	8005b9e <__swhatbuf_r+0x2e>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	bf0c      	ite	eq
 8005b8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b92:	2340      	movne	r3, #64	; 0x40
 8005b94:	2000      	movs	r0, #0
 8005b96:	6031      	str	r1, [r6, #0]
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	b016      	add	sp, #88	; 0x58
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
 8005b9e:	466a      	mov	r2, sp
 8005ba0:	f000 f848 	bl	8005c34 <_fstat_r>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	dbec      	blt.n	8005b82 <__swhatbuf_r+0x12>
 8005ba8:	9901      	ldr	r1, [sp, #4]
 8005baa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005bae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005bb2:	4259      	negs	r1, r3
 8005bb4:	4159      	adcs	r1, r3
 8005bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bba:	e7eb      	b.n	8005b94 <__swhatbuf_r+0x24>

08005bbc <__smakebuf_r>:
 8005bbc:	898b      	ldrh	r3, [r1, #12]
 8005bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bc0:	079d      	lsls	r5, r3, #30
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	d507      	bpl.n	8005bd8 <__smakebuf_r+0x1c>
 8005bc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	6163      	str	r3, [r4, #20]
 8005bd4:	b002      	add	sp, #8
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	ab01      	add	r3, sp, #4
 8005bda:	466a      	mov	r2, sp
 8005bdc:	f7ff ffc8 	bl	8005b70 <__swhatbuf_r>
 8005be0:	9900      	ldr	r1, [sp, #0]
 8005be2:	4605      	mov	r5, r0
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7ff fb0f 	bl	8005208 <_malloc_r>
 8005bea:	b948      	cbnz	r0, 8005c00 <__smakebuf_r+0x44>
 8005bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf0:	059a      	lsls	r2, r3, #22
 8005bf2:	d4ef      	bmi.n	8005bd4 <__smakebuf_r+0x18>
 8005bf4:	f023 0303 	bic.w	r3, r3, #3
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	e7e3      	b.n	8005bc8 <__smakebuf_r+0xc>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	6020      	str	r0, [r4, #0]
 8005c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	9b00      	ldr	r3, [sp, #0]
 8005c0c:	6163      	str	r3, [r4, #20]
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	6120      	str	r0, [r4, #16]
 8005c12:	b15b      	cbz	r3, 8005c2c <__smakebuf_r+0x70>
 8005c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f000 f81d 	bl	8005c58 <_isatty_r>
 8005c1e:	b128      	cbz	r0, 8005c2c <__smakebuf_r+0x70>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	431d      	orrs	r5, r3
 8005c30:	81a5      	strh	r5, [r4, #12]
 8005c32:	e7cf      	b.n	8005bd4 <__smakebuf_r+0x18>

08005c34 <_fstat_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	; (8005c54 <_fstat_r+0x20>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	4611      	mov	r1, r2
 8005c40:	602b      	str	r3, [r5, #0]
 8005c42:	f7fa ff52 	bl	8000aea <_fstat>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d102      	bne.n	8005c50 <_fstat_r+0x1c>
 8005c4a:	682b      	ldr	r3, [r5, #0]
 8005c4c:	b103      	cbz	r3, 8005c50 <_fstat_r+0x1c>
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
 8005c52:	bf00      	nop
 8005c54:	20004bb4 	.word	0x20004bb4

08005c58 <_isatty_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d06      	ldr	r5, [pc, #24]	; (8005c74 <_isatty_r+0x1c>)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	f7fa ff51 	bl	8000b0a <_isatty>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_isatty_r+0x1a>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_isatty_r+0x1a>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20004bb4 	.word	0x20004bb4

08005c78 <_init>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr

08005c84 <_fini>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr
