
fr_30_SynchingTasksWithEventGroups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800610c  0800610c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006114  08006114  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800611c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  20000070  0800618c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bbc  0800618c  00024bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017493  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037d9  00000000  00000000  00037576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0003ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105e  00000000  00000000  0003c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ea1  00000000  00000000  0003d2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001771b  00000000  00000000  00042177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a176  00000000  00000000  00059892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006028  00000000  00000000  000f3a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f9a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006018 	.word	0x08006018

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006018 	.word	0x08006018

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
static void Task1 (void *pvParamaters);
static void Task2 (void *pvParamaters);
static void Task3 (void *pvParamaters);

int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8

  HAL_Init();
 8000582:	f000 fb51 	bl	8000c28 <HAL_Init>
  SystemClock_Config();
 8000586:	f000 f891 	bl	80006ac <SystemClock_Config>
  MX_GPIO_Init();
 800058a:	f000 f8ed 	bl	8000768 <MX_GPIO_Init>

  USART2_UART_TX_Init();
 800058e:	f000 fad9 	bl	8000b44 <USART2_UART_TX_Init>

  printf("System is initializing...\n\r");
 8000592:	4814      	ldr	r0, [pc, #80]	; (80005e4 <main+0x68>)
 8000594:	f004 febc 	bl	8005310 <iprintf>

  xEventGroup = xEventGroupCreate();
 8000598:	f001 fffe 	bl	8002598 <xEventGroupCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <main+0x6c>)
 80005a0:	6013      	str	r3, [r2, #0]

  xTaskCreate(Task1, "Input Task 1", 128, NULL, 1, NULL);
 80005a2:	2300      	movs	r3, #0
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	490f      	ldr	r1, [pc, #60]	; (80005ec <main+0x70>)
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x74>)
 80005b2:	f002 ff42 	bl	800343a <xTaskCreate>
  xTaskCreate(Task2, "Input Task 2", 128, NULL, 1, NULL);
 80005b6:	2300      	movs	r3, #0
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <main+0x78>)
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <main+0x7c>)
 80005c6:	f002 ff38 	bl	800343a <xTaskCreate>
  xTaskCreate(Task3, "Input Task 3", 128, NULL, 1, NULL);
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	4909      	ldr	r1, [pc, #36]	; (80005fc <main+0x80>)
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x84>)
 80005da:	f002 ff2e 	bl	800343a <xTaskCreate>

  vTaskStartScheduler();
 80005de:	f003 f871 	bl	80036c4 <vTaskStartScheduler>



  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x66>
 80005e4:	08006030 	.word	0x08006030
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	0800604c 	.word	0x0800604c
 80005f0:	08000605 	.word	0x08000605
 80005f4:	0800605c 	.word	0x0800605c
 80005f8:	0800062d 	.word	0x0800062d
 80005fc:	0800606c 	.word	0x0800606c
 8000600:	08000655 	.word	0x08000655

08000604 <Task1>:

  }

}

static void Task1 (void *pvParamaters) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	EventBits_t uxReturn;

	while(1) {

		uxReturn = xEventGroupSync(xEventGroup,
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <Task1+0x20>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <Task1+0x24>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	2101      	movs	r1, #1
 800061a:	f001 ffd7 	bl	80025cc <xEventGroupSync>
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	e7f4      	b.n	800060c <Task1+0x8>
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	20000000 	.word	0x20000000

0800062c <Task2>:
		}
	}

}

static void Task2 (void *pvParamaters) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

	EventBits_t uxReturn;

	while(1) {

		uxReturn = xEventGroupSync(xEventGroup,
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <Task2+0x20>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <Task2+0x24>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2102      	movs	r1, #2
 8000642:	f001 ffc3 	bl	80025cc <xEventGroupSync>
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	e7f4      	b.n	8000634 <Task2+0x8>
 800064a:	bf00      	nop
 800064c:	2000008c 	.word	0x2000008c
 8000650:	20000000 	.word	0x20000000

08000654 <Task3>:
		}
	}

}

static void Task3 (void *pvParamaters) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

	EventBits_t uxReturn;

	while(1) {

		uxReturn = xEventGroupSync(xEventGroup,
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <Task3+0x4c>)
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <Task3+0x50>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	2104      	movs	r1, #4
 800066a:	f001 ffaf 	bl	80025cc <xEventGroupSync>
 800066e:	60b8      	str	r0, [r7, #8]
				TASK3_BIT,
				uxAllSynBits,
				portMAX_DELAY);

		if((uxReturn & uxAllSynBits) == uxAllSynBits) {
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <Task3+0x50>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	401a      	ands	r2, r3
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <Task3+0x50>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d1ed      	bne.n	800065c <Task3+0x8>
			// Do something
			printf("All tasks are synch'-ed at this point \n\r");
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <Task3+0x54>)
 8000682:	f004 fe45 	bl	8005310 <iprintf>
			for(int i=0; i<10000;i++){}
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	e002      	b.n	8000692 <Task3+0x3e>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f242 720f 	movw	r2, #9999	; 0x270f
 8000698:	4293      	cmp	r3, r2
 800069a:	ddf7      	ble.n	800068c <Task3+0x38>
		uxReturn = xEventGroupSync(xEventGroup,
 800069c:	e7de      	b.n	800065c <Task3+0x8>
 800069e:	bf00      	nop
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	20000000 	.word	0x20000000
 80006a8:	0800607c 	.word	0x0800607c

080006ac <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 fe7d 	bl	80053ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <SystemClock_Config+0xb4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <SystemClock_Config+0xb4>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <SystemClock_Config+0xb4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <SystemClock_Config+0xb8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <SystemClock_Config+0xb8>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <SystemClock_Config+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fd2b 	bl	8001178 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000728:	f000 f84a 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f000 ff8e 	bl	8001668 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000752:	f000 f835 	bl	80007c0 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_GPIO_Init+0x30>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <MX_GPIO_Init+0x30>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_GPIO_Init+0x30>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d101      	bne.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ae:	f000 fa5d 	bl	8000c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010000 	.word	0x40010000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x54>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <HAL_MspInit+0x54>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_MspInit+0x54>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_MspInit+0x54>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 fb03 	bl	8000e1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12b      	bne.n	800089e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_UART_MspInit+0x88>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <HAL_UART_MspInit+0x88>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087e:	230c      	movs	r3, #12
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088e:	2307      	movs	r3, #7
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_UART_MspInit+0x8c>)
 800089a:	f000 fae9 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000

080008b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <HAL_InitTick+0xd0>)
 80008ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008cc:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <HAL_InitTick+0xd0>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6453      	str	r3, [r2, #68]	; 0x44
 80008d4:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <HAL_InitTick+0xd0>)
 80008d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e0:	f107 020c 	add.w	r2, r7, #12
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 f89c 	bl	8001a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008f0:	f001 f886 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 80008f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	4a23      	ldr	r2, [pc, #140]	; (8000988 <HAL_InitTick+0xd4>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	3b01      	subs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <HAL_InitTick+0xd8>)
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <HAL_InitTick+0xdc>)
 8000908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_InitTick+0xd8>)
 800090c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000910:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000912:	4a1e      	ldr	r2, [pc, #120]	; (800098c <HAL_InitTick+0xd8>)
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <HAL_InitTick+0xd8>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_InitTick+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <HAL_InitTick+0xd8>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <HAL_InitTick+0xd8>)
 800092c:	f001 f8ae 	bl	8001a8c <HAL_TIM_Base_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800093a:	2b00      	cmp	r3, #0
 800093c:	d11b      	bne.n	8000976 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800093e:	4813      	ldr	r0, [pc, #76]	; (800098c <HAL_InitTick+0xd8>)
 8000940:	f001 f8fe 	bl	8001b40 <HAL_TIM_Base_Start_IT>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800094a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800094e:	2b00      	cmp	r3, #0
 8000950:	d111      	bne.n	8000976 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000952:	2019      	movs	r0, #25
 8000954:	f000 fa7e 	bl	8000e54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b0f      	cmp	r3, #15
 800095c:	d808      	bhi.n	8000970 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800095e:	2200      	movs	r2, #0
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	2019      	movs	r0, #25
 8000964:	f000 fa5a 	bl	8000e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_InitTick+0xe0>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e002      	b.n	8000976 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800097a:	4618      	mov	r0, r3
 800097c:	3730      	adds	r7, #48	; 0x30
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	431bde83 	.word	0x431bde83
 800098c:	20000090 	.word	0x20000090
 8000990:	40010000 	.word	0x40010000
 8000994:	20000008 	.word	0x20000008

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ca:	f001 f91b 	bl	8001c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000090 	.word	0x20000090

080009d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
  }

  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
  }
  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f004 fcb8 	bl	8005458 <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20020000 	.word	0x20020000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200000d8 	.word	0x200000d8
 8000b1c:	20004bc0 	.word	0x20004bc0

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <USART2_UART_TX_Init>:

UART_HandleTypeDef huart2;


void USART2_UART_TX_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <USART2_UART_TX_Init+0x44>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
 8000b7a:	4802      	ldr	r0, [pc, #8]	; (8000b84 <USART2_UART_TX_Init+0x40>)
 8000b7c:	f001 fa06 	bl	8001f8c <HAL_UART_Init>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000dc 	.word	0x200000dc
 8000b88:	40004400 	.word	0x40004400

08000b8c <USART2_write>:
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
}

int USART2_write(int ch) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	while(!(USART2 -> SR & 0x0080)) {}
 8000b94:	bf00      	nop
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <USART2_write+0x2c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f9      	beq.n	8000b96 <USART2_write+0xa>
	USART2-> DR = (ch & 0xFF);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <USART2_write+0x2c>)
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	6053      	str	r3, [r2, #4]

	return ch;
 8000baa:	687b      	ldr	r3, [r7, #4]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40004400 	.word	0x40004400

08000bbc <__io_putchar>:

	while(!(USART2->SR & 0x0020)) {} // wait until char arrives
	return USART2->DR;
}

int __io_putchar(int ch){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ffe1 	bl	8000b8c <USART2_write>

	return ch;
 8000bca:	687b      	ldr	r3, [r7, #4]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfe:	f7ff ff8f 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f004 fc2f 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fcb9 	bl	800057c <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c18:	0800611c 	.word	0x0800611c
  ldr r2, =_sbss
 8000c1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c20:	20004bbc 	.word	0x20004bbc

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8d8 	bl	8000e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff fe2c 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fdb6 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	20000120 	.word	0x20000120

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000120 	.word	0x20000120

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff4c 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2e:	f7ff ff61 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff ffb1 	bl	8000da0 <NVIC_EncodePriority>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff80 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff54 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e159      	b.n	8001140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8148 	bne.w	800113a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a2 	beq.w	800113a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b57      	ldr	r3, [pc, #348]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a56      	ldr	r2, [pc, #344]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b54      	ldr	r3, [pc, #336]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a52      	ldr	r2, [pc, #328]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	; (8001160 <HAL_GPIO_Init+0x2f0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x202>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_GPIO_Init+0x2f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x1fe>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a47      	ldr	r2, [pc, #284]	; (8001168 <HAL_GPIO_Init+0x2f8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x1fa>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a46      	ldr	r2, [pc, #280]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x1f6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_GPIO_Init+0x300>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x1f2>
 800105e:	2304      	movs	r3, #4
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001062:	2307      	movs	r3, #7
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x204>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x204>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a24      	ldr	r2, [pc, #144]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_GPIO_Init+0x304>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_GPIO_Init+0x304>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f aea2 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e267      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d075      	beq.n	8001282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001196:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d00c      	beq.n	80011bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d112      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4b82      	ldr	r3, [pc, #520]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ba:	d10b      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	4b7e      	ldr	r3, [pc, #504]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d05b      	beq.n	8001280 <HAL_RCC_OscConfig+0x108>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d157      	bne.n	8001280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e242      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d106      	bne.n	80011ec <HAL_RCC_OscConfig+0x74>
 80011de:	4b76      	ldr	r3, [pc, #472]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a75      	ldr	r2, [pc, #468]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e01d      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x98>
 80011f6:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a6f      	ldr	r2, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80011fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a6c      	ldr	r2, [pc, #432]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a68      	ldr	r2, [pc, #416]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a65      	ldr	r2, [pc, #404]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d013      	beq.n	8001258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fd30 	bl	8000c94 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fd2c 	bl	8000c94 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e207      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	4b5b      	ldr	r3, [pc, #364]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0xc0>
 8001256:	e014      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fd1c 	bl	8000c94 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fd18 	bl	8000c94 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1f3      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0xe8>
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d063      	beq.n	8001356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128e:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d11c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d116      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d001      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e1c7      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4937      	ldr	r1, [pc, #220]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	e03a      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e8:	4b34      	ldr	r3, [pc, #208]	; (80013bc <HAL_RCC_OscConfig+0x244>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fcd1 	bl	8000c94 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fccd 	bl	8000c94 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1a8      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4925      	ldr	r1, [pc, #148]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
 8001328:	e015      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_RCC_OscConfig+0x244>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fcb0 	bl	8000c94 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fcac 	bl	8000c94 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e187      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d036      	beq.n	80013d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_RCC_OscConfig+0x248>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff fc90 	bl	8000c94 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff fc8c 	bl	8000c94 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e167      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_RCC_OscConfig+0x240>)
 800138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x200>
 8001396:	e01b      	b.n	80013d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_RCC_OscConfig+0x248>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fc79 	bl	8000c94 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	e00e      	b.n	80013c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc75 	bl	8000c94 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d907      	bls.n	80013c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e150      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
 80013b8:	40023800 	.word	0x40023800
 80013bc:	42470000 	.word	0x42470000
 80013c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1ea      	bne.n	80013a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8097 	beq.w	800150c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e2:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10f      	bne.n	800140e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b7d      	ldr	r3, [pc, #500]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a7c      	ldr	r2, [pc, #496]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800140a:	2301      	movs	r3, #1
 800140c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b77      	ldr	r3, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x474>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d118      	bne.n	800144c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141a:	4b74      	ldr	r3, [pc, #464]	; (80015ec <HAL_RCC_OscConfig+0x474>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a73      	ldr	r2, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x474>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc35 	bl	8000c94 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142e:	f7ff fc31 	bl	8000c94 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e10c      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x474>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x2ea>
 8001454:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001458:	4a63      	ldr	r2, [pc, #396]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6713      	str	r3, [r2, #112]	; 0x70
 8001460:	e01c      	b.n	800149c <HAL_RCC_OscConfig+0x324>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b05      	cmp	r3, #5
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x30c>
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a5e      	ldr	r2, [pc, #376]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
 8001476:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a5b      	ldr	r2, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0x324>
 8001484:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a57      	ldr	r2, [pc, #348]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a54      	ldr	r2, [pc, #336]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001496:	f023 0304 	bic.w	r3, r3, #4
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d015      	beq.n	80014d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fbf6 	bl	8000c94 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7ff fbf2 	bl	8000c94 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0cb      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c2:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0ee      	beq.n	80014ac <HAL_RCC_OscConfig+0x334>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fbe0 	bl	8000c94 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d8:	f7ff fbdc 	bl	8000c94 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e0b5      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ee:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ee      	bne.n	80014d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d105      	bne.n	800150c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001500:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a38      	ldr	r2, [pc, #224]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a1 	beq.w	8001658 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d05c      	beq.n	80015dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d141      	bne.n	80015ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <HAL_RCC_OscConfig+0x478>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fbb0 	bl	8000c94 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fbac 	bl	8000c94 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e087      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	3b01      	subs	r3, #1
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	491b      	ldr	r1, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x478>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb85 	bl	8000c94 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fb81 	bl	8000c94 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e05c      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x416>
 80015ac:	e054      	b.n	8001658 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_RCC_OscConfig+0x478>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb6e 	bl	8000c94 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fb6a 	bl	8000c94 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e045      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCC_OscConfig+0x470>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x444>
 80015da:	e03d      	b.n	8001658 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e038      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000
 80015f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x4ec>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d028      	beq.n	8001654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d121      	bne.n	8001654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d11a      	bne.n	8001654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001624:	4013      	ands	r3, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800162a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800162c:	4293      	cmp	r3, r2
 800162e:	d111      	bne.n	8001654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	3b01      	subs	r3, #1
 800163e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0cc      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d90c      	bls.n	80016a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0b8      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a58      	ldr	r2, [pc, #352]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a52      	ldr	r2, [pc, #328]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	494d      	ldr	r1, [pc, #308]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d044      	beq.n	8001788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d119      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e07f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d003      	beq.n	8001726 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	2b03      	cmp	r3, #3
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e06f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e067      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f023 0203 	bic.w	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4934      	ldr	r1, [pc, #208]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff fa9c 	bl	8000c94 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	e00a      	b.n	8001776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff fa98 	bl	8000c94 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e04f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 020c 	and.w	r2, r3, #12
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d1eb      	bne.n	8001760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d20c      	bcs.n	80017b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e032      	b.n	8001816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4916      	ldr	r1, [pc, #88]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ee:	f000 f821 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	490a      	ldr	r1, [pc, #40]	; (8001828 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	5ccb      	ldrb	r3, [r1, r3]
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f850 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00
 8001824:	40023800 	.word	0x40023800
 8001828:	080060c0 	.word	0x080060c0
 800182c:	20000004 	.word	0x20000004
 8001830:	20000008 	.word	0x20000008

08001834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001838:	b090      	sub	sp, #64	; 0x40
 800183a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
 8001840:	2300      	movs	r3, #0
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d00d      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x40>
 8001858:	2b08      	cmp	r3, #8
 800185a:	f200 80a1 	bhi.w	80019a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x34>
 8001862:	2b04      	cmp	r3, #4
 8001864:	d003      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x3a>
 8001866:	e09b      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800186c:	e09b      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800186e:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001872:	e098      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001874:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187e:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d028      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188a:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	2200      	movs	r2, #0
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	627a      	str	r2, [r7, #36]	; 0x24
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800189c:	2100      	movs	r1, #0
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_GetSysClockFreq+0x188>)
 80018a0:	fb03 f201 	mul.w	r2, r3, r1
 80018a4:	2300      	movs	r3, #0
 80018a6:	fb00 f303 	mul.w	r3, r0, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	4a43      	ldr	r2, [pc, #268]	; (80019bc <HAL_RCC_GetSysClockFreq+0x188>)
 80018ae:	fba0 1202 	umull	r1, r2, r0, r2
 80018b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b4:	460a      	mov	r2, r1
 80018b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80018b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ba:	4413      	add	r3, r2
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	2200      	movs	r2, #0
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	61fa      	str	r2, [r7, #28]
 80018c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ce:	f7fe fcd7 	bl	8000280 <__aeabi_uldivmod>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4613      	mov	r3, r2
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018da:	e053      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	2200      	movs	r2, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	617a      	str	r2, [r7, #20]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ee:	f04f 0b00 	mov.w	fp, #0
 80018f2:	4652      	mov	r2, sl
 80018f4:	465b      	mov	r3, fp
 80018f6:	f04f 0000 	mov.w	r0, #0
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	0159      	lsls	r1, r3, #5
 8001900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001904:	0150      	lsls	r0, r2, #5
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	ebb2 080a 	subs.w	r8, r2, sl
 800190e:	eb63 090b 	sbc.w	r9, r3, fp
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800191e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001922:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001926:	ebb2 0408 	subs.w	r4, r2, r8
 800192a:	eb63 0509 	sbc.w	r5, r3, r9
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	00eb      	lsls	r3, r5, #3
 8001938:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193c:	00e2      	lsls	r2, r4, #3
 800193e:	4614      	mov	r4, r2
 8001940:	461d      	mov	r5, r3
 8001942:	eb14 030a 	adds.w	r3, r4, sl
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	eb45 030b 	adc.w	r3, r5, fp
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195a:	4629      	mov	r1, r5
 800195c:	028b      	lsls	r3, r1, #10
 800195e:	4621      	mov	r1, r4
 8001960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001964:	4621      	mov	r1, r4
 8001966:	028a      	lsls	r2, r1, #10
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	2200      	movs	r2, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	60fa      	str	r2, [r7, #12]
 8001974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001978:	f7fe fc82 	bl	8000280 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800199e:	e002      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3740      	adds	r7, #64	; 0x40
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	017d7840 	.word	0x017d7840

080019c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	080060d0 	.word	0x080060d0

08001a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a04:	f7ff ffdc 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0b5b      	lsrs	r3, r3, #13
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	080060d0 	.word	0x080060d0

08001a28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	220f      	movs	r2, #15
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_RCC_GetClockConfig+0x60>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0207 	and.w	r2, r3, #7
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e041      	b.n	8001b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f839 	bl	8001b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f000 f9ca 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e044      	b.n	8001be2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d018      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b82:	d013      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_TIM_Base_Start_IT+0xbc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d111      	bne.n	8001bd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d010      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bce:	e007      	b.n	8001be0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40000c00 	.word	0x40000c00
 8001c00:	40014000 	.word	0x40014000

08001c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d122      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d11b      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0202 	mvn.w	r2, #2
 8001c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8ee 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8e0 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f1 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d122      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d11b      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0204 	mvn.w	r2, #4
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8c4 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8b6 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8c7 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d122      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d11b      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0208 	mvn.w	r2, #8
 8001cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f89a 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f88c 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f89d 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d122      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d11b      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0210 	mvn.w	r2, #16
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2208      	movs	r2, #8
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f870 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f862 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f873 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0201 	mvn.w	r2, #1
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fd0a 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b80      	cmp	r3, #128	; 0x80
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8e2 	bl	8001f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f838 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0220 	mvn.w	r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ac 	bl	8001f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00f      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d00b      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <TIM_Base_SetConfig+0xe8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a30      	ldr	r2, [pc, #192]	; (8001f50 <TIM_Base_SetConfig+0xec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <TIM_Base_SetConfig+0xf0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d108      	bne.n	8001eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d017      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <TIM_Base_SetConfig+0xe8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <TIM_Base_SetConfig+0xec>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <TIM_Base_SetConfig+0xf0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <TIM_Base_SetConfig+0xf4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <TIM_Base_SetConfig+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d103      	bne.n	8001f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40000800 	.word	0x40000800
 8001f54:	40000c00 	.word	0x40000c00
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	40014400 	.word	0x40014400
 8001f60:	40014800 	.word	0x40014800

08001f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e03f      	b.n	800201e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fc36 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f829 	bl	8002028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800202c:	b0c0      	sub	sp, #256	; 0x100
 800202e:	af00      	add	r7, sp, #0
 8002030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	ea40 0301 	orr.w	r3, r0, r1
 8002050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	431a      	orrs	r2, r3
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	431a      	orrs	r2, r3
 8002068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002080:	f021 010c 	bic.w	r1, r1, #12
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800208e:	430b      	orrs	r3, r1
 8002090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800209e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a2:	6999      	ldr	r1, [r3, #24]
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	ea40 0301 	orr.w	r3, r0, r1
 80020ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <UART_SetConfig+0x2cc>)
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d005      	beq.n	80020c8 <UART_SetConfig+0xa0>
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b8d      	ldr	r3, [pc, #564]	; (80022f8 <UART_SetConfig+0x2d0>)
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d104      	bne.n	80020d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020c8:	f7ff fc9a 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 80020cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020d0:	e003      	b.n	80020da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020d2:	f7ff fc81 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 80020d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e4:	f040 810c 	bne.w	8002300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ec:	2200      	movs	r2, #0
 80020ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020fa:	4622      	mov	r2, r4
 80020fc:	462b      	mov	r3, r5
 80020fe:	1891      	adds	r1, r2, r2
 8002100:	65b9      	str	r1, [r7, #88]	; 0x58
 8002102:	415b      	adcs	r3, r3
 8002104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800210a:	4621      	mov	r1, r4
 800210c:	eb12 0801 	adds.w	r8, r2, r1
 8002110:	4629      	mov	r1, r5
 8002112:	eb43 0901 	adc.w	r9, r3, r1
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800212a:	4690      	mov	r8, r2
 800212c:	4699      	mov	r9, r3
 800212e:	4623      	mov	r3, r4
 8002130:	eb18 0303 	adds.w	r3, r8, r3
 8002134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002138:	462b      	mov	r3, r5
 800213a:	eb49 0303 	adc.w	r3, r9, r3
 800213e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800214e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002156:	460b      	mov	r3, r1
 8002158:	18db      	adds	r3, r3, r3
 800215a:	653b      	str	r3, [r7, #80]	; 0x50
 800215c:	4613      	mov	r3, r2
 800215e:	eb42 0303 	adc.w	r3, r2, r3
 8002162:	657b      	str	r3, [r7, #84]	; 0x54
 8002164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800216c:	f7fe f888 	bl	8000280 <__aeabi_uldivmod>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4b61      	ldr	r3, [pc, #388]	; (80022fc <UART_SetConfig+0x2d4>)
 8002176:	fba3 2302 	umull	r2, r3, r3, r2
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	011c      	lsls	r4, r3, #4
 800217e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002182:	2200      	movs	r2, #0
 8002184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800218c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002190:	4642      	mov	r2, r8
 8002192:	464b      	mov	r3, r9
 8002194:	1891      	adds	r1, r2, r2
 8002196:	64b9      	str	r1, [r7, #72]	; 0x48
 8002198:	415b      	adcs	r3, r3
 800219a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800219c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021a0:	4641      	mov	r1, r8
 80021a2:	eb12 0a01 	adds.w	sl, r2, r1
 80021a6:	4649      	mov	r1, r9
 80021a8:	eb43 0b01 	adc.w	fp, r3, r1
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021c0:	4692      	mov	sl, r2
 80021c2:	469b      	mov	fp, r3
 80021c4:	4643      	mov	r3, r8
 80021c6:	eb1a 0303 	adds.w	r3, sl, r3
 80021ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ce:	464b      	mov	r3, r9
 80021d0:	eb4b 0303 	adc.w	r3, fp, r3
 80021d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021ec:	460b      	mov	r3, r1
 80021ee:	18db      	adds	r3, r3, r3
 80021f0:	643b      	str	r3, [r7, #64]	; 0x40
 80021f2:	4613      	mov	r3, r2
 80021f4:	eb42 0303 	adc.w	r3, r2, r3
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
 80021fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002202:	f7fe f83d 	bl	8000280 <__aeabi_uldivmod>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4611      	mov	r1, r2
 800220c:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <UART_SetConfig+0x2d4>)
 800220e:	fba3 2301 	umull	r2, r3, r3, r1
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2264      	movs	r2, #100	; 0x64
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	1acb      	subs	r3, r1, r3
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002222:	4b36      	ldr	r3, [pc, #216]	; (80022fc <UART_SetConfig+0x2d4>)
 8002224:	fba3 2302 	umull	r2, r3, r3, r2
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002230:	441c      	add	r4, r3
 8002232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002236:	2200      	movs	r2, #0
 8002238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800223c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002244:	4642      	mov	r2, r8
 8002246:	464b      	mov	r3, r9
 8002248:	1891      	adds	r1, r2, r2
 800224a:	63b9      	str	r1, [r7, #56]	; 0x38
 800224c:	415b      	adcs	r3, r3
 800224e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002254:	4641      	mov	r1, r8
 8002256:	1851      	adds	r1, r2, r1
 8002258:	6339      	str	r1, [r7, #48]	; 0x30
 800225a:	4649      	mov	r1, r9
 800225c:	414b      	adcs	r3, r1
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800226c:	4659      	mov	r1, fp
 800226e:	00cb      	lsls	r3, r1, #3
 8002270:	4651      	mov	r1, sl
 8002272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002276:	4651      	mov	r1, sl
 8002278:	00ca      	lsls	r2, r1, #3
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	4603      	mov	r3, r0
 8002280:	4642      	mov	r2, r8
 8002282:	189b      	adds	r3, r3, r2
 8002284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002288:	464b      	mov	r3, r9
 800228a:	460a      	mov	r2, r1
 800228c:	eb42 0303 	adc.w	r3, r2, r3
 8002290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022a8:	460b      	mov	r3, r1
 80022aa:	18db      	adds	r3, r3, r3
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ae:	4613      	mov	r3, r2
 80022b0:	eb42 0303 	adc.w	r3, r2, r3
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022be:	f7fd ffdf 	bl	8000280 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <UART_SetConfig+0x2d4>)
 80022c8:	fba3 1302 	umull	r1, r3, r3, r2
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	2164      	movs	r1, #100	; 0x64
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	3332      	adds	r3, #50	; 0x32
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <UART_SetConfig+0x2d4>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	f003 0207 	and.w	r2, r3, #7
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4422      	add	r2, r4
 80022ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022f0:	e106      	b.n	8002500 <UART_SetConfig+0x4d8>
 80022f2:	bf00      	nop
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40011400 	.word	0x40011400
 80022fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002304:	2200      	movs	r2, #0
 8002306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800230a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800230e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002312:	4642      	mov	r2, r8
 8002314:	464b      	mov	r3, r9
 8002316:	1891      	adds	r1, r2, r2
 8002318:	6239      	str	r1, [r7, #32]
 800231a:	415b      	adcs	r3, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
 800231e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002322:	4641      	mov	r1, r8
 8002324:	1854      	adds	r4, r2, r1
 8002326:	4649      	mov	r1, r9
 8002328:	eb43 0501 	adc.w	r5, r3, r1
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	00eb      	lsls	r3, r5, #3
 8002336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800233a:	00e2      	lsls	r2, r4, #3
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	4643      	mov	r3, r8
 8002342:	18e3      	adds	r3, r4, r3
 8002344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002348:	464b      	mov	r3, r9
 800234a:	eb45 0303 	adc.w	r3, r5, r3
 800234e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800235e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800236e:	4629      	mov	r1, r5
 8002370:	008b      	lsls	r3, r1, #2
 8002372:	4621      	mov	r1, r4
 8002374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002378:	4621      	mov	r1, r4
 800237a:	008a      	lsls	r2, r1, #2
 800237c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002380:	f7fd ff7e 	bl	8000280 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4b60      	ldr	r3, [pc, #384]	; (800250c <UART_SetConfig+0x4e4>)
 800238a:	fba3 2302 	umull	r2, r3, r3, r2
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	011c      	lsls	r4, r3, #4
 8002392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002396:	2200      	movs	r2, #0
 8002398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800239c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023a4:	4642      	mov	r2, r8
 80023a6:	464b      	mov	r3, r9
 80023a8:	1891      	adds	r1, r2, r2
 80023aa:	61b9      	str	r1, [r7, #24]
 80023ac:	415b      	adcs	r3, r3
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b4:	4641      	mov	r1, r8
 80023b6:	1851      	adds	r1, r2, r1
 80023b8:	6139      	str	r1, [r7, #16]
 80023ba:	4649      	mov	r1, r9
 80023bc:	414b      	adcs	r3, r1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023cc:	4659      	mov	r1, fp
 80023ce:	00cb      	lsls	r3, r1, #3
 80023d0:	4651      	mov	r1, sl
 80023d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d6:	4651      	mov	r1, sl
 80023d8:	00ca      	lsls	r2, r1, #3
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	4603      	mov	r3, r0
 80023e0:	4642      	mov	r2, r8
 80023e2:	189b      	adds	r3, r3, r2
 80023e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023e8:	464b      	mov	r3, r9
 80023ea:	460a      	mov	r2, r1
 80023ec:	eb42 0303 	adc.w	r3, r2, r3
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80023fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800240c:	4649      	mov	r1, r9
 800240e:	008b      	lsls	r3, r1, #2
 8002410:	4641      	mov	r1, r8
 8002412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002416:	4641      	mov	r1, r8
 8002418:	008a      	lsls	r2, r1, #2
 800241a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800241e:	f7fd ff2f 	bl	8000280 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4611      	mov	r1, r2
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <UART_SetConfig+0x4e4>)
 800242a:	fba3 2301 	umull	r2, r3, r3, r1
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2264      	movs	r2, #100	; 0x64
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	1acb      	subs	r3, r1, r3
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	3332      	adds	r3, #50	; 0x32
 800243c:	4a33      	ldr	r2, [pc, #204]	; (800250c <UART_SetConfig+0x4e4>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002448:	441c      	add	r4, r3
 800244a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800244e:	2200      	movs	r2, #0
 8002450:	673b      	str	r3, [r7, #112]	; 0x70
 8002452:	677a      	str	r2, [r7, #116]	; 0x74
 8002454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002458:	4642      	mov	r2, r8
 800245a:	464b      	mov	r3, r9
 800245c:	1891      	adds	r1, r2, r2
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	415b      	adcs	r3, r3
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002468:	4641      	mov	r1, r8
 800246a:	1851      	adds	r1, r2, r1
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	4649      	mov	r1, r9
 8002470:	414b      	adcs	r3, r1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002480:	4659      	mov	r1, fp
 8002482:	00cb      	lsls	r3, r1, #3
 8002484:	4651      	mov	r1, sl
 8002486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800248a:	4651      	mov	r1, sl
 800248c:	00ca      	lsls	r2, r1, #3
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	4603      	mov	r3, r0
 8002494:	4642      	mov	r2, r8
 8002496:	189b      	adds	r3, r3, r2
 8002498:	66bb      	str	r3, [r7, #104]	; 0x68
 800249a:	464b      	mov	r3, r9
 800249c:	460a      	mov	r2, r1
 800249e:	eb42 0303 	adc.w	r3, r2, r3
 80024a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	663b      	str	r3, [r7, #96]	; 0x60
 80024ae:	667a      	str	r2, [r7, #100]	; 0x64
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024bc:	4649      	mov	r1, r9
 80024be:	008b      	lsls	r3, r1, #2
 80024c0:	4641      	mov	r1, r8
 80024c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024c6:	4641      	mov	r1, r8
 80024c8:	008a      	lsls	r2, r1, #2
 80024ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024ce:	f7fd fed7 	bl	8000280 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <UART_SetConfig+0x4e4>)
 80024d8:	fba3 1302 	umull	r1, r3, r3, r2
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	2164      	movs	r1, #100	; 0x64
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	3332      	adds	r3, #50	; 0x32
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <UART_SetConfig+0x4e4>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	f003 020f 	and.w	r2, r3, #15
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4422      	add	r2, r4
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002506:	46bd      	mov	sp, r7
 8002508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250c:	51eb851f 	.word	0x51eb851f

08002510 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Handler+0x1c>)
 8002516:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002518:	f001 fdba 	bl	8004090 <xTaskGetSchedulerState>
 800251c:	4603      	mov	r3, r0
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002522:	f002 fbb9 	bl	8004c98 <xPortSysTickHandler>
  }
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <vApplicationGetIdleTaskMemory+0x2c>)
 8002540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <vApplicationGetIdleTaskMemory+0x30>)
 8002546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000124 	.word	0x20000124
 8002560:	20000180 	.word	0x20000180

08002564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <vApplicationGetTimerTaskMemory+0x2c>)
 8002574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <vApplicationGetTimerTaskMemory+0x30>)
 800257a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	20000380 	.word	0x20000380
 8002594:	200003dc 	.word	0x200003dc

08002598 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800259e:	2020      	movs	r0, #32
 80025a0:	f002 fc0a 	bl	8004db8 <pvPortMalloc>
 80025a4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f941 	bl	800283e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80025c2:	687b      	ldr	r3, [r7, #4]
	}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <xEventGroupSync+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	61bb      	str	r3, [r7, #24]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <xEventGroupSync+0x34>
	configASSERT( uxBitsToWaitFor != 0 );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xEventGroupSync+0x52>
	__asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	617b      	str	r3, [r7, #20]
}
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xEventGroupSync+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800261e:	f001 fd37 	bl	8004090 <xTaskGetSchedulerState>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <xEventGroupSync+0x62>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <xEventGroupSync+0x66>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <xEventGroupSync+0x68>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <xEventGroupSync+0x82>
	__asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	613b      	str	r3, [r7, #16]
}
 800264a:	bf00      	nop
 800264c:	e7fe      	b.n	800264c <xEventGroupSync+0x80>
	}
	#endif

	vTaskSuspendAll();
 800264e:	f001 f89f 	bl	8003790 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	623b      	str	r3, [r7, #32]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f864 	bl	8002728 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d10d      	bne.n	800268c <xEventGroupSync+0xc0>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4313      	orrs	r3, r2
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	43db      	mvns	r3, r3
 8002680:	401a      	ands	r2, r3
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	601a      	str	r2, [r3, #0]

			xTicksToWait = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	e013      	b.n	80026b4 <xEventGroupSync+0xe8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <xEventGroupSync+0xde>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	1d18      	adds	r0, r3, #4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	f001 fa6e 	bl	8003b80 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a8:	e004      	b.n	80026b4 <xEventGroupSync+0xe8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				xTimeoutOccurred = pdTRUE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80026b4:	f001 f87a 	bl	80037ac <xTaskResumeAll>
 80026b8:	61f8      	str	r0, [r7, #28]

	if( xTicksToWait != ( TickType_t ) 0 )
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02c      	beq.n	800271a <xEventGroupSync+0x14e>
	{
		if( xAlreadyYielded == pdFALSE )
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <xEventGroupSync+0x10a>
		{
			portYIELD_WITHIN_API();
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <xEventGroupSync+0x158>)
 80026c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80026d6:	f001 fd67 	bl	80041a8 <uxTaskResetEventItemValue>
 80026da:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <xEventGroupSync+0x146>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 80026e6:	f002 fa45 	bl	8004b74 <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80026f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <xEventGroupSync+0x13e>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	43db      	mvns	r3, r3
 8002704:	401a      	ands	r2, r3
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800270a:	f002 fa63 	bl	8004bd4 <vPortExitCritical>

			xTimeoutOccurred = pdTRUE;
 800270e:	2301      	movs	r3, #1
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800271c:	4618      	mov	r0, r3
 800271e:	3730      	adds	r7, #48	; 0x30
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08e      	sub	sp, #56	; 0x38
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002732:	2300      	movs	r3, #0
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xEventGroupSetBits+0x32>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	613b      	str	r3, [r7, #16]
}
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <xEventGroupSetBits+0x52>
	__asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	60fb      	str	r3, [r7, #12]
}
 8002776:	bf00      	nop
 8002778:	e7fe      	b.n	8002778 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	3304      	adds	r3, #4
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	3308      	adds	r3, #8
 8002784:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002786:	f001 f803 	bl	8003790 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	431a      	orrs	r2, r3
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800279c:	e03c      	b.n	8002818 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80027b4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027bc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d108      	bne.n	80027da <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d8:	e008      	b.n	80027ec <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d101      	bne.n	80027ec <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80027e8:	2301      	movs	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d010      	beq.n	8002814 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80027fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800280c:	4619      	mov	r1, r3
 800280e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002810:	f001 fa82 	bl	8003d18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	429a      	cmp	r2, r3
 800281e:	d1be      	bne.n	800279e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	43db      	mvns	r3, r3
 8002828:	401a      	ands	r2, r3
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800282e:	f000 ffbd 	bl	80037ac <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	681b      	ldr	r3, [r3, #0]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3738      	adds	r7, #56	; 0x38
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f103 0208 	add.w	r2, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f04f 32ff 	mov.w	r2, #4294967295
 8002856:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0208 	add.w	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f103 0208 	add.w	r2, r3, #8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d103      	bne.n	8002900 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e00c      	b.n	800291a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3308      	adds	r3, #8
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e002      	b.n	800290e <vListInsert+0x2e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d2f6      	bcs.n	8002908 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6852      	ldr	r2, [r2, #4]
 8002972:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d103      	bne.n	8002986 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	60bb      	str	r3, [r7, #8]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029d2:	f002 f8cf 	bl	8004b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	3b01      	subs	r3, #1
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	441a      	add	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d114      	bne.n	8002a52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01a      	beq.n	8002a66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3310      	adds	r3, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f90b 	bl	8003c50 <xTaskRemoveFromEventList>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d012      	beq.n	8002a66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <xQueueGenericReset+0xcc>)
 8002a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	e009      	b.n	8002a66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3310      	adds	r3, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fef1 	bl	800283e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff feec 	bl	800283e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a66:	f002 f8b5 	bl	8004bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a6a:	2301      	movs	r3, #1
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	e000ed04 	.word	0xe000ed04

08002a78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	; 0x38
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <xQueueGenericCreateStatic+0x52>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <xQueueGenericCreateStatic+0x56>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <xQueueGenericCreateStatic+0x58>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	623b      	str	r3, [r7, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <xQueueGenericCreateStatic+0x7e>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <xQueueGenericCreateStatic+0x82>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <xQueueGenericCreateStatic+0x84>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10a      	bne.n	8002b16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	61fb      	str	r3, [r7, #28]
}
 8002b12:	bf00      	nop
 8002b14:	e7fe      	b.n	8002b14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b16:	2350      	movs	r3, #80	; 0x50
 8002b18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b50      	cmp	r3, #80	; 0x50
 8002b1e:	d00a      	beq.n	8002b36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	61bb      	str	r3, [r7, #24]
}
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f805 	bl	8002b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3730      	adds	r7, #48	; 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e002      	b.n	8002b8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b96:	2101      	movs	r1, #1
 8002b98:	69b8      	ldr	r0, [r7, #24]
 8002b9a:	f7ff ff05 	bl	80029a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	; 0x38
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericSend+0x32>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <xQueueGenericSend+0x40>
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <xQueueGenericSend+0x44>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <xQueueGenericSend+0x46>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <xQueueGenericSend+0x60>
	__asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c0c:	bf00      	nop
 8002c0e:	e7fe      	b.n	8002c0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d103      	bne.n	8002c1e <xQueueGenericSend+0x6e>
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <xQueueGenericSend+0x72>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <xQueueGenericSend+0x74>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericSend+0x8e>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	623b      	str	r3, [r7, #32]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c3e:	f001 fa27 	bl	8004090 <xTaskGetSchedulerState>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <xQueueGenericSend+0x9e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <xQueueGenericSend+0xa2>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueGenericSend+0xa4>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericSend+0xbe>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61fb      	str	r3, [r7, #28]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c6e:	f001 ff81 	bl	8004b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <xQueueGenericSend+0xd4>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d129      	bne.n	8002cd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8a:	f000 fa0b 	bl	80030a4 <prvCopyDataToQueue>
 8002c8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	3324      	adds	r3, #36	; 0x24
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 ffd7 	bl	8003c50 <xTaskRemoveFromEventList>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <xQueueGenericSend+0x1f8>)
 8002caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	e00a      	b.n	8002cd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <xQueueGenericSend+0x1f8>)
 8002cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cd0:	f001 ff80 	bl	8004bd4 <vPortExitCritical>
				return pdPASS;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e063      	b.n	8002da0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cde:	f001 ff79 	bl	8004bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e05c      	b.n	8002da0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 f873 	bl	8003ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cfa:	f001 ff6b 	bl	8004bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cfe:	f000 fd47 	bl	8003790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d02:	f001 ff37 	bl	8004b74 <vPortEnterCritical>
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d103      	bne.n	8002d1c <xQueueGenericSend+0x16c>
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d103      	bne.n	8002d32 <xQueueGenericSend+0x182>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d32:	f001 ff4f 	bl	8004bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d36:	1d3a      	adds	r2, r7, #4
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f862 	bl	8003e08 <xTaskCheckForTimeOut>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d124      	bne.n	8002d94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d4c:	f000 faa2 	bl	8003294 <prvIsQueueFull>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	3310      	adds	r3, #16
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 feea 	bl	8003b38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d66:	f000 fa2d 	bl	80031c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d6a:	f000 fd1f 	bl	80037ac <xTaskResumeAll>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af7c 	bne.w	8002c6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <xQueueGenericSend+0x1f8>)
 8002d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	e772      	b.n	8002c6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d8a:	f000 fa1b 	bl	80031c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d8e:	f000 fd0d 	bl	80037ac <xTaskResumeAll>
 8002d92:	e76c      	b.n	8002c6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d96:	f000 fa15 	bl	80031c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d9a:	f000 fd07 	bl	80037ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3738      	adds	r7, #56	; 0x38
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	; 0x40
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <xQueueGenericSendFromISR+0x3c>
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <xQueueGenericSendFromISR+0x40>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <xQueueGenericSendFromISR+0x42>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e04:	bf00      	nop
 8002e06:	e7fe      	b.n	8002e06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d103      	bne.n	8002e16 <xQueueGenericSendFromISR+0x6a>
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <xQueueGenericSendFromISR+0x6e>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <xQueueGenericSendFromISR+0x70>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	623b      	str	r3, [r7, #32]
}
 8002e32:	bf00      	nop
 8002e34:	e7fe      	b.n	8002e34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e36:	f001 ff7f 	bl	8004d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	61fa      	str	r2, [r7, #28]
 8002e50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d302      	bcc.n	8002e68 <xQueueGenericSendFromISR+0xbc>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d12f      	bne.n	8002ec8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e7e:	f000 f911 	bl	80030a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d112      	bne.n	8002eb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	3324      	adds	r3, #36	; 0x24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fed9 	bl	8003c50 <xTaskRemoveFromEventList>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e007      	b.n	8002ec2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	b25a      	sxtb	r2, r3
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002ec6:	e001      	b.n	8002ecc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ed6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3740      	adds	r7, #64	; 0x40
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	; 0x30
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <xQueueReceive+0x30>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	623b      	str	r3, [r7, #32]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <xQueueReceive+0x3e>
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <xQueueReceive+0x42>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xQueueReceive+0x44>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <xQueueReceive+0x5e>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	61fb      	str	r3, [r7, #28]
}
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f42:	f001 f8a5 	bl	8004090 <xTaskGetSchedulerState>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <xQueueReceive+0x6e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <xQueueReceive+0x72>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueReceive+0x74>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueReceive+0x8e>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61bb      	str	r3, [r7, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f72:	f001 fdff 	bl	8004b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01f      	beq.n	8002fc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f86:	f000 f8f7 	bl	8003178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00f      	beq.n	8002fba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	3310      	adds	r3, #16
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fe56 	bl	8003c50 <xTaskRemoveFromEventList>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <xQueueReceive+0x1bc>)
 8002fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fba:	f001 fe0b 	bl	8004bd4 <vPortExitCritical>
				return pdPASS;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e069      	b.n	8003096 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fc8:	f001 fe04 	bl	8004bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e062      	b.n	8003096 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fefe 	bl	8003ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fe4:	f001 fdf6 	bl	8004bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fe8:	f000 fbd2 	bl	8003790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fec:	f001 fdc2 	bl	8004b74 <vPortEnterCritical>
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff6:	b25b      	sxtb	r3, r3
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d103      	bne.n	8003006 <xQueueReceive+0x122>
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d103      	bne.n	800301c <xQueueReceive+0x138>
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800301c:	f001 fdda 	bl	8004bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003020:	1d3a      	adds	r2, r7, #4
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 feed 	bl	8003e08 <xTaskCheckForTimeOut>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d123      	bne.n	800307c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003036:	f000 f917 	bl	8003268 <prvIsQueueEmpty>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d017      	beq.n	8003070 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fd75 	bl	8003b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800304e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003050:	f000 f8b8 	bl	80031c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003054:	f000 fbaa 	bl	80037ac <xTaskResumeAll>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d189      	bne.n	8002f72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <xQueueReceive+0x1bc>)
 8003060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	e780      	b.n	8002f72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003072:	f000 f8a7 	bl	80031c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003076:	f000 fb99 	bl	80037ac <xTaskResumeAll>
 800307a:	e77a      	b.n	8002f72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800307c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307e:	f000 f8a1 	bl	80031c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003082:	f000 fb93 	bl	80037ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003088:	f000 f8ee 	bl	8003268 <prvIsQueueEmpty>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f43f af6f 	beq.w	8002f72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003096:	4618      	mov	r0, r3
 8003098:	3730      	adds	r7, #48	; 0x30
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10d      	bne.n	80030de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d14d      	bne.n	8003166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fffc 	bl	80040cc <xTaskPriorityDisinherit>
 80030d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	e043      	b.n	8003166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d119      	bne.n	8003118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6858      	ldr	r0, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	461a      	mov	r2, r3
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	f002 f9df 	bl	80054b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d32b      	bcc.n	8003166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e026      	b.n	8003166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68d8      	ldr	r0, [r3, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	461a      	mov	r2, r3
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	f002 f9c5 	bl	80054b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	425b      	negs	r3, r3
 8003132:	441a      	add	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	425b      	negs	r3, r3
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d105      	bne.n	8003166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3b01      	subs	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800316e:	697b      	ldr	r3, [r7, #20]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	441a      	add	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d303      	bcc.n	80031ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68d9      	ldr	r1, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	461a      	mov	r2, r3
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f002 f97b 	bl	80054b2 <memcpy>
	}
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031cc:	f001 fcd2 	bl	8004b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031d8:	e011      	b.n	80031fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d012      	beq.n	8003208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3324      	adds	r3, #36	; 0x24
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fd32 	bl	8003c50 <xTaskRemoveFromEventList>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031f2:	f000 fe6b 	bl	8003ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dce9      	bgt.n	80031da <prvUnlockQueue+0x16>
 8003206:	e000      	b.n	800320a <prvUnlockQueue+0x46>
					break;
 8003208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	22ff      	movs	r2, #255	; 0xff
 800320e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003212:	f001 fcdf 	bl	8004bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003216:	f001 fcad 	bl	8004b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003222:	e011      	b.n	8003248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3310      	adds	r3, #16
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fd0d 	bl	8003c50 <xTaskRemoveFromEventList>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800323c:	f000 fe46 	bl	8003ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	3b01      	subs	r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800324c:	2b00      	cmp	r3, #0
 800324e:	dce9      	bgt.n	8003224 <prvUnlockQueue+0x60>
 8003250:	e000      	b.n	8003254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	22ff      	movs	r2, #255	; 0xff
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800325c:	f001 fcba 	bl	8004bd4 <vPortExitCritical>
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003270:	f001 fc80 	bl	8004b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800327c:	2301      	movs	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e001      	b.n	8003286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003286:	f001 fca5 	bl	8004bd4 <vPortExitCritical>

	return xReturn;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800329c:	f001 fc6a 	bl	8004b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d102      	bne.n	80032b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e001      	b.n	80032b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032b6:	f001 fc8d 	bl	8004bd4 <vPortExitCritical>

	return xReturn;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e014      	b.n	80032fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032d4:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <vQueueAddToRegistry+0x50>)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <vQueueAddToRegistry+0x50>)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <vQueueAddToRegistry+0x50>)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032f6:	e006      	b.n	8003306 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b07      	cmp	r3, #7
 8003302:	d9e7      	bls.n	80032d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	200007dc 	.word	0x200007dc

08003318 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003328:	f001 fc24 	bl	8004b74 <vPortEnterCritical>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003332:	b25b      	sxtb	r3, r3
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d103      	bne.n	8003342 <vQueueWaitForMessageRestricted+0x2a>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003348:	b25b      	sxtb	r3, r3
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d103      	bne.n	8003358 <vQueueWaitForMessageRestricted+0x40>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003358:	f001 fc3c 	bl	8004bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3324      	adds	r3, #36	; 0x24
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fc43 	bl	8003bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff26 	bl	80031c4 <prvUnlockQueue>
	}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af04      	add	r7, sp, #16
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	623b      	str	r3, [r7, #32]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	61fb      	str	r3, [r7, #28]
}
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033c6:	235c      	movs	r3, #92	; 0x5c
 80033c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b5c      	cmp	r3, #92	; 0x5c
 80033ce:	d00a      	beq.n	80033e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	61bb      	str	r3, [r7, #24]
}
 80033e2:	bf00      	nop
 80033e4:	e7fe      	b.n	80033e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01e      	beq.n	800342c <xTaskCreateStatic+0xac>
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01b      	beq.n	800342c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003406:	2300      	movs	r3, #0
 8003408:	9303      	str	r3, [sp, #12]
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	9302      	str	r3, [sp, #8]
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f850 	bl	80034c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003426:	f000 f8dd 	bl	80035e4 <prvAddNewTaskToReadyList>
 800342a:	e001      	b.n	8003430 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003430:	697b      	ldr	r3, [r7, #20]
	}
 8003432:	4618      	mov	r0, r3
 8003434:	3728      	adds	r7, #40	; 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800343a:	b580      	push	{r7, lr}
 800343c:	b08c      	sub	sp, #48	; 0x30
 800343e:	af04      	add	r7, sp, #16
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f001 fcb2 	bl	8004db8 <pvPortMalloc>
 8003454:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800345c:	205c      	movs	r0, #92	; 0x5c
 800345e:	f001 fcab 	bl	8004db8 <pvPortMalloc>
 8003462:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
 8003470:	e005      	b.n	800347e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003472:	6978      	ldr	r0, [r7, #20]
 8003474:	f001 fd6c 	bl	8004f50 <vPortFree>
 8003478:	e001      	b.n	800347e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800348c:	88fa      	ldrh	r2, [r7, #6]
 800348e:	2300      	movs	r3, #0
 8003490:	9303      	str	r3, [sp, #12]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	9302      	str	r3, [sp, #8]
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f80e 	bl	80034c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034a8:	69f8      	ldr	r0, [r7, #28]
 80034aa:	f000 f89b 	bl	80035e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e002      	b.n	80034ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
 80034b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034ba:	69bb      	ldr	r3, [r7, #24]
	}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	461a      	mov	r2, r3
 80034dc:	21a5      	movs	r1, #165	; 0xa5
 80034de:	f001 ff6c 	bl	80053ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034ec:	3b01      	subs	r3, #1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f023 0307 	bic.w	r3, r3, #7
 80034fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	617b      	str	r3, [r7, #20]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01f      	beq.n	8003562 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e012      	b.n	800354e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	4413      	add	r3, r2
 800352e:	7819      	ldrb	r1, [r3, #0]
 8003530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	3334      	adds	r3, #52	; 0x34
 8003538:	460a      	mov	r2, r1
 800353a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d006      	beq.n	8003556 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b0f      	cmp	r3, #15
 8003552:	d9e9      	bls.n	8003528 <prvInitialiseNewTask+0x64>
 8003554:	e000      	b.n	8003558 <prvInitialiseNewTask+0x94>
			{
				break;
 8003556:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003560:	e003      	b.n	800356a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	2b37      	cmp	r3, #55	; 0x37
 800356e:	d901      	bls.n	8003574 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003570:	2337      	movs	r3, #55	; 0x37
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800357e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	2200      	movs	r2, #0
 8003584:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	3304      	adds	r3, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f977 	bl	800287e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	3318      	adds	r3, #24
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f972 	bl	800287e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	2200      	movs	r2, #0
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	68f9      	ldr	r1, [r7, #12]
 80035c2:	69b8      	ldr	r0, [r7, #24]
 80035c4:	f001 f9aa 	bl	800491c <pxPortInitialiseStack>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035da:	bf00      	nop
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035ec:	f001 fac2 	bl	8004b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <prvAddNewTaskToReadyList+0xc4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <prvAddNewTaskToReadyList+0xc4>)
 80035f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <prvAddNewTaskToReadyList+0xc8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <prvAddNewTaskToReadyList+0xc8>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <prvAddNewTaskToReadyList+0xc4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d110      	bne.n	8003632 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003610:	f000 fc80 	bl	8003f14 <prvInitialiseTaskLists>
 8003614:	e00d      	b.n	8003632 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <prvAddNewTaskToReadyList+0xcc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800361e:	4b23      	ldr	r3, [pc, #140]	; (80036ac <prvAddNewTaskToReadyList+0xc8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	429a      	cmp	r2, r3
 800362a:	d802      	bhi.n	8003632 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800362c:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <prvAddNewTaskToReadyList+0xc8>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <prvAddNewTaskToReadyList+0xd0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <prvAddNewTaskToReadyList+0xd0>)
 800363a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <prvAddNewTaskToReadyList+0xd0>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <prvAddNewTaskToReadyList+0xd4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d903      	bls.n	8003658 <prvAddNewTaskToReadyList+0x74>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <prvAddNewTaskToReadyList+0xd4>)
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <prvAddNewTaskToReadyList+0xd8>)
 8003666:	441a      	add	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	4619      	mov	r1, r3
 800366e:	4610      	mov	r0, r2
 8003670:	f7ff f912 	bl	8002898 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003674:	f001 faae 	bl	8004bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <prvAddNewTaskToReadyList+0xcc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <prvAddNewTaskToReadyList+0xc8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	429a      	cmp	r2, r3
 800368c:	d207      	bcs.n	800369e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <prvAddNewTaskToReadyList+0xdc>)
 8003690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000cf0 	.word	0x20000cf0
 80036ac:	2000081c 	.word	0x2000081c
 80036b0:	20000cfc 	.word	0x20000cfc
 80036b4:	20000d0c 	.word	0x20000d0c
 80036b8:	20000cf8 	.word	0x20000cf8
 80036bc:	20000820 	.word	0x20000820
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036d2:	463a      	mov	r2, r7
 80036d4:	1d39      	adds	r1, r7, #4
 80036d6:	f107 0308 	add.w	r3, r7, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe ff28 	bl	8002530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	460a      	mov	r2, r1
 80036f2:	4921      	ldr	r1, [pc, #132]	; (8003778 <vTaskStartScheduler+0xb4>)
 80036f4:	4821      	ldr	r0, [pc, #132]	; (800377c <vTaskStartScheduler+0xb8>)
 80036f6:	f7ff fe43 	bl	8003380 <xTaskCreateStatic>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4a20      	ldr	r2, [pc, #128]	; (8003780 <vTaskStartScheduler+0xbc>)
 80036fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003700:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <vTaskStartScheduler+0xbc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e001      	b.n	8003712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d102      	bne.n	800371e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003718:	f000 fdb2 	bl	8004280 <xTimerCreateTimerTask>
 800371c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d116      	bne.n	8003752 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	613b      	str	r3, [r7, #16]
}
 8003736:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <vTaskStartScheduler+0xc0>)
 800373a:	f04f 32ff 	mov.w	r2, #4294967295
 800373e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <vTaskStartScheduler+0xc4>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <vTaskStartScheduler+0xc8>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800374c:	f001 f970 	bl	8004a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003750:	e00e      	b.n	8003770 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d10a      	bne.n	8003770 <vTaskStartScheduler+0xac>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60fb      	str	r3, [r7, #12]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <vTaskStartScheduler+0xaa>
}
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	080060a8 	.word	0x080060a8
 800377c:	08003ee5 	.word	0x08003ee5
 8003780:	20000d14 	.word	0x20000d14
 8003784:	20000d10 	.word	0x20000d10
 8003788:	20000cfc 	.word	0x20000cfc
 800378c:	20000cf4 	.word	0x20000cf4

08003790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <vTaskSuspendAll+0x18>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <vTaskSuspendAll+0x18>)
 800379c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000d18 	.word	0x20000d18

080037ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037ba:	4b42      	ldr	r3, [pc, #264]	; (80038c4 <xTaskResumeAll+0x118>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	603b      	str	r3, [r7, #0]
}
 80037d4:	bf00      	nop
 80037d6:	e7fe      	b.n	80037d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037d8:	f001 f9cc 	bl	8004b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037dc:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <xTaskResumeAll+0x118>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	4a38      	ldr	r2, [pc, #224]	; (80038c4 <xTaskResumeAll+0x118>)
 80037e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e6:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <xTaskResumeAll+0x118>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d162      	bne.n	80038b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <xTaskResumeAll+0x11c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d05e      	beq.n	80038b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037f6:	e02f      	b.n	8003858 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <xTaskResumeAll+0x120>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3318      	adds	r3, #24
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f8a4 	bl	8002952 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3304      	adds	r3, #4
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f89f 	bl	8002952 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <xTaskResumeAll+0x124>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d903      	bls.n	8003828 <xTaskResumeAll+0x7c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <xTaskResumeAll+0x124>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4a27      	ldr	r2, [pc, #156]	; (80038d4 <xTaskResumeAll+0x128>)
 8003836:	441a      	add	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f7ff f82a 	bl	8002898 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <xTaskResumeAll+0x12c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <xTaskResumeAll+0x130>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <xTaskResumeAll+0x120>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1cb      	bne.n	80037f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003866:	f000 fbf3 	bl	8004050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <xTaskResumeAll+0x134>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003876:	f000 f847 	bl	8003908 <xTaskIncrementTick>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <xTaskResumeAll+0x130>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3b01      	subs	r3, #1
 800388a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f1      	bne.n	8003876 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <xTaskResumeAll+0x134>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <xTaskResumeAll+0x130>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <xTaskResumeAll+0x138>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038b4:	f001 f98e 	bl	8004bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80038b8:	68bb      	ldr	r3, [r7, #8]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000d18 	.word	0x20000d18
 80038c8:	20000cf0 	.word	0x20000cf0
 80038cc:	20000cb0 	.word	0x20000cb0
 80038d0:	20000cf8 	.word	0x20000cf8
 80038d4:	20000820 	.word	0x20000820
 80038d8:	2000081c 	.word	0x2000081c
 80038dc:	20000d04 	.word	0x20000d04
 80038e0:	20000d00 	.word	0x20000d00
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <xTaskGetTickCount+0x1c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038f4:	687b      	ldr	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000cf4 	.word	0x20000cf4

08003908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003912:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <xTaskIncrementTick+0x148>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 808f 	bne.w	8003a3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800391c:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <xTaskIncrementTick+0x14c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003924:	4a4b      	ldr	r2, [pc, #300]	; (8003a54 <xTaskIncrementTick+0x14c>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d120      	bne.n	8003972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003930:	4b49      	ldr	r3, [pc, #292]	; (8003a58 <xTaskIncrementTick+0x150>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <xTaskIncrementTick+0x48>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	603b      	str	r3, [r7, #0]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xTaskIncrementTick+0x46>
 8003950:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <xTaskIncrementTick+0x150>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <xTaskIncrementTick+0x154>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3f      	ldr	r2, [pc, #252]	; (8003a58 <xTaskIncrementTick+0x150>)
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4a3f      	ldr	r2, [pc, #252]	; (8003a5c <xTaskIncrementTick+0x154>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b3e      	ldr	r3, [pc, #248]	; (8003a60 <xTaskIncrementTick+0x158>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	4a3d      	ldr	r2, [pc, #244]	; (8003a60 <xTaskIncrementTick+0x158>)
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	f000 fb6f 	bl	8004050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003972:	4b3c      	ldr	r3, [pc, #240]	; (8003a64 <xTaskIncrementTick+0x15c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	429a      	cmp	r2, r3
 800397a:	d349      	bcc.n	8003a10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <xTaskIncrementTick+0x150>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <xTaskIncrementTick+0x15c>)
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	601a      	str	r2, [r3, #0]
					break;
 800398e:	e03f      	b.n	8003a10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <xTaskIncrementTick+0x150>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d203      	bcs.n	80039b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039a8:	4a2e      	ldr	r2, [pc, #184]	; (8003a64 <xTaskIncrementTick+0x15c>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039ae:	e02f      	b.n	8003a10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ffcc 	bl	8002952 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3318      	adds	r3, #24
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe ffc3 	bl	8002952 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <xTaskIncrementTick+0x160>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d903      	bls.n	80039e0 <xTaskIncrementTick+0xd8>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <xTaskIncrementTick+0x160>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <xTaskIncrementTick+0x164>)
 80039ee:	441a      	add	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f7fe ff4e 	bl	8002898 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <xTaskIncrementTick+0x168>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3b8      	bcc.n	800397c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a0e:	e7b5      	b.n	800397c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a10:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <xTaskIncrementTick+0x168>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4915      	ldr	r1, [pc, #84]	; (8003a6c <xTaskIncrementTick+0x164>)
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d901      	bls.n	8003a2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <xTaskIncrementTick+0x16c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e004      	b.n	8003a44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <xTaskIncrementTick+0x170>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <xTaskIncrementTick+0x170>)
 8003a42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a44:	697b      	ldr	r3, [r7, #20]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000d18 	.word	0x20000d18
 8003a54:	20000cf4 	.word	0x20000cf4
 8003a58:	20000ca8 	.word	0x20000ca8
 8003a5c:	20000cac 	.word	0x20000cac
 8003a60:	20000d08 	.word	0x20000d08
 8003a64:	20000d10 	.word	0x20000d10
 8003a68:	20000cf8 	.word	0x20000cf8
 8003a6c:	20000820 	.word	0x20000820
 8003a70:	2000081c 	.word	0x2000081c
 8003a74:	20000d04 	.word	0x20000d04
 8003a78:	20000d00 	.word	0x20000d00

08003a7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <vTaskSwitchContext+0xa8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a8a:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <vTaskSwitchContext+0xac>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a90:	e041      	b.n	8003b16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <vTaskSwitchContext+0xac>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <vTaskSwitchContext+0xb0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e010      	b.n	8003ac2 <vTaskSwitchContext+0x46>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <vTaskSwitchContext+0x40>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	607b      	str	r3, [r7, #4]
}
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <vTaskSwitchContext+0x3e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	491b      	ldr	r1, [pc, #108]	; (8003b30 <vTaskSwitchContext+0xb4>)
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0e4      	beq.n	8003aa0 <vTaskSwitchContext+0x24>
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <vTaskSwitchContext+0xb4>)
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3308      	adds	r3, #8
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d104      	bne.n	8003b06 <vTaskSwitchContext+0x8a>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <vTaskSwitchContext+0xb8>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <vTaskSwitchContext+0xb0>)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6013      	str	r3, [r2, #0]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000d18 	.word	0x20000d18
 8003b28:	20000d04 	.word	0x20000d04
 8003b2c:	20000cf8 	.word	0x20000cf8
 8003b30:	20000820 	.word	0x20000820
 8003b34:	2000081c 	.word	0x2000081c

08003b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60fb      	str	r3, [r7, #12]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <vTaskPlaceOnEventList+0x44>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3318      	adds	r3, #24
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe feba 	bl	80028e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f000 fb32 	bl	80041d8 <prvAddCurrentTaskToDelayedList>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000081c 	.word	0x2000081c

08003b80 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	617b      	str	r3, [r7, #20]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	613b      	str	r3, [r7, #16]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bd0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3318      	adds	r3, #24
 8003bd8:	4619      	mov	r1, r3
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7fe fe5c 	bl	8002898 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be0:	2101      	movs	r1, #1
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 faf8 	bl	80041d8 <prvAddCurrentTaskToDelayedList>
}
 8003be8:	bf00      	nop
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000d18 	.word	0x20000d18
 8003bf4:	2000081c 	.word	0x2000081c

08003bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	617b      	str	r3, [r7, #20]
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <vTaskPlaceOnEventListRestricted+0x54>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3318      	adds	r3, #24
 8003c26:	4619      	mov	r1, r3
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7fe fe35 	bl	8002898 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f000 facb 	bl	80041d8 <prvAddCurrentTaskToDelayedList>
	}
 8003c42:	bf00      	nop
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000081c 	.word	0x2000081c

08003c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60fb      	str	r3, [r7, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	3318      	adds	r3, #24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fe66 	bl	8002952 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <xTaskRemoveFromEventList+0xb0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11d      	bne.n	8003cca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fe5d 	bl	8002952 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <xTaskRemoveFromEventList+0xb4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d903      	bls.n	8003cac <xTaskRemoveFromEventList+0x5c>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <xTaskRemoveFromEventList+0xb4>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <xTaskRemoveFromEventList+0xb8>)
 8003cba:	441a      	add	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fe fde8 	bl	8002898 <vListInsertEnd>
 8003cc8:	e005      	b.n	8003cd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	480e      	ldr	r0, [pc, #56]	; (8003d0c <xTaskRemoveFromEventList+0xbc>)
 8003cd2:	f7fe fde1 	bl	8002898 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <xTaskRemoveFromEventList+0xc0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d905      	bls.n	8003cf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <xTaskRemoveFromEventList+0xc4>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e001      	b.n	8003cf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cf4:	697b      	ldr	r3, [r7, #20]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000d18 	.word	0x20000d18
 8003d04:	20000cf8 	.word	0x20000cf8
 8003d08:	20000820 	.word	0x20000820
 8003d0c:	20000cb0 	.word	0x20000cb0
 8003d10:	2000081c 	.word	0x2000081c
 8003d14:	20000d04 	.word	0x20000d04

08003d18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003d22:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	613b      	str	r3, [r7, #16]
}
 8003d3c:	bf00      	nop
 8003d3e:	e7fe      	b.n	8003d3e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60fb      	str	r3, [r7, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fe fdf0 	bl	8002952 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fdeb 	bl	8002952 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d903      	bls.n	8003d90 <vTaskRemoveFromUnorderedEventList+0x78>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003d9e:	441a      	add	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7fe fd76 	bl	8002898 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d902      	bls.n	8003dc0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000d18 	.word	0x20000d18
 8003dcc:	20000cf8 	.word	0x20000cf8
 8003dd0:	20000820 	.word	0x20000820
 8003dd4:	2000081c 	.word	0x2000081c
 8003dd8:	20000d04 	.word	0x20000d04

08003ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <vTaskInternalSetTimeOutState+0x24>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <vTaskInternalSetTimeOutState+0x28>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	605a      	str	r2, [r3, #4]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	20000d08 	.word	0x20000d08
 8003e04:	20000cf4 	.word	0x20000cf4

08003e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	613b      	str	r3, [r7, #16]
}
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	60fb      	str	r3, [r7, #12]
}
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e4a:	f000 fe93 	bl	8004b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <xTaskCheckForTimeOut+0xbc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d102      	bne.n	8003e6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	e023      	b.n	8003eb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <xTaskCheckForTimeOut+0xc0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d007      	beq.n	8003e8a <xTaskCheckForTimeOut+0x82>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e015      	b.n	8003eb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d20b      	bcs.n	8003eac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff9b 	bl	8003ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e004      	b.n	8003eb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eb6:	f000 fe8d 	bl	8004bd4 <vPortExitCritical>

	return xReturn;
 8003eba:	69fb      	ldr	r3, [r7, #28]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000cf4 	.word	0x20000cf4
 8003ec8:	20000d08 	.word	0x20000d08

08003ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <vTaskMissedYield+0x14>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	20000d04 	.word	0x20000d04

08003ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003eec:	f000 f852 	bl	8003f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <prvIdleTask+0x28>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d9f9      	bls.n	8003eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <prvIdleTask+0x2c>)
 8003efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f08:	e7f0      	b.n	8003eec <prvIdleTask+0x8>
 8003f0a:	bf00      	nop
 8003f0c:	20000820 	.word	0x20000820
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	e00c      	b.n	8003f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <prvInitialiseTaskLists+0x60>)
 8003f2c:	4413      	add	r3, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fc85 	bl	800283e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3301      	adds	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b37      	cmp	r3, #55	; 0x37
 8003f3e:	d9ef      	bls.n	8003f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f40:	480d      	ldr	r0, [pc, #52]	; (8003f78 <prvInitialiseTaskLists+0x64>)
 8003f42:	f7fe fc7c 	bl	800283e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f46:	480d      	ldr	r0, [pc, #52]	; (8003f7c <prvInitialiseTaskLists+0x68>)
 8003f48:	f7fe fc79 	bl	800283e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f4c:	480c      	ldr	r0, [pc, #48]	; (8003f80 <prvInitialiseTaskLists+0x6c>)
 8003f4e:	f7fe fc76 	bl	800283e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f52:	480c      	ldr	r0, [pc, #48]	; (8003f84 <prvInitialiseTaskLists+0x70>)
 8003f54:	f7fe fc73 	bl	800283e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f58:	480b      	ldr	r0, [pc, #44]	; (8003f88 <prvInitialiseTaskLists+0x74>)
 8003f5a:	f7fe fc70 	bl	800283e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <prvInitialiseTaskLists+0x78>)
 8003f60:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <prvInitialiseTaskLists+0x64>)
 8003f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <prvInitialiseTaskLists+0x7c>)
 8003f66:	4a05      	ldr	r2, [pc, #20]	; (8003f7c <prvInitialiseTaskLists+0x68>)
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000820 	.word	0x20000820
 8003f78:	20000c80 	.word	0x20000c80
 8003f7c:	20000c94 	.word	0x20000c94
 8003f80:	20000cb0 	.word	0x20000cb0
 8003f84:	20000cc4 	.word	0x20000cc4
 8003f88:	20000cdc 	.word	0x20000cdc
 8003f8c:	20000ca8 	.word	0x20000ca8
 8003f90:	20000cac 	.word	0x20000cac

08003f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f9a:	e019      	b.n	8003fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f9c:	f000 fdea 	bl	8004b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <prvCheckTasksWaitingTermination+0x50>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe fcd0 	bl	8002952 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <prvCheckTasksWaitingTermination+0x54>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	4a0b      	ldr	r2, [pc, #44]	; (8003fe8 <prvCheckTasksWaitingTermination+0x54>)
 8003fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <prvCheckTasksWaitingTermination+0x58>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <prvCheckTasksWaitingTermination+0x58>)
 8003fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fc6:	f000 fe05 	bl	8004bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f810 	bl	8003ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <prvCheckTasksWaitingTermination+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e1      	bne.n	8003f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000cc4 	.word	0x20000cc4
 8003fe8:	20000cf0 	.word	0x20000cf0
 8003fec:	20000cd8 	.word	0x20000cd8

08003ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ffa2 	bl	8004f50 <vPortFree>
				vPortFree( pxTCB );
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 ff9f 	bl	8004f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004012:	e018      	b.n	8004046 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800401a:	2b01      	cmp	r3, #1
 800401c:	d103      	bne.n	8004026 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 ff96 	bl	8004f50 <vPortFree>
	}
 8004024:	e00f      	b.n	8004046 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800402c:	2b02      	cmp	r3, #2
 800402e:	d00a      	beq.n	8004046 <prvDeleteTCB+0x56>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <prvDeleteTCB+0x54>
	}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <prvResetNextTaskUnblockTime+0x38>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <prvResetNextTaskUnblockTime+0x3c>)
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004068:	e008      	b.n	800407c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <prvResetNextTaskUnblockTime+0x38>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <prvResetNextTaskUnblockTime+0x3c>)
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000ca8 	.word	0x20000ca8
 800408c:	20000d10 	.word	0x20000d10

08004090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <xTaskGetSchedulerState+0x34>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800409e:	2301      	movs	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	e008      	b.n	80040b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <xTaskGetSchedulerState+0x38>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040ac:	2302      	movs	r3, #2
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	e001      	b.n	80040b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040b6:	687b      	ldr	r3, [r7, #4]
	}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	20000cfc 	.word	0x20000cfc
 80040c8:	20000d18 	.word	0x20000d18

080040cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d056      	beq.n	8004190 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040e2:	4b2e      	ldr	r3, [pc, #184]	; (800419c <xTaskPriorityDisinherit+0xd0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d00a      	beq.n	8004102 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60fb      	str	r3, [r7, #12]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60bb      	str	r3, [r7, #8]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	429a      	cmp	r2, r3
 8004134:	d02c      	beq.n	8004190 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	2b00      	cmp	r3, #0
 800413c:	d128      	bne.n	8004190 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3304      	adds	r3, #4
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fc05 	bl	8002952 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <xTaskPriorityDisinherit+0xd4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d903      	bls.n	8004170 <xTaskPriorityDisinherit+0xa4>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <xTaskPriorityDisinherit+0xd4>)
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <xTaskPriorityDisinherit+0xd8>)
 800417e:	441a      	add	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f7fe fb86 	bl	8002898 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004190:	697b      	ldr	r3, [r7, #20]
	}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	2000081c 	.word	0x2000081c
 80041a0:	20000cf8 	.word	0x20000cf8
 80041a4:	20000820 	.word	0x20000820

080041a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <uxTaskResetEventItemValue+0x2c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <uxTaskResetEventItemValue+0x2c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <uxTaskResetEventItemValue+0x2c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80041c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80041c6:	687b      	ldr	r3, [r7, #4]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	2000081c 	.word	0x2000081c

080041d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <prvAddCurrentTaskToDelayedList+0x90>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe fbaf 	bl	8002952 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d10a      	bne.n	8004212 <prvAddCurrentTaskToDelayedList+0x3a>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4819      	ldr	r0, [pc, #100]	; (8004270 <prvAddCurrentTaskToDelayedList+0x98>)
 800420c:	f7fe fb44 	bl	8002898 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004210:	e026      	b.n	8004260 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	429a      	cmp	r2, r3
 8004228:	d209      	bcs.n	800423e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <prvAddCurrentTaskToDelayedList+0x9c>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f7fe fb52 	bl	80028e0 <vListInsert>
}
 800423c:	e010      	b.n	8004260 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <prvAddCurrentTaskToDelayedList+0x94>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7fe fb48 	bl	80028e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	429a      	cmp	r2, r3
 8004258:	d202      	bcs.n	8004260 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <prvAddCurrentTaskToDelayedList+0xa4>)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000cf4 	.word	0x20000cf4
 800426c:	2000081c 	.word	0x2000081c
 8004270:	20000cdc 	.word	0x20000cdc
 8004274:	20000cac 	.word	0x20000cac
 8004278:	20000ca8 	.word	0x20000ca8
 800427c:	20000d10 	.word	0x20000d10

08004280 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800428a:	f000 fb07 	bl	800489c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800428e:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <xTimerCreateTimerTask+0x80>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d021      	beq.n	80042da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800429e:	1d3a      	adds	r2, r7, #4
 80042a0:	f107 0108 	add.w	r1, r7, #8
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe f95b 	bl	8002564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	9202      	str	r2, [sp, #8]
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2302      	movs	r3, #2
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	460a      	mov	r2, r1
 80042c0:	4910      	ldr	r1, [pc, #64]	; (8004304 <xTimerCreateTimerTask+0x84>)
 80042c2:	4811      	ldr	r0, [pc, #68]	; (8004308 <xTimerCreateTimerTask+0x88>)
 80042c4:	f7ff f85c 	bl	8003380 <xTaskCreateStatic>
 80042c8:	4603      	mov	r3, r0
 80042ca:	4a10      	ldr	r2, [pc, #64]	; (800430c <xTimerCreateTimerTask+0x8c>)
 80042cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <xTimerCreateTimerTask+0x8c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	613b      	str	r3, [r7, #16]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80042f6:	697b      	ldr	r3, [r7, #20]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000d4c 	.word	0x20000d4c
 8004304:	080060b0 	.word	0x080060b0
 8004308:	08004445 	.word	0x08004445
 800430c:	20000d50 	.word	0x20000d50

08004310 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	623b      	str	r3, [r7, #32]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800433e:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <xTimerGenericCommand+0x98>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d02a      	beq.n	800439c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b05      	cmp	r3, #5
 8004356:	dc18      	bgt.n	800438a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004358:	f7ff fe9a 	bl	8004090 <xTaskGetSchedulerState>
 800435c:	4603      	mov	r3, r0
 800435e:	2b02      	cmp	r3, #2
 8004360:	d109      	bne.n	8004376 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <xTimerGenericCommand+0x98>)
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	f107 0110 	add.w	r1, r7, #16
 800436a:	2300      	movs	r3, #0
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	f7fe fc1f 	bl	8002bb0 <xQueueGenericSend>
 8004372:	6278      	str	r0, [r7, #36]	; 0x24
 8004374:	e012      	b.n	800439c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <xTimerGenericCommand+0x98>)
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	f107 0110 	add.w	r1, r7, #16
 800437e:	2300      	movs	r3, #0
 8004380:	2200      	movs	r2, #0
 8004382:	f7fe fc15 	bl	8002bb0 <xQueueGenericSend>
 8004386:	6278      	str	r0, [r7, #36]	; 0x24
 8004388:	e008      	b.n	800439c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <xTimerGenericCommand+0x98>)
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	f107 0110 	add.w	r1, r7, #16
 8004392:	2300      	movs	r3, #0
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	f7fe fd09 	bl	8002dac <xQueueGenericSendFromISR>
 800439a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000d4c 	.word	0x20000d4c

080043ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b6:	4b22      	ldr	r3, [pc, #136]	; (8004440 <prvProcessExpiredTimer+0x94>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fac4 	bl	8002952 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d022      	beq.n	800441e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	18d1      	adds	r1, r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	6978      	ldr	r0, [r7, #20]
 80043e6:	f000 f8d1 	bl	800458c <prvInsertTimerInActiveList>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01f      	beq.n	8004430 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043f0:	2300      	movs	r3, #0
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2300      	movs	r3, #0
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	2100      	movs	r1, #0
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff88 	bl	8004310 <xTimerGenericCommand>
 8004400:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d113      	bne.n	8004430 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	6978      	ldr	r0, [r7, #20]
 8004436:	4798      	blx	r3
}
 8004438:	bf00      	nop
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000d44 	.word	0x20000d44

08004444 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	4618      	mov	r0, r3
 8004452:	f000 f857 	bl	8004504 <prvGetNextExpireTime>
 8004456:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4619      	mov	r1, r3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f803 	bl	8004468 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004462:	f000 f8d5 	bl	8004610 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004466:	e7f1      	b.n	800444c <prvTimerTask+0x8>

08004468 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004472:	f7ff f98d 	bl	8003790 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f866 	bl	800454c <prvSampleTimeNow>
 8004480:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d130      	bne.n	80044ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <prvProcessTimerOrBlockTask+0x3c>
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	429a      	cmp	r2, r3
 8004494:	d806      	bhi.n	80044a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004496:	f7ff f989 	bl	80037ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff85 	bl	80043ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044a2:	e024      	b.n	80044ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <prvProcessTimerOrBlockTask+0x90>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <prvProcessTimerOrBlockTask+0x50>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <prvProcessTimerOrBlockTask+0x52>
 80044b8:	2300      	movs	r3, #0
 80044ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <prvProcessTimerOrBlockTask+0x94>)
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	4619      	mov	r1, r3
 80044ca:	f7fe ff25 	bl	8003318 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044ce:	f7ff f96d 	bl	80037ac <xTaskResumeAll>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <prvProcessTimerOrBlockTask+0x98>)
 80044da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	f3bf 8f6f 	isb	sy
}
 80044e8:	e001      	b.n	80044ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044ea:	f7ff f95f 	bl	80037ac <xTaskResumeAll>
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000d48 	.word	0x20000d48
 80044fc:	20000d4c 	.word	0x20000d4c
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800450c:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <prvGetNextExpireTime+0x44>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <prvGetNextExpireTime+0x16>
 8004516:	2201      	movs	r2, #1
 8004518:	e000      	b.n	800451c <prvGetNextExpireTime+0x18>
 800451a:	2200      	movs	r2, #0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <prvGetNextExpireTime+0x44>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e001      	b.n	8004538 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004538:	68fb      	ldr	r3, [r7, #12]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000d44 	.word	0x20000d44

0800454c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004554:	f7ff f9c8 	bl	80038e8 <xTaskGetTickCount>
 8004558:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <prvSampleTimeNow+0x3c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d205      	bcs.n	8004570 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004564:	f000 f936 	bl	80047d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e002      	b.n	8004576 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004576:	4a04      	ldr	r2, [pc, #16]	; (8004588 <prvSampleTimeNow+0x3c>)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000d54 	.word	0x20000d54

0800458c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d812      	bhi.n	80045d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d302      	bcc.n	80045c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e01b      	b.n	80045fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <prvInsertTimerInActiveList+0x7c>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3304      	adds	r3, #4
 80045ce:	4619      	mov	r1, r3
 80045d0:	4610      	mov	r0, r2
 80045d2:	f7fe f985 	bl	80028e0 <vListInsert>
 80045d6:	e012      	b.n	80045fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d206      	bcs.n	80045ee <prvInsertTimerInActiveList+0x62>
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d302      	bcc.n	80045ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e007      	b.n	80045fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <prvInsertTimerInActiveList+0x80>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7fe f971 	bl	80028e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045fe:	697b      	ldr	r3, [r7, #20]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000d48 	.word	0x20000d48
 800460c:	20000d44 	.word	0x20000d44

08004610 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08e      	sub	sp, #56	; 0x38
 8004614:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004616:	e0ca      	b.n	80047ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	da18      	bge.n	8004650 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	3304      	adds	r3, #4
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	61fb      	str	r3, [r7, #28]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004646:	6850      	ldr	r0, [r2, #4]
 8004648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464a:	6892      	ldr	r2, [r2, #8]
 800464c:	4611      	mov	r1, r2
 800464e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f2c0 80ab 	blt.w	80047ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe f972 	bl	8002952 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800466e:	463b      	mov	r3, r7
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff6b 	bl	800454c <prvSampleTimeNow>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b09      	cmp	r3, #9
 800467c:	f200 8096 	bhi.w	80047ac <prvProcessReceivedCommands+0x19c>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <prvProcessReceivedCommands+0x78>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046b1 	.word	0x080046b1
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046b1 	.word	0x080046b1
 8004694:	08004725 	.word	0x08004725
 8004698:	08004739 	.word	0x08004739
 800469c:	08004783 	.word	0x08004783
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046b1 	.word	0x080046b1
 80046a8:	08004725 	.word	0x08004725
 80046ac:	08004739 	.word	0x08004739
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	18d1      	adds	r1, r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d0:	f7ff ff5c 	bl	800458c <prvInsertTimerInActiveList>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d069      	beq.n	80047ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05e      	beq.n	80047ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	441a      	add	r2, r3
 80046f8:	2300      	movs	r3, #0
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2300      	movs	r3, #0
 80046fe:	2100      	movs	r1, #0
 8004700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004702:	f7ff fe05 	bl	8004310 <xTimerGenericCommand>
 8004706:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d14f      	bne.n	80047ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	61bb      	str	r3, [r7, #24]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004736:	e03a      	b.n	80047ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	617b      	str	r3, [r7, #20]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	18d1      	adds	r1, r2, r3
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477c:	f7ff ff06 	bl	800458c <prvInsertTimerInActiveList>
					break;
 8004780:	e015      	b.n	80047ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004792:	f000 fbdd 	bl	8004f50 <vPortFree>
 8004796:	e00a      	b.n	80047ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047aa:	e000      	b.n	80047ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80047ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <prvProcessReceivedCommands+0x1c0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	1d39      	adds	r1, r7, #4
 80047b4:	2200      	movs	r2, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fb94 	bl	8002ee4 <xQueueReceive>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f47f af2a 	bne.w	8004618 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3730      	adds	r7, #48	; 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000d4c 	.word	0x20000d4c

080047d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047da:	e048      	b.n	800486e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047dc:	4b2d      	ldr	r3, [pc, #180]	; (8004894 <prvSwitchTimerLists+0xc0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e6:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <prvSwitchTimerLists+0xc0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe f8ac 	bl	8002952 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02e      	beq.n	800486e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	429a      	cmp	r2, r3
 8004820:	d90e      	bls.n	8004840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800482e:	4b19      	ldr	r3, [pc, #100]	; (8004894 <prvSwitchTimerLists+0xc0>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fe f851 	bl	80028e0 <vListInsert>
 800483e:	e016      	b.n	800486e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004840:	2300      	movs	r3, #0
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	2100      	movs	r1, #0
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fd60 	bl	8004310 <xTimerGenericCommand>
 8004850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	603b      	str	r3, [r7, #0]
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <prvSwitchTimerLists+0xc0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1b1      	bne.n	80047dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <prvSwitchTimerLists+0xc0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <prvSwitchTimerLists+0xc4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a04      	ldr	r2, [pc, #16]	; (8004894 <prvSwitchTimerLists+0xc0>)
 8004884:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <prvSwitchTimerLists+0xc4>)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000d44 	.word	0x20000d44
 8004898:	20000d48 	.word	0x20000d48

0800489c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048a2:	f000 f967 	bl	8004b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <prvCheckForValidListAndQueue+0x60>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d120      	bne.n	80048f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048ae:	4814      	ldr	r0, [pc, #80]	; (8004900 <prvCheckForValidListAndQueue+0x64>)
 80048b0:	f7fd ffc5 	bl	800283e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048b4:	4813      	ldr	r0, [pc, #76]	; (8004904 <prvCheckForValidListAndQueue+0x68>)
 80048b6:	f7fd ffc2 	bl	800283e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <prvCheckForValidListAndQueue+0x6c>)
 80048bc:	4a10      	ldr	r2, [pc, #64]	; (8004900 <prvCheckForValidListAndQueue+0x64>)
 80048be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048c0:	4b12      	ldr	r3, [pc, #72]	; (800490c <prvCheckForValidListAndQueue+0x70>)
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <prvCheckForValidListAndQueue+0x68>)
 80048c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048c6:	2300      	movs	r3, #0
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <prvCheckForValidListAndQueue+0x74>)
 80048cc:	4a11      	ldr	r2, [pc, #68]	; (8004914 <prvCheckForValidListAndQueue+0x78>)
 80048ce:	2110      	movs	r1, #16
 80048d0:	200a      	movs	r0, #10
 80048d2:	f7fe f8d1 	bl	8002a78 <xQueueGenericCreateStatic>
 80048d6:	4603      	mov	r3, r0
 80048d8:	4a08      	ldr	r2, [pc, #32]	; (80048fc <prvCheckForValidListAndQueue+0x60>)
 80048da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <prvCheckForValidListAndQueue+0x60>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <prvCheckForValidListAndQueue+0x60>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	490b      	ldr	r1, [pc, #44]	; (8004918 <prvCheckForValidListAndQueue+0x7c>)
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fcea 	bl	80032c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048f0:	f000 f970 	bl	8004bd4 <vPortExitCritical>
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000d4c 	.word	0x20000d4c
 8004900:	20000d1c 	.word	0x20000d1c
 8004904:	20000d30 	.word	0x20000d30
 8004908:	20000d44 	.word	0x20000d44
 800490c:	20000d48 	.word	0x20000d48
 8004910:	20000df8 	.word	0x20000df8
 8004914:	20000d58 	.word	0x20000d58
 8004918:	080060b8 	.word	0x080060b8

0800491c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b04      	subs	r3, #4
 800492c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3b04      	subs	r3, #4
 800493a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b04      	subs	r3, #4
 800494a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800494c:	4a0c      	ldr	r2, [pc, #48]	; (8004980 <pxPortInitialiseStack+0x64>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b14      	subs	r3, #20
 8004956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3b04      	subs	r3, #4
 8004962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f06f 0202 	mvn.w	r2, #2
 800496a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b20      	subs	r3, #32
 8004970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004972:	68fb      	ldr	r3, [r7, #12]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	08004985 	.word	0x08004985

08004984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <prvTaskExitError+0x54>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d00a      	beq.n	80049ae <prvTaskExitError+0x2a>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <prvTaskExitError+0x28>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	60bb      	str	r3, [r7, #8]
}
 80049c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049c2:	bf00      	nop
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0fc      	beq.n	80049c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000010 	.word	0x20000010
 80049dc:	00000000 	.word	0x00000000

080049e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <pxCurrentTCBConst2>)
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	6808      	ldr	r0, [r1, #0]
 80049e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ea:	f380 8809 	msr	PSP, r0
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8811 	msr	BASEPRI, r0
 80049fa:	4770      	bx	lr
 80049fc:	f3af 8000 	nop.w

08004a00 <pxCurrentTCBConst2>:
 8004a00:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop

08004a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a08:	4808      	ldr	r0, [pc, #32]	; (8004a2c <prvPortStartFirstTask+0x24>)
 8004a0a:	6800      	ldr	r0, [r0, #0]
 8004a0c:	6800      	ldr	r0, [r0, #0]
 8004a0e:	f380 8808 	msr	MSP, r0
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8814 	msr	CONTROL, r0
 8004a1a:	b662      	cpsie	i
 8004a1c:	b661      	cpsie	f
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	df00      	svc	0
 8004a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a2a:	bf00      	nop
 8004a2c:	e000ed08 	.word	0xe000ed08

08004a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a36:	4b46      	ldr	r3, [pc, #280]	; (8004b50 <xPortStartScheduler+0x120>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a46      	ldr	r2, [pc, #280]	; (8004b54 <xPortStartScheduler+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10a      	bne.n	8004a56 <xPortStartScheduler+0x26>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	613b      	str	r3, [r7, #16]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a56:	4b3e      	ldr	r3, [pc, #248]	; (8004b50 <xPortStartScheduler+0x120>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3f      	ldr	r2, [pc, #252]	; (8004b58 <xPortStartScheduler+0x128>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10a      	bne.n	8004a76 <xPortStartScheduler+0x46>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a76:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <xPortStartScheduler+0x12c>)
 8004a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	22ff      	movs	r2, #255	; 0xff
 8004a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <xPortStartScheduler+0x130>)
 8004a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a9e:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <xPortStartScheduler+0x134>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aa4:	e009      	b.n	8004aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004aa6:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <xPortStartScheduler+0x134>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	4a2d      	ldr	r2, [pc, #180]	; (8004b64 <xPortStartScheduler+0x134>)
 8004aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d0ef      	beq.n	8004aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ac6:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <xPortStartScheduler+0x134>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1c3 0307 	rsb	r3, r3, #7
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d00a      	beq.n	8004ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60bb      	str	r3, [r7, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <xPortStartScheduler+0x134>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <xPortStartScheduler+0x134>)
 8004af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <xPortStartScheduler+0x134>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004afa:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <xPortStartScheduler+0x134>)
 8004afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b06:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <xPortStartScheduler+0x138>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <xPortStartScheduler+0x138>)
 8004b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <xPortStartScheduler+0x138>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <xPortStartScheduler+0x138>)
 8004b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b1e:	f000 f8dd 	bl	8004cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <xPortStartScheduler+0x13c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b28:	f000 f8fc 	bl	8004d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b2c:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <xPortStartScheduler+0x140>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0f      	ldr	r2, [pc, #60]	; (8004b70 <xPortStartScheduler+0x140>)
 8004b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b38:	f7ff ff66 	bl	8004a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b3c:	f7fe ff9e 	bl	8003a7c <vTaskSwitchContext>
	prvTaskExitError();
 8004b40:	f7ff ff20 	bl	8004984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	e000ed00 	.word	0xe000ed00
 8004b54:	410fc271 	.word	0x410fc271
 8004b58:	410fc270 	.word	0x410fc270
 8004b5c:	e000e400 	.word	0xe000e400
 8004b60:	20000e48 	.word	0x20000e48
 8004b64:	20000e4c 	.word	0x20000e4c
 8004b68:	e000ed20 	.word	0xe000ed20
 8004b6c:	20000010 	.word	0x20000010
 8004b70:	e000ef34 	.word	0xe000ef34

08004b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	607b      	str	r3, [r7, #4]
}
 8004b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <vPortEnterCritical+0x58>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <vPortEnterCritical+0x58>)
 8004b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <vPortEnterCritical+0x58>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10f      	bne.n	8004bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <vPortEnterCritical+0x5c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	603b      	str	r3, [r7, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <vPortEnterCritical+0x4a>
	}
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20000010 	.word	0x20000010
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <vPortExitCritical+0x50>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <vPortExitCritical+0x24>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	607b      	str	r3, [r7, #4]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <vPortExitCritical+0x50>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <vPortExitCritical+0x50>)
 8004c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <vPortExitCritical+0x50>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d105      	bne.n	8004c16 <vPortExitCritical+0x42>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f383 8811 	msr	BASEPRI, r3
}
 8004c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20000010 	.word	0x20000010
	...

08004c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c30:	f3ef 8009 	mrs	r0, PSP
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <pxCurrentTCBConst>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	f01e 0f10 	tst.w	lr, #16
 8004c40:	bf08      	it	eq
 8004c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	6010      	str	r0, [r2, #0]
 8004c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c54:	f380 8811 	msr	BASEPRI, r0
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f7fe ff0c 	bl	8003a7c <vTaskSwitchContext>
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	f380 8811 	msr	BASEPRI, r0
 8004c6c:	bc09      	pop	{r0, r3}
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	6808      	ldr	r0, [r1, #0]
 8004c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c76:	f01e 0f10 	tst.w	lr, #16
 8004c7a:	bf08      	it	eq
 8004c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c80:	f380 8809 	msr	PSP, r0
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	f3af 8000 	nop.w

08004c90 <pxCurrentTCBConst>:
 8004c90:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop

08004c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	607b      	str	r3, [r7, #4]
}
 8004cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cb2:	f7fe fe29 	bl	8003908 <xTaskIncrementTick>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <xPortSysTickHandler+0x40>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f383 8811 	msr	BASEPRI, r3
}
 8004cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	e000ed04 	.word	0xe000ed04

08004cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <vPortSetupTimerInterrupt+0x34>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <vPortSetupTimerInterrupt+0x38>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <vPortSetupTimerInterrupt+0x3c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <vPortSetupTimerInterrupt+0x40>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <vPortSetupTimerInterrupt+0x44>)
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <vPortSetupTimerInterrupt+0x34>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	601a      	str	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	e000e010 	.word	0xe000e010
 8004d14:	e000e018 	.word	0xe000e018
 8004d18:	20000004 	.word	0x20000004
 8004d1c:	10624dd3 	.word	0x10624dd3
 8004d20:	e000e014 	.word	0xe000e014

08004d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d34 <vPortEnableVFP+0x10>
 8004d28:	6801      	ldr	r1, [r0, #0]
 8004d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d2e:	6001      	str	r1, [r0, #0]
 8004d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d32:	bf00      	nop
 8004d34:	e000ed88 	.word	0xe000ed88

08004d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d3e:	f3ef 8305 	mrs	r3, IPSR
 8004d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	d914      	bls.n	8004d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <vPortValidateInterruptPriority+0x70>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d54:	4b15      	ldr	r3, [pc, #84]	; (8004dac <vPortValidateInterruptPriority+0x74>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	7afa      	ldrb	r2, [r7, #11]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d20a      	bcs.n	8004d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	607b      	str	r3, [r7, #4]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d74:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <vPortValidateInterruptPriority+0x78>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <vPortValidateInterruptPriority+0x7c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d90a      	bls.n	8004d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	603b      	str	r3, [r7, #0]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <vPortValidateInterruptPriority+0x60>
	}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	e000e3f0 	.word	0xe000e3f0
 8004dac:	20000e48 	.word	0x20000e48
 8004db0:	e000ed0c 	.word	0xe000ed0c
 8004db4:	20000e4c 	.word	0x20000e4c

08004db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004dc4:	f7fe fce4 	bl	8003790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dc8:	4b5b      	ldr	r3, [pc, #364]	; (8004f38 <pvPortMalloc+0x180>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004dd0:	f000 f920 	bl	8005014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004dd4:	4b59      	ldr	r3, [pc, #356]	; (8004f3c <pvPortMalloc+0x184>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 8093 	bne.w	8004f08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01d      	beq.n	8004e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004de8:	2208      	movs	r2, #8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d014      	beq.n	8004e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f023 0307 	bic.w	r3, r3, #7
 8004e00:	3308      	adds	r3, #8
 8004e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <pvPortMalloc+0x6c>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	617b      	str	r3, [r7, #20]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d06e      	beq.n	8004f08 <pvPortMalloc+0x150>
 8004e2a:	4b45      	ldr	r3, [pc, #276]	; (8004f40 <pvPortMalloc+0x188>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d869      	bhi.n	8004f08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e34:	4b43      	ldr	r3, [pc, #268]	; (8004f44 <pvPortMalloc+0x18c>)
 8004e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e38:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <pvPortMalloc+0x18c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e3e:	e004      	b.n	8004e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d903      	bls.n	8004e5c <pvPortMalloc+0xa4>
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f1      	bne.n	8004e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e5c:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <pvPortMalloc+0x180>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d050      	beq.n	8004f08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	4413      	add	r3, r2
 8004e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	2308      	movs	r3, #8
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d91f      	bls.n	8004ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	613b      	str	r3, [r7, #16]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	1ad2      	subs	r2, r2, r3
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ec2:	69b8      	ldr	r0, [r7, #24]
 8004ec4:	f000 f908 	bl	80050d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	; (8004f40 <pvPortMalloc+0x188>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <pvPortMalloc+0x188>)
 8004ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <pvPortMalloc+0x188>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <pvPortMalloc+0x190>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d203      	bcs.n	8004eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <pvPortMalloc+0x188>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <pvPortMalloc+0x190>)
 8004ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <pvPortMalloc+0x184>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <pvPortMalloc+0x194>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3301      	adds	r3, #1
 8004f04:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <pvPortMalloc+0x194>)
 8004f06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f08:	f7fe fc50 	bl	80037ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <pvPortMalloc+0x174>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60fb      	str	r3, [r7, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <pvPortMalloc+0x172>
	return pvReturn;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	; 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20004a58 	.word	0x20004a58
 8004f3c:	20004a6c 	.word	0x20004a6c
 8004f40:	20004a5c 	.word	0x20004a5c
 8004f44:	20004a50 	.word	0x20004a50
 8004f48:	20004a60 	.word	0x20004a60
 8004f4c:	20004a64 	.word	0x20004a64

08004f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d04d      	beq.n	8004ffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f62:	2308      	movs	r3, #8
 8004f64:	425b      	negs	r3, r3
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4413      	add	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4b24      	ldr	r3, [pc, #144]	; (8005008 <vPortFree+0xb8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <vPortFree+0x44>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60fb      	str	r3, [r7, #12]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <vPortFree+0x62>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60bb      	str	r3, [r7, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	4b14      	ldr	r3, [pc, #80]	; (8005008 <vPortFree+0xb8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01e      	beq.n	8004ffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11a      	bne.n	8004ffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <vPortFree+0xb8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fd8:	f7fe fbda 	bl	8003790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <vPortFree+0xbc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4a09      	ldr	r2, [pc, #36]	; (800500c <vPortFree+0xbc>)
 8004fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fea:	6938      	ldr	r0, [r7, #16]
 8004fec:	f000 f874 	bl	80050d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <vPortFree+0xc0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	4a06      	ldr	r2, [pc, #24]	; (8005010 <vPortFree+0xc0>)
 8004ff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ffa:	f7fe fbd7 	bl	80037ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ffe:	bf00      	nop
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20004a6c 	.word	0x20004a6c
 800500c:	20004a5c 	.word	0x20004a5c
 8005010:	20004a68 	.word	0x20004a68

08005014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800501a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800501e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <prvHeapInit+0xac>)
 8005022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00c      	beq.n	8005048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3307      	adds	r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0307 	bic.w	r3, r3, #7
 800503a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <prvHeapInit+0xac>)
 8005044:	4413      	add	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <prvHeapInit+0xb0>)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005052:	4b1c      	ldr	r3, [pc, #112]	; (80050c4 <prvHeapInit+0xb0>)
 8005054:	2200      	movs	r2, #0
 8005056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005060:	2208      	movs	r2, #8
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0307 	bic.w	r3, r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <prvHeapInit+0xb4>)
 8005074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <prvHeapInit+0xb4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800507e:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <prvHeapInit+0xb4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <prvHeapInit+0xb4>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <prvHeapInit+0xb8>)
 80050a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <prvHeapInit+0xbc>)
 80050aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <prvHeapInit+0xc0>)
 80050ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	20000e50 	.word	0x20000e50
 80050c4:	20004a50 	.word	0x20004a50
 80050c8:	20004a58 	.word	0x20004a58
 80050cc:	20004a60 	.word	0x20004a60
 80050d0:	20004a5c 	.word	0x20004a5c
 80050d4:	20004a6c 	.word	0x20004a6c

080050d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050e0:	4b28      	ldr	r3, [pc, #160]	; (8005184 <prvInsertBlockIntoFreeList+0xac>)
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e002      	b.n	80050ec <prvInsertBlockIntoFreeList+0x14>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d8f7      	bhi.n	80050e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4413      	add	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d108      	bne.n	800511a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	441a      	add	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	441a      	add	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d118      	bne.n	8005160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <prvInsertBlockIntoFreeList+0xb0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d00d      	beq.n	8005156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	441a      	add	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e008      	b.n	8005168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <prvInsertBlockIntoFreeList+0xb0>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e003      	b.n	8005168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d002      	beq.n	8005176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20004a50 	.word	0x20004a50
 8005188:	20004a58 	.word	0x20004a58

0800518c <std>:
 800518c:	2300      	movs	r3, #0
 800518e:	b510      	push	{r4, lr}
 8005190:	4604      	mov	r4, r0
 8005192:	e9c0 3300 	strd	r3, r3, [r0]
 8005196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800519a:	6083      	str	r3, [r0, #8]
 800519c:	8181      	strh	r1, [r0, #12]
 800519e:	6643      	str	r3, [r0, #100]	; 0x64
 80051a0:	81c2      	strh	r2, [r0, #14]
 80051a2:	6183      	str	r3, [r0, #24]
 80051a4:	4619      	mov	r1, r3
 80051a6:	2208      	movs	r2, #8
 80051a8:	305c      	adds	r0, #92	; 0x5c
 80051aa:	f000 f906 	bl	80053ba <memset>
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <std+0x58>)
 80051b0:	6263      	str	r3, [r4, #36]	; 0x24
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <std+0x5c>)
 80051b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <std+0x60>)
 80051b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <std+0x64>)
 80051bc:	6323      	str	r3, [r4, #48]	; 0x30
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <std+0x68>)
 80051c0:	6224      	str	r4, [r4, #32]
 80051c2:	429c      	cmp	r4, r3
 80051c4:	d006      	beq.n	80051d4 <std+0x48>
 80051c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051ca:	4294      	cmp	r4, r2
 80051cc:	d002      	beq.n	80051d4 <std+0x48>
 80051ce:	33d0      	adds	r3, #208	; 0xd0
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d105      	bne.n	80051e0 <std+0x54>
 80051d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051dc:	f000 b966 	b.w	80054ac <__retarget_lock_init_recursive>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	bf00      	nop
 80051e4:	08005335 	.word	0x08005335
 80051e8:	08005357 	.word	0x08005357
 80051ec:	0800538f 	.word	0x0800538f
 80051f0:	080053b3 	.word	0x080053b3
 80051f4:	20004a70 	.word	0x20004a70

080051f8 <stdio_exit_handler>:
 80051f8:	4a02      	ldr	r2, [pc, #8]	; (8005204 <stdio_exit_handler+0xc>)
 80051fa:	4903      	ldr	r1, [pc, #12]	; (8005208 <stdio_exit_handler+0x10>)
 80051fc:	4803      	ldr	r0, [pc, #12]	; (800520c <stdio_exit_handler+0x14>)
 80051fe:	f000 b869 	b.w	80052d4 <_fwalk_sglue>
 8005202:	bf00      	nop
 8005204:	20000014 	.word	0x20000014
 8005208:	08005d75 	.word	0x08005d75
 800520c:	20000020 	.word	0x20000020

08005210 <cleanup_stdio>:
 8005210:	6841      	ldr	r1, [r0, #4]
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <cleanup_stdio+0x34>)
 8005214:	4299      	cmp	r1, r3
 8005216:	b510      	push	{r4, lr}
 8005218:	4604      	mov	r4, r0
 800521a:	d001      	beq.n	8005220 <cleanup_stdio+0x10>
 800521c:	f000 fdaa 	bl	8005d74 <_fflush_r>
 8005220:	68a1      	ldr	r1, [r4, #8]
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <cleanup_stdio+0x38>)
 8005224:	4299      	cmp	r1, r3
 8005226:	d002      	beq.n	800522e <cleanup_stdio+0x1e>
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fda3 	bl	8005d74 <_fflush_r>
 800522e:	68e1      	ldr	r1, [r4, #12]
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <cleanup_stdio+0x3c>)
 8005232:	4299      	cmp	r1, r3
 8005234:	d004      	beq.n	8005240 <cleanup_stdio+0x30>
 8005236:	4620      	mov	r0, r4
 8005238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800523c:	f000 bd9a 	b.w	8005d74 <_fflush_r>
 8005240:	bd10      	pop	{r4, pc}
 8005242:	bf00      	nop
 8005244:	20004a70 	.word	0x20004a70
 8005248:	20004ad8 	.word	0x20004ad8
 800524c:	20004b40 	.word	0x20004b40

08005250 <global_stdio_init.part.0>:
 8005250:	b510      	push	{r4, lr}
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <global_stdio_init.part.0+0x30>)
 8005254:	4c0b      	ldr	r4, [pc, #44]	; (8005284 <global_stdio_init.part.0+0x34>)
 8005256:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <global_stdio_init.part.0+0x38>)
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	4620      	mov	r0, r4
 800525c:	2200      	movs	r2, #0
 800525e:	2104      	movs	r1, #4
 8005260:	f7ff ff94 	bl	800518c <std>
 8005264:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005268:	2201      	movs	r2, #1
 800526a:	2109      	movs	r1, #9
 800526c:	f7ff ff8e 	bl	800518c <std>
 8005270:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005274:	2202      	movs	r2, #2
 8005276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800527a:	2112      	movs	r1, #18
 800527c:	f7ff bf86 	b.w	800518c <std>
 8005280:	20004ba8 	.word	0x20004ba8
 8005284:	20004a70 	.word	0x20004a70
 8005288:	080051f9 	.word	0x080051f9

0800528c <__sfp_lock_acquire>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <__sfp_lock_acquire+0x8>)
 800528e:	f000 b90e 	b.w	80054ae <__retarget_lock_acquire_recursive>
 8005292:	bf00      	nop
 8005294:	20004bb1 	.word	0x20004bb1

08005298 <__sfp_lock_release>:
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <__sfp_lock_release+0x8>)
 800529a:	f000 b909 	b.w	80054b0 <__retarget_lock_release_recursive>
 800529e:	bf00      	nop
 80052a0:	20004bb1 	.word	0x20004bb1

080052a4 <__sinit>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	4604      	mov	r4, r0
 80052a8:	f7ff fff0 	bl	800528c <__sfp_lock_acquire>
 80052ac:	6a23      	ldr	r3, [r4, #32]
 80052ae:	b11b      	cbz	r3, 80052b8 <__sinit+0x14>
 80052b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b4:	f7ff bff0 	b.w	8005298 <__sfp_lock_release>
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <__sinit+0x28>)
 80052ba:	6223      	str	r3, [r4, #32]
 80052bc:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <__sinit+0x2c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f5      	bne.n	80052b0 <__sinit+0xc>
 80052c4:	f7ff ffc4 	bl	8005250 <global_stdio_init.part.0>
 80052c8:	e7f2      	b.n	80052b0 <__sinit+0xc>
 80052ca:	bf00      	nop
 80052cc:	08005211 	.word	0x08005211
 80052d0:	20004ba8 	.word	0x20004ba8

080052d4 <_fwalk_sglue>:
 80052d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d8:	4607      	mov	r7, r0
 80052da:	4688      	mov	r8, r1
 80052dc:	4614      	mov	r4, r2
 80052de:	2600      	movs	r6, #0
 80052e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052e4:	f1b9 0901 	subs.w	r9, r9, #1
 80052e8:	d505      	bpl.n	80052f6 <_fwalk_sglue+0x22>
 80052ea:	6824      	ldr	r4, [r4, #0]
 80052ec:	2c00      	cmp	r4, #0
 80052ee:	d1f7      	bne.n	80052e0 <_fwalk_sglue+0xc>
 80052f0:	4630      	mov	r0, r6
 80052f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f6:	89ab      	ldrh	r3, [r5, #12]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d907      	bls.n	800530c <_fwalk_sglue+0x38>
 80052fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005300:	3301      	adds	r3, #1
 8005302:	d003      	beq.n	800530c <_fwalk_sglue+0x38>
 8005304:	4629      	mov	r1, r5
 8005306:	4638      	mov	r0, r7
 8005308:	47c0      	blx	r8
 800530a:	4306      	orrs	r6, r0
 800530c:	3568      	adds	r5, #104	; 0x68
 800530e:	e7e9      	b.n	80052e4 <_fwalk_sglue+0x10>

08005310 <iprintf>:
 8005310:	b40f      	push	{r0, r1, r2, r3}
 8005312:	b507      	push	{r0, r1, r2, lr}
 8005314:	4906      	ldr	r1, [pc, #24]	; (8005330 <iprintf+0x20>)
 8005316:	ab04      	add	r3, sp, #16
 8005318:	6808      	ldr	r0, [r1, #0]
 800531a:	f853 2b04 	ldr.w	r2, [r3], #4
 800531e:	6881      	ldr	r1, [r0, #8]
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	f000 f9f7 	bl	8005714 <_vfiprintf_r>
 8005326:	b003      	add	sp, #12
 8005328:	f85d eb04 	ldr.w	lr, [sp], #4
 800532c:	b004      	add	sp, #16
 800532e:	4770      	bx	lr
 8005330:	2000006c 	.word	0x2000006c

08005334 <__sread>:
 8005334:	b510      	push	{r4, lr}
 8005336:	460c      	mov	r4, r1
 8005338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533c:	f000 f868 	bl	8005410 <_read_r>
 8005340:	2800      	cmp	r0, #0
 8005342:	bfab      	itete	ge
 8005344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005346:	89a3      	ldrhlt	r3, [r4, #12]
 8005348:	181b      	addge	r3, r3, r0
 800534a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800534e:	bfac      	ite	ge
 8005350:	6563      	strge	r3, [r4, #84]	; 0x54
 8005352:	81a3      	strhlt	r3, [r4, #12]
 8005354:	bd10      	pop	{r4, pc}

08005356 <__swrite>:
 8005356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	461f      	mov	r7, r3
 800535c:	898b      	ldrh	r3, [r1, #12]
 800535e:	05db      	lsls	r3, r3, #23
 8005360:	4605      	mov	r5, r0
 8005362:	460c      	mov	r4, r1
 8005364:	4616      	mov	r6, r2
 8005366:	d505      	bpl.n	8005374 <__swrite+0x1e>
 8005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536c:	2302      	movs	r3, #2
 800536e:	2200      	movs	r2, #0
 8005370:	f000 f83c 	bl	80053ec <_lseek_r>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	4632      	mov	r2, r6
 8005382:	463b      	mov	r3, r7
 8005384:	4628      	mov	r0, r5
 8005386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538a:	f000 b853 	b.w	8005434 <_write_r>

0800538e <__sseek>:
 800538e:	b510      	push	{r4, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005396:	f000 f829 	bl	80053ec <_lseek_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	bf15      	itete	ne
 80053a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053aa:	81a3      	strheq	r3, [r4, #12]
 80053ac:	bf18      	it	ne
 80053ae:	81a3      	strhne	r3, [r4, #12]
 80053b0:	bd10      	pop	{r4, pc}

080053b2 <__sclose>:
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 b809 	b.w	80053cc <_close_r>

080053ba <memset>:
 80053ba:	4402      	add	r2, r0
 80053bc:	4603      	mov	r3, r0
 80053be:	4293      	cmp	r3, r2
 80053c0:	d100      	bne.n	80053c4 <memset+0xa>
 80053c2:	4770      	bx	lr
 80053c4:	f803 1b01 	strb.w	r1, [r3], #1
 80053c8:	e7f9      	b.n	80053be <memset+0x4>
	...

080053cc <_close_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d06      	ldr	r5, [pc, #24]	; (80053e8 <_close_r+0x1c>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fb fb37 	bl	8000a4a <_close>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_close_r+0x1a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_close_r+0x1a>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20004bac 	.word	0x20004bac

080053ec <_lseek_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_lseek_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fb fb4c 	bl	8000a98 <_lseek>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_lseek_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_lseek_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20004bac 	.word	0x20004bac

08005410 <_read_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d07      	ldr	r5, [pc, #28]	; (8005430 <_read_r+0x20>)
 8005414:	4604      	mov	r4, r0
 8005416:	4608      	mov	r0, r1
 8005418:	4611      	mov	r1, r2
 800541a:	2200      	movs	r2, #0
 800541c:	602a      	str	r2, [r5, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f7fb fada 	bl	80009d8 <_read>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_read_r+0x1e>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_read_r+0x1e>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20004bac 	.word	0x20004bac

08005434 <_write_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	; (8005454 <_write_r+0x20>)
 8005438:	4604      	mov	r4, r0
 800543a:	4608      	mov	r0, r1
 800543c:	4611      	mov	r1, r2
 800543e:	2200      	movs	r2, #0
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f7fb fae5 	bl	8000a12 <_write>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_write_r+0x1e>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_write_r+0x1e>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	20004bac 	.word	0x20004bac

08005458 <__errno>:
 8005458:	4b01      	ldr	r3, [pc, #4]	; (8005460 <__errno+0x8>)
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	2000006c 	.word	0x2000006c

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	; (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	; (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	; (80054a8 <__libc_init_array+0x44>)
 8005478:	f000 fdce 	bl	8006018 <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08006114 	.word	0x08006114
 80054a0:	08006114 	.word	0x08006114
 80054a4:	08006114 	.word	0x08006114
 80054a8:	08006118 	.word	0x08006118

080054ac <__retarget_lock_init_recursive>:
 80054ac:	4770      	bx	lr

080054ae <__retarget_lock_acquire_recursive>:
 80054ae:	4770      	bx	lr

080054b0 <__retarget_lock_release_recursive>:
 80054b0:	4770      	bx	lr

080054b2 <memcpy>:
 80054b2:	440a      	add	r2, r1
 80054b4:	4291      	cmp	r1, r2
 80054b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ba:	d100      	bne.n	80054be <memcpy+0xc>
 80054bc:	4770      	bx	lr
 80054be:	b510      	push	{r4, lr}
 80054c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c8:	4291      	cmp	r1, r2
 80054ca:	d1f9      	bne.n	80054c0 <memcpy+0xe>
 80054cc:	bd10      	pop	{r4, pc}
	...

080054d0 <_free_r>:
 80054d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054d2:	2900      	cmp	r1, #0
 80054d4:	d044      	beq.n	8005560 <_free_r+0x90>
 80054d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054da:	9001      	str	r0, [sp, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f1a1 0404 	sub.w	r4, r1, #4
 80054e2:	bfb8      	it	lt
 80054e4:	18e4      	addlt	r4, r4, r3
 80054e6:	f000 f8df 	bl	80056a8 <__malloc_lock>
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <_free_r+0x94>)
 80054ec:	9801      	ldr	r0, [sp, #4]
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	b933      	cbnz	r3, 8005500 <_free_r+0x30>
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	6014      	str	r4, [r2, #0]
 80054f6:	b003      	add	sp, #12
 80054f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054fc:	f000 b8da 	b.w	80056b4 <__malloc_unlock>
 8005500:	42a3      	cmp	r3, r4
 8005502:	d908      	bls.n	8005516 <_free_r+0x46>
 8005504:	6825      	ldr	r5, [r4, #0]
 8005506:	1961      	adds	r1, r4, r5
 8005508:	428b      	cmp	r3, r1
 800550a:	bf01      	itttt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	1949      	addeq	r1, r1, r5
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	e7ed      	b.n	80054f2 <_free_r+0x22>
 8005516:	461a      	mov	r2, r3
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b10b      	cbz	r3, 8005520 <_free_r+0x50>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d9fa      	bls.n	8005516 <_free_r+0x46>
 8005520:	6811      	ldr	r1, [r2, #0]
 8005522:	1855      	adds	r5, r2, r1
 8005524:	42a5      	cmp	r5, r4
 8005526:	d10b      	bne.n	8005540 <_free_r+0x70>
 8005528:	6824      	ldr	r4, [r4, #0]
 800552a:	4421      	add	r1, r4
 800552c:	1854      	adds	r4, r2, r1
 800552e:	42a3      	cmp	r3, r4
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	d1e0      	bne.n	80054f6 <_free_r+0x26>
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	6053      	str	r3, [r2, #4]
 800553a:	440c      	add	r4, r1
 800553c:	6014      	str	r4, [r2, #0]
 800553e:	e7da      	b.n	80054f6 <_free_r+0x26>
 8005540:	d902      	bls.n	8005548 <_free_r+0x78>
 8005542:	230c      	movs	r3, #12
 8005544:	6003      	str	r3, [r0, #0]
 8005546:	e7d6      	b.n	80054f6 <_free_r+0x26>
 8005548:	6825      	ldr	r5, [r4, #0]
 800554a:	1961      	adds	r1, r4, r5
 800554c:	428b      	cmp	r3, r1
 800554e:	bf04      	itt	eq
 8005550:	6819      	ldreq	r1, [r3, #0]
 8005552:	685b      	ldreq	r3, [r3, #4]
 8005554:	6063      	str	r3, [r4, #4]
 8005556:	bf04      	itt	eq
 8005558:	1949      	addeq	r1, r1, r5
 800555a:	6021      	streq	r1, [r4, #0]
 800555c:	6054      	str	r4, [r2, #4]
 800555e:	e7ca      	b.n	80054f6 <_free_r+0x26>
 8005560:	b003      	add	sp, #12
 8005562:	bd30      	pop	{r4, r5, pc}
 8005564:	20004bb4 	.word	0x20004bb4

08005568 <sbrk_aligned>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4e0e      	ldr	r6, [pc, #56]	; (80055a4 <sbrk_aligned+0x3c>)
 800556c:	460c      	mov	r4, r1
 800556e:	6831      	ldr	r1, [r6, #0]
 8005570:	4605      	mov	r5, r0
 8005572:	b911      	cbnz	r1, 800557a <sbrk_aligned+0x12>
 8005574:	f000 fcbc 	bl	8005ef0 <_sbrk_r>
 8005578:	6030      	str	r0, [r6, #0]
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 fcb7 	bl	8005ef0 <_sbrk_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	d00a      	beq.n	800559c <sbrk_aligned+0x34>
 8005586:	1cc4      	adds	r4, r0, #3
 8005588:	f024 0403 	bic.w	r4, r4, #3
 800558c:	42a0      	cmp	r0, r4
 800558e:	d007      	beq.n	80055a0 <sbrk_aligned+0x38>
 8005590:	1a21      	subs	r1, r4, r0
 8005592:	4628      	mov	r0, r5
 8005594:	f000 fcac 	bl	8005ef0 <_sbrk_r>
 8005598:	3001      	adds	r0, #1
 800559a:	d101      	bne.n	80055a0 <sbrk_aligned+0x38>
 800559c:	f04f 34ff 	mov.w	r4, #4294967295
 80055a0:	4620      	mov	r0, r4
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	20004bb8 	.word	0x20004bb8

080055a8 <_malloc_r>:
 80055a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ac:	1ccd      	adds	r5, r1, #3
 80055ae:	f025 0503 	bic.w	r5, r5, #3
 80055b2:	3508      	adds	r5, #8
 80055b4:	2d0c      	cmp	r5, #12
 80055b6:	bf38      	it	cc
 80055b8:	250c      	movcc	r5, #12
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	4607      	mov	r7, r0
 80055be:	db01      	blt.n	80055c4 <_malloc_r+0x1c>
 80055c0:	42a9      	cmp	r1, r5
 80055c2:	d905      	bls.n	80055d0 <_malloc_r+0x28>
 80055c4:	230c      	movs	r3, #12
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	2600      	movs	r6, #0
 80055ca:	4630      	mov	r0, r6
 80055cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056a4 <_malloc_r+0xfc>
 80055d4:	f000 f868 	bl	80056a8 <__malloc_lock>
 80055d8:	f8d8 3000 	ldr.w	r3, [r8]
 80055dc:	461c      	mov	r4, r3
 80055de:	bb5c      	cbnz	r4, 8005638 <_malloc_r+0x90>
 80055e0:	4629      	mov	r1, r5
 80055e2:	4638      	mov	r0, r7
 80055e4:	f7ff ffc0 	bl	8005568 <sbrk_aligned>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	4604      	mov	r4, r0
 80055ec:	d155      	bne.n	800569a <_malloc_r+0xf2>
 80055ee:	f8d8 4000 	ldr.w	r4, [r8]
 80055f2:	4626      	mov	r6, r4
 80055f4:	2e00      	cmp	r6, #0
 80055f6:	d145      	bne.n	8005684 <_malloc_r+0xdc>
 80055f8:	2c00      	cmp	r4, #0
 80055fa:	d048      	beq.n	800568e <_malloc_r+0xe6>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	4631      	mov	r1, r6
 8005600:	4638      	mov	r0, r7
 8005602:	eb04 0903 	add.w	r9, r4, r3
 8005606:	f000 fc73 	bl	8005ef0 <_sbrk_r>
 800560a:	4581      	cmp	r9, r0
 800560c:	d13f      	bne.n	800568e <_malloc_r+0xe6>
 800560e:	6821      	ldr	r1, [r4, #0]
 8005610:	1a6d      	subs	r5, r5, r1
 8005612:	4629      	mov	r1, r5
 8005614:	4638      	mov	r0, r7
 8005616:	f7ff ffa7 	bl	8005568 <sbrk_aligned>
 800561a:	3001      	adds	r0, #1
 800561c:	d037      	beq.n	800568e <_malloc_r+0xe6>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	442b      	add	r3, r5
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	f8d8 3000 	ldr.w	r3, [r8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d038      	beq.n	800569e <_malloc_r+0xf6>
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	42a2      	cmp	r2, r4
 8005630:	d12b      	bne.n	800568a <_malloc_r+0xe2>
 8005632:	2200      	movs	r2, #0
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e00f      	b.n	8005658 <_malloc_r+0xb0>
 8005638:	6822      	ldr	r2, [r4, #0]
 800563a:	1b52      	subs	r2, r2, r5
 800563c:	d41f      	bmi.n	800567e <_malloc_r+0xd6>
 800563e:	2a0b      	cmp	r2, #11
 8005640:	d917      	bls.n	8005672 <_malloc_r+0xca>
 8005642:	1961      	adds	r1, r4, r5
 8005644:	42a3      	cmp	r3, r4
 8005646:	6025      	str	r5, [r4, #0]
 8005648:	bf18      	it	ne
 800564a:	6059      	strne	r1, [r3, #4]
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	bf08      	it	eq
 8005650:	f8c8 1000 	streq.w	r1, [r8]
 8005654:	5162      	str	r2, [r4, r5]
 8005656:	604b      	str	r3, [r1, #4]
 8005658:	4638      	mov	r0, r7
 800565a:	f104 060b 	add.w	r6, r4, #11
 800565e:	f000 f829 	bl	80056b4 <__malloc_unlock>
 8005662:	f026 0607 	bic.w	r6, r6, #7
 8005666:	1d23      	adds	r3, r4, #4
 8005668:	1af2      	subs	r2, r6, r3
 800566a:	d0ae      	beq.n	80055ca <_malloc_r+0x22>
 800566c:	1b9b      	subs	r3, r3, r6
 800566e:	50a3      	str	r3, [r4, r2]
 8005670:	e7ab      	b.n	80055ca <_malloc_r+0x22>
 8005672:	42a3      	cmp	r3, r4
 8005674:	6862      	ldr	r2, [r4, #4]
 8005676:	d1dd      	bne.n	8005634 <_malloc_r+0x8c>
 8005678:	f8c8 2000 	str.w	r2, [r8]
 800567c:	e7ec      	b.n	8005658 <_malloc_r+0xb0>
 800567e:	4623      	mov	r3, r4
 8005680:	6864      	ldr	r4, [r4, #4]
 8005682:	e7ac      	b.n	80055de <_malloc_r+0x36>
 8005684:	4634      	mov	r4, r6
 8005686:	6876      	ldr	r6, [r6, #4]
 8005688:	e7b4      	b.n	80055f4 <_malloc_r+0x4c>
 800568a:	4613      	mov	r3, r2
 800568c:	e7cc      	b.n	8005628 <_malloc_r+0x80>
 800568e:	230c      	movs	r3, #12
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4638      	mov	r0, r7
 8005694:	f000 f80e 	bl	80056b4 <__malloc_unlock>
 8005698:	e797      	b.n	80055ca <_malloc_r+0x22>
 800569a:	6025      	str	r5, [r4, #0]
 800569c:	e7dc      	b.n	8005658 <_malloc_r+0xb0>
 800569e:	605b      	str	r3, [r3, #4]
 80056a0:	deff      	udf	#255	; 0xff
 80056a2:	bf00      	nop
 80056a4:	20004bb4 	.word	0x20004bb4

080056a8 <__malloc_lock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	; (80056b0 <__malloc_lock+0x8>)
 80056aa:	f7ff bf00 	b.w	80054ae <__retarget_lock_acquire_recursive>
 80056ae:	bf00      	nop
 80056b0:	20004bb0 	.word	0x20004bb0

080056b4 <__malloc_unlock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__malloc_unlock+0x8>)
 80056b6:	f7ff befb 	b.w	80054b0 <__retarget_lock_release_recursive>
 80056ba:	bf00      	nop
 80056bc:	20004bb0 	.word	0x20004bb0

080056c0 <__sfputc_r>:
 80056c0:	6893      	ldr	r3, [r2, #8]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	b410      	push	{r4}
 80056c8:	6093      	str	r3, [r2, #8]
 80056ca:	da08      	bge.n	80056de <__sfputc_r+0x1e>
 80056cc:	6994      	ldr	r4, [r2, #24]
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	db01      	blt.n	80056d6 <__sfputc_r+0x16>
 80056d2:	290a      	cmp	r1, #10
 80056d4:	d103      	bne.n	80056de <__sfputc_r+0x1e>
 80056d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056da:	f000 bb73 	b.w	8005dc4 <__swbuf_r>
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	1c58      	adds	r0, r3, #1
 80056e2:	6010      	str	r0, [r2, #0]
 80056e4:	7019      	strb	r1, [r3, #0]
 80056e6:	4608      	mov	r0, r1
 80056e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <__sfputs_r>:
 80056ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	4614      	mov	r4, r2
 80056f6:	18d5      	adds	r5, r2, r3
 80056f8:	42ac      	cmp	r4, r5
 80056fa:	d101      	bne.n	8005700 <__sfputs_r+0x12>
 80056fc:	2000      	movs	r0, #0
 80056fe:	e007      	b.n	8005710 <__sfputs_r+0x22>
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	463a      	mov	r2, r7
 8005706:	4630      	mov	r0, r6
 8005708:	f7ff ffda 	bl	80056c0 <__sfputc_r>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d1f3      	bne.n	80056f8 <__sfputs_r+0xa>
 8005710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005714 <_vfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	460d      	mov	r5, r1
 800571a:	b09d      	sub	sp, #116	; 0x74
 800571c:	4614      	mov	r4, r2
 800571e:	4698      	mov	r8, r3
 8005720:	4606      	mov	r6, r0
 8005722:	b118      	cbz	r0, 800572c <_vfiprintf_r+0x18>
 8005724:	6a03      	ldr	r3, [r0, #32]
 8005726:	b90b      	cbnz	r3, 800572c <_vfiprintf_r+0x18>
 8005728:	f7ff fdbc 	bl	80052a4 <__sinit>
 800572c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800572e:	07d9      	lsls	r1, r3, #31
 8005730:	d405      	bmi.n	800573e <_vfiprintf_r+0x2a>
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	059a      	lsls	r2, r3, #22
 8005736:	d402      	bmi.n	800573e <_vfiprintf_r+0x2a>
 8005738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800573a:	f7ff feb8 	bl	80054ae <__retarget_lock_acquire_recursive>
 800573e:	89ab      	ldrh	r3, [r5, #12]
 8005740:	071b      	lsls	r3, r3, #28
 8005742:	d501      	bpl.n	8005748 <_vfiprintf_r+0x34>
 8005744:	692b      	ldr	r3, [r5, #16]
 8005746:	b99b      	cbnz	r3, 8005770 <_vfiprintf_r+0x5c>
 8005748:	4629      	mov	r1, r5
 800574a:	4630      	mov	r0, r6
 800574c:	f000 fb78 	bl	8005e40 <__swsetup_r>
 8005750:	b170      	cbz	r0, 8005770 <_vfiprintf_r+0x5c>
 8005752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005754:	07dc      	lsls	r4, r3, #31
 8005756:	d504      	bpl.n	8005762 <_vfiprintf_r+0x4e>
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	b01d      	add	sp, #116	; 0x74
 800575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005762:	89ab      	ldrh	r3, [r5, #12]
 8005764:	0598      	lsls	r0, r3, #22
 8005766:	d4f7      	bmi.n	8005758 <_vfiprintf_r+0x44>
 8005768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800576a:	f7ff fea1 	bl	80054b0 <__retarget_lock_release_recursive>
 800576e:	e7f3      	b.n	8005758 <_vfiprintf_r+0x44>
 8005770:	2300      	movs	r3, #0
 8005772:	9309      	str	r3, [sp, #36]	; 0x24
 8005774:	2320      	movs	r3, #32
 8005776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800577a:	f8cd 800c 	str.w	r8, [sp, #12]
 800577e:	2330      	movs	r3, #48	; 0x30
 8005780:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005934 <_vfiprintf_r+0x220>
 8005784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005788:	f04f 0901 	mov.w	r9, #1
 800578c:	4623      	mov	r3, r4
 800578e:	469a      	mov	sl, r3
 8005790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005794:	b10a      	cbz	r2, 800579a <_vfiprintf_r+0x86>
 8005796:	2a25      	cmp	r2, #37	; 0x25
 8005798:	d1f9      	bne.n	800578e <_vfiprintf_r+0x7a>
 800579a:	ebba 0b04 	subs.w	fp, sl, r4
 800579e:	d00b      	beq.n	80057b8 <_vfiprintf_r+0xa4>
 80057a0:	465b      	mov	r3, fp
 80057a2:	4622      	mov	r2, r4
 80057a4:	4629      	mov	r1, r5
 80057a6:	4630      	mov	r0, r6
 80057a8:	f7ff ffa1 	bl	80056ee <__sfputs_r>
 80057ac:	3001      	adds	r0, #1
 80057ae:	f000 80a9 	beq.w	8005904 <_vfiprintf_r+0x1f0>
 80057b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057b4:	445a      	add	r2, fp
 80057b6:	9209      	str	r2, [sp, #36]	; 0x24
 80057b8:	f89a 3000 	ldrb.w	r3, [sl]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a1 	beq.w	8005904 <_vfiprintf_r+0x1f0>
 80057c2:	2300      	movs	r3, #0
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057cc:	f10a 0a01 	add.w	sl, sl, #1
 80057d0:	9304      	str	r3, [sp, #16]
 80057d2:	9307      	str	r3, [sp, #28]
 80057d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057d8:	931a      	str	r3, [sp, #104]	; 0x68
 80057da:	4654      	mov	r4, sl
 80057dc:	2205      	movs	r2, #5
 80057de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e2:	4854      	ldr	r0, [pc, #336]	; (8005934 <_vfiprintf_r+0x220>)
 80057e4:	f7fa fcfc 	bl	80001e0 <memchr>
 80057e8:	9a04      	ldr	r2, [sp, #16]
 80057ea:	b9d8      	cbnz	r0, 8005824 <_vfiprintf_r+0x110>
 80057ec:	06d1      	lsls	r1, r2, #27
 80057ee:	bf44      	itt	mi
 80057f0:	2320      	movmi	r3, #32
 80057f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057f6:	0713      	lsls	r3, r2, #28
 80057f8:	bf44      	itt	mi
 80057fa:	232b      	movmi	r3, #43	; 0x2b
 80057fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005800:	f89a 3000 	ldrb.w	r3, [sl]
 8005804:	2b2a      	cmp	r3, #42	; 0x2a
 8005806:	d015      	beq.n	8005834 <_vfiprintf_r+0x120>
 8005808:	9a07      	ldr	r2, [sp, #28]
 800580a:	4654      	mov	r4, sl
 800580c:	2000      	movs	r0, #0
 800580e:	f04f 0c0a 	mov.w	ip, #10
 8005812:	4621      	mov	r1, r4
 8005814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005818:	3b30      	subs	r3, #48	; 0x30
 800581a:	2b09      	cmp	r3, #9
 800581c:	d94d      	bls.n	80058ba <_vfiprintf_r+0x1a6>
 800581e:	b1b0      	cbz	r0, 800584e <_vfiprintf_r+0x13a>
 8005820:	9207      	str	r2, [sp, #28]
 8005822:	e014      	b.n	800584e <_vfiprintf_r+0x13a>
 8005824:	eba0 0308 	sub.w	r3, r0, r8
 8005828:	fa09 f303 	lsl.w	r3, r9, r3
 800582c:	4313      	orrs	r3, r2
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	46a2      	mov	sl, r4
 8005832:	e7d2      	b.n	80057da <_vfiprintf_r+0xc6>
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	1d19      	adds	r1, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	9103      	str	r1, [sp, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	bfbb      	ittet	lt
 8005840:	425b      	neglt	r3, r3
 8005842:	f042 0202 	orrlt.w	r2, r2, #2
 8005846:	9307      	strge	r3, [sp, #28]
 8005848:	9307      	strlt	r3, [sp, #28]
 800584a:	bfb8      	it	lt
 800584c:	9204      	strlt	r2, [sp, #16]
 800584e:	7823      	ldrb	r3, [r4, #0]
 8005850:	2b2e      	cmp	r3, #46	; 0x2e
 8005852:	d10c      	bne.n	800586e <_vfiprintf_r+0x15a>
 8005854:	7863      	ldrb	r3, [r4, #1]
 8005856:	2b2a      	cmp	r3, #42	; 0x2a
 8005858:	d134      	bne.n	80058c4 <_vfiprintf_r+0x1b0>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	1d1a      	adds	r2, r3, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	9203      	str	r2, [sp, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	bfb8      	it	lt
 8005866:	f04f 33ff 	movlt.w	r3, #4294967295
 800586a:	3402      	adds	r4, #2
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005944 <_vfiprintf_r+0x230>
 8005872:	7821      	ldrb	r1, [r4, #0]
 8005874:	2203      	movs	r2, #3
 8005876:	4650      	mov	r0, sl
 8005878:	f7fa fcb2 	bl	80001e0 <memchr>
 800587c:	b138      	cbz	r0, 800588e <_vfiprintf_r+0x17a>
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	eba0 000a 	sub.w	r0, r0, sl
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	4082      	lsls	r2, r0
 8005888:	4313      	orrs	r3, r2
 800588a:	3401      	adds	r4, #1
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005892:	4829      	ldr	r0, [pc, #164]	; (8005938 <_vfiprintf_r+0x224>)
 8005894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005898:	2206      	movs	r2, #6
 800589a:	f7fa fca1 	bl	80001e0 <memchr>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d03f      	beq.n	8005922 <_vfiprintf_r+0x20e>
 80058a2:	4b26      	ldr	r3, [pc, #152]	; (800593c <_vfiprintf_r+0x228>)
 80058a4:	bb1b      	cbnz	r3, 80058ee <_vfiprintf_r+0x1da>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	3307      	adds	r3, #7
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	3308      	adds	r3, #8
 80058b0:	9303      	str	r3, [sp, #12]
 80058b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b4:	443b      	add	r3, r7
 80058b6:	9309      	str	r3, [sp, #36]	; 0x24
 80058b8:	e768      	b.n	800578c <_vfiprintf_r+0x78>
 80058ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80058be:	460c      	mov	r4, r1
 80058c0:	2001      	movs	r0, #1
 80058c2:	e7a6      	b.n	8005812 <_vfiprintf_r+0xfe>
 80058c4:	2300      	movs	r3, #0
 80058c6:	3401      	adds	r4, #1
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	4619      	mov	r1, r3
 80058cc:	f04f 0c0a 	mov.w	ip, #10
 80058d0:	4620      	mov	r0, r4
 80058d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058d6:	3a30      	subs	r2, #48	; 0x30
 80058d8:	2a09      	cmp	r2, #9
 80058da:	d903      	bls.n	80058e4 <_vfiprintf_r+0x1d0>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0c6      	beq.n	800586e <_vfiprintf_r+0x15a>
 80058e0:	9105      	str	r1, [sp, #20]
 80058e2:	e7c4      	b.n	800586e <_vfiprintf_r+0x15a>
 80058e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058e8:	4604      	mov	r4, r0
 80058ea:	2301      	movs	r3, #1
 80058ec:	e7f0      	b.n	80058d0 <_vfiprintf_r+0x1bc>
 80058ee:	ab03      	add	r3, sp, #12
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	462a      	mov	r2, r5
 80058f4:	4b12      	ldr	r3, [pc, #72]	; (8005940 <_vfiprintf_r+0x22c>)
 80058f6:	a904      	add	r1, sp, #16
 80058f8:	4630      	mov	r0, r6
 80058fa:	f3af 8000 	nop.w
 80058fe:	4607      	mov	r7, r0
 8005900:	1c78      	adds	r0, r7, #1
 8005902:	d1d6      	bne.n	80058b2 <_vfiprintf_r+0x19e>
 8005904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005906:	07d9      	lsls	r1, r3, #31
 8005908:	d405      	bmi.n	8005916 <_vfiprintf_r+0x202>
 800590a:	89ab      	ldrh	r3, [r5, #12]
 800590c:	059a      	lsls	r2, r3, #22
 800590e:	d402      	bmi.n	8005916 <_vfiprintf_r+0x202>
 8005910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005912:	f7ff fdcd 	bl	80054b0 <__retarget_lock_release_recursive>
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	065b      	lsls	r3, r3, #25
 800591a:	f53f af1d 	bmi.w	8005758 <_vfiprintf_r+0x44>
 800591e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005920:	e71c      	b.n	800575c <_vfiprintf_r+0x48>
 8005922:	ab03      	add	r3, sp, #12
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	462a      	mov	r2, r5
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <_vfiprintf_r+0x22c>)
 800592a:	a904      	add	r1, sp, #16
 800592c:	4630      	mov	r0, r6
 800592e:	f000 f879 	bl	8005a24 <_printf_i>
 8005932:	e7e4      	b.n	80058fe <_vfiprintf_r+0x1ea>
 8005934:	080060d8 	.word	0x080060d8
 8005938:	080060e2 	.word	0x080060e2
 800593c:	00000000 	.word	0x00000000
 8005940:	080056ef 	.word	0x080056ef
 8005944:	080060de 	.word	0x080060de

08005948 <_printf_common>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	4616      	mov	r6, r2
 800594e:	4699      	mov	r9, r3
 8005950:	688a      	ldr	r2, [r1, #8]
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005958:	4293      	cmp	r3, r2
 800595a:	bfb8      	it	lt
 800595c:	4613      	movlt	r3, r2
 800595e:	6033      	str	r3, [r6, #0]
 8005960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005964:	4607      	mov	r7, r0
 8005966:	460c      	mov	r4, r1
 8005968:	b10a      	cbz	r2, 800596e <_printf_common+0x26>
 800596a:	3301      	adds	r3, #1
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	0699      	lsls	r1, r3, #26
 8005972:	bf42      	ittt	mi
 8005974:	6833      	ldrmi	r3, [r6, #0]
 8005976:	3302      	addmi	r3, #2
 8005978:	6033      	strmi	r3, [r6, #0]
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	f015 0506 	ands.w	r5, r5, #6
 8005980:	d106      	bne.n	8005990 <_printf_common+0x48>
 8005982:	f104 0a19 	add.w	sl, r4, #25
 8005986:	68e3      	ldr	r3, [r4, #12]
 8005988:	6832      	ldr	r2, [r6, #0]
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	42ab      	cmp	r3, r5
 800598e:	dc26      	bgt.n	80059de <_printf_common+0x96>
 8005990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005994:	1e13      	subs	r3, r2, #0
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	bf18      	it	ne
 800599a:	2301      	movne	r3, #1
 800599c:	0692      	lsls	r2, r2, #26
 800599e:	d42b      	bmi.n	80059f8 <_printf_common+0xb0>
 80059a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a4:	4649      	mov	r1, r9
 80059a6:	4638      	mov	r0, r7
 80059a8:	47c0      	blx	r8
 80059aa:	3001      	adds	r0, #1
 80059ac:	d01e      	beq.n	80059ec <_printf_common+0xa4>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	6922      	ldr	r2, [r4, #16]
 80059b2:	f003 0306 	and.w	r3, r3, #6
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	bf02      	ittt	eq
 80059ba:	68e5      	ldreq	r5, [r4, #12]
 80059bc:	6833      	ldreq	r3, [r6, #0]
 80059be:	1aed      	subeq	r5, r5, r3
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	bf0c      	ite	eq
 80059c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c8:	2500      	movne	r5, #0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bfc4      	itt	gt
 80059ce:	1a9b      	subgt	r3, r3, r2
 80059d0:	18ed      	addgt	r5, r5, r3
 80059d2:	2600      	movs	r6, #0
 80059d4:	341a      	adds	r4, #26
 80059d6:	42b5      	cmp	r5, r6
 80059d8:	d11a      	bne.n	8005a10 <_printf_common+0xc8>
 80059da:	2000      	movs	r0, #0
 80059dc:	e008      	b.n	80059f0 <_printf_common+0xa8>
 80059de:	2301      	movs	r3, #1
 80059e0:	4652      	mov	r2, sl
 80059e2:	4649      	mov	r1, r9
 80059e4:	4638      	mov	r0, r7
 80059e6:	47c0      	blx	r8
 80059e8:	3001      	adds	r0, #1
 80059ea:	d103      	bne.n	80059f4 <_printf_common+0xac>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f4:	3501      	adds	r5, #1
 80059f6:	e7c6      	b.n	8005986 <_printf_common+0x3e>
 80059f8:	18e1      	adds	r1, r4, r3
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	2030      	movs	r0, #48	; 0x30
 80059fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a02:	4422      	add	r2, r4
 8005a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	e7c7      	b.n	80059a0 <_printf_common+0x58>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4622      	mov	r2, r4
 8005a14:	4649      	mov	r1, r9
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c0      	blx	r8
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d0e6      	beq.n	80059ec <_printf_common+0xa4>
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7d9      	b.n	80059d6 <_printf_common+0x8e>
	...

08005a24 <_printf_i>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	7e0f      	ldrb	r7, [r1, #24]
 8005a2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a2c:	2f78      	cmp	r7, #120	; 0x78
 8005a2e:	4691      	mov	r9, r2
 8005a30:	4680      	mov	r8, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	469a      	mov	sl, r3
 8005a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a3a:	d807      	bhi.n	8005a4c <_printf_i+0x28>
 8005a3c:	2f62      	cmp	r7, #98	; 0x62
 8005a3e:	d80a      	bhi.n	8005a56 <_printf_i+0x32>
 8005a40:	2f00      	cmp	r7, #0
 8005a42:	f000 80d4 	beq.w	8005bee <_printf_i+0x1ca>
 8005a46:	2f58      	cmp	r7, #88	; 0x58
 8005a48:	f000 80c0 	beq.w	8005bcc <_printf_i+0x1a8>
 8005a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a54:	e03a      	b.n	8005acc <_printf_i+0xa8>
 8005a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a5a:	2b15      	cmp	r3, #21
 8005a5c:	d8f6      	bhi.n	8005a4c <_printf_i+0x28>
 8005a5e:	a101      	add	r1, pc, #4	; (adr r1, 8005a64 <_printf_i+0x40>)
 8005a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005a4d 	.word	0x08005a4d
 8005a70:	08005a4d 	.word	0x08005a4d
 8005a74:	08005a4d 	.word	0x08005a4d
 8005a78:	08005a4d 	.word	0x08005a4d
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a4d 	.word	0x08005a4d
 8005a84:	08005a4d 	.word	0x08005a4d
 8005a88:	08005a4d 	.word	0x08005a4d
 8005a8c:	08005a4d 	.word	0x08005a4d
 8005a90:	08005bd5 	.word	0x08005bd5
 8005a94:	08005afd 	.word	0x08005afd
 8005a98:	08005b8f 	.word	0x08005b8f
 8005a9c:	08005a4d 	.word	0x08005a4d
 8005aa0:	08005a4d 	.word	0x08005a4d
 8005aa4:	08005bf7 	.word	0x08005bf7
 8005aa8:	08005a4d 	.word	0x08005a4d
 8005aac:	08005afd 	.word	0x08005afd
 8005ab0:	08005a4d 	.word	0x08005a4d
 8005ab4:	08005a4d 	.word	0x08005a4d
 8005ab8:	08005b97 	.word	0x08005b97
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	602a      	str	r2, [r5, #0]
 8005ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005acc:	2301      	movs	r3, #1
 8005ace:	e09f      	b.n	8005c10 <_printf_i+0x1ec>
 8005ad0:	6820      	ldr	r0, [r4, #0]
 8005ad2:	682b      	ldr	r3, [r5, #0]
 8005ad4:	0607      	lsls	r7, r0, #24
 8005ad6:	f103 0104 	add.w	r1, r3, #4
 8005ada:	6029      	str	r1, [r5, #0]
 8005adc:	d501      	bpl.n	8005ae2 <_printf_i+0xbe>
 8005ade:	681e      	ldr	r6, [r3, #0]
 8005ae0:	e003      	b.n	8005aea <_printf_i+0xc6>
 8005ae2:	0646      	lsls	r6, r0, #25
 8005ae4:	d5fb      	bpl.n	8005ade <_printf_i+0xba>
 8005ae6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005aea:	2e00      	cmp	r6, #0
 8005aec:	da03      	bge.n	8005af6 <_printf_i+0xd2>
 8005aee:	232d      	movs	r3, #45	; 0x2d
 8005af0:	4276      	negs	r6, r6
 8005af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af6:	485a      	ldr	r0, [pc, #360]	; (8005c60 <_printf_i+0x23c>)
 8005af8:	230a      	movs	r3, #10
 8005afa:	e012      	b.n	8005b22 <_printf_i+0xfe>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	1d19      	adds	r1, r3, #4
 8005b02:	6029      	str	r1, [r5, #0]
 8005b04:	0605      	lsls	r5, r0, #24
 8005b06:	d501      	bpl.n	8005b0c <_printf_i+0xe8>
 8005b08:	681e      	ldr	r6, [r3, #0]
 8005b0a:	e002      	b.n	8005b12 <_printf_i+0xee>
 8005b0c:	0641      	lsls	r1, r0, #25
 8005b0e:	d5fb      	bpl.n	8005b08 <_printf_i+0xe4>
 8005b10:	881e      	ldrh	r6, [r3, #0]
 8005b12:	4853      	ldr	r0, [pc, #332]	; (8005c60 <_printf_i+0x23c>)
 8005b14:	2f6f      	cmp	r7, #111	; 0x6f
 8005b16:	bf0c      	ite	eq
 8005b18:	2308      	moveq	r3, #8
 8005b1a:	230a      	movne	r3, #10
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b22:	6865      	ldr	r5, [r4, #4]
 8005b24:	60a5      	str	r5, [r4, #8]
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	bfa2      	ittt	ge
 8005b2a:	6821      	ldrge	r1, [r4, #0]
 8005b2c:	f021 0104 	bicge.w	r1, r1, #4
 8005b30:	6021      	strge	r1, [r4, #0]
 8005b32:	b90e      	cbnz	r6, 8005b38 <_printf_i+0x114>
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	d04b      	beq.n	8005bd0 <_printf_i+0x1ac>
 8005b38:	4615      	mov	r5, r2
 8005b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b42:	5dc7      	ldrb	r7, [r0, r7]
 8005b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b48:	4637      	mov	r7, r6
 8005b4a:	42bb      	cmp	r3, r7
 8005b4c:	460e      	mov	r6, r1
 8005b4e:	d9f4      	bls.n	8005b3a <_printf_i+0x116>
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d10b      	bne.n	8005b6c <_printf_i+0x148>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07de      	lsls	r6, r3, #31
 8005b58:	d508      	bpl.n	8005b6c <_printf_i+0x148>
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	6861      	ldr	r1, [r4, #4]
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	bfde      	ittt	le
 8005b62:	2330      	movle	r3, #48	; 0x30
 8005b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b6c:	1b52      	subs	r2, r2, r5
 8005b6e:	6122      	str	r2, [r4, #16]
 8005b70:	f8cd a000 	str.w	sl, [sp]
 8005b74:	464b      	mov	r3, r9
 8005b76:	aa03      	add	r2, sp, #12
 8005b78:	4621      	mov	r1, r4
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	f7ff fee4 	bl	8005948 <_printf_common>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d14a      	bne.n	8005c1a <_printf_i+0x1f6>
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	b004      	add	sp, #16
 8005b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	f043 0320 	orr.w	r3, r3, #32
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	4833      	ldr	r0, [pc, #204]	; (8005c64 <_printf_i+0x240>)
 8005b98:	2778      	movs	r7, #120	; 0x78
 8005b9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	6829      	ldr	r1, [r5, #0]
 8005ba2:	061f      	lsls	r7, r3, #24
 8005ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ba8:	d402      	bmi.n	8005bb0 <_printf_i+0x18c>
 8005baa:	065f      	lsls	r7, r3, #25
 8005bac:	bf48      	it	mi
 8005bae:	b2b6      	uxthmi	r6, r6
 8005bb0:	07df      	lsls	r7, r3, #31
 8005bb2:	bf48      	it	mi
 8005bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb8:	6029      	str	r1, [r5, #0]
 8005bba:	bf48      	it	mi
 8005bbc:	6023      	strmi	r3, [r4, #0]
 8005bbe:	b91e      	cbnz	r6, 8005bc8 <_printf_i+0x1a4>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	f023 0320 	bic.w	r3, r3, #32
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	2310      	movs	r3, #16
 8005bca:	e7a7      	b.n	8005b1c <_printf_i+0xf8>
 8005bcc:	4824      	ldr	r0, [pc, #144]	; (8005c60 <_printf_i+0x23c>)
 8005bce:	e7e4      	b.n	8005b9a <_printf_i+0x176>
 8005bd0:	4615      	mov	r5, r2
 8005bd2:	e7bd      	b.n	8005b50 <_printf_i+0x12c>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	6826      	ldr	r6, [r4, #0]
 8005bd8:	6961      	ldr	r1, [r4, #20]
 8005bda:	1d18      	adds	r0, r3, #4
 8005bdc:	6028      	str	r0, [r5, #0]
 8005bde:	0635      	lsls	r5, r6, #24
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	d501      	bpl.n	8005be8 <_printf_i+0x1c4>
 8005be4:	6019      	str	r1, [r3, #0]
 8005be6:	e002      	b.n	8005bee <_printf_i+0x1ca>
 8005be8:	0670      	lsls	r0, r6, #25
 8005bea:	d5fb      	bpl.n	8005be4 <_printf_i+0x1c0>
 8005bec:	8019      	strh	r1, [r3, #0]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	4615      	mov	r5, r2
 8005bf4:	e7bc      	b.n	8005b70 <_printf_i+0x14c>
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	1d1a      	adds	r2, r3, #4
 8005bfa:	602a      	str	r2, [r5, #0]
 8005bfc:	681d      	ldr	r5, [r3, #0]
 8005bfe:	6862      	ldr	r2, [r4, #4]
 8005c00:	2100      	movs	r1, #0
 8005c02:	4628      	mov	r0, r5
 8005c04:	f7fa faec 	bl	80001e0 <memchr>
 8005c08:	b108      	cbz	r0, 8005c0e <_printf_i+0x1ea>
 8005c0a:	1b40      	subs	r0, r0, r5
 8005c0c:	6060      	str	r0, [r4, #4]
 8005c0e:	6863      	ldr	r3, [r4, #4]
 8005c10:	6123      	str	r3, [r4, #16]
 8005c12:	2300      	movs	r3, #0
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c18:	e7aa      	b.n	8005b70 <_printf_i+0x14c>
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	47d0      	blx	sl
 8005c24:	3001      	adds	r0, #1
 8005c26:	d0ad      	beq.n	8005b84 <_printf_i+0x160>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	079b      	lsls	r3, r3, #30
 8005c2c:	d413      	bmi.n	8005c56 <_printf_i+0x232>
 8005c2e:	68e0      	ldr	r0, [r4, #12]
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	4298      	cmp	r0, r3
 8005c34:	bfb8      	it	lt
 8005c36:	4618      	movlt	r0, r3
 8005c38:	e7a6      	b.n	8005b88 <_printf_i+0x164>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	47d0      	blx	sl
 8005c44:	3001      	adds	r0, #1
 8005c46:	d09d      	beq.n	8005b84 <_printf_i+0x160>
 8005c48:	3501      	adds	r5, #1
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	9903      	ldr	r1, [sp, #12]
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	dcf2      	bgt.n	8005c3a <_printf_i+0x216>
 8005c54:	e7eb      	b.n	8005c2e <_printf_i+0x20a>
 8005c56:	2500      	movs	r5, #0
 8005c58:	f104 0619 	add.w	r6, r4, #25
 8005c5c:	e7f5      	b.n	8005c4a <_printf_i+0x226>
 8005c5e:	bf00      	nop
 8005c60:	080060e9 	.word	0x080060e9
 8005c64:	080060fa 	.word	0x080060fa

08005c68 <__sflush_r>:
 8005c68:	898a      	ldrh	r2, [r1, #12]
 8005c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	4605      	mov	r5, r0
 8005c70:	0710      	lsls	r0, r2, #28
 8005c72:	460c      	mov	r4, r1
 8005c74:	d458      	bmi.n	8005d28 <__sflush_r+0xc0>
 8005c76:	684b      	ldr	r3, [r1, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dc05      	bgt.n	8005c88 <__sflush_r+0x20>
 8005c7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dc02      	bgt.n	8005c88 <__sflush_r+0x20>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	d0f9      	beq.n	8005c82 <__sflush_r+0x1a>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c94:	682f      	ldr	r7, [r5, #0]
 8005c96:	6a21      	ldr	r1, [r4, #32]
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	d032      	beq.n	8005d02 <__sflush_r+0x9a>
 8005c9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	075a      	lsls	r2, r3, #29
 8005ca2:	d505      	bpl.n	8005cb0 <__sflush_r+0x48>
 8005ca4:	6863      	ldr	r3, [r4, #4]
 8005ca6:	1ac0      	subs	r0, r0, r3
 8005ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005caa:	b10b      	cbz	r3, 8005cb0 <__sflush_r+0x48>
 8005cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cae:	1ac0      	subs	r0, r0, r3
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cb6:	6a21      	ldr	r1, [r4, #32]
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b0      	blx	r6
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	d106      	bne.n	8005cd0 <__sflush_r+0x68>
 8005cc2:	6829      	ldr	r1, [r5, #0]
 8005cc4:	291d      	cmp	r1, #29
 8005cc6:	d82b      	bhi.n	8005d20 <__sflush_r+0xb8>
 8005cc8:	4a29      	ldr	r2, [pc, #164]	; (8005d70 <__sflush_r+0x108>)
 8005cca:	410a      	asrs	r2, r1
 8005ccc:	07d6      	lsls	r6, r2, #31
 8005cce:	d427      	bmi.n	8005d20 <__sflush_r+0xb8>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	6062      	str	r2, [r4, #4]
 8005cd4:	04d9      	lsls	r1, r3, #19
 8005cd6:	6922      	ldr	r2, [r4, #16]
 8005cd8:	6022      	str	r2, [r4, #0]
 8005cda:	d504      	bpl.n	8005ce6 <__sflush_r+0x7e>
 8005cdc:	1c42      	adds	r2, r0, #1
 8005cde:	d101      	bne.n	8005ce4 <__sflush_r+0x7c>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b903      	cbnz	r3, 8005ce6 <__sflush_r+0x7e>
 8005ce4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ce8:	602f      	str	r7, [r5, #0]
 8005cea:	2900      	cmp	r1, #0
 8005cec:	d0c9      	beq.n	8005c82 <__sflush_r+0x1a>
 8005cee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cf2:	4299      	cmp	r1, r3
 8005cf4:	d002      	beq.n	8005cfc <__sflush_r+0x94>
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f7ff fbea 	bl	80054d0 <_free_r>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	6360      	str	r0, [r4, #52]	; 0x34
 8005d00:	e7c0      	b.n	8005c84 <__sflush_r+0x1c>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b0      	blx	r6
 8005d08:	1c41      	adds	r1, r0, #1
 8005d0a:	d1c8      	bne.n	8005c9e <__sflush_r+0x36>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0c5      	beq.n	8005c9e <__sflush_r+0x36>
 8005d12:	2b1d      	cmp	r3, #29
 8005d14:	d001      	beq.n	8005d1a <__sflush_r+0xb2>
 8005d16:	2b16      	cmp	r3, #22
 8005d18:	d101      	bne.n	8005d1e <__sflush_r+0xb6>
 8005d1a:	602f      	str	r7, [r5, #0]
 8005d1c:	e7b1      	b.n	8005c82 <__sflush_r+0x1a>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	e7ad      	b.n	8005c84 <__sflush_r+0x1c>
 8005d28:	690f      	ldr	r7, [r1, #16]
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	d0a9      	beq.n	8005c82 <__sflush_r+0x1a>
 8005d2e:	0793      	lsls	r3, r2, #30
 8005d30:	680e      	ldr	r6, [r1, #0]
 8005d32:	bf08      	it	eq
 8005d34:	694b      	ldreq	r3, [r1, #20]
 8005d36:	600f      	str	r7, [r1, #0]
 8005d38:	bf18      	it	ne
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	eba6 0807 	sub.w	r8, r6, r7
 8005d40:	608b      	str	r3, [r1, #8]
 8005d42:	f1b8 0f00 	cmp.w	r8, #0
 8005d46:	dd9c      	ble.n	8005c82 <__sflush_r+0x1a>
 8005d48:	6a21      	ldr	r1, [r4, #32]
 8005d4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	463a      	mov	r2, r7
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b0      	blx	r6
 8005d54:	2800      	cmp	r0, #0
 8005d56:	dc06      	bgt.n	8005d66 <__sflush_r+0xfe>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	e78e      	b.n	8005c84 <__sflush_r+0x1c>
 8005d66:	4407      	add	r7, r0
 8005d68:	eba8 0800 	sub.w	r8, r8, r0
 8005d6c:	e7e9      	b.n	8005d42 <__sflush_r+0xda>
 8005d6e:	bf00      	nop
 8005d70:	dfbffffe 	.word	0xdfbffffe

08005d74 <_fflush_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	690b      	ldr	r3, [r1, #16]
 8005d78:	4605      	mov	r5, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b913      	cbnz	r3, 8005d84 <_fflush_r+0x10>
 8005d7e:	2500      	movs	r5, #0
 8005d80:	4628      	mov	r0, r5
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	b118      	cbz	r0, 8005d8e <_fflush_r+0x1a>
 8005d86:	6a03      	ldr	r3, [r0, #32]
 8005d88:	b90b      	cbnz	r3, 8005d8e <_fflush_r+0x1a>
 8005d8a:	f7ff fa8b 	bl	80052a4 <__sinit>
 8005d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f3      	beq.n	8005d7e <_fflush_r+0xa>
 8005d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d98:	07d0      	lsls	r0, r2, #31
 8005d9a:	d404      	bmi.n	8005da6 <_fflush_r+0x32>
 8005d9c:	0599      	lsls	r1, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <_fflush_r+0x32>
 8005da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005da2:	f7ff fb84 	bl	80054ae <__retarget_lock_acquire_recursive>
 8005da6:	4628      	mov	r0, r5
 8005da8:	4621      	mov	r1, r4
 8005daa:	f7ff ff5d 	bl	8005c68 <__sflush_r>
 8005dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005db0:	07da      	lsls	r2, r3, #31
 8005db2:	4605      	mov	r5, r0
 8005db4:	d4e4      	bmi.n	8005d80 <_fflush_r+0xc>
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	059b      	lsls	r3, r3, #22
 8005dba:	d4e1      	bmi.n	8005d80 <_fflush_r+0xc>
 8005dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dbe:	f7ff fb77 	bl	80054b0 <__retarget_lock_release_recursive>
 8005dc2:	e7dd      	b.n	8005d80 <_fflush_r+0xc>

08005dc4 <__swbuf_r>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	460e      	mov	r6, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	4605      	mov	r5, r0
 8005dcc:	b118      	cbz	r0, 8005dd6 <__swbuf_r+0x12>
 8005dce:	6a03      	ldr	r3, [r0, #32]
 8005dd0:	b90b      	cbnz	r3, 8005dd6 <__swbuf_r+0x12>
 8005dd2:	f7ff fa67 	bl	80052a4 <__sinit>
 8005dd6:	69a3      	ldr	r3, [r4, #24]
 8005dd8:	60a3      	str	r3, [r4, #8]
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	071a      	lsls	r2, r3, #28
 8005dde:	d525      	bpl.n	8005e2c <__swbuf_r+0x68>
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	b31b      	cbz	r3, 8005e2c <__swbuf_r+0x68>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	6922      	ldr	r2, [r4, #16]
 8005de8:	1a98      	subs	r0, r3, r2
 8005dea:	6963      	ldr	r3, [r4, #20]
 8005dec:	b2f6      	uxtb	r6, r6
 8005dee:	4283      	cmp	r3, r0
 8005df0:	4637      	mov	r7, r6
 8005df2:	dc04      	bgt.n	8005dfe <__swbuf_r+0x3a>
 8005df4:	4621      	mov	r1, r4
 8005df6:	4628      	mov	r0, r5
 8005df8:	f7ff ffbc 	bl	8005d74 <_fflush_r>
 8005dfc:	b9e0      	cbnz	r0, 8005e38 <__swbuf_r+0x74>
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	701e      	strb	r6, [r3, #0]
 8005e0c:	6962      	ldr	r2, [r4, #20]
 8005e0e:	1c43      	adds	r3, r0, #1
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d004      	beq.n	8005e1e <__swbuf_r+0x5a>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	07db      	lsls	r3, r3, #31
 8005e18:	d506      	bpl.n	8005e28 <__swbuf_r+0x64>
 8005e1a:	2e0a      	cmp	r6, #10
 8005e1c:	d104      	bne.n	8005e28 <__swbuf_r+0x64>
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7ff ffa7 	bl	8005d74 <_fflush_r>
 8005e26:	b938      	cbnz	r0, 8005e38 <__swbuf_r+0x74>
 8005e28:	4638      	mov	r0, r7
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 f806 	bl	8005e40 <__swsetup_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d0d5      	beq.n	8005de4 <__swbuf_r+0x20>
 8005e38:	f04f 37ff 	mov.w	r7, #4294967295
 8005e3c:	e7f4      	b.n	8005e28 <__swbuf_r+0x64>
	...

08005e40 <__swsetup_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <__swsetup_r+0xac>)
 8005e44:	4605      	mov	r5, r0
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	460c      	mov	r4, r1
 8005e4a:	b118      	cbz	r0, 8005e54 <__swsetup_r+0x14>
 8005e4c:	6a03      	ldr	r3, [r0, #32]
 8005e4e:	b90b      	cbnz	r3, 8005e54 <__swsetup_r+0x14>
 8005e50:	f7ff fa28 	bl	80052a4 <__sinit>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e5a:	0718      	lsls	r0, r3, #28
 8005e5c:	d422      	bmi.n	8005ea4 <__swsetup_r+0x64>
 8005e5e:	06d9      	lsls	r1, r3, #27
 8005e60:	d407      	bmi.n	8005e72 <__swsetup_r+0x32>
 8005e62:	2309      	movs	r3, #9
 8005e64:	602b      	str	r3, [r5, #0]
 8005e66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	e034      	b.n	8005edc <__swsetup_r+0x9c>
 8005e72:	0758      	lsls	r0, r3, #29
 8005e74:	d512      	bpl.n	8005e9c <__swsetup_r+0x5c>
 8005e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e78:	b141      	cbz	r1, 8005e8c <__swsetup_r+0x4c>
 8005e7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e7e:	4299      	cmp	r1, r3
 8005e80:	d002      	beq.n	8005e88 <__swsetup_r+0x48>
 8005e82:	4628      	mov	r0, r5
 8005e84:	f7ff fb24 	bl	80054d0 <_free_r>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	6363      	str	r3, [r4, #52]	; 0x34
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	2300      	movs	r3, #0
 8005e96:	6063      	str	r3, [r4, #4]
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f043 0308 	orr.w	r3, r3, #8
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	b94b      	cbnz	r3, 8005ebc <__swsetup_r+0x7c>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb2:	d003      	beq.n	8005ebc <__swsetup_r+0x7c>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 f850 	bl	8005f5c <__smakebuf_r>
 8005ebc:	89a0      	ldrh	r0, [r4, #12]
 8005ebe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec2:	f010 0301 	ands.w	r3, r0, #1
 8005ec6:	d00a      	beq.n	8005ede <__swsetup_r+0x9e>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	6963      	ldr	r3, [r4, #20]
 8005ece:	425b      	negs	r3, r3
 8005ed0:	61a3      	str	r3, [r4, #24]
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	b943      	cbnz	r3, 8005ee8 <__swsetup_r+0xa8>
 8005ed6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005eda:	d1c4      	bne.n	8005e66 <__swsetup_r+0x26>
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	0781      	lsls	r1, r0, #30
 8005ee0:	bf58      	it	pl
 8005ee2:	6963      	ldrpl	r3, [r4, #20]
 8005ee4:	60a3      	str	r3, [r4, #8]
 8005ee6:	e7f4      	b.n	8005ed2 <__swsetup_r+0x92>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e7f7      	b.n	8005edc <__swsetup_r+0x9c>
 8005eec:	2000006c 	.word	0x2000006c

08005ef0 <_sbrk_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	; (8005f0c <_sbrk_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fa fdda 	bl	8000ab4 <_sbrk>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_sbrk_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_sbrk_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	20004bac 	.word	0x20004bac

08005f10 <__swhatbuf_r>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	b096      	sub	sp, #88	; 0x58
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	461e      	mov	r6, r3
 8005f20:	da0d      	bge.n	8005f3e <__swhatbuf_r+0x2e>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	bf0c      	ite	eq
 8005f2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f32:	2340      	movne	r3, #64	; 0x40
 8005f34:	2000      	movs	r0, #0
 8005f36:	6031      	str	r1, [r6, #0]
 8005f38:	602b      	str	r3, [r5, #0]
 8005f3a:	b016      	add	sp, #88	; 0x58
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	466a      	mov	r2, sp
 8005f40:	f000 f848 	bl	8005fd4 <_fstat_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	dbec      	blt.n	8005f22 <__swhatbuf_r+0x12>
 8005f48:	9901      	ldr	r1, [sp, #4]
 8005f4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f52:	4259      	negs	r1, r3
 8005f54:	4159      	adcs	r1, r3
 8005f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5a:	e7eb      	b.n	8005f34 <__swhatbuf_r+0x24>

08005f5c <__smakebuf_r>:
 8005f5c:	898b      	ldrh	r3, [r1, #12]
 8005f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f60:	079d      	lsls	r5, r3, #30
 8005f62:	4606      	mov	r6, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	d507      	bpl.n	8005f78 <__smakebuf_r+0x1c>
 8005f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2301      	movs	r3, #1
 8005f72:	6163      	str	r3, [r4, #20]
 8005f74:	b002      	add	sp, #8
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	ab01      	add	r3, sp, #4
 8005f7a:	466a      	mov	r2, sp
 8005f7c:	f7ff ffc8 	bl	8005f10 <__swhatbuf_r>
 8005f80:	9900      	ldr	r1, [sp, #0]
 8005f82:	4605      	mov	r5, r0
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff fb0f 	bl	80055a8 <_malloc_r>
 8005f8a:	b948      	cbnz	r0, 8005fa0 <__smakebuf_r+0x44>
 8005f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d4ef      	bmi.n	8005f74 <__smakebuf_r+0x18>
 8005f94:	f023 0303 	bic.w	r3, r3, #3
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	e7e3      	b.n	8005f68 <__smakebuf_r+0xc>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	6020      	str	r0, [r4, #0]
 8005fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	9b00      	ldr	r3, [sp, #0]
 8005fac:	6163      	str	r3, [r4, #20]
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	6120      	str	r0, [r4, #16]
 8005fb2:	b15b      	cbz	r3, 8005fcc <__smakebuf_r+0x70>
 8005fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f81d 	bl	8005ff8 <_isatty_r>
 8005fbe:	b128      	cbz	r0, 8005fcc <__smakebuf_r+0x70>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	431d      	orrs	r5, r3
 8005fd0:	81a5      	strh	r5, [r4, #12]
 8005fd2:	e7cf      	b.n	8005f74 <__smakebuf_r+0x18>

08005fd4 <_fstat_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	; (8005ff4 <_fstat_r+0x20>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	f7fa fd3e 	bl	8000a62 <_fstat>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	d102      	bne.n	8005ff0 <_fstat_r+0x1c>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b103      	cbz	r3, 8005ff0 <_fstat_r+0x1c>
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20004bac 	.word	0x20004bac

08005ff8 <_isatty_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d06      	ldr	r5, [pc, #24]	; (8006014 <_isatty_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fa fd3d 	bl	8000a82 <_isatty>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_isatty_r+0x1a>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_isatty_r+0x1a>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	20004bac 	.word	0x20004bac

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
