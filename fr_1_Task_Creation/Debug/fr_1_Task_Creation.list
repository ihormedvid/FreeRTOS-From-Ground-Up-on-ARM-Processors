
fr_1_Task_Creation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003714  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800391c  0800391c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000068  0800398c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800398c  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e92  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d0  00000000  00000000  00032f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00035940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc0  00000000  00000000  00036af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004205  00000000  00000000  000378b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013423  00000000  00000000  0003bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098e3f  00000000  00000000  0004eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051d4  00000000  00000000  000e7d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000eceec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800389c 	.word	0x0800389c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800389c 	.word	0x0800389c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

int __io_putchar(int ch);


int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000580:	f000 fabe 	bl	8000b00 <HAL_Init>

  SystemClock_Config();
 8000584:	f000 f81c 	bl	80005c0 <SystemClock_Config>


  MX_GPIO_Init();
 8000588:	f000 f8a2 	bl	80006d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f876 	bl	800067c <MX_USART2_UART_Init>


  while (1)
  {

	  printf("Hello from SMT32\n\r");
 8000590:	4801      	ldr	r0, [pc, #4]	; (8000598 <main+0x1c>)
 8000592:	f002 fb0d 	bl	8002bb0 <iprintf>
 8000596:	e7fb      	b.n	8000590 <main+0x14>
 8000598:	080038b4 	.word	0x080038b4

0800059c <__io_putchar>:
  }

}


int __io_putchar(int ch){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch,1,0xFFFF);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <__io_putchar+0x20>)
 80005ae:	f001 fca6 	bl	8001efe <HAL_UART_Transmit>
	return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000084 	.word	0x20000084

080005c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fb43 	bl	8002c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xb4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xb4>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xb4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <SystemClock_Config+0xb8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <SystemClock_Config+0xb8>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <SystemClock_Config+0xb8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fd0d 	bl	8001050 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800063c:	f000 f874 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f000 ff70 	bl	8001540 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000666:	f000 f85f 	bl	8000728 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART2_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f001 fbd6 	bl	8001e64 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f833 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000084 	.word	0x20000084
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_GPIO_Init+0x30>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <MX_GPIO_Init+0x30>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_GPIO_Init+0x30>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d101      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000716:	f000 fa15 	bl	8000b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40010000 	.word	0x40010000

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <HAL_MspInit+0x54>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x54>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_MspInit+0x54>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_MspInit+0x54>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	210f      	movs	r1, #15
 8000776:	f06f 0001 	mvn.w	r0, #1
 800077a:	f000 fabb 	bl	8000cf4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d12b      	bne.n	8000806 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007e6:	230c      	movs	r3, #12
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f6:	2307      	movs	r3, #7
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_UART_MspInit+0x8c>)
 8000802:	f000 faa1 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40004400 	.word	0x40004400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000

0800081c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <HAL_InitTick+0xd0>)
 8000832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000834:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <HAL_InitTick+0xd0>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6453      	str	r3, [r2, #68]	; 0x44
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <HAL_InitTick+0xd0>)
 800083e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000848:	f107 020c 	add.w	r2, r7, #12
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f854 	bl	8001900 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000858:	f001 f83e 	bl	80018d8 <HAL_RCC_GetPCLK2Freq>
 800085c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <HAL_InitTick+0xd4>)
 8000862:	fba2 2303 	umull	r2, r3, r2, r3
 8000866:	0c9b      	lsrs	r3, r3, #18
 8000868:	3b01      	subs	r3, #1
 800086a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <HAL_InitTick+0xd8>)
 800086e:	4a22      	ldr	r2, [pc, #136]	; (80008f8 <HAL_InitTick+0xdc>)
 8000870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <HAL_InitTick+0xd8>)
 8000874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <HAL_InitTick+0xd8>)
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_InitTick+0xd8>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_InitTick+0xd8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_InitTick+0xd8>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000892:	4818      	ldr	r0, [pc, #96]	; (80008f4 <HAL_InitTick+0xd8>)
 8000894:	f001 f866 	bl	8001964 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800089e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11b      	bne.n	80008de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008a6:	4813      	ldr	r0, [pc, #76]	; (80008f4 <HAL_InitTick+0xd8>)
 80008a8:	f001 f8b6 	bl	8001a18 <HAL_TIM_Base_Start_IT>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d111      	bne.n	80008de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ba:	2019      	movs	r0, #25
 80008bc:	f000 fa36 	bl	8000d2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d808      	bhi.n	80008d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008c6:	2200      	movs	r2, #0
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	2019      	movs	r0, #25
 80008cc:	f000 fa12 	bl	8000cf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_InitTick+0xe0>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e002      	b.n	80008de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3730      	adds	r7, #48	; 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	200000c8 	.word	0x200000c8
 80008f8:	40010000 	.word	0x40010000
 80008fc:	20000004 	.word	0x20000004

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000932:	f001 f8d3 	bl	8001adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000c8 	.word	0x200000c8

08000940 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e00a      	b.n	8000968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000952:	f3af 8000 	nop.w
 8000956:	4601      	mov	r1, r0
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	60ba      	str	r2, [r7, #8]
 800095e:	b2ca      	uxtb	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf0      	blt.n	8000952 <_read+0x12>
  }

  return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e009      	b.n	80009a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe01 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf1      	blt.n	800098c <_write+0x12>
  }
  return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_close>:

int _close(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009da:	605a      	str	r2, [r3, #4]
  return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_isatty>:

int _isatty(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f002 f954 	bl	8002cf8 <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20020000 	.word	0x20020000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	20000110 	.word	0x20000110
 8000a84:	200006f0 	.word	0x200006f0

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 f913 	bl	8002d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd4d 	bl	800057c <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000af0:	08003924 	.word	0x08003924
  ldr r2, =_sbss
 8000af4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000af8:	200006f0 	.word	0x200006f0

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f8d8 	bl	8000cde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f7ff fe74 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fdfe 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000114 	.word	0x20000114

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000114 	.word	0x20000114

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff4c 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d06:	f7ff ff61 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f7ff ffb1 	bl	8000c78 <NVIC_EncodePriority>
 8000d16:	4602      	mov	r2, r0
 8000d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff80 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff54 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e159      	b.n	8001018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8148 	bne.w	8001012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a2 	beq.w	8001012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b57      	ldr	r3, [pc, #348]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a56      	ldr	r2, [pc, #344]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b54      	ldr	r3, [pc, #336]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a52      	ldr	r2, [pc, #328]	; (8001034 <HAL_GPIO_Init+0x2ec>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a49      	ldr	r2, [pc, #292]	; (8001038 <HAL_GPIO_Init+0x2f0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x1fe>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a47      	ldr	r2, [pc, #284]	; (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a46      	ldr	r2, [pc, #280]	; (8001044 <HAL_GPIO_Init+0x2fc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x1f6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a45      	ldr	r2, [pc, #276]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x1f2>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <HAL_GPIO_Init+0x2ec>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb8:	4a24      	ldr	r2, [pc, #144]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe2:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_GPIO_Init+0x304>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_GPIO_Init+0x304>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f aea2 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40013800 	.word	0x40013800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e267      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d075      	beq.n	800115a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106e:	4b88      	ldr	r3, [pc, #544]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b04      	cmp	r3, #4
 8001078:	d00c      	beq.n	8001094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107a:	4b85      	ldr	r3, [pc, #532]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001082:	2b08      	cmp	r3, #8
 8001084:	d112      	bne.n	80010ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4b82      	ldr	r3, [pc, #520]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001092:	d10b      	bne.n	80010ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	4b7e      	ldr	r3, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <HAL_RCC_OscConfig+0x108>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d157      	bne.n	8001158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e242      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b4:	d106      	bne.n	80010c4 <HAL_RCC_OscConfig+0x74>
 80010b6:	4b76      	ldr	r3, [pc, #472]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a75      	ldr	r2, [pc, #468]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e01d      	b.n	8001100 <HAL_RCC_OscConfig+0xb0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x98>
 80010ce:	4b70      	ldr	r3, [pc, #448]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a6f      	ldr	r2, [pc, #444]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b6d      	ldr	r3, [pc, #436]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6c      	ldr	r2, [pc, #432]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0xb0>
 80010e8:	4b69      	ldr	r3, [pc, #420]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a68      	ldr	r2, [pc, #416]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b66      	ldr	r3, [pc, #408]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a65      	ldr	r2, [pc, #404]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fd30 	bl	8000b6c <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fd2c 	bl	8000b6c <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e207      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xc0>
 800112e:	e014      	b.n	800115a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fd1c 	bl	8000b6c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fd18 	bl	8000b6c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1f3      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0xe8>
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d063      	beq.n	800122e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117a:	2b08      	cmp	r3, #8
 800117c:	d11c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b44      	ldr	r3, [pc, #272]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d116      	bne.n	80011b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_RCC_OscConfig+0x152>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e1c7      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4937      	ldr	r1, [pc, #220]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	e03a      	b.n	800122e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <HAL_RCC_OscConfig+0x244>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c6:	f7ff fcd1 	bl	8000b6c <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff fccd 	bl	8000b6c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e1a8      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4925      	ldr	r1, [pc, #148]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_RCC_OscConfig+0x244>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fcb0 	bl	8000b6c <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff fcac 	bl	8000b6c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e187      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d036      	beq.n	80012a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d016      	beq.n	8001270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_RCC_OscConfig+0x248>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001248:	f7ff fc90 	bl	8000b6c <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff fc8c 	bl	8000b6c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e167      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_OscConfig+0x240>)
 8001264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x200>
 800126e:	e01b      	b.n	80012a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_RCC_OscConfig+0x248>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001276:	f7ff fc79 	bl	8000b6c <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	e00e      	b.n	800129c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fc75 	bl	8000b6c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d907      	bls.n	800129c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e150      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
 8001290:	40023800 	.word	0x40023800
 8001294:	42470000 	.word	0x42470000
 8001298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ea      	bne.n	800127e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8097 	beq.w	80013e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b7d      	ldr	r3, [pc, #500]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a7c      	ldr	r2, [pc, #496]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b77      	ldr	r3, [pc, #476]	; (80014c4 <HAL_RCC_OscConfig+0x474>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b74      	ldr	r3, [pc, #464]	; (80014c4 <HAL_RCC_OscConfig+0x474>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a73      	ldr	r2, [pc, #460]	; (80014c4 <HAL_RCC_OscConfig+0x474>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc35 	bl	8000b6c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff fc31 	bl	8000b6c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e10c      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_RCC_OscConfig+0x474>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x2ea>
 800132c:	4b64      	ldr	r3, [pc, #400]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	4a63      	ldr	r2, [pc, #396]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6713      	str	r3, [r2, #112]	; 0x70
 8001338:	e01c      	b.n	8001374 <HAL_RCC_OscConfig+0x324>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x30c>
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001346:	4a5e      	ldr	r2, [pc, #376]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6713      	str	r3, [r2, #112]	; 0x70
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a5b      	ldr	r2, [pc, #364]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0x324>
 800135c:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6713      	str	r3, [r2, #112]	; 0x70
 8001368:	4b55      	ldr	r3, [pc, #340]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136c:	4a54      	ldr	r2, [pc, #336]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 800136e:	f023 0304 	bic.w	r3, r3, #4
 8001372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d015      	beq.n	80013a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff fbf6 	bl	8000b6c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001382:	e00a      	b.n	800139a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f7ff fbf2 	bl	8000b6c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0cb      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139a:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ee      	beq.n	8001384 <HAL_RCC_OscConfig+0x334>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fbe0 	bl	8000b6c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff fbdc 	bl	8000b6c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e0b5      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1ee      	bne.n	80013b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4a38      	ldr	r2, [pc, #224]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80013de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80a1 	beq.w	8001530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d05c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d141      	bne.n	8001486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_RCC_OscConfig+0x478>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fbb0 	bl	8000b6c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff fbac 	bl	8000b6c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e087      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69da      	ldr	r2, [r3, #28]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	019b      	lsls	r3, r3, #6
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	3b01      	subs	r3, #1
 8001448:	041b      	lsls	r3, r3, #16
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	491b      	ldr	r1, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x478>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fb85 	bl	8000b6c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001466:	f7ff fb81 	bl	8000b6c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e05c      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x416>
 8001484:	e054      	b.n	8001530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x478>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fb6e 	bl	8000b6c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff fb6a 	bl	8000b6c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e045      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_RCC_OscConfig+0x470>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x444>
 80014b2:	e03d      	b.n	8001530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e038      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000
 80014c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x4ec>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d028      	beq.n	800152c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d121      	bne.n	800152c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d11a      	bne.n	800152c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014fc:	4013      	ands	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001504:	4293      	cmp	r3, r2
 8001506:	d111      	bne.n	800152c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	085b      	lsrs	r3, r3, #1
 8001514:	3b01      	subs	r3, #1
 8001516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0cc      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d90c      	bls.n	800157c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b8      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001594:	4b59      	ldr	r3, [pc, #356]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a58      	ldr	r2, [pc, #352]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800159e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	494d      	ldr	r1, [pc, #308]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d044      	beq.n	8001660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d119      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e07f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e06f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e067      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f023 0203 	bic.w	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4934      	ldr	r1, [pc, #208]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001630:	f7ff fa9c 	bl	8000b6c <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	e00a      	b.n	800164e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f7ff fa98 	bl	8000b6c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e04f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 020c 	and.w	r2, r3, #12
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d1eb      	bne.n	8001638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d20c      	bcs.n	8001688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e032      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4916      	ldr	r1, [pc, #88]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c6:	f000 f821 	bl	800170c <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	490a      	ldr	r1, [pc, #40]	; (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f898 	bl	800081c <HAL_InitTick>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00
 80016fc:	40023800 	.word	0x40023800
 8001700:	080038c8 	.word	0x080038c8
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800170c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001710:	b090      	sub	sp, #64	; 0x40
 8001712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001724:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_GetSysClockFreq+0x180>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d00d      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x40>
 8001730:	2b08      	cmp	r3, #8
 8001732:	f200 80a1 	bhi.w	8001878 <HAL_RCC_GetSysClockFreq+0x16c>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x34>
 800173a:	2b04      	cmp	r3, #4
 800173c:	d003      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x3a>
 800173e:	e09b      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_GetSysClockFreq+0x184>)
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001744:	e09b      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001746:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_GetSysClockFreq+0x188>)
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800174a:	e098      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800174c:	4b4f      	ldr	r3, [pc, #316]	; (800188c <HAL_RCC_GetSysClockFreq+0x180>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001756:	4b4d      	ldr	r3, [pc, #308]	; (800188c <HAL_RCC_GetSysClockFreq+0x180>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d028      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001762:	4b4a      	ldr	r3, [pc, #296]	; (800188c <HAL_RCC_GetSysClockFreq+0x180>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	2200      	movs	r2, #0
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	627a      	str	r2, [r7, #36]	; 0x24
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001774:	2100      	movs	r1, #0
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_GetSysClockFreq+0x188>)
 8001778:	fb03 f201 	mul.w	r2, r3, r1
 800177c:	2300      	movs	r3, #0
 800177e:	fb00 f303 	mul.w	r3, r0, r3
 8001782:	4413      	add	r3, r2
 8001784:	4a43      	ldr	r2, [pc, #268]	; (8001894 <HAL_RCC_GetSysClockFreq+0x188>)
 8001786:	fba0 1202 	umull	r1, r2, r0, r2
 800178a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800178c:	460a      	mov	r2, r1
 800178e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001792:	4413      	add	r3, r2
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001798:	2200      	movs	r2, #0
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	61fa      	str	r2, [r7, #28]
 800179e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017a6:	f7fe fd6b 	bl	8000280 <__aeabi_uldivmod>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4613      	mov	r3, r2
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b2:	e053      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_RCC_GetSysClockFreq+0x180>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	2200      	movs	r2, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	617a      	str	r2, [r7, #20]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017c6:	f04f 0b00 	mov.w	fp, #0
 80017ca:	4652      	mov	r2, sl
 80017cc:	465b      	mov	r3, fp
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	0159      	lsls	r1, r3, #5
 80017d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017dc:	0150      	lsls	r0, r2, #5
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	ebb2 080a 	subs.w	r8, r2, sl
 80017e6:	eb63 090b 	sbc.w	r9, r3, fp
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017fe:	ebb2 0408 	subs.w	r4, r2, r8
 8001802:	eb63 0509 	sbc.w	r5, r3, r9
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	00eb      	lsls	r3, r5, #3
 8001810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001814:	00e2      	lsls	r2, r4, #3
 8001816:	4614      	mov	r4, r2
 8001818:	461d      	mov	r5, r3
 800181a:	eb14 030a 	adds.w	r3, r4, sl
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	eb45 030b 	adc.w	r3, r5, fp
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001832:	4629      	mov	r1, r5
 8001834:	028b      	lsls	r3, r1, #10
 8001836:	4621      	mov	r1, r4
 8001838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800183c:	4621      	mov	r1, r4
 800183e:	028a      	lsls	r2, r1, #10
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001846:	2200      	movs	r2, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001850:	f7fe fd16 	bl	8000280 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_GetSysClockFreq+0x180>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	3301      	adds	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800186c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001876:	e002      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_RCC_GetSysClockFreq+0x184>)
 800187a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800187c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800187e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001880:	4618      	mov	r0, r3
 8001882:	3740      	adds	r7, #64	; 0x40
 8001884:	46bd      	mov	sp, r7
 8001886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	00f42400 	.word	0x00f42400
 8001894:	017d7840 	.word	0x017d7840

08001898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_RCC_GetHCLKFreq+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000

080018b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018b4:	f7ff fff0 	bl	8001898 <HAL_RCC_GetHCLKFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	0a9b      	lsrs	r3, r3, #10
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	4903      	ldr	r1, [pc, #12]	; (80018d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	080038d8 	.word	0x080038d8

080018d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018dc:	f7ff ffdc 	bl	8001898 <HAL_RCC_GetHCLKFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0b5b      	lsrs	r3, r3, #13
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	4903      	ldr	r1, [pc, #12]	; (80018fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	080038d8 	.word	0x080038d8

08001900 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	220f      	movs	r2, #15
 800190e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_RCC_GetClockConfig+0x5c>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_RCC_GetClockConfig+0x5c>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_GetClockConfig+0x5c>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_GetClockConfig+0x5c>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_RCC_GetClockConfig+0x60>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0207 	and.w	r2, r3, #7
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	601a      	str	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e041      	b.n	80019fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f839 	bl	8001a02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f000 f9ca 	bl	8001d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d001      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e044      	b.n	8001aba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d018      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0x6c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5a:	d013      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0x6c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_TIM_Base_Start_IT+0xb4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00e      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0x6c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0x6c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0x6c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d111      	bne.n	8001aa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d010      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa6:	e007      	b.n	8001ab8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40000800 	.word	0x40000800
 8001ad4:	40000c00 	.word	0x40000c00
 8001ad8:	40014000 	.word	0x40014000

08001adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d122      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d11b      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0202 	mvn.w	r2, #2
 8001b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8ee 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001b24:	e005      	b.n	8001b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8e0 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f8f1 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0204 	mvn.w	r2, #4
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8c4 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8b6 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8c7 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d122      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d11b      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0208 	mvn.w	r2, #8
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f89a 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f88c 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f89d 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0210 	mvn.w	r2, #16
 8001c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2208      	movs	r2, #8
 8001c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f870 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f862 	bl	8001cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f873 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0201 	mvn.w	r2, #1
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fd52 	bl	8000704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b80      	cmp	r3, #128	; 0x80
 8001c6c:	d10e      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c78:	2b80      	cmp	r3, #128	; 0x80
 8001c7a:	d107      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8e2 	bl	8001e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	2b40      	cmp	r3, #64	; 0x40
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d107      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f838 	bl	8001d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d107      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0220 	mvn.w	r2, #32
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8ac 	bl	8001e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <TIM_Base_SetConfig+0xe4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00f      	beq.n	8001d74 <TIM_Base_SetConfig+0x38>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d00b      	beq.n	8001d74 <TIM_Base_SetConfig+0x38>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <TIM_Base_SetConfig+0xe8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <TIM_Base_SetConfig+0x38>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <TIM_Base_SetConfig+0xec>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d003      	beq.n	8001d74 <TIM_Base_SetConfig+0x38>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <TIM_Base_SetConfig+0xf0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d108      	bne.n	8001d86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <TIM_Base_SetConfig+0xe4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01b      	beq.n	8001dc6 <TIM_Base_SetConfig+0x8a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d94:	d017      	beq.n	8001dc6 <TIM_Base_SetConfig+0x8a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <TIM_Base_SetConfig+0xe8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <TIM_Base_SetConfig+0x8a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <TIM_Base_SetConfig+0xec>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00f      	beq.n	8001dc6 <TIM_Base_SetConfig+0x8a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <TIM_Base_SetConfig+0xf0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00b      	beq.n	8001dc6 <TIM_Base_SetConfig+0x8a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <TIM_Base_SetConfig+0xf4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <TIM_Base_SetConfig+0x8a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <TIM_Base_SetConfig+0xf8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <TIM_Base_SetConfig+0x8a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <TIM_Base_SetConfig+0xfc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d108      	bne.n	8001dd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <TIM_Base_SetConfig+0xe4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d103      	bne.n	8001e0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	615a      	str	r2, [r3, #20]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	40014000 	.word	0x40014000
 8001e34:	40014400 	.word	0x40014400
 8001e38:	40014800 	.word	0x40014800

08001e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e03f      	b.n	8001ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fc7e 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	; 0x24
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f929 	bl	8002100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b08a      	sub	sp, #40	; 0x28
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d17c      	bne.n	8002018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_UART_Transmit+0x2c>
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e075      	b.n	800201a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_UART_Transmit+0x3e>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e06e      	b.n	800201a <HAL_UART_Transmit+0x11c>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2221      	movs	r2, #33	; 0x21
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f52:	f7fe fe0b 	bl	8000b6c <HAL_GetTick>
 8001f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6c:	d108      	bne.n	8001f80 <HAL_UART_Transmit+0x82>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d104      	bne.n	8001f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	e003      	b.n	8001f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f90:	e02a      	b.n	8001fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f840 	bl	8002022 <UART_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e036      	b.n	800201a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10b      	bne.n	8001fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e007      	b.n	8001fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1cf      	bne.n	8001f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2140      	movs	r1, #64	; 0x40
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f810 	bl	8002022 <UART_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e006      	b.n	800201a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b090      	sub	sp, #64	; 0x40
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002032:	e050      	b.n	80020d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d04c      	beq.n	80020d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <UART_WaitOnFlagUntilTimeout+0x30>
 8002042:	f7fe fd93 	bl	8000b6c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800204e:	429a      	cmp	r2, r3
 8002050:	d241      	bcs.n	80020d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	e853 3f00 	ldrex	r3, [r3]
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002072:	637a      	str	r2, [r7, #52]	; 0x34
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800207a:	e841 2300 	strex	r3, r2, [r1]
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1e5      	bne.n	8002052 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3314      	adds	r3, #20
 800208c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	e853 3f00 	ldrex	r3, [r3]
 8002094:	613b      	str	r3, [r7, #16]
   return(result);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	63bb      	str	r3, [r7, #56]	; 0x38
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3314      	adds	r3, #20
 80020a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a6:	623a      	str	r2, [r7, #32]
 80020a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020aa:	69f9      	ldr	r1, [r7, #28]
 80020ac:	6a3a      	ldr	r2, [r7, #32]
 80020ae:	e841 2300 	strex	r3, r2, [r1]
 80020b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1e5      	bne.n	8002086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e00f      	b.n	80020f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4013      	ands	r3, r2
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d09f      	beq.n	8002034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3740      	adds	r7, #64	; 0x40
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b0c0      	sub	sp, #256	; 0x100
 8002106:	af00      	add	r7, sp, #0
 8002108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211c:	68d9      	ldr	r1, [r3, #12]
 800211e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	ea40 0301 	orr.w	r3, r0, r1
 8002128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	431a      	orrs	r2, r3
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	431a      	orrs	r2, r3
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002158:	f021 010c 	bic.w	r1, r1, #12
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002166:	430b      	orrs	r3, r1
 8002168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217a:	6999      	ldr	r1, [r3, #24]
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	ea40 0301 	orr.w	r3, r0, r1
 8002186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b8f      	ldr	r3, [pc, #572]	; (80023cc <UART_SetConfig+0x2cc>)
 8002190:	429a      	cmp	r2, r3
 8002192:	d005      	beq.n	80021a0 <UART_SetConfig+0xa0>
 8002194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b8d      	ldr	r3, [pc, #564]	; (80023d0 <UART_SetConfig+0x2d0>)
 800219c:	429a      	cmp	r2, r3
 800219e:	d104      	bne.n	80021aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021a0:	f7ff fb9a 	bl	80018d8 <HAL_RCC_GetPCLK2Freq>
 80021a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021a8:	e003      	b.n	80021b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021aa:	f7ff fb81 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
 80021ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021bc:	f040 810c 	bne.w	80023d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021d2:	4622      	mov	r2, r4
 80021d4:	462b      	mov	r3, r5
 80021d6:	1891      	adds	r1, r2, r2
 80021d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80021da:	415b      	adcs	r3, r3
 80021dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021e2:	4621      	mov	r1, r4
 80021e4:	eb12 0801 	adds.w	r8, r2, r1
 80021e8:	4629      	mov	r1, r5
 80021ea:	eb43 0901 	adc.w	r9, r3, r1
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002202:	4690      	mov	r8, r2
 8002204:	4699      	mov	r9, r3
 8002206:	4623      	mov	r3, r4
 8002208:	eb18 0303 	adds.w	r3, r8, r3
 800220c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002210:	462b      	mov	r3, r5
 8002212:	eb49 0303 	adc.w	r3, r9, r3
 8002216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800221a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800222a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800222e:	460b      	mov	r3, r1
 8002230:	18db      	adds	r3, r3, r3
 8002232:	653b      	str	r3, [r7, #80]	; 0x50
 8002234:	4613      	mov	r3, r2
 8002236:	eb42 0303 	adc.w	r3, r2, r3
 800223a:	657b      	str	r3, [r7, #84]	; 0x54
 800223c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002244:	f7fe f81c 	bl	8000280 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <UART_SetConfig+0x2d4>)
 800224e:	fba3 2302 	umull	r2, r3, r3, r2
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	011c      	lsls	r4, r3, #4
 8002256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800225a:	2200      	movs	r2, #0
 800225c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002268:	4642      	mov	r2, r8
 800226a:	464b      	mov	r3, r9
 800226c:	1891      	adds	r1, r2, r2
 800226e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002270:	415b      	adcs	r3, r3
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002278:	4641      	mov	r1, r8
 800227a:	eb12 0a01 	adds.w	sl, r2, r1
 800227e:	4649      	mov	r1, r9
 8002280:	eb43 0b01 	adc.w	fp, r3, r1
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002298:	4692      	mov	sl, r2
 800229a:	469b      	mov	fp, r3
 800229c:	4643      	mov	r3, r8
 800229e:	eb1a 0303 	adds.w	r3, sl, r3
 80022a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022a6:	464b      	mov	r3, r9
 80022a8:	eb4b 0303 	adc.w	r3, fp, r3
 80022ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022c4:	460b      	mov	r3, r1
 80022c6:	18db      	adds	r3, r3, r3
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ca:	4613      	mov	r3, r2
 80022cc:	eb42 0303 	adc.w	r3, r2, r3
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
 80022d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022da:	f7fd ffd1 	bl	8000280 <__aeabi_uldivmod>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <UART_SetConfig+0x2d4>)
 80022e6:	fba3 2301 	umull	r2, r3, r3, r1
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2264      	movs	r2, #100	; 0x64
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	1acb      	subs	r3, r1, r3
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022fa:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <UART_SetConfig+0x2d4>)
 80022fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002308:	441c      	add	r4, r3
 800230a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230e:	2200      	movs	r2, #0
 8002310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800231c:	4642      	mov	r2, r8
 800231e:	464b      	mov	r3, r9
 8002320:	1891      	adds	r1, r2, r2
 8002322:	63b9      	str	r1, [r7, #56]	; 0x38
 8002324:	415b      	adcs	r3, r3
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800232c:	4641      	mov	r1, r8
 800232e:	1851      	adds	r1, r2, r1
 8002330:	6339      	str	r1, [r7, #48]	; 0x30
 8002332:	4649      	mov	r1, r9
 8002334:	414b      	adcs	r3, r1
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002344:	4659      	mov	r1, fp
 8002346:	00cb      	lsls	r3, r1, #3
 8002348:	4651      	mov	r1, sl
 800234a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234e:	4651      	mov	r1, sl
 8002350:	00ca      	lsls	r2, r1, #3
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	4603      	mov	r3, r0
 8002358:	4642      	mov	r2, r8
 800235a:	189b      	adds	r3, r3, r2
 800235c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002360:	464b      	mov	r3, r9
 8002362:	460a      	mov	r2, r1
 8002364:	eb42 0303 	adc.w	r3, r2, r3
 8002368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800237c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002380:	460b      	mov	r3, r1
 8002382:	18db      	adds	r3, r3, r3
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
 8002386:	4613      	mov	r3, r2
 8002388:	eb42 0303 	adc.w	r3, r2, r3
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002396:	f7fd ff73 	bl	8000280 <__aeabi_uldivmod>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <UART_SetConfig+0x2d4>)
 80023a0:	fba3 1302 	umull	r1, r3, r3, r2
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	2164      	movs	r1, #100	; 0x64
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	3332      	adds	r3, #50	; 0x32
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <UART_SetConfig+0x2d4>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	f003 0207 	and.w	r2, r3, #7
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4422      	add	r2, r4
 80023c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023c8:	e106      	b.n	80025d8 <UART_SetConfig+0x4d8>
 80023ca:	bf00      	nop
 80023cc:	40011000 	.word	0x40011000
 80023d0:	40011400 	.word	0x40011400
 80023d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023ea:	4642      	mov	r2, r8
 80023ec:	464b      	mov	r3, r9
 80023ee:	1891      	adds	r1, r2, r2
 80023f0:	6239      	str	r1, [r7, #32]
 80023f2:	415b      	adcs	r3, r3
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023fa:	4641      	mov	r1, r8
 80023fc:	1854      	adds	r4, r2, r1
 80023fe:	4649      	mov	r1, r9
 8002400:	eb43 0501 	adc.w	r5, r3, r1
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	00eb      	lsls	r3, r5, #3
 800240e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002412:	00e2      	lsls	r2, r4, #3
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	4643      	mov	r3, r8
 800241a:	18e3      	adds	r3, r4, r3
 800241c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002420:	464b      	mov	r3, r9
 8002422:	eb45 0303 	adc.w	r3, r5, r3
 8002426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002446:	4629      	mov	r1, r5
 8002448:	008b      	lsls	r3, r1, #2
 800244a:	4621      	mov	r1, r4
 800244c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002450:	4621      	mov	r1, r4
 8002452:	008a      	lsls	r2, r1, #2
 8002454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002458:	f7fd ff12 	bl	8000280 <__aeabi_uldivmod>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <UART_SetConfig+0x4e4>)
 8002462:	fba3 2302 	umull	r2, r3, r3, r2
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	011c      	lsls	r4, r3, #4
 800246a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	1891      	adds	r1, r2, r2
 8002482:	61b9      	str	r1, [r7, #24]
 8002484:	415b      	adcs	r3, r3
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800248c:	4641      	mov	r1, r8
 800248e:	1851      	adds	r1, r2, r1
 8002490:	6139      	str	r1, [r7, #16]
 8002492:	4649      	mov	r1, r9
 8002494:	414b      	adcs	r3, r1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a4:	4659      	mov	r1, fp
 80024a6:	00cb      	lsls	r3, r1, #3
 80024a8:	4651      	mov	r1, sl
 80024aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ae:	4651      	mov	r1, sl
 80024b0:	00ca      	lsls	r2, r1, #3
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	4642      	mov	r2, r8
 80024ba:	189b      	adds	r3, r3, r2
 80024bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024c0:	464b      	mov	r3, r9
 80024c2:	460a      	mov	r2, r1
 80024c4:	eb42 0303 	adc.w	r3, r2, r3
 80024c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80024d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024e4:	4649      	mov	r1, r9
 80024e6:	008b      	lsls	r3, r1, #2
 80024e8:	4641      	mov	r1, r8
 80024ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ee:	4641      	mov	r1, r8
 80024f0:	008a      	lsls	r2, r1, #2
 80024f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024f6:	f7fd fec3 	bl	8000280 <__aeabi_uldivmod>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <UART_SetConfig+0x4e4>)
 8002502:	fba3 2301 	umull	r2, r3, r3, r1
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2264      	movs	r2, #100	; 0x64
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	1acb      	subs	r3, r1, r3
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	3332      	adds	r3, #50	; 0x32
 8002514:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <UART_SetConfig+0x4e4>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002520:	441c      	add	r4, r3
 8002522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002526:	2200      	movs	r2, #0
 8002528:	673b      	str	r3, [r7, #112]	; 0x70
 800252a:	677a      	str	r2, [r7, #116]	; 0x74
 800252c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002530:	4642      	mov	r2, r8
 8002532:	464b      	mov	r3, r9
 8002534:	1891      	adds	r1, r2, r2
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	415b      	adcs	r3, r3
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002540:	4641      	mov	r1, r8
 8002542:	1851      	adds	r1, r2, r1
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	4649      	mov	r1, r9
 8002548:	414b      	adcs	r3, r1
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002558:	4659      	mov	r1, fp
 800255a:	00cb      	lsls	r3, r1, #3
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002562:	4651      	mov	r1, sl
 8002564:	00ca      	lsls	r2, r1, #3
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	4603      	mov	r3, r0
 800256c:	4642      	mov	r2, r8
 800256e:	189b      	adds	r3, r3, r2
 8002570:	66bb      	str	r3, [r7, #104]	; 0x68
 8002572:	464b      	mov	r3, r9
 8002574:	460a      	mov	r2, r1
 8002576:	eb42 0303 	adc.w	r3, r2, r3
 800257a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	663b      	str	r3, [r7, #96]	; 0x60
 8002586:	667a      	str	r2, [r7, #100]	; 0x64
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002594:	4649      	mov	r1, r9
 8002596:	008b      	lsls	r3, r1, #2
 8002598:	4641      	mov	r1, r8
 800259a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800259e:	4641      	mov	r1, r8
 80025a0:	008a      	lsls	r2, r1, #2
 80025a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025a6:	f7fd fe6b 	bl	8000280 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <UART_SetConfig+0x4e4>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	; 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	3332      	adds	r3, #50	; 0x32
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <UART_SetConfig+0x4e4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	f003 020f 	and.w	r2, r3, #15
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4422      	add	r2, r4
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025de:	46bd      	mov	sp, r7
 80025e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e4:	51eb851f 	.word	0x51eb851f

080025e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SysTick_Handler+0x1c>)
 80025ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025f0:	f000 f990 	bl	8002914 <xTaskGetSchedulerState>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d001      	beq.n	80025fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025fa:	f000 f9f5 	bl	80029e8 <xPortSysTickHandler>
  }
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6852      	ldr	r2, [r2, #4]
 8002670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	d103      	bne.n	8002684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	1e5a      	subs	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ae:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <xTaskIncrementTick+0x148>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 808f 	bne.w	80027d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026b8:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <xTaskIncrementTick+0x14c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80026c0:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <xTaskIncrementTick+0x14c>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d120      	bne.n	800270e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80026cc:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <xTaskIncrementTick+0x150>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026e8:	bf00      	nop
 80026ea:	e7fe      	b.n	80026ea <xTaskIncrementTick+0x46>
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <xTaskIncrementTick+0x150>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <xTaskIncrementTick+0x154>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <xTaskIncrementTick+0x150>)
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <xTaskIncrementTick+0x154>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <xTaskIncrementTick+0x158>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <xTaskIncrementTick+0x158>)
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	f000 f8e3 	bl	80028d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800270e:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <xTaskIncrementTick+0x15c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d349      	bcc.n	80027ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <xTaskIncrementTick+0x150>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d104      	bne.n	800272c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <xTaskIncrementTick+0x15c>)
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	601a      	str	r2, [r3, #0]
					break;
 800272a:	e03f      	b.n	80027ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <xTaskIncrementTick+0x150>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d203      	bcs.n	800274c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002744:	4a2e      	ldr	r2, [pc, #184]	; (8002800 <xTaskIncrementTick+0x15c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800274a:	e02f      	b.n	80027ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3304      	adds	r3, #4
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff7d 	bl	8002650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3318      	adds	r3, #24
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ff74 	bl	8002650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <xTaskIncrementTick+0x160>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d903      	bls.n	800277c <xTaskIncrementTick+0xd8>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <xTaskIncrementTick+0x160>)
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <xTaskIncrementTick+0x164>)
 800278a:	441a      	add	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7ff ff38 	bl	8002608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <xTaskIncrementTick+0x168>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3b8      	bcc.n	8002718 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027aa:	e7b5      	b.n	8002718 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <xTaskIncrementTick+0x168>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b2:	4915      	ldr	r1, [pc, #84]	; (8002808 <xTaskIncrementTick+0x164>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d901      	bls.n	80027c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <xTaskIncrementTick+0x16c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80027d0:	2301      	movs	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e004      	b.n	80027e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <xTaskIncrementTick+0x170>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <xTaskIncrementTick+0x170>)
 80027de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80027e0:	697b      	ldr	r3, [r7, #20]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200005a0 	.word	0x200005a0
 80027f0:	20000584 	.word	0x20000584
 80027f4:	2000057c 	.word	0x2000057c
 80027f8:	20000580 	.word	0x20000580
 80027fc:	20000598 	.word	0x20000598
 8002800:	2000059c 	.word	0x2000059c
 8002804:	20000588 	.word	0x20000588
 8002808:	2000011c 	.word	0x2000011c
 800280c:	20000118 	.word	0x20000118
 8002810:	20000594 	.word	0x20000594
 8002814:	20000590 	.word	0x20000590

08002818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <vTaskSwitchContext+0xa8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <vTaskSwitchContext+0xac>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800282c:	e041      	b.n	80028b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <vTaskSwitchContext+0xac>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <vTaskSwitchContext+0xb0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e010      	b.n	800285e <vTaskSwitchContext+0x46>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <vTaskSwitchContext+0x40>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	607b      	str	r3, [r7, #4]
}
 8002854:	bf00      	nop
 8002856:	e7fe      	b.n	8002856 <vTaskSwitchContext+0x3e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3b01      	subs	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	491b      	ldr	r1, [pc, #108]	; (80028cc <vTaskSwitchContext+0xb4>)
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0e4      	beq.n	800283c <vTaskSwitchContext+0x24>
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4a13      	ldr	r2, [pc, #76]	; (80028cc <vTaskSwitchContext+0xb4>)
 800287e:	4413      	add	r3, r2
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	3308      	adds	r3, #8
 8002894:	429a      	cmp	r2, r3
 8002896:	d104      	bne.n	80028a2 <vTaskSwitchContext+0x8a>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <vTaskSwitchContext+0xb8>)
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4a06      	ldr	r2, [pc, #24]	; (80028c8 <vTaskSwitchContext+0xb0>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6013      	str	r3, [r2, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200005a0 	.word	0x200005a0
 80028c4:	20000594 	.word	0x20000594
 80028c8:	20000588 	.word	0x20000588
 80028cc:	2000011c 	.word	0x2000011c
 80028d0:	20000118 	.word	0x20000118

080028d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <prvResetNextTaskUnblockTime+0x38>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <prvResetNextTaskUnblockTime+0x3c>)
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80028ec:	e008      	b.n	8002900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <prvResetNextTaskUnblockTime+0x38>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <prvResetNextTaskUnblockTime+0x3c>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	2000057c 	.word	0x2000057c
 8002910:	2000059c 	.word	0x2000059c

08002914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <xTaskGetSchedulerState+0x34>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d102      	bne.n	8002928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002922:	2301      	movs	r3, #1
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	e008      	b.n	800293a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <xTaskGetSchedulerState+0x38>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002930:	2302      	movs	r3, #2
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	e001      	b.n	800293a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800293a:	687b      	ldr	r3, [r7, #4]
	}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	2000058c 	.word	0x2000058c
 800294c:	200005a0 	.word	0x200005a0

08002950 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <pxCurrentTCBConst2>)
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	6808      	ldr	r0, [r1, #0]
 8002956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800295a:	f380 8809 	msr	PSP, r0
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f380 8811 	msr	BASEPRI, r0
 800296a:	4770      	bx	lr
 800296c:	f3af 8000 	nop.w

08002970 <pxCurrentTCBConst2>:
 8002970:	20000118 	.word	0x20000118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
	...

08002980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002980:	f3ef 8009 	mrs	r0, PSP
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <pxCurrentTCBConst>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f01e 0f10 	tst.w	lr, #16
 8002990:	bf08      	it	eq
 8002992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299a:	6010      	str	r0, [r2, #0]
 800299c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80029a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80029a4:	f380 8811 	msr	BASEPRI, r0
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f7ff ff32 	bl	8002818 <vTaskSwitchContext>
 80029b4:	f04f 0000 	mov.w	r0, #0
 80029b8:	f380 8811 	msr	BASEPRI, r0
 80029bc:	bc09      	pop	{r0, r3}
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	6808      	ldr	r0, [r1, #0]
 80029c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c6:	f01e 0f10 	tst.w	lr, #16
 80029ca:	bf08      	it	eq
 80029cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029d0:	f380 8809 	msr	PSP, r0
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	f3af 8000 	nop.w

080029e0 <pxCurrentTCBConst>:
 80029e0:	20000118 	.word	0x20000118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop

080029e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
	__asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	607b      	str	r3, [r7, #4]
}
 8002a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a02:	f7ff fe4f 	bl	80026a4 <xTaskIncrementTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <xPortSysTickHandler+0x40>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	2300      	movs	r3, #0
 8002a16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <std>:
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	b510      	push	{r4, lr}
 8002a30:	4604      	mov	r4, r0
 8002a32:	e9c0 3300 	strd	r3, r3, [r0]
 8002a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a3a:	6083      	str	r3, [r0, #8]
 8002a3c:	8181      	strh	r1, [r0, #12]
 8002a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8002a40:	81c2      	strh	r2, [r0, #14]
 8002a42:	6183      	str	r3, [r0, #24]
 8002a44:	4619      	mov	r1, r3
 8002a46:	2208      	movs	r2, #8
 8002a48:	305c      	adds	r0, #92	; 0x5c
 8002a4a:	f000 f906 	bl	8002c5a <memset>
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <std+0x58>)
 8002a50:	6263      	str	r3, [r4, #36]	; 0x24
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <std+0x5c>)
 8002a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <std+0x60>)
 8002a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <std+0x64>)
 8002a5c:	6323      	str	r3, [r4, #48]	; 0x30
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <std+0x68>)
 8002a60:	6224      	str	r4, [r4, #32]
 8002a62:	429c      	cmp	r4, r3
 8002a64:	d006      	beq.n	8002a74 <std+0x48>
 8002a66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002a6a:	4294      	cmp	r4, r2
 8002a6c:	d002      	beq.n	8002a74 <std+0x48>
 8002a6e:	33d0      	adds	r3, #208	; 0xd0
 8002a70:	429c      	cmp	r4, r3
 8002a72:	d105      	bne.n	8002a80 <std+0x54>
 8002a74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a7c:	f000 b966 	b.w	8002d4c <__retarget_lock_init_recursive>
 8002a80:	bd10      	pop	{r4, pc}
 8002a82:	bf00      	nop
 8002a84:	08002bd5 	.word	0x08002bd5
 8002a88:	08002bf7 	.word	0x08002bf7
 8002a8c:	08002c2f 	.word	0x08002c2f
 8002a90:	08002c53 	.word	0x08002c53
 8002a94:	200005a4 	.word	0x200005a4

08002a98 <stdio_exit_handler>:
 8002a98:	4a02      	ldr	r2, [pc, #8]	; (8002aa4 <stdio_exit_handler+0xc>)
 8002a9a:	4903      	ldr	r1, [pc, #12]	; (8002aa8 <stdio_exit_handler+0x10>)
 8002a9c:	4803      	ldr	r0, [pc, #12]	; (8002aac <stdio_exit_handler+0x14>)
 8002a9e:	f000 b869 	b.w	8002b74 <_fwalk_sglue>
 8002aa2:	bf00      	nop
 8002aa4:	2000000c 	.word	0x2000000c
 8002aa8:	080035f9 	.word	0x080035f9
 8002aac:	20000018 	.word	0x20000018

08002ab0 <cleanup_stdio>:
 8002ab0:	6841      	ldr	r1, [r0, #4]
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <cleanup_stdio+0x34>)
 8002ab4:	4299      	cmp	r1, r3
 8002ab6:	b510      	push	{r4, lr}
 8002ab8:	4604      	mov	r4, r0
 8002aba:	d001      	beq.n	8002ac0 <cleanup_stdio+0x10>
 8002abc:	f000 fd9c 	bl	80035f8 <_fflush_r>
 8002ac0:	68a1      	ldr	r1, [r4, #8]
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <cleanup_stdio+0x38>)
 8002ac4:	4299      	cmp	r1, r3
 8002ac6:	d002      	beq.n	8002ace <cleanup_stdio+0x1e>
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f000 fd95 	bl	80035f8 <_fflush_r>
 8002ace:	68e1      	ldr	r1, [r4, #12]
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <cleanup_stdio+0x3c>)
 8002ad2:	4299      	cmp	r1, r3
 8002ad4:	d004      	beq.n	8002ae0 <cleanup_stdio+0x30>
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002adc:	f000 bd8c 	b.w	80035f8 <_fflush_r>
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200005a4 	.word	0x200005a4
 8002ae8:	2000060c 	.word	0x2000060c
 8002aec:	20000674 	.word	0x20000674

08002af0 <global_stdio_init.part.0>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <global_stdio_init.part.0+0x30>)
 8002af4:	4c0b      	ldr	r4, [pc, #44]	; (8002b24 <global_stdio_init.part.0+0x34>)
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <global_stdio_init.part.0+0x38>)
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	4620      	mov	r0, r4
 8002afc:	2200      	movs	r2, #0
 8002afe:	2104      	movs	r1, #4
 8002b00:	f7ff ff94 	bl	8002a2c <std>
 8002b04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2109      	movs	r1, #9
 8002b0c:	f7ff ff8e 	bl	8002a2c <std>
 8002b10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b14:	2202      	movs	r2, #2
 8002b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b1a:	2112      	movs	r1, #18
 8002b1c:	f7ff bf86 	b.w	8002a2c <std>
 8002b20:	200006dc 	.word	0x200006dc
 8002b24:	200005a4 	.word	0x200005a4
 8002b28:	08002a99 	.word	0x08002a99

08002b2c <__sfp_lock_acquire>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	; (8002b34 <__sfp_lock_acquire+0x8>)
 8002b2e:	f000 b90e 	b.w	8002d4e <__retarget_lock_acquire_recursive>
 8002b32:	bf00      	nop
 8002b34:	200006e5 	.word	0x200006e5

08002b38 <__sfp_lock_release>:
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <__sfp_lock_release+0x8>)
 8002b3a:	f000 b909 	b.w	8002d50 <__retarget_lock_release_recursive>
 8002b3e:	bf00      	nop
 8002b40:	200006e5 	.word	0x200006e5

08002b44 <__sinit>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	4604      	mov	r4, r0
 8002b48:	f7ff fff0 	bl	8002b2c <__sfp_lock_acquire>
 8002b4c:	6a23      	ldr	r3, [r4, #32]
 8002b4e:	b11b      	cbz	r3, 8002b58 <__sinit+0x14>
 8002b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b54:	f7ff bff0 	b.w	8002b38 <__sfp_lock_release>
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__sinit+0x28>)
 8002b5a:	6223      	str	r3, [r4, #32]
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__sinit+0x2c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f5      	bne.n	8002b50 <__sinit+0xc>
 8002b64:	f7ff ffc4 	bl	8002af0 <global_stdio_init.part.0>
 8002b68:	e7f2      	b.n	8002b50 <__sinit+0xc>
 8002b6a:	bf00      	nop
 8002b6c:	08002ab1 	.word	0x08002ab1
 8002b70:	200006dc 	.word	0x200006dc

08002b74 <_fwalk_sglue>:
 8002b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b78:	4607      	mov	r7, r0
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	2600      	movs	r6, #0
 8002b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b84:	f1b9 0901 	subs.w	r9, r9, #1
 8002b88:	d505      	bpl.n	8002b96 <_fwalk_sglue+0x22>
 8002b8a:	6824      	ldr	r4, [r4, #0]
 8002b8c:	2c00      	cmp	r4, #0
 8002b8e:	d1f7      	bne.n	8002b80 <_fwalk_sglue+0xc>
 8002b90:	4630      	mov	r0, r6
 8002b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b96:	89ab      	ldrh	r3, [r5, #12]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d907      	bls.n	8002bac <_fwalk_sglue+0x38>
 8002b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	d003      	beq.n	8002bac <_fwalk_sglue+0x38>
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	47c0      	blx	r8
 8002baa:	4306      	orrs	r6, r0
 8002bac:	3568      	adds	r5, #104	; 0x68
 8002bae:	e7e9      	b.n	8002b84 <_fwalk_sglue+0x10>

08002bb0 <iprintf>:
 8002bb0:	b40f      	push	{r0, r1, r2, r3}
 8002bb2:	b507      	push	{r0, r1, r2, lr}
 8002bb4:	4906      	ldr	r1, [pc, #24]	; (8002bd0 <iprintf+0x20>)
 8002bb6:	ab04      	add	r3, sp, #16
 8002bb8:	6808      	ldr	r0, [r1, #0]
 8002bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bbe:	6881      	ldr	r1, [r0, #8]
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	f000 f9e9 	bl	8002f98 <_vfiprintf_r>
 8002bc6:	b003      	add	sp, #12
 8002bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bcc:	b004      	add	sp, #16
 8002bce:	4770      	bx	lr
 8002bd0:	20000064 	.word	0x20000064

08002bd4 <__sread>:
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bdc:	f000 f868 	bl	8002cb0 <_read_r>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	bfab      	itete	ge
 8002be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002be6:	89a3      	ldrhlt	r3, [r4, #12]
 8002be8:	181b      	addge	r3, r3, r0
 8002bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bee:	bfac      	ite	ge
 8002bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bf2:	81a3      	strhlt	r3, [r4, #12]
 8002bf4:	bd10      	pop	{r4, pc}

08002bf6 <__swrite>:
 8002bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfa:	461f      	mov	r7, r3
 8002bfc:	898b      	ldrh	r3, [r1, #12]
 8002bfe:	05db      	lsls	r3, r3, #23
 8002c00:	4605      	mov	r5, r0
 8002c02:	460c      	mov	r4, r1
 8002c04:	4616      	mov	r6, r2
 8002c06:	d505      	bpl.n	8002c14 <__swrite+0x1e>
 8002c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f000 f83c 	bl	8002c8c <_lseek_r>
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c1e:	81a3      	strh	r3, [r4, #12]
 8002c20:	4632      	mov	r2, r6
 8002c22:	463b      	mov	r3, r7
 8002c24:	4628      	mov	r0, r5
 8002c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c2a:	f000 b853 	b.w	8002cd4 <_write_r>

08002c2e <__sseek>:
 8002c2e:	b510      	push	{r4, lr}
 8002c30:	460c      	mov	r4, r1
 8002c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c36:	f000 f829 	bl	8002c8c <_lseek_r>
 8002c3a:	1c43      	adds	r3, r0, #1
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	bf15      	itete	ne
 8002c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c4a:	81a3      	strheq	r3, [r4, #12]
 8002c4c:	bf18      	it	ne
 8002c4e:	81a3      	strhne	r3, [r4, #12]
 8002c50:	bd10      	pop	{r4, pc}

08002c52 <__sclose>:
 8002c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c56:	f000 b809 	b.w	8002c6c <_close_r>

08002c5a <memset>:
 8002c5a:	4402      	add	r2, r0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d100      	bne.n	8002c64 <memset+0xa>
 8002c62:	4770      	bx	lr
 8002c64:	f803 1b01 	strb.w	r1, [r3], #1
 8002c68:	e7f9      	b.n	8002c5e <memset+0x4>
	...

08002c6c <_close_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	4d06      	ldr	r5, [pc, #24]	; (8002c88 <_close_r+0x1c>)
 8002c70:	2300      	movs	r3, #0
 8002c72:	4604      	mov	r4, r0
 8002c74:	4608      	mov	r0, r1
 8002c76:	602b      	str	r3, [r5, #0]
 8002c78:	f7fd fe9b 	bl	80009b2 <_close>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d102      	bne.n	8002c86 <_close_r+0x1a>
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	b103      	cbz	r3, 8002c86 <_close_r+0x1a>
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	200006e0 	.word	0x200006e0

08002c8c <_lseek_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4d07      	ldr	r5, [pc, #28]	; (8002cac <_lseek_r+0x20>)
 8002c90:	4604      	mov	r4, r0
 8002c92:	4608      	mov	r0, r1
 8002c94:	4611      	mov	r1, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7fd feb0 	bl	8000a00 <_lseek>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_lseek_r+0x1e>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_lseek_r+0x1e>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200006e0 	.word	0x200006e0

08002cb0 <_read_r>:
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	4d07      	ldr	r5, [pc, #28]	; (8002cd0 <_read_r+0x20>)
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	4608      	mov	r0, r1
 8002cb8:	4611      	mov	r1, r2
 8002cba:	2200      	movs	r2, #0
 8002cbc:	602a      	str	r2, [r5, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f7fd fe3e 	bl	8000940 <_read>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d102      	bne.n	8002cce <_read_r+0x1e>
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	b103      	cbz	r3, 8002cce <_read_r+0x1e>
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
 8002cd0:	200006e0 	.word	0x200006e0

08002cd4 <_write_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4d07      	ldr	r5, [pc, #28]	; (8002cf4 <_write_r+0x20>)
 8002cd8:	4604      	mov	r4, r0
 8002cda:	4608      	mov	r0, r1
 8002cdc:	4611      	mov	r1, r2
 8002cde:	2200      	movs	r2, #0
 8002ce0:	602a      	str	r2, [r5, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f7fd fe49 	bl	800097a <_write>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d102      	bne.n	8002cf2 <_write_r+0x1e>
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	b103      	cbz	r3, 8002cf2 <_write_r+0x1e>
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	bd38      	pop	{r3, r4, r5, pc}
 8002cf4:	200006e0 	.word	0x200006e0

08002cf8 <__errno>:
 8002cf8:	4b01      	ldr	r3, [pc, #4]	; (8002d00 <__errno+0x8>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000064 	.word	0x20000064

08002d04 <__libc_init_array>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	4d0d      	ldr	r5, [pc, #52]	; (8002d3c <__libc_init_array+0x38>)
 8002d08:	4c0d      	ldr	r4, [pc, #52]	; (8002d40 <__libc_init_array+0x3c>)
 8002d0a:	1b64      	subs	r4, r4, r5
 8002d0c:	10a4      	asrs	r4, r4, #2
 8002d0e:	2600      	movs	r6, #0
 8002d10:	42a6      	cmp	r6, r4
 8002d12:	d109      	bne.n	8002d28 <__libc_init_array+0x24>
 8002d14:	4d0b      	ldr	r5, [pc, #44]	; (8002d44 <__libc_init_array+0x40>)
 8002d16:	4c0c      	ldr	r4, [pc, #48]	; (8002d48 <__libc_init_array+0x44>)
 8002d18:	f000 fdc0 	bl	800389c <_init>
 8002d1c:	1b64      	subs	r4, r4, r5
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	2600      	movs	r6, #0
 8002d22:	42a6      	cmp	r6, r4
 8002d24:	d105      	bne.n	8002d32 <__libc_init_array+0x2e>
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2c:	4798      	blx	r3
 8002d2e:	3601      	adds	r6, #1
 8002d30:	e7ee      	b.n	8002d10 <__libc_init_array+0xc>
 8002d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d36:	4798      	blx	r3
 8002d38:	3601      	adds	r6, #1
 8002d3a:	e7f2      	b.n	8002d22 <__libc_init_array+0x1e>
 8002d3c:	0800391c 	.word	0x0800391c
 8002d40:	0800391c 	.word	0x0800391c
 8002d44:	0800391c 	.word	0x0800391c
 8002d48:	08003920 	.word	0x08003920

08002d4c <__retarget_lock_init_recursive>:
 8002d4c:	4770      	bx	lr

08002d4e <__retarget_lock_acquire_recursive>:
 8002d4e:	4770      	bx	lr

08002d50 <__retarget_lock_release_recursive>:
 8002d50:	4770      	bx	lr
	...

08002d54 <_free_r>:
 8002d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d56:	2900      	cmp	r1, #0
 8002d58:	d044      	beq.n	8002de4 <_free_r+0x90>
 8002d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d5e:	9001      	str	r0, [sp, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f1a1 0404 	sub.w	r4, r1, #4
 8002d66:	bfb8      	it	lt
 8002d68:	18e4      	addlt	r4, r4, r3
 8002d6a:	f000 f8df 	bl	8002f2c <__malloc_lock>
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <_free_r+0x94>)
 8002d70:	9801      	ldr	r0, [sp, #4]
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	b933      	cbnz	r3, 8002d84 <_free_r+0x30>
 8002d76:	6063      	str	r3, [r4, #4]
 8002d78:	6014      	str	r4, [r2, #0]
 8002d7a:	b003      	add	sp, #12
 8002d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d80:	f000 b8da 	b.w	8002f38 <__malloc_unlock>
 8002d84:	42a3      	cmp	r3, r4
 8002d86:	d908      	bls.n	8002d9a <_free_r+0x46>
 8002d88:	6825      	ldr	r5, [r4, #0]
 8002d8a:	1961      	adds	r1, r4, r5
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	bf01      	itttt	eq
 8002d90:	6819      	ldreq	r1, [r3, #0]
 8002d92:	685b      	ldreq	r3, [r3, #4]
 8002d94:	1949      	addeq	r1, r1, r5
 8002d96:	6021      	streq	r1, [r4, #0]
 8002d98:	e7ed      	b.n	8002d76 <_free_r+0x22>
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	b10b      	cbz	r3, 8002da4 <_free_r+0x50>
 8002da0:	42a3      	cmp	r3, r4
 8002da2:	d9fa      	bls.n	8002d9a <_free_r+0x46>
 8002da4:	6811      	ldr	r1, [r2, #0]
 8002da6:	1855      	adds	r5, r2, r1
 8002da8:	42a5      	cmp	r5, r4
 8002daa:	d10b      	bne.n	8002dc4 <_free_r+0x70>
 8002dac:	6824      	ldr	r4, [r4, #0]
 8002dae:	4421      	add	r1, r4
 8002db0:	1854      	adds	r4, r2, r1
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	6011      	str	r1, [r2, #0]
 8002db6:	d1e0      	bne.n	8002d7a <_free_r+0x26>
 8002db8:	681c      	ldr	r4, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	6053      	str	r3, [r2, #4]
 8002dbe:	440c      	add	r4, r1
 8002dc0:	6014      	str	r4, [r2, #0]
 8002dc2:	e7da      	b.n	8002d7a <_free_r+0x26>
 8002dc4:	d902      	bls.n	8002dcc <_free_r+0x78>
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	6003      	str	r3, [r0, #0]
 8002dca:	e7d6      	b.n	8002d7a <_free_r+0x26>
 8002dcc:	6825      	ldr	r5, [r4, #0]
 8002dce:	1961      	adds	r1, r4, r5
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	bf04      	itt	eq
 8002dd4:	6819      	ldreq	r1, [r3, #0]
 8002dd6:	685b      	ldreq	r3, [r3, #4]
 8002dd8:	6063      	str	r3, [r4, #4]
 8002dda:	bf04      	itt	eq
 8002ddc:	1949      	addeq	r1, r1, r5
 8002dde:	6021      	streq	r1, [r4, #0]
 8002de0:	6054      	str	r4, [r2, #4]
 8002de2:	e7ca      	b.n	8002d7a <_free_r+0x26>
 8002de4:	b003      	add	sp, #12
 8002de6:	bd30      	pop	{r4, r5, pc}
 8002de8:	200006e8 	.word	0x200006e8

08002dec <sbrk_aligned>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	4e0e      	ldr	r6, [pc, #56]	; (8002e28 <sbrk_aligned+0x3c>)
 8002df0:	460c      	mov	r4, r1
 8002df2:	6831      	ldr	r1, [r6, #0]
 8002df4:	4605      	mov	r5, r0
 8002df6:	b911      	cbnz	r1, 8002dfe <sbrk_aligned+0x12>
 8002df8:	f000 fcbc 	bl	8003774 <_sbrk_r>
 8002dfc:	6030      	str	r0, [r6, #0]
 8002dfe:	4621      	mov	r1, r4
 8002e00:	4628      	mov	r0, r5
 8002e02:	f000 fcb7 	bl	8003774 <_sbrk_r>
 8002e06:	1c43      	adds	r3, r0, #1
 8002e08:	d00a      	beq.n	8002e20 <sbrk_aligned+0x34>
 8002e0a:	1cc4      	adds	r4, r0, #3
 8002e0c:	f024 0403 	bic.w	r4, r4, #3
 8002e10:	42a0      	cmp	r0, r4
 8002e12:	d007      	beq.n	8002e24 <sbrk_aligned+0x38>
 8002e14:	1a21      	subs	r1, r4, r0
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 fcac 	bl	8003774 <_sbrk_r>
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d101      	bne.n	8002e24 <sbrk_aligned+0x38>
 8002e20:	f04f 34ff 	mov.w	r4, #4294967295
 8002e24:	4620      	mov	r0, r4
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	200006ec 	.word	0x200006ec

08002e2c <_malloc_r>:
 8002e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e30:	1ccd      	adds	r5, r1, #3
 8002e32:	f025 0503 	bic.w	r5, r5, #3
 8002e36:	3508      	adds	r5, #8
 8002e38:	2d0c      	cmp	r5, #12
 8002e3a:	bf38      	it	cc
 8002e3c:	250c      	movcc	r5, #12
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	4607      	mov	r7, r0
 8002e42:	db01      	blt.n	8002e48 <_malloc_r+0x1c>
 8002e44:	42a9      	cmp	r1, r5
 8002e46:	d905      	bls.n	8002e54 <_malloc_r+0x28>
 8002e48:	230c      	movs	r3, #12
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	4630      	mov	r0, r6
 8002e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f28 <_malloc_r+0xfc>
 8002e58:	f000 f868 	bl	8002f2c <__malloc_lock>
 8002e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e60:	461c      	mov	r4, r3
 8002e62:	bb5c      	cbnz	r4, 8002ebc <_malloc_r+0x90>
 8002e64:	4629      	mov	r1, r5
 8002e66:	4638      	mov	r0, r7
 8002e68:	f7ff ffc0 	bl	8002dec <sbrk_aligned>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	4604      	mov	r4, r0
 8002e70:	d155      	bne.n	8002f1e <_malloc_r+0xf2>
 8002e72:	f8d8 4000 	ldr.w	r4, [r8]
 8002e76:	4626      	mov	r6, r4
 8002e78:	2e00      	cmp	r6, #0
 8002e7a:	d145      	bne.n	8002f08 <_malloc_r+0xdc>
 8002e7c:	2c00      	cmp	r4, #0
 8002e7e:	d048      	beq.n	8002f12 <_malloc_r+0xe6>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	4631      	mov	r1, r6
 8002e84:	4638      	mov	r0, r7
 8002e86:	eb04 0903 	add.w	r9, r4, r3
 8002e8a:	f000 fc73 	bl	8003774 <_sbrk_r>
 8002e8e:	4581      	cmp	r9, r0
 8002e90:	d13f      	bne.n	8002f12 <_malloc_r+0xe6>
 8002e92:	6821      	ldr	r1, [r4, #0]
 8002e94:	1a6d      	subs	r5, r5, r1
 8002e96:	4629      	mov	r1, r5
 8002e98:	4638      	mov	r0, r7
 8002e9a:	f7ff ffa7 	bl	8002dec <sbrk_aligned>
 8002e9e:	3001      	adds	r0, #1
 8002ea0:	d037      	beq.n	8002f12 <_malloc_r+0xe6>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	442b      	add	r3, r5
 8002ea6:	6023      	str	r3, [r4, #0]
 8002ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d038      	beq.n	8002f22 <_malloc_r+0xf6>
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	42a2      	cmp	r2, r4
 8002eb4:	d12b      	bne.n	8002f0e <_malloc_r+0xe2>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	e00f      	b.n	8002edc <_malloc_r+0xb0>
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	1b52      	subs	r2, r2, r5
 8002ec0:	d41f      	bmi.n	8002f02 <_malloc_r+0xd6>
 8002ec2:	2a0b      	cmp	r2, #11
 8002ec4:	d917      	bls.n	8002ef6 <_malloc_r+0xca>
 8002ec6:	1961      	adds	r1, r4, r5
 8002ec8:	42a3      	cmp	r3, r4
 8002eca:	6025      	str	r5, [r4, #0]
 8002ecc:	bf18      	it	ne
 8002ece:	6059      	strne	r1, [r3, #4]
 8002ed0:	6863      	ldr	r3, [r4, #4]
 8002ed2:	bf08      	it	eq
 8002ed4:	f8c8 1000 	streq.w	r1, [r8]
 8002ed8:	5162      	str	r2, [r4, r5]
 8002eda:	604b      	str	r3, [r1, #4]
 8002edc:	4638      	mov	r0, r7
 8002ede:	f104 060b 	add.w	r6, r4, #11
 8002ee2:	f000 f829 	bl	8002f38 <__malloc_unlock>
 8002ee6:	f026 0607 	bic.w	r6, r6, #7
 8002eea:	1d23      	adds	r3, r4, #4
 8002eec:	1af2      	subs	r2, r6, r3
 8002eee:	d0ae      	beq.n	8002e4e <_malloc_r+0x22>
 8002ef0:	1b9b      	subs	r3, r3, r6
 8002ef2:	50a3      	str	r3, [r4, r2]
 8002ef4:	e7ab      	b.n	8002e4e <_malloc_r+0x22>
 8002ef6:	42a3      	cmp	r3, r4
 8002ef8:	6862      	ldr	r2, [r4, #4]
 8002efa:	d1dd      	bne.n	8002eb8 <_malloc_r+0x8c>
 8002efc:	f8c8 2000 	str.w	r2, [r8]
 8002f00:	e7ec      	b.n	8002edc <_malloc_r+0xb0>
 8002f02:	4623      	mov	r3, r4
 8002f04:	6864      	ldr	r4, [r4, #4]
 8002f06:	e7ac      	b.n	8002e62 <_malloc_r+0x36>
 8002f08:	4634      	mov	r4, r6
 8002f0a:	6876      	ldr	r6, [r6, #4]
 8002f0c:	e7b4      	b.n	8002e78 <_malloc_r+0x4c>
 8002f0e:	4613      	mov	r3, r2
 8002f10:	e7cc      	b.n	8002eac <_malloc_r+0x80>
 8002f12:	230c      	movs	r3, #12
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4638      	mov	r0, r7
 8002f18:	f000 f80e 	bl	8002f38 <__malloc_unlock>
 8002f1c:	e797      	b.n	8002e4e <_malloc_r+0x22>
 8002f1e:	6025      	str	r5, [r4, #0]
 8002f20:	e7dc      	b.n	8002edc <_malloc_r+0xb0>
 8002f22:	605b      	str	r3, [r3, #4]
 8002f24:	deff      	udf	#255	; 0xff
 8002f26:	bf00      	nop
 8002f28:	200006e8 	.word	0x200006e8

08002f2c <__malloc_lock>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <__malloc_lock+0x8>)
 8002f2e:	f7ff bf0e 	b.w	8002d4e <__retarget_lock_acquire_recursive>
 8002f32:	bf00      	nop
 8002f34:	200006e4 	.word	0x200006e4

08002f38 <__malloc_unlock>:
 8002f38:	4801      	ldr	r0, [pc, #4]	; (8002f40 <__malloc_unlock+0x8>)
 8002f3a:	f7ff bf09 	b.w	8002d50 <__retarget_lock_release_recursive>
 8002f3e:	bf00      	nop
 8002f40:	200006e4 	.word	0x200006e4

08002f44 <__sfputc_r>:
 8002f44:	6893      	ldr	r3, [r2, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	b410      	push	{r4}
 8002f4c:	6093      	str	r3, [r2, #8]
 8002f4e:	da08      	bge.n	8002f62 <__sfputc_r+0x1e>
 8002f50:	6994      	ldr	r4, [r2, #24]
 8002f52:	42a3      	cmp	r3, r4
 8002f54:	db01      	blt.n	8002f5a <__sfputc_r+0x16>
 8002f56:	290a      	cmp	r1, #10
 8002f58:	d103      	bne.n	8002f62 <__sfputc_r+0x1e>
 8002f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f5e:	f000 bb73 	b.w	8003648 <__swbuf_r>
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	1c58      	adds	r0, r3, #1
 8002f66:	6010      	str	r0, [r2, #0]
 8002f68:	7019      	strb	r1, [r3, #0]
 8002f6a:	4608      	mov	r0, r1
 8002f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <__sfputs_r>:
 8002f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f74:	4606      	mov	r6, r0
 8002f76:	460f      	mov	r7, r1
 8002f78:	4614      	mov	r4, r2
 8002f7a:	18d5      	adds	r5, r2, r3
 8002f7c:	42ac      	cmp	r4, r5
 8002f7e:	d101      	bne.n	8002f84 <__sfputs_r+0x12>
 8002f80:	2000      	movs	r0, #0
 8002f82:	e007      	b.n	8002f94 <__sfputs_r+0x22>
 8002f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f88:	463a      	mov	r2, r7
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	f7ff ffda 	bl	8002f44 <__sfputc_r>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d1f3      	bne.n	8002f7c <__sfputs_r+0xa>
 8002f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f98 <_vfiprintf_r>:
 8002f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9c:	460d      	mov	r5, r1
 8002f9e:	b09d      	sub	sp, #116	; 0x74
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	4698      	mov	r8, r3
 8002fa4:	4606      	mov	r6, r0
 8002fa6:	b118      	cbz	r0, 8002fb0 <_vfiprintf_r+0x18>
 8002fa8:	6a03      	ldr	r3, [r0, #32]
 8002faa:	b90b      	cbnz	r3, 8002fb0 <_vfiprintf_r+0x18>
 8002fac:	f7ff fdca 	bl	8002b44 <__sinit>
 8002fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fb2:	07d9      	lsls	r1, r3, #31
 8002fb4:	d405      	bmi.n	8002fc2 <_vfiprintf_r+0x2a>
 8002fb6:	89ab      	ldrh	r3, [r5, #12]
 8002fb8:	059a      	lsls	r2, r3, #22
 8002fba:	d402      	bmi.n	8002fc2 <_vfiprintf_r+0x2a>
 8002fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fbe:	f7ff fec6 	bl	8002d4e <__retarget_lock_acquire_recursive>
 8002fc2:	89ab      	ldrh	r3, [r5, #12]
 8002fc4:	071b      	lsls	r3, r3, #28
 8002fc6:	d501      	bpl.n	8002fcc <_vfiprintf_r+0x34>
 8002fc8:	692b      	ldr	r3, [r5, #16]
 8002fca:	b99b      	cbnz	r3, 8002ff4 <_vfiprintf_r+0x5c>
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4630      	mov	r0, r6
 8002fd0:	f000 fb78 	bl	80036c4 <__swsetup_r>
 8002fd4:	b170      	cbz	r0, 8002ff4 <_vfiprintf_r+0x5c>
 8002fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fd8:	07dc      	lsls	r4, r3, #31
 8002fda:	d504      	bpl.n	8002fe6 <_vfiprintf_r+0x4e>
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	b01d      	add	sp, #116	; 0x74
 8002fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe6:	89ab      	ldrh	r3, [r5, #12]
 8002fe8:	0598      	lsls	r0, r3, #22
 8002fea:	d4f7      	bmi.n	8002fdc <_vfiprintf_r+0x44>
 8002fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fee:	f7ff feaf 	bl	8002d50 <__retarget_lock_release_recursive>
 8002ff2:	e7f3      	b.n	8002fdc <_vfiprintf_r+0x44>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003002:	2330      	movs	r3, #48	; 0x30
 8003004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80031b8 <_vfiprintf_r+0x220>
 8003008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800300c:	f04f 0901 	mov.w	r9, #1
 8003010:	4623      	mov	r3, r4
 8003012:	469a      	mov	sl, r3
 8003014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003018:	b10a      	cbz	r2, 800301e <_vfiprintf_r+0x86>
 800301a:	2a25      	cmp	r2, #37	; 0x25
 800301c:	d1f9      	bne.n	8003012 <_vfiprintf_r+0x7a>
 800301e:	ebba 0b04 	subs.w	fp, sl, r4
 8003022:	d00b      	beq.n	800303c <_vfiprintf_r+0xa4>
 8003024:	465b      	mov	r3, fp
 8003026:	4622      	mov	r2, r4
 8003028:	4629      	mov	r1, r5
 800302a:	4630      	mov	r0, r6
 800302c:	f7ff ffa1 	bl	8002f72 <__sfputs_r>
 8003030:	3001      	adds	r0, #1
 8003032:	f000 80a9 	beq.w	8003188 <_vfiprintf_r+0x1f0>
 8003036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003038:	445a      	add	r2, fp
 800303a:	9209      	str	r2, [sp, #36]	; 0x24
 800303c:	f89a 3000 	ldrb.w	r3, [sl]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a1 	beq.w	8003188 <_vfiprintf_r+0x1f0>
 8003046:	2300      	movs	r3, #0
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003050:	f10a 0a01 	add.w	sl, sl, #1
 8003054:	9304      	str	r3, [sp, #16]
 8003056:	9307      	str	r3, [sp, #28]
 8003058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800305c:	931a      	str	r3, [sp, #104]	; 0x68
 800305e:	4654      	mov	r4, sl
 8003060:	2205      	movs	r2, #5
 8003062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003066:	4854      	ldr	r0, [pc, #336]	; (80031b8 <_vfiprintf_r+0x220>)
 8003068:	f7fd f8ba 	bl	80001e0 <memchr>
 800306c:	9a04      	ldr	r2, [sp, #16]
 800306e:	b9d8      	cbnz	r0, 80030a8 <_vfiprintf_r+0x110>
 8003070:	06d1      	lsls	r1, r2, #27
 8003072:	bf44      	itt	mi
 8003074:	2320      	movmi	r3, #32
 8003076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800307a:	0713      	lsls	r3, r2, #28
 800307c:	bf44      	itt	mi
 800307e:	232b      	movmi	r3, #43	; 0x2b
 8003080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003084:	f89a 3000 	ldrb.w	r3, [sl]
 8003088:	2b2a      	cmp	r3, #42	; 0x2a
 800308a:	d015      	beq.n	80030b8 <_vfiprintf_r+0x120>
 800308c:	9a07      	ldr	r2, [sp, #28]
 800308e:	4654      	mov	r4, sl
 8003090:	2000      	movs	r0, #0
 8003092:	f04f 0c0a 	mov.w	ip, #10
 8003096:	4621      	mov	r1, r4
 8003098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800309c:	3b30      	subs	r3, #48	; 0x30
 800309e:	2b09      	cmp	r3, #9
 80030a0:	d94d      	bls.n	800313e <_vfiprintf_r+0x1a6>
 80030a2:	b1b0      	cbz	r0, 80030d2 <_vfiprintf_r+0x13a>
 80030a4:	9207      	str	r2, [sp, #28]
 80030a6:	e014      	b.n	80030d2 <_vfiprintf_r+0x13a>
 80030a8:	eba0 0308 	sub.w	r3, r0, r8
 80030ac:	fa09 f303 	lsl.w	r3, r9, r3
 80030b0:	4313      	orrs	r3, r2
 80030b2:	9304      	str	r3, [sp, #16]
 80030b4:	46a2      	mov	sl, r4
 80030b6:	e7d2      	b.n	800305e <_vfiprintf_r+0xc6>
 80030b8:	9b03      	ldr	r3, [sp, #12]
 80030ba:	1d19      	adds	r1, r3, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	9103      	str	r1, [sp, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bfbb      	ittet	lt
 80030c4:	425b      	neglt	r3, r3
 80030c6:	f042 0202 	orrlt.w	r2, r2, #2
 80030ca:	9307      	strge	r3, [sp, #28]
 80030cc:	9307      	strlt	r3, [sp, #28]
 80030ce:	bfb8      	it	lt
 80030d0:	9204      	strlt	r2, [sp, #16]
 80030d2:	7823      	ldrb	r3, [r4, #0]
 80030d4:	2b2e      	cmp	r3, #46	; 0x2e
 80030d6:	d10c      	bne.n	80030f2 <_vfiprintf_r+0x15a>
 80030d8:	7863      	ldrb	r3, [r4, #1]
 80030da:	2b2a      	cmp	r3, #42	; 0x2a
 80030dc:	d134      	bne.n	8003148 <_vfiprintf_r+0x1b0>
 80030de:	9b03      	ldr	r3, [sp, #12]
 80030e0:	1d1a      	adds	r2, r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	9203      	str	r2, [sp, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bfb8      	it	lt
 80030ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80030ee:	3402      	adds	r4, #2
 80030f0:	9305      	str	r3, [sp, #20]
 80030f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80031c8 <_vfiprintf_r+0x230>
 80030f6:	7821      	ldrb	r1, [r4, #0]
 80030f8:	2203      	movs	r2, #3
 80030fa:	4650      	mov	r0, sl
 80030fc:	f7fd f870 	bl	80001e0 <memchr>
 8003100:	b138      	cbz	r0, 8003112 <_vfiprintf_r+0x17a>
 8003102:	9b04      	ldr	r3, [sp, #16]
 8003104:	eba0 000a 	sub.w	r0, r0, sl
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	4082      	lsls	r2, r0
 800310c:	4313      	orrs	r3, r2
 800310e:	3401      	adds	r4, #1
 8003110:	9304      	str	r3, [sp, #16]
 8003112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003116:	4829      	ldr	r0, [pc, #164]	; (80031bc <_vfiprintf_r+0x224>)
 8003118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800311c:	2206      	movs	r2, #6
 800311e:	f7fd f85f 	bl	80001e0 <memchr>
 8003122:	2800      	cmp	r0, #0
 8003124:	d03f      	beq.n	80031a6 <_vfiprintf_r+0x20e>
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <_vfiprintf_r+0x228>)
 8003128:	bb1b      	cbnz	r3, 8003172 <_vfiprintf_r+0x1da>
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	3307      	adds	r3, #7
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	3308      	adds	r3, #8
 8003134:	9303      	str	r3, [sp, #12]
 8003136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003138:	443b      	add	r3, r7
 800313a:	9309      	str	r3, [sp, #36]	; 0x24
 800313c:	e768      	b.n	8003010 <_vfiprintf_r+0x78>
 800313e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003142:	460c      	mov	r4, r1
 8003144:	2001      	movs	r0, #1
 8003146:	e7a6      	b.n	8003096 <_vfiprintf_r+0xfe>
 8003148:	2300      	movs	r3, #0
 800314a:	3401      	adds	r4, #1
 800314c:	9305      	str	r3, [sp, #20]
 800314e:	4619      	mov	r1, r3
 8003150:	f04f 0c0a 	mov.w	ip, #10
 8003154:	4620      	mov	r0, r4
 8003156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800315a:	3a30      	subs	r2, #48	; 0x30
 800315c:	2a09      	cmp	r2, #9
 800315e:	d903      	bls.n	8003168 <_vfiprintf_r+0x1d0>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0c6      	beq.n	80030f2 <_vfiprintf_r+0x15a>
 8003164:	9105      	str	r1, [sp, #20]
 8003166:	e7c4      	b.n	80030f2 <_vfiprintf_r+0x15a>
 8003168:	fb0c 2101 	mla	r1, ip, r1, r2
 800316c:	4604      	mov	r4, r0
 800316e:	2301      	movs	r3, #1
 8003170:	e7f0      	b.n	8003154 <_vfiprintf_r+0x1bc>
 8003172:	ab03      	add	r3, sp, #12
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	462a      	mov	r2, r5
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <_vfiprintf_r+0x22c>)
 800317a:	a904      	add	r1, sp, #16
 800317c:	4630      	mov	r0, r6
 800317e:	f3af 8000 	nop.w
 8003182:	4607      	mov	r7, r0
 8003184:	1c78      	adds	r0, r7, #1
 8003186:	d1d6      	bne.n	8003136 <_vfiprintf_r+0x19e>
 8003188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800318a:	07d9      	lsls	r1, r3, #31
 800318c:	d405      	bmi.n	800319a <_vfiprintf_r+0x202>
 800318e:	89ab      	ldrh	r3, [r5, #12]
 8003190:	059a      	lsls	r2, r3, #22
 8003192:	d402      	bmi.n	800319a <_vfiprintf_r+0x202>
 8003194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003196:	f7ff fddb 	bl	8002d50 <__retarget_lock_release_recursive>
 800319a:	89ab      	ldrh	r3, [r5, #12]
 800319c:	065b      	lsls	r3, r3, #25
 800319e:	f53f af1d 	bmi.w	8002fdc <_vfiprintf_r+0x44>
 80031a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031a4:	e71c      	b.n	8002fe0 <_vfiprintf_r+0x48>
 80031a6:	ab03      	add	r3, sp, #12
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	462a      	mov	r2, r5
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <_vfiprintf_r+0x22c>)
 80031ae:	a904      	add	r1, sp, #16
 80031b0:	4630      	mov	r0, r6
 80031b2:	f000 f879 	bl	80032a8 <_printf_i>
 80031b6:	e7e4      	b.n	8003182 <_vfiprintf_r+0x1ea>
 80031b8:	080038e0 	.word	0x080038e0
 80031bc:	080038ea 	.word	0x080038ea
 80031c0:	00000000 	.word	0x00000000
 80031c4:	08002f73 	.word	0x08002f73
 80031c8:	080038e6 	.word	0x080038e6

080031cc <_printf_common>:
 80031cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d0:	4616      	mov	r6, r2
 80031d2:	4699      	mov	r9, r3
 80031d4:	688a      	ldr	r2, [r1, #8]
 80031d6:	690b      	ldr	r3, [r1, #16]
 80031d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031dc:	4293      	cmp	r3, r2
 80031de:	bfb8      	it	lt
 80031e0:	4613      	movlt	r3, r2
 80031e2:	6033      	str	r3, [r6, #0]
 80031e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031e8:	4607      	mov	r7, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	b10a      	cbz	r2, 80031f2 <_printf_common+0x26>
 80031ee:	3301      	adds	r3, #1
 80031f0:	6033      	str	r3, [r6, #0]
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	0699      	lsls	r1, r3, #26
 80031f6:	bf42      	ittt	mi
 80031f8:	6833      	ldrmi	r3, [r6, #0]
 80031fa:	3302      	addmi	r3, #2
 80031fc:	6033      	strmi	r3, [r6, #0]
 80031fe:	6825      	ldr	r5, [r4, #0]
 8003200:	f015 0506 	ands.w	r5, r5, #6
 8003204:	d106      	bne.n	8003214 <_printf_common+0x48>
 8003206:	f104 0a19 	add.w	sl, r4, #25
 800320a:	68e3      	ldr	r3, [r4, #12]
 800320c:	6832      	ldr	r2, [r6, #0]
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	42ab      	cmp	r3, r5
 8003212:	dc26      	bgt.n	8003262 <_printf_common+0x96>
 8003214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003218:	1e13      	subs	r3, r2, #0
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	bf18      	it	ne
 800321e:	2301      	movne	r3, #1
 8003220:	0692      	lsls	r2, r2, #26
 8003222:	d42b      	bmi.n	800327c <_printf_common+0xb0>
 8003224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003228:	4649      	mov	r1, r9
 800322a:	4638      	mov	r0, r7
 800322c:	47c0      	blx	r8
 800322e:	3001      	adds	r0, #1
 8003230:	d01e      	beq.n	8003270 <_printf_common+0xa4>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	6922      	ldr	r2, [r4, #16]
 8003236:	f003 0306 	and.w	r3, r3, #6
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf02      	ittt	eq
 800323e:	68e5      	ldreq	r5, [r4, #12]
 8003240:	6833      	ldreq	r3, [r6, #0]
 8003242:	1aed      	subeq	r5, r5, r3
 8003244:	68a3      	ldr	r3, [r4, #8]
 8003246:	bf0c      	ite	eq
 8003248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800324c:	2500      	movne	r5, #0
 800324e:	4293      	cmp	r3, r2
 8003250:	bfc4      	itt	gt
 8003252:	1a9b      	subgt	r3, r3, r2
 8003254:	18ed      	addgt	r5, r5, r3
 8003256:	2600      	movs	r6, #0
 8003258:	341a      	adds	r4, #26
 800325a:	42b5      	cmp	r5, r6
 800325c:	d11a      	bne.n	8003294 <_printf_common+0xc8>
 800325e:	2000      	movs	r0, #0
 8003260:	e008      	b.n	8003274 <_printf_common+0xa8>
 8003262:	2301      	movs	r3, #1
 8003264:	4652      	mov	r2, sl
 8003266:	4649      	mov	r1, r9
 8003268:	4638      	mov	r0, r7
 800326a:	47c0      	blx	r8
 800326c:	3001      	adds	r0, #1
 800326e:	d103      	bne.n	8003278 <_printf_common+0xac>
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003278:	3501      	adds	r5, #1
 800327a:	e7c6      	b.n	800320a <_printf_common+0x3e>
 800327c:	18e1      	adds	r1, r4, r3
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	2030      	movs	r0, #48	; 0x30
 8003282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003286:	4422      	add	r2, r4
 8003288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800328c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003290:	3302      	adds	r3, #2
 8003292:	e7c7      	b.n	8003224 <_printf_common+0x58>
 8003294:	2301      	movs	r3, #1
 8003296:	4622      	mov	r2, r4
 8003298:	4649      	mov	r1, r9
 800329a:	4638      	mov	r0, r7
 800329c:	47c0      	blx	r8
 800329e:	3001      	adds	r0, #1
 80032a0:	d0e6      	beq.n	8003270 <_printf_common+0xa4>
 80032a2:	3601      	adds	r6, #1
 80032a4:	e7d9      	b.n	800325a <_printf_common+0x8e>
	...

080032a8 <_printf_i>:
 80032a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032ac:	7e0f      	ldrb	r7, [r1, #24]
 80032ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032b0:	2f78      	cmp	r7, #120	; 0x78
 80032b2:	4691      	mov	r9, r2
 80032b4:	4680      	mov	r8, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	469a      	mov	sl, r3
 80032ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032be:	d807      	bhi.n	80032d0 <_printf_i+0x28>
 80032c0:	2f62      	cmp	r7, #98	; 0x62
 80032c2:	d80a      	bhi.n	80032da <_printf_i+0x32>
 80032c4:	2f00      	cmp	r7, #0
 80032c6:	f000 80d4 	beq.w	8003472 <_printf_i+0x1ca>
 80032ca:	2f58      	cmp	r7, #88	; 0x58
 80032cc:	f000 80c0 	beq.w	8003450 <_printf_i+0x1a8>
 80032d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032d8:	e03a      	b.n	8003350 <_printf_i+0xa8>
 80032da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032de:	2b15      	cmp	r3, #21
 80032e0:	d8f6      	bhi.n	80032d0 <_printf_i+0x28>
 80032e2:	a101      	add	r1, pc, #4	; (adr r1, 80032e8 <_printf_i+0x40>)
 80032e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032e8:	08003341 	.word	0x08003341
 80032ec:	08003355 	.word	0x08003355
 80032f0:	080032d1 	.word	0x080032d1
 80032f4:	080032d1 	.word	0x080032d1
 80032f8:	080032d1 	.word	0x080032d1
 80032fc:	080032d1 	.word	0x080032d1
 8003300:	08003355 	.word	0x08003355
 8003304:	080032d1 	.word	0x080032d1
 8003308:	080032d1 	.word	0x080032d1
 800330c:	080032d1 	.word	0x080032d1
 8003310:	080032d1 	.word	0x080032d1
 8003314:	08003459 	.word	0x08003459
 8003318:	08003381 	.word	0x08003381
 800331c:	08003413 	.word	0x08003413
 8003320:	080032d1 	.word	0x080032d1
 8003324:	080032d1 	.word	0x080032d1
 8003328:	0800347b 	.word	0x0800347b
 800332c:	080032d1 	.word	0x080032d1
 8003330:	08003381 	.word	0x08003381
 8003334:	080032d1 	.word	0x080032d1
 8003338:	080032d1 	.word	0x080032d1
 800333c:	0800341b 	.word	0x0800341b
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	602a      	str	r2, [r5, #0]
 8003348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800334c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003350:	2301      	movs	r3, #1
 8003352:	e09f      	b.n	8003494 <_printf_i+0x1ec>
 8003354:	6820      	ldr	r0, [r4, #0]
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	0607      	lsls	r7, r0, #24
 800335a:	f103 0104 	add.w	r1, r3, #4
 800335e:	6029      	str	r1, [r5, #0]
 8003360:	d501      	bpl.n	8003366 <_printf_i+0xbe>
 8003362:	681e      	ldr	r6, [r3, #0]
 8003364:	e003      	b.n	800336e <_printf_i+0xc6>
 8003366:	0646      	lsls	r6, r0, #25
 8003368:	d5fb      	bpl.n	8003362 <_printf_i+0xba>
 800336a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800336e:	2e00      	cmp	r6, #0
 8003370:	da03      	bge.n	800337a <_printf_i+0xd2>
 8003372:	232d      	movs	r3, #45	; 0x2d
 8003374:	4276      	negs	r6, r6
 8003376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800337a:	485a      	ldr	r0, [pc, #360]	; (80034e4 <_printf_i+0x23c>)
 800337c:	230a      	movs	r3, #10
 800337e:	e012      	b.n	80033a6 <_printf_i+0xfe>
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	1d19      	adds	r1, r3, #4
 8003386:	6029      	str	r1, [r5, #0]
 8003388:	0605      	lsls	r5, r0, #24
 800338a:	d501      	bpl.n	8003390 <_printf_i+0xe8>
 800338c:	681e      	ldr	r6, [r3, #0]
 800338e:	e002      	b.n	8003396 <_printf_i+0xee>
 8003390:	0641      	lsls	r1, r0, #25
 8003392:	d5fb      	bpl.n	800338c <_printf_i+0xe4>
 8003394:	881e      	ldrh	r6, [r3, #0]
 8003396:	4853      	ldr	r0, [pc, #332]	; (80034e4 <_printf_i+0x23c>)
 8003398:	2f6f      	cmp	r7, #111	; 0x6f
 800339a:	bf0c      	ite	eq
 800339c:	2308      	moveq	r3, #8
 800339e:	230a      	movne	r3, #10
 80033a0:	2100      	movs	r1, #0
 80033a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033a6:	6865      	ldr	r5, [r4, #4]
 80033a8:	60a5      	str	r5, [r4, #8]
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	bfa2      	ittt	ge
 80033ae:	6821      	ldrge	r1, [r4, #0]
 80033b0:	f021 0104 	bicge.w	r1, r1, #4
 80033b4:	6021      	strge	r1, [r4, #0]
 80033b6:	b90e      	cbnz	r6, 80033bc <_printf_i+0x114>
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	d04b      	beq.n	8003454 <_printf_i+0x1ac>
 80033bc:	4615      	mov	r5, r2
 80033be:	fbb6 f1f3 	udiv	r1, r6, r3
 80033c2:	fb03 6711 	mls	r7, r3, r1, r6
 80033c6:	5dc7      	ldrb	r7, [r0, r7]
 80033c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033cc:	4637      	mov	r7, r6
 80033ce:	42bb      	cmp	r3, r7
 80033d0:	460e      	mov	r6, r1
 80033d2:	d9f4      	bls.n	80033be <_printf_i+0x116>
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d10b      	bne.n	80033f0 <_printf_i+0x148>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	07de      	lsls	r6, r3, #31
 80033dc:	d508      	bpl.n	80033f0 <_printf_i+0x148>
 80033de:	6923      	ldr	r3, [r4, #16]
 80033e0:	6861      	ldr	r1, [r4, #4]
 80033e2:	4299      	cmp	r1, r3
 80033e4:	bfde      	ittt	le
 80033e6:	2330      	movle	r3, #48	; 0x30
 80033e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033f0:	1b52      	subs	r2, r2, r5
 80033f2:	6122      	str	r2, [r4, #16]
 80033f4:	f8cd a000 	str.w	sl, [sp]
 80033f8:	464b      	mov	r3, r9
 80033fa:	aa03      	add	r2, sp, #12
 80033fc:	4621      	mov	r1, r4
 80033fe:	4640      	mov	r0, r8
 8003400:	f7ff fee4 	bl	80031cc <_printf_common>
 8003404:	3001      	adds	r0, #1
 8003406:	d14a      	bne.n	800349e <_printf_i+0x1f6>
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	b004      	add	sp, #16
 800340e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	4833      	ldr	r0, [pc, #204]	; (80034e8 <_printf_i+0x240>)
 800341c:	2778      	movs	r7, #120	; 0x78
 800341e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	6829      	ldr	r1, [r5, #0]
 8003426:	061f      	lsls	r7, r3, #24
 8003428:	f851 6b04 	ldr.w	r6, [r1], #4
 800342c:	d402      	bmi.n	8003434 <_printf_i+0x18c>
 800342e:	065f      	lsls	r7, r3, #25
 8003430:	bf48      	it	mi
 8003432:	b2b6      	uxthmi	r6, r6
 8003434:	07df      	lsls	r7, r3, #31
 8003436:	bf48      	it	mi
 8003438:	f043 0320 	orrmi.w	r3, r3, #32
 800343c:	6029      	str	r1, [r5, #0]
 800343e:	bf48      	it	mi
 8003440:	6023      	strmi	r3, [r4, #0]
 8003442:	b91e      	cbnz	r6, 800344c <_printf_i+0x1a4>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	f023 0320 	bic.w	r3, r3, #32
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	2310      	movs	r3, #16
 800344e:	e7a7      	b.n	80033a0 <_printf_i+0xf8>
 8003450:	4824      	ldr	r0, [pc, #144]	; (80034e4 <_printf_i+0x23c>)
 8003452:	e7e4      	b.n	800341e <_printf_i+0x176>
 8003454:	4615      	mov	r5, r2
 8003456:	e7bd      	b.n	80033d4 <_printf_i+0x12c>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	6826      	ldr	r6, [r4, #0]
 800345c:	6961      	ldr	r1, [r4, #20]
 800345e:	1d18      	adds	r0, r3, #4
 8003460:	6028      	str	r0, [r5, #0]
 8003462:	0635      	lsls	r5, r6, #24
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	d501      	bpl.n	800346c <_printf_i+0x1c4>
 8003468:	6019      	str	r1, [r3, #0]
 800346a:	e002      	b.n	8003472 <_printf_i+0x1ca>
 800346c:	0670      	lsls	r0, r6, #25
 800346e:	d5fb      	bpl.n	8003468 <_printf_i+0x1c0>
 8003470:	8019      	strh	r1, [r3, #0]
 8003472:	2300      	movs	r3, #0
 8003474:	6123      	str	r3, [r4, #16]
 8003476:	4615      	mov	r5, r2
 8003478:	e7bc      	b.n	80033f4 <_printf_i+0x14c>
 800347a:	682b      	ldr	r3, [r5, #0]
 800347c:	1d1a      	adds	r2, r3, #4
 800347e:	602a      	str	r2, [r5, #0]
 8003480:	681d      	ldr	r5, [r3, #0]
 8003482:	6862      	ldr	r2, [r4, #4]
 8003484:	2100      	movs	r1, #0
 8003486:	4628      	mov	r0, r5
 8003488:	f7fc feaa 	bl	80001e0 <memchr>
 800348c:	b108      	cbz	r0, 8003492 <_printf_i+0x1ea>
 800348e:	1b40      	subs	r0, r0, r5
 8003490:	6060      	str	r0, [r4, #4]
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	6123      	str	r3, [r4, #16]
 8003496:	2300      	movs	r3, #0
 8003498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800349c:	e7aa      	b.n	80033f4 <_printf_i+0x14c>
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	462a      	mov	r2, r5
 80034a2:	4649      	mov	r1, r9
 80034a4:	4640      	mov	r0, r8
 80034a6:	47d0      	blx	sl
 80034a8:	3001      	adds	r0, #1
 80034aa:	d0ad      	beq.n	8003408 <_printf_i+0x160>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	079b      	lsls	r3, r3, #30
 80034b0:	d413      	bmi.n	80034da <_printf_i+0x232>
 80034b2:	68e0      	ldr	r0, [r4, #12]
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	4298      	cmp	r0, r3
 80034b8:	bfb8      	it	lt
 80034ba:	4618      	movlt	r0, r3
 80034bc:	e7a6      	b.n	800340c <_printf_i+0x164>
 80034be:	2301      	movs	r3, #1
 80034c0:	4632      	mov	r2, r6
 80034c2:	4649      	mov	r1, r9
 80034c4:	4640      	mov	r0, r8
 80034c6:	47d0      	blx	sl
 80034c8:	3001      	adds	r0, #1
 80034ca:	d09d      	beq.n	8003408 <_printf_i+0x160>
 80034cc:	3501      	adds	r5, #1
 80034ce:	68e3      	ldr	r3, [r4, #12]
 80034d0:	9903      	ldr	r1, [sp, #12]
 80034d2:	1a5b      	subs	r3, r3, r1
 80034d4:	42ab      	cmp	r3, r5
 80034d6:	dcf2      	bgt.n	80034be <_printf_i+0x216>
 80034d8:	e7eb      	b.n	80034b2 <_printf_i+0x20a>
 80034da:	2500      	movs	r5, #0
 80034dc:	f104 0619 	add.w	r6, r4, #25
 80034e0:	e7f5      	b.n	80034ce <_printf_i+0x226>
 80034e2:	bf00      	nop
 80034e4:	080038f1 	.word	0x080038f1
 80034e8:	08003902 	.word	0x08003902

080034ec <__sflush_r>:
 80034ec:	898a      	ldrh	r2, [r1, #12]
 80034ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f2:	4605      	mov	r5, r0
 80034f4:	0710      	lsls	r0, r2, #28
 80034f6:	460c      	mov	r4, r1
 80034f8:	d458      	bmi.n	80035ac <__sflush_r+0xc0>
 80034fa:	684b      	ldr	r3, [r1, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	dc05      	bgt.n	800350c <__sflush_r+0x20>
 8003500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	dc02      	bgt.n	800350c <__sflush_r+0x20>
 8003506:	2000      	movs	r0, #0
 8003508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800350c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800350e:	2e00      	cmp	r6, #0
 8003510:	d0f9      	beq.n	8003506 <__sflush_r+0x1a>
 8003512:	2300      	movs	r3, #0
 8003514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003518:	682f      	ldr	r7, [r5, #0]
 800351a:	6a21      	ldr	r1, [r4, #32]
 800351c:	602b      	str	r3, [r5, #0]
 800351e:	d032      	beq.n	8003586 <__sflush_r+0x9a>
 8003520:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	075a      	lsls	r2, r3, #29
 8003526:	d505      	bpl.n	8003534 <__sflush_r+0x48>
 8003528:	6863      	ldr	r3, [r4, #4]
 800352a:	1ac0      	subs	r0, r0, r3
 800352c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800352e:	b10b      	cbz	r3, 8003534 <__sflush_r+0x48>
 8003530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003532:	1ac0      	subs	r0, r0, r3
 8003534:	2300      	movs	r3, #0
 8003536:	4602      	mov	r2, r0
 8003538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800353a:	6a21      	ldr	r1, [r4, #32]
 800353c:	4628      	mov	r0, r5
 800353e:	47b0      	blx	r6
 8003540:	1c43      	adds	r3, r0, #1
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	d106      	bne.n	8003554 <__sflush_r+0x68>
 8003546:	6829      	ldr	r1, [r5, #0]
 8003548:	291d      	cmp	r1, #29
 800354a:	d82b      	bhi.n	80035a4 <__sflush_r+0xb8>
 800354c:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <__sflush_r+0x108>)
 800354e:	410a      	asrs	r2, r1
 8003550:	07d6      	lsls	r6, r2, #31
 8003552:	d427      	bmi.n	80035a4 <__sflush_r+0xb8>
 8003554:	2200      	movs	r2, #0
 8003556:	6062      	str	r2, [r4, #4]
 8003558:	04d9      	lsls	r1, r3, #19
 800355a:	6922      	ldr	r2, [r4, #16]
 800355c:	6022      	str	r2, [r4, #0]
 800355e:	d504      	bpl.n	800356a <__sflush_r+0x7e>
 8003560:	1c42      	adds	r2, r0, #1
 8003562:	d101      	bne.n	8003568 <__sflush_r+0x7c>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	b903      	cbnz	r3, 800356a <__sflush_r+0x7e>
 8003568:	6560      	str	r0, [r4, #84]	; 0x54
 800356a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800356c:	602f      	str	r7, [r5, #0]
 800356e:	2900      	cmp	r1, #0
 8003570:	d0c9      	beq.n	8003506 <__sflush_r+0x1a>
 8003572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003576:	4299      	cmp	r1, r3
 8003578:	d002      	beq.n	8003580 <__sflush_r+0x94>
 800357a:	4628      	mov	r0, r5
 800357c:	f7ff fbea 	bl	8002d54 <_free_r>
 8003580:	2000      	movs	r0, #0
 8003582:	6360      	str	r0, [r4, #52]	; 0x34
 8003584:	e7c0      	b.n	8003508 <__sflush_r+0x1c>
 8003586:	2301      	movs	r3, #1
 8003588:	4628      	mov	r0, r5
 800358a:	47b0      	blx	r6
 800358c:	1c41      	adds	r1, r0, #1
 800358e:	d1c8      	bne.n	8003522 <__sflush_r+0x36>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0c5      	beq.n	8003522 <__sflush_r+0x36>
 8003596:	2b1d      	cmp	r3, #29
 8003598:	d001      	beq.n	800359e <__sflush_r+0xb2>
 800359a:	2b16      	cmp	r3, #22
 800359c:	d101      	bne.n	80035a2 <__sflush_r+0xb6>
 800359e:	602f      	str	r7, [r5, #0]
 80035a0:	e7b1      	b.n	8003506 <__sflush_r+0x1a>
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a8:	81a3      	strh	r3, [r4, #12]
 80035aa:	e7ad      	b.n	8003508 <__sflush_r+0x1c>
 80035ac:	690f      	ldr	r7, [r1, #16]
 80035ae:	2f00      	cmp	r7, #0
 80035b0:	d0a9      	beq.n	8003506 <__sflush_r+0x1a>
 80035b2:	0793      	lsls	r3, r2, #30
 80035b4:	680e      	ldr	r6, [r1, #0]
 80035b6:	bf08      	it	eq
 80035b8:	694b      	ldreq	r3, [r1, #20]
 80035ba:	600f      	str	r7, [r1, #0]
 80035bc:	bf18      	it	ne
 80035be:	2300      	movne	r3, #0
 80035c0:	eba6 0807 	sub.w	r8, r6, r7
 80035c4:	608b      	str	r3, [r1, #8]
 80035c6:	f1b8 0f00 	cmp.w	r8, #0
 80035ca:	dd9c      	ble.n	8003506 <__sflush_r+0x1a>
 80035cc:	6a21      	ldr	r1, [r4, #32]
 80035ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035d0:	4643      	mov	r3, r8
 80035d2:	463a      	mov	r2, r7
 80035d4:	4628      	mov	r0, r5
 80035d6:	47b0      	blx	r6
 80035d8:	2800      	cmp	r0, #0
 80035da:	dc06      	bgt.n	80035ea <__sflush_r+0xfe>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e2:	81a3      	strh	r3, [r4, #12]
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	e78e      	b.n	8003508 <__sflush_r+0x1c>
 80035ea:	4407      	add	r7, r0
 80035ec:	eba8 0800 	sub.w	r8, r8, r0
 80035f0:	e7e9      	b.n	80035c6 <__sflush_r+0xda>
 80035f2:	bf00      	nop
 80035f4:	dfbffffe 	.word	0xdfbffffe

080035f8 <_fflush_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	690b      	ldr	r3, [r1, #16]
 80035fc:	4605      	mov	r5, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	b913      	cbnz	r3, 8003608 <_fflush_r+0x10>
 8003602:	2500      	movs	r5, #0
 8003604:	4628      	mov	r0, r5
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	b118      	cbz	r0, 8003612 <_fflush_r+0x1a>
 800360a:	6a03      	ldr	r3, [r0, #32]
 800360c:	b90b      	cbnz	r3, 8003612 <_fflush_r+0x1a>
 800360e:	f7ff fa99 	bl	8002b44 <__sinit>
 8003612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f3      	beq.n	8003602 <_fflush_r+0xa>
 800361a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800361c:	07d0      	lsls	r0, r2, #31
 800361e:	d404      	bmi.n	800362a <_fflush_r+0x32>
 8003620:	0599      	lsls	r1, r3, #22
 8003622:	d402      	bmi.n	800362a <_fflush_r+0x32>
 8003624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003626:	f7ff fb92 	bl	8002d4e <__retarget_lock_acquire_recursive>
 800362a:	4628      	mov	r0, r5
 800362c:	4621      	mov	r1, r4
 800362e:	f7ff ff5d 	bl	80034ec <__sflush_r>
 8003632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003634:	07da      	lsls	r2, r3, #31
 8003636:	4605      	mov	r5, r0
 8003638:	d4e4      	bmi.n	8003604 <_fflush_r+0xc>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	059b      	lsls	r3, r3, #22
 800363e:	d4e1      	bmi.n	8003604 <_fflush_r+0xc>
 8003640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003642:	f7ff fb85 	bl	8002d50 <__retarget_lock_release_recursive>
 8003646:	e7dd      	b.n	8003604 <_fflush_r+0xc>

08003648 <__swbuf_r>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	460e      	mov	r6, r1
 800364c:	4614      	mov	r4, r2
 800364e:	4605      	mov	r5, r0
 8003650:	b118      	cbz	r0, 800365a <__swbuf_r+0x12>
 8003652:	6a03      	ldr	r3, [r0, #32]
 8003654:	b90b      	cbnz	r3, 800365a <__swbuf_r+0x12>
 8003656:	f7ff fa75 	bl	8002b44 <__sinit>
 800365a:	69a3      	ldr	r3, [r4, #24]
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	071a      	lsls	r2, r3, #28
 8003662:	d525      	bpl.n	80036b0 <__swbuf_r+0x68>
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	b31b      	cbz	r3, 80036b0 <__swbuf_r+0x68>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	6922      	ldr	r2, [r4, #16]
 800366c:	1a98      	subs	r0, r3, r2
 800366e:	6963      	ldr	r3, [r4, #20]
 8003670:	b2f6      	uxtb	r6, r6
 8003672:	4283      	cmp	r3, r0
 8003674:	4637      	mov	r7, r6
 8003676:	dc04      	bgt.n	8003682 <__swbuf_r+0x3a>
 8003678:	4621      	mov	r1, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f7ff ffbc 	bl	80035f8 <_fflush_r>
 8003680:	b9e0      	cbnz	r0, 80036bc <__swbuf_r+0x74>
 8003682:	68a3      	ldr	r3, [r4, #8]
 8003684:	3b01      	subs	r3, #1
 8003686:	60a3      	str	r3, [r4, #8]
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	6022      	str	r2, [r4, #0]
 800368e:	701e      	strb	r6, [r3, #0]
 8003690:	6962      	ldr	r2, [r4, #20]
 8003692:	1c43      	adds	r3, r0, #1
 8003694:	429a      	cmp	r2, r3
 8003696:	d004      	beq.n	80036a2 <__swbuf_r+0x5a>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	07db      	lsls	r3, r3, #31
 800369c:	d506      	bpl.n	80036ac <__swbuf_r+0x64>
 800369e:	2e0a      	cmp	r6, #10
 80036a0:	d104      	bne.n	80036ac <__swbuf_r+0x64>
 80036a2:	4621      	mov	r1, r4
 80036a4:	4628      	mov	r0, r5
 80036a6:	f7ff ffa7 	bl	80035f8 <_fflush_r>
 80036aa:	b938      	cbnz	r0, 80036bc <__swbuf_r+0x74>
 80036ac:	4638      	mov	r0, r7
 80036ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b0:	4621      	mov	r1, r4
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 f806 	bl	80036c4 <__swsetup_r>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d0d5      	beq.n	8003668 <__swbuf_r+0x20>
 80036bc:	f04f 37ff 	mov.w	r7, #4294967295
 80036c0:	e7f4      	b.n	80036ac <__swbuf_r+0x64>
	...

080036c4 <__swsetup_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <__swsetup_r+0xac>)
 80036c8:	4605      	mov	r5, r0
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	460c      	mov	r4, r1
 80036ce:	b118      	cbz	r0, 80036d8 <__swsetup_r+0x14>
 80036d0:	6a03      	ldr	r3, [r0, #32]
 80036d2:	b90b      	cbnz	r3, 80036d8 <__swsetup_r+0x14>
 80036d4:	f7ff fa36 	bl	8002b44 <__sinit>
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036de:	0718      	lsls	r0, r3, #28
 80036e0:	d422      	bmi.n	8003728 <__swsetup_r+0x64>
 80036e2:	06d9      	lsls	r1, r3, #27
 80036e4:	d407      	bmi.n	80036f6 <__swsetup_r+0x32>
 80036e6:	2309      	movs	r3, #9
 80036e8:	602b      	str	r3, [r5, #0]
 80036ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	e034      	b.n	8003760 <__swsetup_r+0x9c>
 80036f6:	0758      	lsls	r0, r3, #29
 80036f8:	d512      	bpl.n	8003720 <__swsetup_r+0x5c>
 80036fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036fc:	b141      	cbz	r1, 8003710 <__swsetup_r+0x4c>
 80036fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003702:	4299      	cmp	r1, r3
 8003704:	d002      	beq.n	800370c <__swsetup_r+0x48>
 8003706:	4628      	mov	r0, r5
 8003708:	f7ff fb24 	bl	8002d54 <_free_r>
 800370c:	2300      	movs	r3, #0
 800370e:	6363      	str	r3, [r4, #52]	; 0x34
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	2300      	movs	r3, #0
 800371a:	6063      	str	r3, [r4, #4]
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	b94b      	cbnz	r3, 8003740 <__swsetup_r+0x7c>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003736:	d003      	beq.n	8003740 <__swsetup_r+0x7c>
 8003738:	4621      	mov	r1, r4
 800373a:	4628      	mov	r0, r5
 800373c:	f000 f850 	bl	80037e0 <__smakebuf_r>
 8003740:	89a0      	ldrh	r0, [r4, #12]
 8003742:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003746:	f010 0301 	ands.w	r3, r0, #1
 800374a:	d00a      	beq.n	8003762 <__swsetup_r+0x9e>
 800374c:	2300      	movs	r3, #0
 800374e:	60a3      	str	r3, [r4, #8]
 8003750:	6963      	ldr	r3, [r4, #20]
 8003752:	425b      	negs	r3, r3
 8003754:	61a3      	str	r3, [r4, #24]
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	b943      	cbnz	r3, 800376c <__swsetup_r+0xa8>
 800375a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800375e:	d1c4      	bne.n	80036ea <__swsetup_r+0x26>
 8003760:	bd38      	pop	{r3, r4, r5, pc}
 8003762:	0781      	lsls	r1, r0, #30
 8003764:	bf58      	it	pl
 8003766:	6963      	ldrpl	r3, [r4, #20]
 8003768:	60a3      	str	r3, [r4, #8]
 800376a:	e7f4      	b.n	8003756 <__swsetup_r+0x92>
 800376c:	2000      	movs	r0, #0
 800376e:	e7f7      	b.n	8003760 <__swsetup_r+0x9c>
 8003770:	20000064 	.word	0x20000064

08003774 <_sbrk_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d06      	ldr	r5, [pc, #24]	; (8003790 <_sbrk_r+0x1c>)
 8003778:	2300      	movs	r3, #0
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	f7fd f94c 	bl	8000a1c <_sbrk>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_sbrk_r+0x1a>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_sbrk_r+0x1a>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	200006e0 	.word	0x200006e0

08003794 <__swhatbuf_r>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	460c      	mov	r4, r1
 8003798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800379c:	2900      	cmp	r1, #0
 800379e:	b096      	sub	sp, #88	; 0x58
 80037a0:	4615      	mov	r5, r2
 80037a2:	461e      	mov	r6, r3
 80037a4:	da0d      	bge.n	80037c2 <__swhatbuf_r+0x2e>
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	bf0c      	ite	eq
 80037b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80037b6:	2340      	movne	r3, #64	; 0x40
 80037b8:	2000      	movs	r0, #0
 80037ba:	6031      	str	r1, [r6, #0]
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	b016      	add	sp, #88	; 0x58
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	466a      	mov	r2, sp
 80037c4:	f000 f848 	bl	8003858 <_fstat_r>
 80037c8:	2800      	cmp	r0, #0
 80037ca:	dbec      	blt.n	80037a6 <__swhatbuf_r+0x12>
 80037cc:	9901      	ldr	r1, [sp, #4]
 80037ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80037d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80037d6:	4259      	negs	r1, r3
 80037d8:	4159      	adcs	r1, r3
 80037da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037de:	e7eb      	b.n	80037b8 <__swhatbuf_r+0x24>

080037e0 <__smakebuf_r>:
 80037e0:	898b      	ldrh	r3, [r1, #12]
 80037e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037e4:	079d      	lsls	r5, r3, #30
 80037e6:	4606      	mov	r6, r0
 80037e8:	460c      	mov	r4, r1
 80037ea:	d507      	bpl.n	80037fc <__smakebuf_r+0x1c>
 80037ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	6123      	str	r3, [r4, #16]
 80037f4:	2301      	movs	r3, #1
 80037f6:	6163      	str	r3, [r4, #20]
 80037f8:	b002      	add	sp, #8
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	ab01      	add	r3, sp, #4
 80037fe:	466a      	mov	r2, sp
 8003800:	f7ff ffc8 	bl	8003794 <__swhatbuf_r>
 8003804:	9900      	ldr	r1, [sp, #0]
 8003806:	4605      	mov	r5, r0
 8003808:	4630      	mov	r0, r6
 800380a:	f7ff fb0f 	bl	8002e2c <_malloc_r>
 800380e:	b948      	cbnz	r0, 8003824 <__smakebuf_r+0x44>
 8003810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003814:	059a      	lsls	r2, r3, #22
 8003816:	d4ef      	bmi.n	80037f8 <__smakebuf_r+0x18>
 8003818:	f023 0303 	bic.w	r3, r3, #3
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	e7e3      	b.n	80037ec <__smakebuf_r+0xc>
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	6020      	str	r0, [r4, #0]
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	9b00      	ldr	r3, [sp, #0]
 8003830:	6163      	str	r3, [r4, #20]
 8003832:	9b01      	ldr	r3, [sp, #4]
 8003834:	6120      	str	r0, [r4, #16]
 8003836:	b15b      	cbz	r3, 8003850 <__smakebuf_r+0x70>
 8003838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f81d 	bl	800387c <_isatty_r>
 8003842:	b128      	cbz	r0, 8003850 <__smakebuf_r+0x70>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	431d      	orrs	r5, r3
 8003854:	81a5      	strh	r5, [r4, #12]
 8003856:	e7cf      	b.n	80037f8 <__smakebuf_r+0x18>

08003858 <_fstat_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4d07      	ldr	r5, [pc, #28]	; (8003878 <_fstat_r+0x20>)
 800385c:	2300      	movs	r3, #0
 800385e:	4604      	mov	r4, r0
 8003860:	4608      	mov	r0, r1
 8003862:	4611      	mov	r1, r2
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	f7fd f8b0 	bl	80009ca <_fstat>
 800386a:	1c43      	adds	r3, r0, #1
 800386c:	d102      	bne.n	8003874 <_fstat_r+0x1c>
 800386e:	682b      	ldr	r3, [r5, #0]
 8003870:	b103      	cbz	r3, 8003874 <_fstat_r+0x1c>
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	bd38      	pop	{r3, r4, r5, pc}
 8003876:	bf00      	nop
 8003878:	200006e0 	.word	0x200006e0

0800387c <_isatty_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4d06      	ldr	r5, [pc, #24]	; (8003898 <_isatty_r+0x1c>)
 8003880:	2300      	movs	r3, #0
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	602b      	str	r3, [r5, #0]
 8003888:	f7fd f8af 	bl	80009ea <_isatty>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_isatty_r+0x1a>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_isatty_r+0x1a>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	200006e0 	.word	0x200006e0

0800389c <_init>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr

080038a8 <_fini>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr
