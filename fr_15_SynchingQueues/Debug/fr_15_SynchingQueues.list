
fr_15_SynchingQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e4c  08005e4c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e54  08005e54  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b54  2000006c  08005ec8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc0  08005ec8  00024bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165ed  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003348  00000000  00000000  000366cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00039a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdb  00000000  00000000  0003ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000048ed  00000000  00000000  0003be63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016405  00000000  00000000  00040750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099e30  00000000  00000000  00056b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ddc  00000000  00000000  000f0988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f6764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d6c 	.word	0x08005d6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005d6c 	.word	0x08005d6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
QueueHandle_t yearQueue;



int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8

  HAL_Init();
 8000582:	f000 fb6f 	bl	8000c64 <HAL_Init>

  SystemClock_Config();
 8000586:	f000 f8cd 	bl	8000724 <SystemClock_Config>


  MX_GPIO_Init();
 800058a:	f000 f953 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f927 	bl	80007e0 <MX_USART2_UART_Init>

  yearQueue = xQueueCreate(5 , sizeof(int32_t));
 8000592:	2200      	movs	r2, #0
 8000594:	2104      	movs	r1, #4
 8000596:	2005      	movs	r0, #5
 8000598:	f002 f9b0 	bl	80028fc <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <main+0x68>)
 80005a0:	6013      	str	r3, [r2, #0]

  // Create a receiver task of a higher priority

  xTaskCreate(ReceiverTask,
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <main+0x6c>)
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2302      	movs	r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	490f      	ldr	r1, [pc, #60]	; (80005ec <main+0x70>)
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x74>)
 80005b2:	f002 fe46 	bl	8003242 <xTaskCreate>
		  &sender_handle);

  // Create two sender task of the same priority
  // Lower than the receiver task priority

  xTaskCreate(SenderTask1,
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x78>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	; 0x64
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <main+0x7c>)
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <main+0x80>)
 80005c6:	f002 fe3c 	bl	8003242 <xTaskCreate>
		  100,
		  NULL,
		  1,
		  &receiver_handle);

  xTaskCreate(SenderTask2,
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x78>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2264      	movs	r2, #100	; 0x64
 80005d6:	4908      	ldr	r1, [pc, #32]	; (80005f8 <main+0x7c>)
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x84>)
 80005da:	f002 fe32 	bl	8003242 <xTaskCreate>
		  1,
		  &receiver_handle);



  vTaskStartScheduler();
 80005de:	f002 ff75 	bl	80034cc <vTaskStartScheduler>


  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x66>
 80005e4:	200000d4 	.word	0x200000d4
 80005e8:	200000cc 	.word	0x200000cc
 80005ec:	08005d84 	.word	0x08005d84
 80005f0:	080006a5 	.word	0x080006a5
 80005f4:	200000d0 	.word	0x200000d0
 80005f8:	08005d94 	.word	0x08005d94
 80005fc:	08000605 	.word	0x08000605
 8000600:	08000655 	.word	0x08000655

08000604 <SenderTask1>:
  }

}


void SenderTask1(void *pvParameters){
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	int32_t value_to_send = 2050;
 800060c:	f640 0302 	movw	r3, #2050	; 0x802
 8000610:	60fb      	str	r3, [r7, #12]
	BaseType_t qStatus;

	while(1){
		qStatus = xQueueSend(yearQueue, &value_to_send, 0);
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <SenderTask1+0x44>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f107 010c 	add.w	r1, r7, #12
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	f002 f9cb 	bl	80029b8 <xQueueGenericSend>
 8000622:	6138      	str	r0, [r7, #16]

		if(qStatus != pdPASS) {
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d002      	beq.n	8000630 <SenderTask1+0x2c>
			printf("Error: Data could not be sent... \r\n");
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <SenderTask1+0x48>)
 800062c:	f004 fd26 	bl	800507c <puts>
		}

		for(int i = 0; i < 100000; i++) {}
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e002      	b.n	800063c <SenderTask1+0x38>
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <SenderTask1+0x4c>)
 8000640:	4293      	cmp	r3, r2
 8000642:	ddf8      	ble.n	8000636 <SenderTask1+0x32>
		qStatus = xQueueSend(yearQueue, &value_to_send, 0);
 8000644:	e7e5      	b.n	8000612 <SenderTask1+0xe>
 8000646:	bf00      	nop
 8000648:	200000d4 	.word	0x200000d4
 800064c:	08005da4 	.word	0x08005da4
 8000650:	0001869f 	.word	0x0001869f

08000654 <SenderTask2>:
	}
}

void SenderTask2(void *pvParameters){
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

	int32_t value_to_send = 5050;
 800065c:	f241 33ba 	movw	r3, #5050	; 0x13ba
 8000660:	60fb      	str	r3, [r7, #12]
	BaseType_t qStatus;

	while(1){
		qStatus = xQueueSend(yearQueue, &value_to_send, 0);
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <SenderTask2+0x44>)
 8000664:	6818      	ldr	r0, [r3, #0]
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	2300      	movs	r3, #0
 800066c:	2200      	movs	r2, #0
 800066e:	f002 f9a3 	bl	80029b8 <xQueueGenericSend>
 8000672:	6138      	str	r0, [r7, #16]

		if(qStatus != pdPASS) {
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d002      	beq.n	8000680 <SenderTask2+0x2c>
			printf("Error: Data could not be sent... \r\n");
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <SenderTask2+0x48>)
 800067c:	f004 fcfe 	bl	800507c <puts>
		}

		for(int i = 0; i < 100000; i++) {}
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e002      	b.n	800068c <SenderTask2+0x38>
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <SenderTask2+0x4c>)
 8000690:	4293      	cmp	r3, r2
 8000692:	ddf8      	ble.n	8000686 <SenderTask2+0x32>
		qStatus = xQueueSend(yearQueue, &value_to_send, 0);
 8000694:	e7e5      	b.n	8000662 <SenderTask2+0xe>
 8000696:	bf00      	nop
 8000698:	200000d4 	.word	0x200000d4
 800069c:	08005da4 	.word	0x08005da4
 80006a0:	0001869f 	.word	0x0001869f

080006a4 <ReceiverTask>:
	}
}

void ReceiverTask(void *pvParameters){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	int32_t value_received;
	const TickType_t wait_time = pdMS_TO_TICKS(100);
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	617b      	str	r3, [r7, #20]
	BaseType_t qStatus;
	while(1){

		qStatus = xQueueReceive(yearQueue, &value_received, wait_time);
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <ReceiverTask+0x30>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f107 010c 	add.w	r1, r7, #12
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fb16 	bl	8002cec <xQueueReceive>
 80006c0:	6138      	str	r0, [r7, #16]
		if(qStatus == pdPASS) {
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1f3      	bne.n	80006b0 <ReceiverTask+0xc>
			printf("The value received id: %ld...\r\n", value_received);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <ReceiverTask+0x34>)
 80006ce:	f004 fc6f 	bl	8004fb0 <iprintf>
		qStatus = xQueueReceive(yearQueue, &value_received, wait_time);
 80006d2:	e7ed      	b.n	80006b0 <ReceiverTask+0xc>
 80006d4:	200000d4 	.word	0x200000d4
 80006d8:	08005dc8 	.word	0x08005dc8

080006dc <uart2_wrtie>:
		}

	}
}

int uart2_wrtie(int ch) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR &0x0080)) {}
 80006e4:	bf00      	nop
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <uart2_wrtie+0x2c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <uart2_wrtie+0xa>
	USART2->DR = (ch & 0xFF);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <uart2_wrtie+0x2c>)
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	6053      	str	r3, [r2, #4]

	return ch;
 80006fa:	687b      	ldr	r3, [r7, #4]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40004400 	.word	0x40004400

0800070c <__io_putchar>:


int __io_putchar(int ch){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t *)&ch,1,0xFFFF);
	uart2_wrtie(ch);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ffe1 	bl	80006dc <uart2_wrtie>
	return ch;
 800071a:	687b      	ldr	r3, [r7, #4]

//	for (uint32_t i = 0; i < 1000; i++) {
//	        __NOP();
//	}
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fd82 	bl	800523c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xb4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xb4>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xb4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <SystemClock_Config+0xb8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <SystemClock_Config+0xb8>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <SystemClock_Config+0xb8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fd0d 	bl	80011b4 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007a0:	f000 f874 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 ff70 	bl	80016a4 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ca:	f000 f85f 	bl	800088c <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	; 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f001 fbd6 	bl	8001fc8 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f833 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000088 	.word	0x20000088
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_GPIO_Init+0x30>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <MX_GPIO_Init+0x30>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_GPIO_Init+0x30>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d101      	bne.n	800087e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087a:	f000 fa15 	bl	8000ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010000 	.word	0x40010000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_MspInit+0x54>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <HAL_MspInit+0x54>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x54>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_MspInit+0x54>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_MspInit+0x54>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_MspInit+0x54>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	f06f 0001 	mvn.w	r0, #1
 80008de:	f000 fabb 	bl	8000e58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	; (8000974 <HAL_UART_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12b      	bne.n	800096a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x88>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800094a:	230c      	movs	r3, #12
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_UART_MspInit+0x8c>)
 8000966:	f000 faa1 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40004400 	.word	0x40004400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <HAL_InitTick+0xd0>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	4a2d      	ldr	r2, [pc, #180]	; (8000a50 <HAL_InitTick+0xd0>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6453      	str	r3, [r2, #68]	; 0x44
 80009a0:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <HAL_InitTick+0xd0>)
 80009a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ac:	f107 020c 	add.w	r2, r7, #12
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f854 	bl	8001a64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009bc:	f001 f83e 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 80009c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <HAL_InitTick+0xd4>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	0c9b      	lsrs	r3, r3, #18
 80009cc:	3b01      	subs	r3, #1
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_InitTick+0xd8>)
 80009d2:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <HAL_InitTick+0xdc>)
 80009d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <HAL_InitTick+0xd8>)
 80009d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <HAL_InitTick+0xd8>)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <HAL_InitTick+0xd8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_InitTick+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_InitTick+0xd8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <HAL_InitTick+0xd8>)
 80009f8:	f001 f866 	bl	8001ac8 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d11b      	bne.n	8000a42 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a0a:	4813      	ldr	r0, [pc, #76]	; (8000a58 <HAL_InitTick+0xd8>)
 8000a0c:	f001 f8b6 	bl	8001b7c <HAL_TIM_Base_Start_IT>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d111      	bne.n	8000a42 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a1e:	2019      	movs	r0, #25
 8000a20:	f000 fa36 	bl	8000e90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d808      	bhi.n	8000a3c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	2019      	movs	r0, #25
 8000a30:	f000 fa12 	bl	8000e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_InitTick+0xe0>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	e002      	b.n	8000a42 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3730      	adds	r7, #48	; 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	200000d8 	.word	0x200000d8
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	20000004 	.word	0x20000004

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a96:	f001 f8d3 	bl	8001c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000d8 	.word	0x200000d8

08000aa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4601      	mov	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
  }

  return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e009      	b.n	8000b04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fe07 	bl	800070c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf1      	blt.n	8000af0 <_write+0x12>
  }
  return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_close>:

int _close(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_isatty>:

int _isatty(int file)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f004 fb92 	bl	80052d8 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20020000 	.word	0x20020000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000120 	.word	0x20000120
 8000be8:	20004bc0 	.word	0x20004bc0

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff ffd7 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f004 fb51 	bl	80052e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc9b 	bl	800057c <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c54:	08005e5c 	.word	0x08005e5c
  ldr r2, =_sbss
 8000c58:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c5c:	20004bc0 	.word	0x20004bc0

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f8d8 	bl	8000e42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	200f      	movs	r0, #15
 8000c94:	f7ff fe74 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fdfe 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000124 	.word	0x20000124

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000124 	.word	0x20000124

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff4c 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6a:	f7ff ff61 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f7ff ffb1 	bl	8000ddc <NVIC_EncodePriority>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff80 	bl	8000d88 <__NVIC_SetPriority>
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff54 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e159      	b.n	800117c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8148 	bne.w	8001176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d005      	beq.n	8000efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d017      	beq.n	8000f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d123      	bne.n	8000ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	69b9      	ldr	r1, [r7, #24]
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0203 	and.w	r2, r3, #3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a2 	beq.w	8001176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a56      	ldr	r2, [pc, #344]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a52      	ldr	r2, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_GPIO_Init+0x2f0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x202>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <HAL_GPIO_Init+0x2f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x1fe>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a47      	ldr	r2, [pc, #284]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x1fa>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a46      	ldr	r2, [pc, #280]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x1f6>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a45      	ldr	r2, [pc, #276]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x1f2>
 800109a:	2304      	movs	r3, #4
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 800109e:	2307      	movs	r3, #7
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f aea2 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e267      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d075      	beq.n	80012be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d00c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d112      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011f6:	d10b      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d05b      	beq.n	80012bc <HAL_RCC_OscConfig+0x108>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d157      	bne.n	80012bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e242      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d106      	bne.n	8001228 <HAL_RCC_OscConfig+0x74>
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a75      	ldr	r2, [pc, #468]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e01d      	b.n	8001264 <HAL_RCC_OscConfig+0xb0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x98>
 8001232:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6f      	ldr	r2, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0xb0>
 800124c:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a68      	ldr	r2, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800125e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fd30 	bl	8000cd0 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fd2c 	bl	8000cd0 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e207      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0xc0>
 8001292:	e014      	b.n	80012be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fd1c 	bl	8000cd0 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fd18 	bl	8000cd0 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1f3      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0xe8>
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d063      	beq.n	8001392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d11c      	bne.n	800131c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d116      	bne.n	800131c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x152>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e1c7      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	e03a      	b.n	8001392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_RCC_OscConfig+0x244>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132a:	f7ff fcd1 	bl	8000cd0 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fccd 	bl	8000cd0 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1a8      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4925      	ldr	r1, [pc, #148]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_OscConfig+0x244>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fcb0 	bl	8000cd0 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fcac 	bl	8000cd0 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e187      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d036      	beq.n	800140c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d016      	beq.n	80013d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_RCC_OscConfig+0x248>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ac:	f7ff fc90 	bl	8000cd0 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc8c 	bl	8000cd0 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e167      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x200>
 80013d2:	e01b      	b.n	800140c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x248>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fc79 	bl	8000cd0 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	e00e      	b.n	8001400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc75 	bl	8000cd0 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d907      	bls.n	8001400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e150      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	42470000 	.word	0x42470000
 80013fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ea      	bne.n	80013e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8097 	beq.w	8001548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a7c      	ldr	r2, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b77      	ldr	r3, [pc, #476]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a73      	ldr	r2, [pc, #460]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff fc35 	bl	8000cd0 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff fc31 	bl	8000cd0 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e10c      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x2ea>
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a63      	ldr	r2, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	e01c      	b.n	80014d8 <HAL_RCC_OscConfig+0x324>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x30c>
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a5b      	ldr	r2, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0x324>
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a54      	ldr	r2, [pc, #336]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d015      	beq.n	800150c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fbf6 	bl	8000cd0 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff fbf2 	bl	8000cd0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0cb      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fe:	4b49      	ldr	r3, [pc, #292]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ee      	beq.n	80014e8 <HAL_RCC_OscConfig+0x334>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff fbe0 	bl	8000cd0 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fbdc 	bl	8000cd0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0b5      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ee      	bne.n	8001514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a38      	ldr	r2, [pc, #224]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a1 	beq.w	8001694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b08      	cmp	r3, #8
 800155c:	d05c      	beq.n	8001618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d141      	bne.n	80015ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_RCC_OscConfig+0x478>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fbb0 	bl	8000cd0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fbac 	bl	8000cd0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e087      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	3b01      	subs	r3, #1
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x478>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb85 	bl	8000cd0 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb81 	bl	8000cd0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e05c      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x416>
 80015e8:	e054      	b.n	8001694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb6e 	bl	8000cd0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb6a 	bl	8000cd0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e045      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x444>
 8001616:	e03d      	b.n	8001694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e038      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000
 800162c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x4ec>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d028      	beq.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d121      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d11a      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	4293      	cmp	r3, r2
 800166a:	d111      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	3b01      	subs	r3, #1
 800167a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0cc      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d90c      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0b8      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f8:	4b59      	ldr	r3, [pc, #356]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	494d      	ldr	r1, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d044      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d119      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e07f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d003      	beq.n	8001762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175e:	2b03      	cmp	r3, #3
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e067      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4934      	ldr	r1, [pc, #208]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff fa9c 	bl	8000cd0 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa98 	bl	8000cd0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e04f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d20c      	bcs.n	80017ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e032      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4916      	ldr	r1, [pc, #88]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	490e      	ldr	r1, [pc, #56]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182a:	f000 f821 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 800182e:	4602      	mov	r2, r0
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	5ccb      	ldrb	r3, [r1, r3]
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f898 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00
 8001860:	40023800 	.word	0x40023800
 8001864:	08005e00 	.word	0x08005e00
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001874:	b090      	sub	sp, #64	; 0x40
 8001876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
 800187c:	2300      	movs	r3, #0
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001888:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d00d      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001894:	2b08      	cmp	r3, #8
 8001896:	f200 80a1 	bhi.w	80019dc <HAL_RCC_GetSysClockFreq+0x16c>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x34>
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x3a>
 80018a2:	e09b      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018a8:	e09b      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018aa:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ae:	e098      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b0:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ba:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d028      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c6:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	2200      	movs	r2, #0
 80018ce:	623b      	str	r3, [r7, #32]
 80018d0:	627a      	str	r2, [r7, #36]	; 0x24
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018d8:	2100      	movs	r1, #0
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018dc:	fb03 f201 	mul.w	r2, r3, r1
 80018e0:	2300      	movs	r3, #0
 80018e2:	fb00 f303 	mul.w	r3, r0, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ea:	fba0 1202 	umull	r1, r2, r0, r2
 80018ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018f0:	460a      	mov	r2, r1
 80018f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f6:	4413      	add	r3, r2
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	2200      	movs	r2, #0
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	61fa      	str	r2, [r7, #28]
 8001902:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001906:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800190a:	f7fe fcb9 	bl	8000280 <__aeabi_uldivmod>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4613      	mov	r3, r2
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001916:	e053      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	2200      	movs	r2, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	617a      	str	r2, [r7, #20]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800192a:	f04f 0b00 	mov.w	fp, #0
 800192e:	4652      	mov	r2, sl
 8001930:	465b      	mov	r3, fp
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0159      	lsls	r1, r3, #5
 800193c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001940:	0150      	lsls	r0, r2, #5
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	ebb2 080a 	subs.w	r8, r2, sl
 800194a:	eb63 090b 	sbc.w	r9, r3, fp
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800195a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800195e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001962:	ebb2 0408 	subs.w	r4, r2, r8
 8001966:	eb63 0509 	sbc.w	r5, r3, r9
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	00eb      	lsls	r3, r5, #3
 8001974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001978:	00e2      	lsls	r2, r4, #3
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
 800197e:	eb14 030a 	adds.w	r3, r4, sl
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	eb45 030b 	adc.w	r3, r5, fp
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001996:	4629      	mov	r1, r5
 8001998:	028b      	lsls	r3, r1, #10
 800199a:	4621      	mov	r1, r4
 800199c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a0:	4621      	mov	r1, r4
 80019a2:	028a      	lsls	r2, r1, #10
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019aa:	2200      	movs	r2, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	60fa      	str	r2, [r7, #12]
 80019b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b4:	f7fe fc64 	bl	8000280 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4613      	mov	r3, r2
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019da:	e002      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3740      	adds	r7, #64	; 0x40
 80019e8:	46bd      	mov	sp, r7
 80019ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	00f42400 	.word	0x00f42400
 80019f8:	017d7840 	.word	0x017d7840

080019fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a18:	f7ff fff0 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0a9b      	lsrs	r3, r3, #10
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08005e10 	.word	0x08005e10

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a40:	f7ff ffdc 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	0b5b      	lsrs	r3, r3, #13
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08005e10 	.word	0x08005e10

08001a64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	220f      	movs	r2, #15
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_RCC_GetClockConfig+0x60>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0207 	and.w	r2, r3, #7
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e041      	b.n	8001b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f839 	bl	8001b66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 f9ca 	bl	8001ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d001      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e044      	b.n	8001c1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_TIM_Base_Start_IT+0xb0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d018      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbe:	d013      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00e      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d009      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d004      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_TIM_Base_Start_IT+0xc0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d111      	bne.n	8001c0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d010      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0a:	e007      	b.n	8001c1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	40014000 	.word	0x40014000

08001c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0202 	mvn.w	r2, #2
 8001c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8ee 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8e0 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f8f1 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0204 	mvn.w	r2, #4
 8001cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8c4 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8b6 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f8c7 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0208 	mvn.w	r2, #8
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f89a 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f88c 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f89d 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d122      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d11b      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0210 	mvn.w	r2, #16
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f870 	bl	8001e64 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f862 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f873 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0201 	mvn.w	r2, #1
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fd52 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dce:	2b80      	cmp	r3, #128	; 0x80
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b80      	cmp	r3, #128	; 0x80
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8e2 	bl	8001fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfa:	2b40      	cmp	r3, #64	; 0x40
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e08:	2b40      	cmp	r3, #64	; 0x40
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f838 	bl	8001e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0220 	mvn.w	r2, #32
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8ac 	bl	8001fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a34      	ldr	r2, [pc, #208]	; (8001f84 <TIM_Base_SetConfig+0xe4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00f      	beq.n	8001ed8 <TIM_Base_SetConfig+0x38>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d00b      	beq.n	8001ed8 <TIM_Base_SetConfig+0x38>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <TIM_Base_SetConfig+0xe8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <TIM_Base_SetConfig+0x38>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a30      	ldr	r2, [pc, #192]	; (8001f8c <TIM_Base_SetConfig+0xec>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <TIM_Base_SetConfig+0x38>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <TIM_Base_SetConfig+0xf0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d108      	bne.n	8001eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <TIM_Base_SetConfig+0xe4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01b      	beq.n	8001f2a <TIM_Base_SetConfig+0x8a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d017      	beq.n	8001f2a <TIM_Base_SetConfig+0x8a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <TIM_Base_SetConfig+0xe8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <TIM_Base_SetConfig+0x8a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <TIM_Base_SetConfig+0xec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00f      	beq.n	8001f2a <TIM_Base_SetConfig+0x8a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <TIM_Base_SetConfig+0xf0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0x8a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <TIM_Base_SetConfig+0xf4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0x8a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <TIM_Base_SetConfig+0xf8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0x8a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <TIM_Base_SetConfig+0xfc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <TIM_Base_SetConfig+0xe4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d103      	bne.n	8001f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	615a      	str	r2, [r3, #20]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800
 8001f90:	40000c00 	.word	0x40000c00
 8001f94:	40014000 	.word	0x40014000
 8001f98:	40014400 	.word	0x40014400
 8001f9c:	40014800 	.word	0x40014800

08001fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e03f      	b.n	800205a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fc7e 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	; 0x24
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800200a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f829 	bl	8002064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002068:	b0c0      	sub	sp, #256	; 0x100
 800206a:	af00      	add	r7, sp, #0
 800206c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	68d9      	ldr	r1, [r3, #12]
 8002082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	ea40 0301 	orr.w	r3, r0, r1
 800208c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	431a      	orrs	r2, r3
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020bc:	f021 010c 	bic.w	r1, r1, #12
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020ca:	430b      	orrs	r3, r1
 80020cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020de:	6999      	ldr	r1, [r3, #24]
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	ea40 0301 	orr.w	r3, r0, r1
 80020ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b8f      	ldr	r3, [pc, #572]	; (8002330 <UART_SetConfig+0x2cc>)
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d005      	beq.n	8002104 <UART_SetConfig+0xa0>
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b8d      	ldr	r3, [pc, #564]	; (8002334 <UART_SetConfig+0x2d0>)
 8002100:	429a      	cmp	r2, r3
 8002102:	d104      	bne.n	800210e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002104:	f7ff fc9a 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8002108:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800210c:	e003      	b.n	8002116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800210e:	f7ff fc81 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8002112:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002120:	f040 810c 	bne.w	800233c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800212e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	1891      	adds	r1, r2, r2
 800213c:	65b9      	str	r1, [r7, #88]	; 0x58
 800213e:	415b      	adcs	r3, r3
 8002140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002146:	4621      	mov	r1, r4
 8002148:	eb12 0801 	adds.w	r8, r2, r1
 800214c:	4629      	mov	r1, r5
 800214e:	eb43 0901 	adc.w	r9, r3, r1
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800215e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002166:	4690      	mov	r8, r2
 8002168:	4699      	mov	r9, r3
 800216a:	4623      	mov	r3, r4
 800216c:	eb18 0303 	adds.w	r3, r8, r3
 8002170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002174:	462b      	mov	r3, r5
 8002176:	eb49 0303 	adc.w	r3, r9, r3
 800217a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800217e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800218a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800218e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002192:	460b      	mov	r3, r1
 8002194:	18db      	adds	r3, r3, r3
 8002196:	653b      	str	r3, [r7, #80]	; 0x50
 8002198:	4613      	mov	r3, r2
 800219a:	eb42 0303 	adc.w	r3, r2, r3
 800219e:	657b      	str	r3, [r7, #84]	; 0x54
 80021a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021a8:	f7fe f86a 	bl	8000280 <__aeabi_uldivmod>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4b61      	ldr	r3, [pc, #388]	; (8002338 <UART_SetConfig+0x2d4>)
 80021b2:	fba3 2302 	umull	r2, r3, r3, r2
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	011c      	lsls	r4, r3, #4
 80021ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021cc:	4642      	mov	r2, r8
 80021ce:	464b      	mov	r3, r9
 80021d0:	1891      	adds	r1, r2, r2
 80021d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80021d4:	415b      	adcs	r3, r3
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021dc:	4641      	mov	r1, r8
 80021de:	eb12 0a01 	adds.w	sl, r2, r1
 80021e2:	4649      	mov	r1, r9
 80021e4:	eb43 0b01 	adc.w	fp, r3, r1
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021fc:	4692      	mov	sl, r2
 80021fe:	469b      	mov	fp, r3
 8002200:	4643      	mov	r3, r8
 8002202:	eb1a 0303 	adds.w	r3, sl, r3
 8002206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800220a:	464b      	mov	r3, r9
 800220c:	eb4b 0303 	adc.w	r3, fp, r3
 8002210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002220:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002228:	460b      	mov	r3, r1
 800222a:	18db      	adds	r3, r3, r3
 800222c:	643b      	str	r3, [r7, #64]	; 0x40
 800222e:	4613      	mov	r3, r2
 8002230:	eb42 0303 	adc.w	r3, r2, r3
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
 8002236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800223a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800223e:	f7fe f81f 	bl	8000280 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4611      	mov	r1, r2
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <UART_SetConfig+0x2d4>)
 800224a:	fba3 2301 	umull	r2, r3, r3, r1
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2264      	movs	r2, #100	; 0x64
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	1acb      	subs	r3, r1, r3
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <UART_SetConfig+0x2d4>)
 8002260:	fba3 2302 	umull	r2, r3, r3, r2
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800226c:	441c      	add	r4, r3
 800226e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002272:	2200      	movs	r2, #0
 8002274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002278:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800227c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002280:	4642      	mov	r2, r8
 8002282:	464b      	mov	r3, r9
 8002284:	1891      	adds	r1, r2, r2
 8002286:	63b9      	str	r1, [r7, #56]	; 0x38
 8002288:	415b      	adcs	r3, r3
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002290:	4641      	mov	r1, r8
 8002292:	1851      	adds	r1, r2, r1
 8002294:	6339      	str	r1, [r7, #48]	; 0x30
 8002296:	4649      	mov	r1, r9
 8002298:	414b      	adcs	r3, r1
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022a8:	4659      	mov	r1, fp
 80022aa:	00cb      	lsls	r3, r1, #3
 80022ac:	4651      	mov	r1, sl
 80022ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022b2:	4651      	mov	r1, sl
 80022b4:	00ca      	lsls	r2, r1, #3
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	4642      	mov	r2, r8
 80022be:	189b      	adds	r3, r3, r2
 80022c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022c4:	464b      	mov	r3, r9
 80022c6:	460a      	mov	r2, r1
 80022c8:	eb42 0303 	adc.w	r3, r2, r3
 80022cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022e4:	460b      	mov	r3, r1
 80022e6:	18db      	adds	r3, r3, r3
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ea:	4613      	mov	r3, r2
 80022ec:	eb42 0303 	adc.w	r3, r2, r3
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022fa:	f7fd ffc1 	bl	8000280 <__aeabi_uldivmod>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <UART_SetConfig+0x2d4>)
 8002304:	fba3 1302 	umull	r1, r3, r3, r2
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	2164      	movs	r1, #100	; 0x64
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	3332      	adds	r3, #50	; 0x32
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <UART_SetConfig+0x2d4>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4422      	add	r2, r4
 800232a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800232c:	e106      	b.n	800253c <UART_SetConfig+0x4d8>
 800232e:	bf00      	nop
 8002330:	40011000 	.word	0x40011000
 8002334:	40011400 	.word	0x40011400
 8002338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800233c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002340:	2200      	movs	r2, #0
 8002342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002346:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800234a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800234e:	4642      	mov	r2, r8
 8002350:	464b      	mov	r3, r9
 8002352:	1891      	adds	r1, r2, r2
 8002354:	6239      	str	r1, [r7, #32]
 8002356:	415b      	adcs	r3, r3
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800235e:	4641      	mov	r1, r8
 8002360:	1854      	adds	r4, r2, r1
 8002362:	4649      	mov	r1, r9
 8002364:	eb43 0501 	adc.w	r5, r3, r1
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	00eb      	lsls	r3, r5, #3
 8002372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002376:	00e2      	lsls	r2, r4, #3
 8002378:	4614      	mov	r4, r2
 800237a:	461d      	mov	r5, r3
 800237c:	4643      	mov	r3, r8
 800237e:	18e3      	adds	r3, r4, r3
 8002380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002384:	464b      	mov	r3, r9
 8002386:	eb45 0303 	adc.w	r3, r5, r3
 800238a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800238e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800239a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023aa:	4629      	mov	r1, r5
 80023ac:	008b      	lsls	r3, r1, #2
 80023ae:	4621      	mov	r1, r4
 80023b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023b4:	4621      	mov	r1, r4
 80023b6:	008a      	lsls	r2, r1, #2
 80023b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023bc:	f7fd ff60 	bl	8000280 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4b60      	ldr	r3, [pc, #384]	; (8002548 <UART_SetConfig+0x4e4>)
 80023c6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	011c      	lsls	r4, r3, #4
 80023ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023d2:	2200      	movs	r2, #0
 80023d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023e0:	4642      	mov	r2, r8
 80023e2:	464b      	mov	r3, r9
 80023e4:	1891      	adds	r1, r2, r2
 80023e6:	61b9      	str	r1, [r7, #24]
 80023e8:	415b      	adcs	r3, r3
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f0:	4641      	mov	r1, r8
 80023f2:	1851      	adds	r1, r2, r1
 80023f4:	6139      	str	r1, [r7, #16]
 80023f6:	4649      	mov	r1, r9
 80023f8:	414b      	adcs	r3, r1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002408:	4659      	mov	r1, fp
 800240a:	00cb      	lsls	r3, r1, #3
 800240c:	4651      	mov	r1, sl
 800240e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002412:	4651      	mov	r1, sl
 8002414:	00ca      	lsls	r2, r1, #3
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	4603      	mov	r3, r0
 800241c:	4642      	mov	r2, r8
 800241e:	189b      	adds	r3, r3, r2
 8002420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002424:	464b      	mov	r3, r9
 8002426:	460a      	mov	r2, r1
 8002428:	eb42 0303 	adc.w	r3, r2, r3
 800242c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	67bb      	str	r3, [r7, #120]	; 0x78
 800243a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002448:	4649      	mov	r1, r9
 800244a:	008b      	lsls	r3, r1, #2
 800244c:	4641      	mov	r1, r8
 800244e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002452:	4641      	mov	r1, r8
 8002454:	008a      	lsls	r2, r1, #2
 8002456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800245a:	f7fd ff11 	bl	8000280 <__aeabi_uldivmod>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4611      	mov	r1, r2
 8002464:	4b38      	ldr	r3, [pc, #224]	; (8002548 <UART_SetConfig+0x4e4>)
 8002466:	fba3 2301 	umull	r2, r3, r3, r1
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2264      	movs	r2, #100	; 0x64
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	1acb      	subs	r3, r1, r3
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	3332      	adds	r3, #50	; 0x32
 8002478:	4a33      	ldr	r2, [pc, #204]	; (8002548 <UART_SetConfig+0x4e4>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002484:	441c      	add	r4, r3
 8002486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800248a:	2200      	movs	r2, #0
 800248c:	673b      	str	r3, [r7, #112]	; 0x70
 800248e:	677a      	str	r2, [r7, #116]	; 0x74
 8002490:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002494:	4642      	mov	r2, r8
 8002496:	464b      	mov	r3, r9
 8002498:	1891      	adds	r1, r2, r2
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	415b      	adcs	r3, r3
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024a4:	4641      	mov	r1, r8
 80024a6:	1851      	adds	r1, r2, r1
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	4649      	mov	r1, r9
 80024ac:	414b      	adcs	r3, r1
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024bc:	4659      	mov	r1, fp
 80024be:	00cb      	lsls	r3, r1, #3
 80024c0:	4651      	mov	r1, sl
 80024c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024c6:	4651      	mov	r1, sl
 80024c8:	00ca      	lsls	r2, r1, #3
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	4642      	mov	r2, r8
 80024d2:	189b      	adds	r3, r3, r2
 80024d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024d6:	464b      	mov	r3, r9
 80024d8:	460a      	mov	r2, r1
 80024da:	eb42 0303 	adc.w	r3, r2, r3
 80024de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
 80024ea:	667a      	str	r2, [r7, #100]	; 0x64
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024f8:	4649      	mov	r1, r9
 80024fa:	008b      	lsls	r3, r1, #2
 80024fc:	4641      	mov	r1, r8
 80024fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002502:	4641      	mov	r1, r8
 8002504:	008a      	lsls	r2, r1, #2
 8002506:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800250a:	f7fd feb9 	bl	8000280 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <UART_SetConfig+0x4e4>)
 8002514:	fba3 1302 	umull	r1, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	2164      	movs	r1, #100	; 0x64
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	3332      	adds	r3, #50	; 0x32
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <UART_SetConfig+0x4e4>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 020f 	and.w	r2, r3, #15
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4422      	add	r2, r4
 800253a:	609a      	str	r2, [r3, #8]
}
 800253c:	bf00      	nop
 800253e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002542:	46bd      	mov	sp, r7
 8002544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002548:	51eb851f 	.word	0x51eb851f

0800254c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SysTick_Handler+0x1c>)
 8002552:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002554:	f001 fc02 	bl	8003d5c <xTaskGetSchedulerState>
 8002558:	4603      	mov	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800255e:	f002 f9eb 	bl	8004938 <xPortSysTickHandler>
  }
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000e010 	.word	0xe000e010

0800256c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <vApplicationGetIdleTaskMemory+0x2c>)
 800257c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <vApplicationGetIdleTaskMemory+0x30>)
 8002582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000128 	.word	0x20000128
 800259c:	20000184 	.word	0x20000184

080025a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <vApplicationGetTimerTaskMemory+0x2c>)
 80025b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <vApplicationGetTimerTaskMemory+0x30>)
 80025b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	20000384 	.word	0x20000384
 80025d0:	200003e0 	.word	0x200003e0

080025d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f103 0208 	add.w	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f103 0208 	add.w	r2, r3, #8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f103 0208 	add.w	r2, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d103      	bne.n	8002696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e00c      	b.n	80026b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3308      	adds	r3, #8
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e002      	b.n	80026a4 <vListInsert+0x2e>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d2f6      	bcs.n	800269e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	601a      	str	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6892      	ldr	r2, [r2, #8]
 80026fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6852      	ldr	r2, [r2, #4]
 8002708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	d103      	bne.n	800271c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002766:	f002 f855 	bl	8004814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	68f9      	ldr	r1, [r7, #12]
 8002774:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	441a      	add	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	3b01      	subs	r3, #1
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	441a      	add	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	22ff      	movs	r2, #255	; 0xff
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d114      	bne.n	80027e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01a      	beq.n	80027fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3310      	adds	r3, #16
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 f909 	bl	80039e0 <xTaskRemoveFromEventList>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <xQueueGenericReset+0xcc>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	e009      	b.n	80027fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3310      	adds	r3, #16
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fef2 	bl	80025d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3324      	adds	r3, #36	; 0x24
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff feed 	bl	80025d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027fa:	f002 f83b 	bl	8004874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <xQueueGenericCreateStatic+0x52>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <xQueueGenericCreateStatic+0x56>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueGenericCreateStatic+0x58>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	623b      	str	r3, [r7, #32]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <xQueueGenericCreateStatic+0x7e>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueGenericCreateStatic+0x82>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueGenericCreateStatic+0x84>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	61fb      	str	r3, [r7, #28]
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028aa:	2350      	movs	r3, #80	; 0x50
 80028ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b50      	cmp	r3, #80	; 0x50
 80028b2:	d00a      	beq.n	80028ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61bb      	str	r3, [r7, #24]
}
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f83f 	bl	8002970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	613b      	str	r3, [r7, #16]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3350      	adds	r3, #80	; 0x50
 8002934:	4618      	mov	r0, r3
 8002936:	f002 f88f 	bl	8004a58 <pvPortMalloc>
 800293a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3350      	adds	r3, #80	; 0x50
 800294a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002954:	79fa      	ldrb	r2, [r7, #7]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f805 	bl	8002970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002966:	69bb      	ldr	r3, [r7, #24]
	}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d103      	bne.n	800298c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e002      	b.n	8002992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800299e:	2101      	movs	r1, #1
 80029a0:	69b8      	ldr	r0, [r7, #24]
 80029a2:	f7ff fecb 	bl	800273c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericSend+0x32>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <xQueueGenericSend+0x40>
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <xQueueGenericSend+0x44>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <xQueueGenericSend+0x46>
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <xQueueGenericSend+0x60>
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a14:	bf00      	nop
 8002a16:	e7fe      	b.n	8002a16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d103      	bne.n	8002a26 <xQueueGenericSend+0x6e>
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <xQueueGenericSend+0x72>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericSend+0x74>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	623b      	str	r3, [r7, #32]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a46:	f001 f989 	bl	8003d5c <xTaskGetSchedulerState>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <xQueueGenericSend+0x9e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <xQueueGenericSend+0xa2>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueGenericSend+0xa4>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61fb      	str	r3, [r7, #28]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a76:	f001 fecd 	bl	8004814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <xQueueGenericSend+0xd4>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d129      	bne.n	8002ae0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a92:	f000 fa0b 	bl	8002eac <prvCopyDataToQueue>
 8002a96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ff9b 	bl	80039e0 <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <xQueueGenericSend+0x1f8>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	e00a      	b.n	8002ad8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <xQueueGenericSend+0x1f8>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ad8:	f001 fecc 	bl	8004874 <vPortExitCritical>
				return pdPASS;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e063      	b.n	8002ba8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ae6:	f001 fec5 	bl	8004874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e05c      	b.n	8002ba8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 ffd5 	bl	8003aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b02:	f001 feb7 	bl	8004874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b06:	f000 fd47 	bl	8003598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b0a:	f001 fe83 	bl	8004814 <vPortEnterCritical>
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d103      	bne.n	8002b24 <xQueueGenericSend+0x16c>
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d103      	bne.n	8002b3a <xQueueGenericSend+0x182>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3a:	f001 fe9b 	bl	8004874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b3e:	1d3a      	adds	r2, r7, #4
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ffc4 	bl	8003ad4 <xTaskCheckForTimeOut>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d124      	bne.n	8002b9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b54:	f000 faa2 	bl	800309c <prvIsQueueFull>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	3310      	adds	r3, #16
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 feea 	bl	8003940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b6e:	f000 fa2d 	bl	8002fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b72:	f000 fd1f 	bl	80035b4 <xTaskResumeAll>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f af7c 	bne.w	8002a76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <xQueueGenericSend+0x1f8>)
 8002b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	e772      	b.n	8002a76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b92:	f000 fa1b 	bl	8002fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b96:	f000 fd0d 	bl	80035b4 <xTaskResumeAll>
 8002b9a:	e76c      	b.n	8002a76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b9e:	f000 fa15 	bl	8002fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ba2:	f000 fd07 	bl	80035b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3738      	adds	r7, #56	; 0x38
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b090      	sub	sp, #64	; 0x40
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <xQueueGenericSendFromISR+0x3c>
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <xQueueGenericSendFromISR+0x40>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <xQueueGenericSendFromISR+0x42>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c0c:	bf00      	nop
 8002c0e:	e7fe      	b.n	8002c0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d103      	bne.n	8002c1e <xQueueGenericSendFromISR+0x6a>
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <xQueueGenericSendFromISR+0x6e>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <xQueueGenericSendFromISR+0x70>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	623b      	str	r3, [r7, #32]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c3e:	f001 fecb 	bl	80049d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c42:	f3ef 8211 	mrs	r2, BASEPRI
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	61fa      	str	r2, [r7, #28]
 8002c58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <xQueueGenericSendFromISR+0xbc>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d12f      	bne.n	8002cd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c86:	f000 f911 	bl	8002eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d112      	bne.n	8002cba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	3324      	adds	r3, #36	; 0x24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fe9d 	bl	80039e0 <xTaskRemoveFromEventList>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	b25a      	sxtb	r2, r3
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002cce:	e001      	b.n	8002cd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3740      	adds	r7, #64	; 0x40
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	; 0x30
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <xQueueReceive+0x30>
	__asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	623b      	str	r3, [r7, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <xQueueReceive+0x3e>
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <xQueueReceive+0x42>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <xQueueReceive+0x44>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <xQueueReceive+0x5e>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	61fb      	str	r3, [r7, #28]
}
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d4a:	f001 f807 	bl	8003d5c <xTaskGetSchedulerState>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <xQueueReceive+0x6e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <xQueueReceive+0x72>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueReceive+0x74>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueReceive+0x8e>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	61bb      	str	r3, [r7, #24]
}
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d7a:	f001 fd4b 	bl	8004814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01f      	beq.n	8002dca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d8e:	f000 f8f7 	bl	8002f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00f      	beq.n	8002dc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	3310      	adds	r3, #16
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fe1a 	bl	80039e0 <xTaskRemoveFromEventList>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <xQueueReceive+0x1bc>)
 8002db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dc2:	f001 fd57 	bl	8004874 <vPortExitCritical>
				return pdPASS;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e069      	b.n	8002e9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dd0:	f001 fd50 	bl	8004874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e062      	b.n	8002e9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fe60 	bl	8003aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dec:	f001 fd42 	bl	8004874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002df0:	f000 fbd2 	bl	8003598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002df4:	f001 fd0e 	bl	8004814 <vPortEnterCritical>
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d103      	bne.n	8002e0e <xQueueReceive+0x122>
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d103      	bne.n	8002e24 <xQueueReceive+0x138>
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e24:	f001 fd26 	bl	8004874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e28:	1d3a      	adds	r2, r7, #4
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fe4f 	bl	8003ad4 <xTaskCheckForTimeOut>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d123      	bne.n	8002e84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3e:	f000 f917 	bl	8003070 <prvIsQueueEmpty>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	3324      	adds	r3, #36	; 0x24
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fd75 	bl	8003940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e58:	f000 f8b8 	bl	8002fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e5c:	f000 fbaa 	bl	80035b4 <xTaskResumeAll>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d189      	bne.n	8002d7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <xQueueReceive+0x1bc>)
 8002e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	e780      	b.n	8002d7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7a:	f000 f8a7 	bl	8002fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e7e:	f000 fb99 	bl	80035b4 <xTaskResumeAll>
 8002e82:	e77a      	b.n	8002d7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e86:	f000 f8a1 	bl	8002fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e8a:	f000 fb93 	bl	80035b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e90:	f000 f8ee 	bl	8003070 <prvIsQueueEmpty>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f43f af6f 	beq.w	8002d7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10d      	bne.n	8002ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d14d      	bne.n	8002f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 ff5e 	bl	8003d98 <xTaskPriorityDisinherit>
 8002edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	e043      	b.n	8002f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d119      	bne.n	8002f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6858      	ldr	r0, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	f002 fa1b 	bl	8005332 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d32b      	bcc.n	8002f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	e026      	b.n	8002f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68d8      	ldr	r0, [r3, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	f002 fa01 	bl	8005332 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	425b      	negs	r3, r3
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d207      	bcs.n	8002f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	425b      	negs	r3, r3
 8002f56:	441a      	add	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d105      	bne.n	8002f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f76:	697b      	ldr	r3, [r7, #20]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	441a      	add	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d303      	bcc.n	8002fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68d9      	ldr	r1, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	f002 f9b7 	bl	8005332 <memcpy>
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fd4:	f001 fc1e 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fe0:	e011      	b.n	8003006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3324      	adds	r3, #36	; 0x24
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fcf6 	bl	80039e0 <xTaskRemoveFromEventList>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ffa:	f000 fdcd 	bl	8003b98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	3b01      	subs	r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	dce9      	bgt.n	8002fe2 <prvUnlockQueue+0x16>
 800300e:	e000      	b.n	8003012 <prvUnlockQueue+0x46>
					break;
 8003010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800301a:	f001 fc2b 	bl	8004874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800301e:	f001 fbf9 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800302a:	e011      	b.n	8003050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d012      	beq.n	800305a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3310      	adds	r3, #16
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fcd1 	bl	80039e0 <xTaskRemoveFromEventList>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003044:	f000 fda8 	bl	8003b98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003048:	7bbb      	ldrb	r3, [r7, #14]
 800304a:	3b01      	subs	r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003054:	2b00      	cmp	r3, #0
 8003056:	dce9      	bgt.n	800302c <prvUnlockQueue+0x60>
 8003058:	e000      	b.n	800305c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800305a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	22ff      	movs	r2, #255	; 0xff
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003064:	f001 fc06 	bl	8004874 <vPortExitCritical>
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003078:	f001 fbcc 	bl	8004814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003084:	2301      	movs	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e001      	b.n	800308e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800308e:	f001 fbf1 	bl	8004874 <vPortExitCritical>

	return xReturn;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030a4:	f001 fbb6 	bl	8004814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d102      	bne.n	80030ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e001      	b.n	80030be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030be:	f001 fbd9 	bl	8004874 <vPortExitCritical>

	return xReturn;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e014      	b.n	8003106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030dc:	4a0f      	ldr	r2, [pc, #60]	; (800311c <vQueueAddToRegistry+0x50>)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030e8:	490c      	ldr	r1, [pc, #48]	; (800311c <vQueueAddToRegistry+0x50>)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <vQueueAddToRegistry+0x50>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030fe:	e006      	b.n	800310e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b07      	cmp	r3, #7
 800310a:	d9e7      	bls.n	80030dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	200007e0 	.word	0x200007e0

08003120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003130:	f001 fb70 	bl	8004814 <vPortEnterCritical>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800313a:	b25b      	sxtb	r3, r3
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d103      	bne.n	800314a <vQueueWaitForMessageRestricted+0x2a>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003150:	b25b      	sxtb	r3, r3
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d103      	bne.n	8003160 <vQueueWaitForMessageRestricted+0x40>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003160:	f001 fb88 	bl	8004874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3324      	adds	r3, #36	; 0x24
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fc07 	bl	8003988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff26 	bl	8002fcc <prvUnlockQueue>
	}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08e      	sub	sp, #56	; 0x38
 800318c:	af04      	add	r7, sp, #16
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	623b      	str	r3, [r7, #32]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <xTaskCreateStatic+0x46>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	61fb      	str	r3, [r7, #28]
}
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031ce:	235c      	movs	r3, #92	; 0x5c
 80031d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b5c      	cmp	r3, #92	; 0x5c
 80031d6:	d00a      	beq.n	80031ee <xTaskCreateStatic+0x66>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	61bb      	str	r3, [r7, #24]
}
 80031ea:	bf00      	nop
 80031ec:	e7fe      	b.n	80031ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01e      	beq.n	8003234 <xTaskCreateStatic+0xac>
 80031f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003204:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2202      	movs	r2, #2
 800320a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800320e:	2300      	movs	r3, #0
 8003210:	9303      	str	r3, [sp, #12]
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	9302      	str	r3, [sp, #8]
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f850 	bl	80032cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800322c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800322e:	f000 f8dd 	bl	80033ec <prvAddNewTaskToReadyList>
 8003232:	e001      	b.n	8003238 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003238:	697b      	ldr	r3, [r7, #20]
	}
 800323a:	4618      	mov	r0, r3
 800323c:	3728      	adds	r7, #40	; 0x28
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08c      	sub	sp, #48	; 0x30
 8003246:	af04      	add	r7, sp, #16
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fbfe 	bl	8004a58 <pvPortMalloc>
 800325c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003264:	205c      	movs	r0, #92	; 0x5c
 8003266:	f001 fbf7 	bl	8004a58 <pvPortMalloc>
 800326a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
 8003278:	e005      	b.n	8003286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f001 fcb8 	bl	8004bf0 <vPortFree>
 8003280:	e001      	b.n	8003286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d017      	beq.n	80032bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	2300      	movs	r3, #0
 8003298:	9303      	str	r3, [sp, #12]
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	9302      	str	r3, [sp, #8]
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f80e 	bl	80032cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b0:	69f8      	ldr	r0, [r7, #28]
 80032b2:	f000 f89b 	bl	80033ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e002      	b.n	80032c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
 80032c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032c2:	69bb      	ldr	r3, [r7, #24]
	}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	461a      	mov	r2, r3
 80032e4:	21a5      	movs	r1, #165	; 0xa5
 80032e6:	f001 ffa9 	bl	800523c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	3b01      	subs	r3, #1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f023 0307 	bic.w	r3, r3, #7
 8003302:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <prvInitialiseNewTask+0x58>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	617b      	str	r3, [r7, #20]
}
 8003320:	bf00      	nop
 8003322:	e7fe      	b.n	8003322 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01f      	beq.n	800336a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e012      	b.n	8003356 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	7819      	ldrb	r1, [r3, #0]
 8003338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	3334      	adds	r3, #52	; 0x34
 8003340:	460a      	mov	r2, r1
 8003342:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2b0f      	cmp	r3, #15
 800335a:	d9e9      	bls.n	8003330 <prvInitialiseNewTask+0x64>
 800335c:	e000      	b.n	8003360 <prvInitialiseNewTask+0x94>
			{
				break;
 800335e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003368:	e003      	b.n	8003372 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	2b37      	cmp	r3, #55	; 0x37
 8003376:	d901      	bls.n	800337c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003378:	2337      	movs	r3, #55	; 0x37
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003386:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	2200      	movs	r2, #0
 800338c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	3304      	adds	r3, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f93e 	bl	8002614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	3318      	adds	r3, #24
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f939 	bl	8002614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	69b8      	ldr	r0, [r7, #24]
 80033cc:	f001 f8f4 	bl	80045b8 <pxPortInitialiseStack>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033e2:	bf00      	nop
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033f4:	f001 fa0e 	bl	8004814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033f8:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <prvAddNewTaskToReadyList+0xc4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <prvAddNewTaskToReadyList+0xc4>)
 8003400:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <prvAddNewTaskToReadyList+0xc8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800340a:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <prvAddNewTaskToReadyList+0xc8>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <prvAddNewTaskToReadyList+0xc4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d110      	bne.n	800343a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003418:	f000 fbe2 	bl	8003be0 <prvInitialiseTaskLists>
 800341c:	e00d      	b.n	800343a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <prvAddNewTaskToReadyList+0xcc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <prvAddNewTaskToReadyList+0xc8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	429a      	cmp	r2, r3
 8003432:	d802      	bhi.n	800343a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <prvAddNewTaskToReadyList+0xc8>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <prvAddNewTaskToReadyList+0xd0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <prvAddNewTaskToReadyList+0xd0>)
 8003442:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <prvAddNewTaskToReadyList+0xd0>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <prvAddNewTaskToReadyList+0xd4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d903      	bls.n	8003460 <prvAddNewTaskToReadyList+0x74>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <prvAddNewTaskToReadyList+0xd4>)
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <prvAddNewTaskToReadyList+0xd8>)
 800346e:	441a      	add	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7ff f8d9 	bl	800262e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800347c:	f001 f9fa 	bl	8004874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <prvAddNewTaskToReadyList+0xcc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <prvAddNewTaskToReadyList+0xc8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	429a      	cmp	r2, r3
 8003494:	d207      	bcs.n	80034a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <prvAddNewTaskToReadyList+0xdc>)
 8003498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000cf4 	.word	0x20000cf4
 80034b4:	20000820 	.word	0x20000820
 80034b8:	20000d00 	.word	0x20000d00
 80034bc:	20000d10 	.word	0x20000d10
 80034c0:	20000cfc 	.word	0x20000cfc
 80034c4:	20000824 	.word	0x20000824
 80034c8:	e000ed04 	.word	0xe000ed04

080034cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034da:	463a      	mov	r2, r7
 80034dc:	1d39      	adds	r1, r7, #4
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f842 	bl	800256c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	9202      	str	r2, [sp, #8]
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2300      	movs	r3, #0
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	460a      	mov	r2, r1
 80034fa:	4921      	ldr	r1, [pc, #132]	; (8003580 <vTaskStartScheduler+0xb4>)
 80034fc:	4821      	ldr	r0, [pc, #132]	; (8003584 <vTaskStartScheduler+0xb8>)
 80034fe:	f7ff fe43 	bl	8003188 <xTaskCreateStatic>
 8003502:	4603      	mov	r3, r0
 8003504:	4a20      	ldr	r2, [pc, #128]	; (8003588 <vTaskStartScheduler+0xbc>)
 8003506:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <vTaskStartScheduler+0xbc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003510:	2301      	movs	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e001      	b.n	800351a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003520:	f000 fcfc 	bl	8003f1c <xTimerCreateTimerTask>
 8003524:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d116      	bne.n	800355a <vTaskStartScheduler+0x8e>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	613b      	str	r3, [r7, #16]
}
 800353e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <vTaskStartScheduler+0xc0>)
 8003542:	f04f 32ff 	mov.w	r2, #4294967295
 8003546:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <vTaskStartScheduler+0xc4>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <vTaskStartScheduler+0xc8>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003554:	f001 f8bc 	bl	80046d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003558:	e00e      	b.n	8003578 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d10a      	bne.n	8003578 <vTaskStartScheduler+0xac>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	60fb      	str	r3, [r7, #12]
}
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <vTaskStartScheduler+0xaa>
}
 8003578:	bf00      	nop
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	08005de8 	.word	0x08005de8
 8003584:	08003bb1 	.word	0x08003bb1
 8003588:	20000d18 	.word	0x20000d18
 800358c:	20000d14 	.word	0x20000d14
 8003590:	20000d00 	.word	0x20000d00
 8003594:	20000cf8 	.word	0x20000cf8

08003598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <vTaskSuspendAll+0x18>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a03      	ldr	r2, [pc, #12]	; (80035b0 <vTaskSuspendAll+0x18>)
 80035a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	20000d1c 	.word	0x20000d1c

080035b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035c2:	4b42      	ldr	r3, [pc, #264]	; (80036cc <xTaskResumeAll+0x118>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	603b      	str	r3, [r7, #0]
}
 80035dc:	bf00      	nop
 80035de:	e7fe      	b.n	80035de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035e0:	f001 f918 	bl	8004814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <xTaskResumeAll+0x118>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	4a38      	ldr	r2, [pc, #224]	; (80036cc <xTaskResumeAll+0x118>)
 80035ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <xTaskResumeAll+0x118>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d162      	bne.n	80036bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <xTaskResumeAll+0x11c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d05e      	beq.n	80036bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035fe:	e02f      	b.n	8003660 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003600:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <xTaskResumeAll+0x120>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3318      	adds	r3, #24
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff f86b 	bl	80026e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3304      	adds	r3, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f866 	bl	80026e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <xTaskResumeAll+0x124>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d903      	bls.n	8003630 <xTaskResumeAll+0x7c>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <xTaskResumeAll+0x124>)
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <xTaskResumeAll+0x128>)
 800363e:	441a      	add	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7fe fff1 	bl	800262e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <xTaskResumeAll+0x12c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <xTaskResumeAll+0x130>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <xTaskResumeAll+0x120>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1cb      	bne.n	8003600 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800366e:	f000 fb55 	bl	8003d1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <xTaskResumeAll+0x134>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d010      	beq.n	80036a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800367e:	f000 f847 	bl	8003710 <xTaskIncrementTick>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <xTaskResumeAll+0x130>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3b01      	subs	r3, #1
 8003692:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f1      	bne.n	800367e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <xTaskResumeAll+0x134>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <xTaskResumeAll+0x130>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <xTaskResumeAll+0x138>)
 80036ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036bc:	f001 f8da 	bl	8004874 <vPortExitCritical>

	return xAlreadyYielded;
 80036c0:	68bb      	ldr	r3, [r7, #8]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000d1c 	.word	0x20000d1c
 80036d0:	20000cf4 	.word	0x20000cf4
 80036d4:	20000cb4 	.word	0x20000cb4
 80036d8:	20000cfc 	.word	0x20000cfc
 80036dc:	20000824 	.word	0x20000824
 80036e0:	20000820 	.word	0x20000820
 80036e4:	20000d08 	.word	0x20000d08
 80036e8:	20000d04 	.word	0x20000d04
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <xTaskGetTickCount+0x1c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036fc:	687b      	ldr	r3, [r7, #4]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000cf8 	.word	0x20000cf8

08003710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800371a:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <xTaskIncrementTick+0x148>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 808f 	bne.w	8003842 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003724:	4b4d      	ldr	r3, [pc, #308]	; (800385c <xTaskIncrementTick+0x14c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800372c:	4a4b      	ldr	r2, [pc, #300]	; (800385c <xTaskIncrementTick+0x14c>)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d120      	bne.n	800377a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003738:	4b49      	ldr	r3, [pc, #292]	; (8003860 <xTaskIncrementTick+0x150>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <xTaskIncrementTick+0x48>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	603b      	str	r3, [r7, #0]
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <xTaskIncrementTick+0x46>
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <xTaskIncrementTick+0x150>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <xTaskIncrementTick+0x154>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3f      	ldr	r2, [pc, #252]	; (8003860 <xTaskIncrementTick+0x150>)
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <xTaskIncrementTick+0x154>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b3e      	ldr	r3, [pc, #248]	; (8003868 <xTaskIncrementTick+0x158>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <xTaskIncrementTick+0x158>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	f000 fad1 	bl	8003d1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800377a:	4b3c      	ldr	r3, [pc, #240]	; (800386c <xTaskIncrementTick+0x15c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	429a      	cmp	r2, r3
 8003782:	d349      	bcc.n	8003818 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <xTaskIncrementTick+0x150>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <xTaskIncrementTick+0x15c>)
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	601a      	str	r2, [r3, #0]
					break;
 8003796:	e03f      	b.n	8003818 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <xTaskIncrementTick+0x150>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d203      	bcs.n	80037b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037b0:	4a2e      	ldr	r2, [pc, #184]	; (800386c <xTaskIncrementTick+0x15c>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037b6:	e02f      	b.n	8003818 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe ff93 	bl	80026e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3318      	adds	r3, #24
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe ff8a 	bl	80026e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <xTaskIncrementTick+0x160>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d903      	bls.n	80037e8 <xTaskIncrementTick+0xd8>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <xTaskIncrementTick+0x160>)
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <xTaskIncrementTick+0x164>)
 80037f6:	441a      	add	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f7fe ff15 	bl	800262e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <xTaskIncrementTick+0x168>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	429a      	cmp	r2, r3
 8003810:	d3b8      	bcc.n	8003784 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003812:	2301      	movs	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003816:	e7b5      	b.n	8003784 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003818:	4b17      	ldr	r3, [pc, #92]	; (8003878 <xTaskIncrementTick+0x168>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4915      	ldr	r1, [pc, #84]	; (8003874 <xTaskIncrementTick+0x164>)
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d901      	bls.n	8003834 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <xTaskIncrementTick+0x16c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e004      	b.n	800384c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <xTaskIncrementTick+0x170>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <xTaskIncrementTick+0x170>)
 800384a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800384c:	697b      	ldr	r3, [r7, #20]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000d1c 	.word	0x20000d1c
 800385c:	20000cf8 	.word	0x20000cf8
 8003860:	20000cac 	.word	0x20000cac
 8003864:	20000cb0 	.word	0x20000cb0
 8003868:	20000d0c 	.word	0x20000d0c
 800386c:	20000d14 	.word	0x20000d14
 8003870:	20000cfc 	.word	0x20000cfc
 8003874:	20000824 	.word	0x20000824
 8003878:	20000820 	.word	0x20000820
 800387c:	20000d08 	.word	0x20000d08
 8003880:	20000d04 	.word	0x20000d04

08003884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800388a:	4b28      	ldr	r3, [pc, #160]	; (800392c <vTaskSwitchContext+0xa8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <vTaskSwitchContext+0xac>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003898:	e041      	b.n	800391e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800389a:	4b25      	ldr	r3, [pc, #148]	; (8003930 <vTaskSwitchContext+0xac>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a0:	4b24      	ldr	r3, [pc, #144]	; (8003934 <vTaskSwitchContext+0xb0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e010      	b.n	80038ca <vTaskSwitchContext+0x46>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	607b      	str	r3, [r7, #4]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <vTaskSwitchContext+0x3e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	491b      	ldr	r1, [pc, #108]	; (8003938 <vTaskSwitchContext+0xb4>)
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0e4      	beq.n	80038a8 <vTaskSwitchContext+0x24>
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <vTaskSwitchContext+0xb4>)
 80038ea:	4413      	add	r3, r2
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3308      	adds	r3, #8
 8003900:	429a      	cmp	r2, r3
 8003902:	d104      	bne.n	800390e <vTaskSwitchContext+0x8a>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a09      	ldr	r2, [pc, #36]	; (800393c <vTaskSwitchContext+0xb8>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4a06      	ldr	r2, [pc, #24]	; (8003934 <vTaskSwitchContext+0xb0>)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000d1c 	.word	0x20000d1c
 8003930:	20000d08 	.word	0x20000d08
 8003934:	20000cfc 	.word	0x20000cfc
 8003938:	20000824 	.word	0x20000824
 800393c:	20000820 	.word	0x20000820

08003940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	60fb      	str	r3, [r7, #12]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <vTaskPlaceOnEventList+0x44>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3318      	adds	r3, #24
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe fe81 	bl	8002676 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003974:	2101      	movs	r1, #1
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f000 fa7c 	bl	8003e74 <prvAddCurrentTaskToDelayedList>
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000820 	.word	0x20000820

08003988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	617b      	str	r3, [r7, #20]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <vTaskPlaceOnEventListRestricted+0x54>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3318      	adds	r3, #24
 80039b6:	4619      	mov	r1, r3
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7fe fe38 	bl	800262e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295
 80039c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	68b8      	ldr	r0, [r7, #8]
 80039ce:	f000 fa51 	bl	8003e74 <prvAddCurrentTaskToDelayedList>
	}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000820 	.word	0x20000820

080039e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60fb      	str	r3, [r7, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fe69 	bl	80026e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <xTaskRemoveFromEventList+0xb0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3304      	adds	r3, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fe60 	bl	80026e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d903      	bls.n	8003a3c <xTaskRemoveFromEventList+0x5c>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <xTaskRemoveFromEventList+0xb8>)
 8003a4a:	441a      	add	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f7fe fdeb 	bl	800262e <vListInsertEnd>
 8003a58:	e005      	b.n	8003a66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	480e      	ldr	r0, [pc, #56]	; (8003a9c <xTaskRemoveFromEventList+0xbc>)
 8003a62:	f7fe fde4 	bl	800262e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <xTaskRemoveFromEventList+0xc0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d905      	bls.n	8003a80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <xTaskRemoveFromEventList+0xc4>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e001      	b.n	8003a84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a84:	697b      	ldr	r3, [r7, #20]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000d1c 	.word	0x20000d1c
 8003a94:	20000cfc 	.word	0x20000cfc
 8003a98:	20000824 	.word	0x20000824
 8003a9c:	20000cb4 	.word	0x20000cb4
 8003aa0:	20000820 	.word	0x20000820
 8003aa4:	20000d08 	.word	0x20000d08

08003aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <vTaskInternalSetTimeOutState+0x24>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <vTaskInternalSetTimeOutState+0x28>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000d0c 	.word	0x20000d0c
 8003ad0:	20000cf8 	.word	0x20000cf8

08003ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	613b      	str	r3, [r7, #16]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	60fb      	str	r3, [r7, #12]
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b16:	f000 fe7d 	bl	8004814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <xTaskCheckForTimeOut+0xbc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d102      	bne.n	8003b3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e023      	b.n	8003b82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <xTaskCheckForTimeOut+0xc0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d007      	beq.n	8003b56 <xTaskCheckForTimeOut+0x82>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e015      	b.n	8003b82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d20b      	bcs.n	8003b78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff9b 	bl	8003aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e004      	b.n	8003b82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b82:	f000 fe77 	bl	8004874 <vPortExitCritical>

	return xReturn;
 8003b86:	69fb      	ldr	r3, [r7, #28]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000cf8 	.word	0x20000cf8
 8003b94:	20000d0c 	.word	0x20000d0c

08003b98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <vTaskMissedYield+0x14>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	20000d08 	.word	0x20000d08

08003bb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bb8:	f000 f852 	bl	8003c60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <prvIdleTask+0x28>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d9f9      	bls.n	8003bb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <prvIdleTask+0x2c>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bd4:	e7f0      	b.n	8003bb8 <prvIdleTask+0x8>
 8003bd6:	bf00      	nop
 8003bd8:	20000824 	.word	0x20000824
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e00c      	b.n	8003c06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <prvInitialiseTaskLists+0x60>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fcea 	bl	80025d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3301      	adds	r3, #1
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b37      	cmp	r3, #55	; 0x37
 8003c0a:	d9ef      	bls.n	8003bec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c0c:	480d      	ldr	r0, [pc, #52]	; (8003c44 <prvInitialiseTaskLists+0x64>)
 8003c0e:	f7fe fce1 	bl	80025d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c12:	480d      	ldr	r0, [pc, #52]	; (8003c48 <prvInitialiseTaskLists+0x68>)
 8003c14:	f7fe fcde 	bl	80025d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c18:	480c      	ldr	r0, [pc, #48]	; (8003c4c <prvInitialiseTaskLists+0x6c>)
 8003c1a:	f7fe fcdb 	bl	80025d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c1e:	480c      	ldr	r0, [pc, #48]	; (8003c50 <prvInitialiseTaskLists+0x70>)
 8003c20:	f7fe fcd8 	bl	80025d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c24:	480b      	ldr	r0, [pc, #44]	; (8003c54 <prvInitialiseTaskLists+0x74>)
 8003c26:	f7fe fcd5 	bl	80025d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <prvInitialiseTaskLists+0x78>)
 8003c2c:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <prvInitialiseTaskLists+0x64>)
 8003c2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <prvInitialiseTaskLists+0x7c>)
 8003c32:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <prvInitialiseTaskLists+0x68>)
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000824 	.word	0x20000824
 8003c44:	20000c84 	.word	0x20000c84
 8003c48:	20000c98 	.word	0x20000c98
 8003c4c:	20000cb4 	.word	0x20000cb4
 8003c50:	20000cc8 	.word	0x20000cc8
 8003c54:	20000ce0 	.word	0x20000ce0
 8003c58:	20000cac 	.word	0x20000cac
 8003c5c:	20000cb0 	.word	0x20000cb0

08003c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c66:	e019      	b.n	8003c9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c68:	f000 fdd4 	bl	8004814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <prvCheckTasksWaitingTermination+0x50>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe fd35 	bl	80026e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <prvCheckTasksWaitingTermination+0x54>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <prvCheckTasksWaitingTermination+0x54>)
 8003c86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <prvCheckTasksWaitingTermination+0x58>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <prvCheckTasksWaitingTermination+0x58>)
 8003c90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c92:	f000 fdef 	bl	8004874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f810 	bl	8003cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <prvCheckTasksWaitingTermination+0x58>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e1      	bne.n	8003c68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000cc8 	.word	0x20000cc8
 8003cb4:	20000cf4 	.word	0x20000cf4
 8003cb8:	20000cdc 	.word	0x20000cdc

08003cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 ff8c 	bl	8004bf0 <vPortFree>
				vPortFree( pxTCB );
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 ff89 	bl	8004bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cde:	e018      	b.n	8003d12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d103      	bne.n	8003cf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 ff80 	bl	8004bf0 <vPortFree>
	}
 8003cf0:	e00f      	b.n	8003d12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d00a      	beq.n	8003d12 <prvDeleteTCB+0x56>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	60fb      	str	r3, [r7, #12]
}
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <prvDeleteTCB+0x54>
	}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <prvResetNextTaskUnblockTime+0x38>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <prvResetNextTaskUnblockTime+0x3c>)
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d34:	e008      	b.n	8003d48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <prvResetNextTaskUnblockTime+0x38>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <prvResetNextTaskUnblockTime+0x3c>)
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	20000cac 	.word	0x20000cac
 8003d58:	20000d14 	.word	0x20000d14

08003d5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <xTaskGetSchedulerState+0x34>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	e008      	b.n	8003d82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <xTaskGetSchedulerState+0x38>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	e001      	b.n	8003d82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d82:	687b      	ldr	r3, [r7, #4]
	}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20000d00 	.word	0x20000d00
 8003d94:	20000d1c 	.word	0x20000d1c

08003d98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d056      	beq.n	8003e5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003dae:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <xTaskPriorityDisinherit+0xd0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d00a      	beq.n	8003dce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	60fb      	str	r3, [r7, #12]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60bb      	str	r3, [r7, #8]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df0:	1e5a      	subs	r2, r3, #1
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d02c      	beq.n	8003e5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d128      	bne.n	8003e5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fc6a 	bl	80026e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <xTaskPriorityDisinherit+0xd4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d903      	bls.n	8003e3c <xTaskPriorityDisinherit+0xa4>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a0c      	ldr	r2, [pc, #48]	; (8003e6c <xTaskPriorityDisinherit+0xd4>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <xTaskPriorityDisinherit+0xd8>)
 8003e4a:	441a      	add	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7fe fbeb 	bl	800262e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e5c:	697b      	ldr	r3, [r7, #20]
	}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000820 	.word	0x20000820
 8003e6c:	20000cfc 	.word	0x20000cfc
 8003e70:	20000824 	.word	0x20000824

08003e74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fc2c 	bl	80026e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d10a      	bne.n	8003eae <prvAddCurrentTaskToDelayedList+0x3a>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4819      	ldr	r0, [pc, #100]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ea8:	f7fe fbc1 	bl	800262e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eac:	e026      	b.n	8003efc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003eb6:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d209      	bcs.n	8003eda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7fe fbcf 	bl	8002676 <vListInsert>
}
 8003ed8:	e010      	b.n	8003efc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f7fe fbc5 	bl	8002676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d202      	bcs.n	8003efc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ef6:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000cf8 	.word	0x20000cf8
 8003f08:	20000820 	.word	0x20000820
 8003f0c:	20000ce0 	.word	0x20000ce0
 8003f10:	20000cb0 	.word	0x20000cb0
 8003f14:	20000cac 	.word	0x20000cac
 8003f18:	20000d14 	.word	0x20000d14

08003f1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f26:	f000 fb07 	bl	8004538 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <xTimerCreateTimerTask+0x80>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d021      	beq.n	8003f76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f3a:	1d3a      	adds	r2, r7, #4
 8003f3c:	f107 0108 	add.w	r1, r7, #8
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fb2b 	bl	80025a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	9202      	str	r2, [sp, #8]
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	2302      	movs	r3, #2
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	460a      	mov	r2, r1
 8003f5c:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <xTimerCreateTimerTask+0x84>)
 8003f5e:	4811      	ldr	r0, [pc, #68]	; (8003fa4 <xTimerCreateTimerTask+0x88>)
 8003f60:	f7ff f912 	bl	8003188 <xTaskCreateStatic>
 8003f64:	4603      	mov	r3, r0
 8003f66:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <xTimerCreateTimerTask+0x8c>)
 8003f68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <xTimerCreateTimerTask+0x8c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f72:	2301      	movs	r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	613b      	str	r3, [r7, #16]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f92:	697b      	ldr	r3, [r7, #20]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000d50 	.word	0x20000d50
 8003fa0:	08005df0 	.word	0x08005df0
 8003fa4:	080040e1 	.word	0x080040e1
 8003fa8:	20000d54 	.word	0x20000d54

08003fac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xTimerGenericCommand+0x2e>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	623b      	str	r3, [r7, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fda:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <xTimerGenericCommand+0x98>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02a      	beq.n	8004038 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	dc18      	bgt.n	8004026 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ff4:	f7ff feb2 	bl	8003d5c <xTaskGetSchedulerState>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d109      	bne.n	8004012 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <xTimerGenericCommand+0x98>)
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	f107 0110 	add.w	r1, r7, #16
 8004006:	2300      	movs	r3, #0
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	f7fe fcd5 	bl	80029b8 <xQueueGenericSend>
 800400e:	6278      	str	r0, [r7, #36]	; 0x24
 8004010:	e012      	b.n	8004038 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <xTimerGenericCommand+0x98>)
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	f107 0110 	add.w	r1, r7, #16
 800401a:	2300      	movs	r3, #0
 800401c:	2200      	movs	r2, #0
 800401e:	f7fe fccb 	bl	80029b8 <xQueueGenericSend>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24
 8004024:	e008      	b.n	8004038 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <xTimerGenericCommand+0x98>)
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	f107 0110 	add.w	r1, r7, #16
 800402e:	2300      	movs	r3, #0
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	f7fe fdbf 	bl	8002bb4 <xQueueGenericSendFromISR>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	; 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000d50 	.word	0x20000d50

08004048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <prvProcessExpiredTimer+0x94>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3304      	adds	r3, #4
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fb41 	bl	80026e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d022      	beq.n	80040ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	18d1      	adds	r1, r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	6978      	ldr	r0, [r7, #20]
 8004082:	f000 f8d1 	bl	8004228 <prvInsertTimerInActiveList>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01f      	beq.n	80040cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800408c:	2300      	movs	r3, #0
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2300      	movs	r3, #0
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	2100      	movs	r1, #0
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	f7ff ff88 	bl	8003fac <xTimerGenericCommand>
 800409c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d113      	bne.n	80040cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	60fb      	str	r3, [r7, #12]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	6978      	ldr	r0, [r7, #20]
 80040d2:	4798      	blx	r3
}
 80040d4:	bf00      	nop
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000d48 	.word	0x20000d48

080040e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040e8:	f107 0308 	add.w	r3, r7, #8
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f857 	bl	80041a0 <prvGetNextExpireTime>
 80040f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4619      	mov	r1, r3
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f803 	bl	8004104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040fe:	f000 f8d5 	bl	80042ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004102:	e7f1      	b.n	80040e8 <prvTimerTask+0x8>

08004104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800410e:	f7ff fa43 	bl	8003598 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f866 	bl	80041e8 <prvSampleTimeNow>
 800411c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d130      	bne.n	8004186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <prvProcessTimerOrBlockTask+0x3c>
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	429a      	cmp	r2, r3
 8004130:	d806      	bhi.n	8004140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004132:	f7ff fa3f 	bl	80035b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff85 	bl	8004048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800413e:	e024      	b.n	800418a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004146:	4b13      	ldr	r3, [pc, #76]	; (8004194 <prvProcessTimerOrBlockTask+0x90>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <prvProcessTimerOrBlockTask+0x50>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <prvProcessTimerOrBlockTask+0x52>
 8004154:	2300      	movs	r3, #0
 8004156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <prvProcessTimerOrBlockTask+0x94>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	4619      	mov	r1, r3
 8004166:	f7fe ffdb 	bl	8003120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800416a:	f7ff fa23 	bl	80035b4 <xTaskResumeAll>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <prvProcessTimerOrBlockTask+0x98>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
}
 8004184:	e001      	b.n	800418a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004186:	f7ff fa15 	bl	80035b4 <xTaskResumeAll>
}
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000d4c 	.word	0x20000d4c
 8004198:	20000d50 	.word	0x20000d50
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <prvGetNextExpireTime+0x44>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <prvGetNextExpireTime+0x16>
 80041b2:	2201      	movs	r2, #1
 80041b4:	e000      	b.n	80041b8 <prvGetNextExpireTime+0x18>
 80041b6:	2200      	movs	r2, #0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <prvGetNextExpireTime+0x44>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e001      	b.n	80041d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000d48 	.word	0x20000d48

080041e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041f0:	f7ff fa7e 	bl	80036f0 <xTaskGetTickCount>
 80041f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <prvSampleTimeNow+0x3c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d205      	bcs.n	800420c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004200:	f000 f936 	bl	8004470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e002      	b.n	8004212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004212:	4a04      	ldr	r2, [pc, #16]	; (8004224 <prvSampleTimeNow+0x3c>)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004218:	68fb      	ldr	r3, [r7, #12]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000d58 	.word	0x20000d58

08004228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d812      	bhi.n	8004274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad2      	subs	r2, r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e01b      	b.n	800429a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <prvInsertTimerInActiveList+0x7c>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fe fa02 	bl	8002676 <vListInsert>
 8004272:	e012      	b.n	800429a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d206      	bcs.n	800428a <prvInsertTimerInActiveList+0x62>
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004284:	2301      	movs	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e007      	b.n	800429a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <prvInsertTimerInActiveList+0x80>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3304      	adds	r3, #4
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f7fe f9ee 	bl	8002676 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800429a:	697b      	ldr	r3, [r7, #20]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000d4c 	.word	0x20000d4c
 80042a8:	20000d48 	.word	0x20000d48

080042ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08e      	sub	sp, #56	; 0x38
 80042b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042b2:	e0ca      	b.n	800444a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	da18      	bge.n	80042ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	3304      	adds	r3, #4
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	61fb      	str	r3, [r7, #28]
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e2:	6850      	ldr	r0, [r2, #4]
 80042e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	4611      	mov	r1, r2
 80042ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f2c0 80ab 	blt.w	800444a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	3304      	adds	r3, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe f9ef 	bl	80026e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800430a:	463b      	mov	r3, r7
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff6b 	bl	80041e8 <prvSampleTimeNow>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b09      	cmp	r3, #9
 8004318:	f200 8096 	bhi.w	8004448 <prvProcessReceivedCommands+0x19c>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <prvProcessReceivedCommands+0x78>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	0800434d 	.word	0x0800434d
 8004328:	0800434d 	.word	0x0800434d
 800432c:	0800434d 	.word	0x0800434d
 8004330:	080043c1 	.word	0x080043c1
 8004334:	080043d5 	.word	0x080043d5
 8004338:	0800441f 	.word	0x0800441f
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800434d 	.word	0x0800434d
 8004344:	080043c1 	.word	0x080043c1
 8004348:	080043d5 	.word	0x080043d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	18d1      	adds	r1, r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436c:	f7ff ff5c 	bl	8004228 <prvInsertTimerInActiveList>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d069      	beq.n	800444a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800437c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05e      	beq.n	800444a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	441a      	add	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2300      	movs	r3, #0
 800439a:	2100      	movs	r1, #0
 800439c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800439e:	f7ff fe05 	bl	8003fac <xTimerGenericCommand>
 80043a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d14f      	bne.n	800444a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61bb      	str	r3, [r7, #24]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80043d2:	e03a      	b.n	800444a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	617b      	str	r3, [r7, #20]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	18d1      	adds	r1, r2, r3
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004418:	f7ff ff06 	bl	8004228 <prvInsertTimerInActiveList>
					break;
 800441c:	e015      	b.n	800444a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800442c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442e:	f000 fbdf 	bl	8004bf0 <vPortFree>
 8004432:	e00a      	b.n	800444a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004446:	e000      	b.n	800444a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <prvProcessReceivedCommands+0x1c0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1d39      	adds	r1, r7, #4
 8004450:	2200      	movs	r2, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fc4a 	bl	8002cec <xQueueReceive>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	f47f af2a 	bne.w	80042b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	3730      	adds	r7, #48	; 0x30
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000d50 	.word	0x20000d50

08004470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004476:	e048      	b.n	800450a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004478:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <prvSwitchTimerLists+0xc0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004482:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <prvSwitchTimerLists+0xc0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3304      	adds	r3, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe f929 	bl	80026e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02e      	beq.n	800450a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d90e      	bls.n	80044dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044ca:	4b19      	ldr	r3, [pc, #100]	; (8004530 <prvSwitchTimerLists+0xc0>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7fe f8ce 	bl	8002676 <vListInsert>
 80044da:	e016      	b.n	800450a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044dc:	2300      	movs	r3, #0
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	2100      	movs	r1, #0
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fd60 	bl	8003fac <xTimerGenericCommand>
 80044ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	603b      	str	r3, [r7, #0]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <prvSwitchTimerLists+0xc0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1b1      	bne.n	8004478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <prvSwitchTimerLists+0xc0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <prvSwitchTimerLists+0xc4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a04      	ldr	r2, [pc, #16]	; (8004530 <prvSwitchTimerLists+0xc0>)
 8004520:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <prvSwitchTimerLists+0xc4>)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6013      	str	r3, [r2, #0]
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000d48 	.word	0x20000d48
 8004534:	20000d4c 	.word	0x20000d4c

08004538 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800453e:	f000 f969 	bl	8004814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <prvCheckForValidListAndQueue+0x60>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d120      	bne.n	800458c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800454a:	4814      	ldr	r0, [pc, #80]	; (800459c <prvCheckForValidListAndQueue+0x64>)
 800454c:	f7fe f842 	bl	80025d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004550:	4813      	ldr	r0, [pc, #76]	; (80045a0 <prvCheckForValidListAndQueue+0x68>)
 8004552:	f7fe f83f 	bl	80025d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <prvCheckForValidListAndQueue+0x6c>)
 8004558:	4a10      	ldr	r2, [pc, #64]	; (800459c <prvCheckForValidListAndQueue+0x64>)
 800455a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <prvCheckForValidListAndQueue+0x70>)
 800455e:	4a10      	ldr	r2, [pc, #64]	; (80045a0 <prvCheckForValidListAndQueue+0x68>)
 8004560:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <prvCheckForValidListAndQueue+0x74>)
 8004568:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <prvCheckForValidListAndQueue+0x78>)
 800456a:	2110      	movs	r1, #16
 800456c:	200a      	movs	r0, #10
 800456e:	f7fe f94d 	bl	800280c <xQueueGenericCreateStatic>
 8004572:	4603      	mov	r3, r0
 8004574:	4a08      	ldr	r2, [pc, #32]	; (8004598 <prvCheckForValidListAndQueue+0x60>)
 8004576:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <prvCheckForValidListAndQueue+0x60>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <prvCheckForValidListAndQueue+0x60>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	490b      	ldr	r1, [pc, #44]	; (80045b4 <prvCheckForValidListAndQueue+0x7c>)
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fda0 	bl	80030cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800458c:	f000 f972 	bl	8004874 <vPortExitCritical>
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000d50 	.word	0x20000d50
 800459c:	20000d20 	.word	0x20000d20
 80045a0:	20000d34 	.word	0x20000d34
 80045a4:	20000d48 	.word	0x20000d48
 80045a8:	20000d4c 	.word	0x20000d4c
 80045ac:	20000dfc 	.word	0x20000dfc
 80045b0:	20000d5c 	.word	0x20000d5c
 80045b4:	08005df8 	.word	0x08005df8

080045b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b04      	subs	r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b04      	subs	r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f023 0201 	bic.w	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3b04      	subs	r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <pxPortInitialiseStack+0x64>)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3b14      	subs	r3, #20
 80045f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3b04      	subs	r3, #4
 80045fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f06f 0202 	mvn.w	r2, #2
 8004606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3b20      	subs	r3, #32
 800460c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	08004621 	.word	0x08004621

08004620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <prvTaskExitError+0x54>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d00a      	beq.n	800464a <prvTaskExitError+0x2a>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60fb      	str	r3, [r7, #12]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <prvTaskExitError+0x28>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
}
 800465c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800465e:	bf00      	nop
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0fc      	beq.n	8004660 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	2000000c 	.word	0x2000000c
	...

08004680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxCurrentTCBConst2>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f380 8809 	msr	PSP, r0
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8811 	msr	BASEPRI, r0
 800469a:	4770      	bx	lr
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst2>:
 80046a0:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <prvPortStartFirstTask+0x24>)
 80046aa:	6800      	ldr	r0, [r0, #0]
 80046ac:	6800      	ldr	r0, [r0, #0]
 80046ae:	f380 8808 	msr	MSP, r0
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8814 	msr	CONTROL, r0
 80046ba:	b662      	cpsie	i
 80046bc:	b661      	cpsie	f
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	df00      	svc	0
 80046c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ca:	bf00      	nop
 80046cc:	e000ed08 	.word	0xe000ed08

080046d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <xPortStartScheduler+0x120>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a46      	ldr	r2, [pc, #280]	; (80047f4 <xPortStartScheduler+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10a      	bne.n	80046f6 <xPortStartScheduler+0x26>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <xPortStartScheduler+0x120>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <xPortStartScheduler+0x128>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10a      	bne.n	8004716 <xPortStartScheduler+0x46>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004716:	4b39      	ldr	r3, [pc, #228]	; (80047fc <xPortStartScheduler+0x12c>)
 8004718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	22ff      	movs	r2, #255	; 0xff
 8004726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4b31      	ldr	r3, [pc, #196]	; (8004800 <xPortStartScheduler+0x130>)
 800473c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <xPortStartScheduler+0x134>)
 8004740:	2207      	movs	r2, #7
 8004742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004744:	e009      	b.n	800475a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <xPortStartScheduler+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3b01      	subs	r3, #1
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <xPortStartScheduler+0x134>)
 800474e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d0ef      	beq.n	8004746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <xPortStartScheduler+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1c3 0307 	rsb	r3, r3, #7
 800476e:	2b04      	cmp	r3, #4
 8004770:	d00a      	beq.n	8004788 <xPortStartScheduler+0xb8>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <xPortStartScheduler+0x134>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <xPortStartScheduler+0x134>)
 8004790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <xPortStartScheduler+0x134>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <xPortStartScheduler+0x134>)
 800479c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <xPortStartScheduler+0x138>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <xPortStartScheduler+0x138>)
 80047ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <xPortStartScheduler+0x138>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a14      	ldr	r2, [pc, #80]	; (8004808 <xPortStartScheduler+0x138>)
 80047b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047be:	f000 f8dd 	bl	800497c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <xPortStartScheduler+0x13c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047c8:	f000 f8fc 	bl	80049c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <xPortStartScheduler+0x140>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <xPortStartScheduler+0x140>)
 80047d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047d8:	f7ff ff66 	bl	80046a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047dc:	f7ff f852 	bl	8003884 <vTaskSwitchContext>
	prvTaskExitError();
 80047e0:	f7ff ff1e 	bl	8004620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00
 80047f4:	410fc271 	.word	0x410fc271
 80047f8:	410fc270 	.word	0x410fc270
 80047fc:	e000e400 	.word	0xe000e400
 8004800:	20000e4c 	.word	0x20000e4c
 8004804:	20000e50 	.word	0x20000e50
 8004808:	e000ed20 	.word	0xe000ed20
 800480c:	2000000c 	.word	0x2000000c
 8004810:	e000ef34 	.word	0xe000ef34

08004814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	607b      	str	r3, [r7, #4]
}
 800482c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <vPortEnterCritical+0x58>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <vPortEnterCritical+0x58>)
 8004836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <vPortEnterCritical+0x58>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10f      	bne.n	8004860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortEnterCritical+0x5c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <vPortEnterCritical+0x4c>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	603b      	str	r3, [r7, #0]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vPortEnterCritical+0x4a>
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	2000000c 	.word	0x2000000c
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <vPortExitCritical+0x50>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <vPortExitCritical+0x24>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <vPortExitCritical+0x50>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <vPortExitCritical+0x50>)
 80048a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <vPortExitCritical+0x50>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <vPortExitCritical+0x42>
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f383 8811 	msr	BASEPRI, r3
}
 80048b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000000c 	.word	0x2000000c
	...

080048d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048d0:	f3ef 8009 	mrs	r0, PSP
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <pxCurrentTCBConst>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f01e 0f10 	tst.w	lr, #16
 80048e0:	bf08      	it	eq
 80048e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ea:	6010      	str	r0, [r2, #0]
 80048ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048f4:	f380 8811 	msr	BASEPRI, r0
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f7fe ffc0 	bl	8003884 <vTaskSwitchContext>
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f380 8811 	msr	BASEPRI, r0
 800490c:	bc09      	pop	{r0, r3}
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	6808      	ldr	r0, [r1, #0]
 8004912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004916:	f01e 0f10 	tst.w	lr, #16
 800491a:	bf08      	it	eq
 800491c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004920:	f380 8809 	msr	PSP, r0
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst>:
 8004930:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
}
 8004950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004952:	f7fe fedd 	bl	8003710 <xTaskIncrementTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <xPortSysTickHandler+0x40>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <vPortSetupTimerInterrupt+0x38>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <vPortSetupTimerInterrupt+0x3c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <vPortSetupTimerInterrupt+0x40>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <vPortSetupTimerInterrupt+0x44>)
 800499a:	3b01      	subs	r3, #1
 800499c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e010 	.word	0xe000e010
 80049b4:	e000e018 	.word	0xe000e018
 80049b8:	20000000 	.word	0x20000000
 80049bc:	10624dd3 	.word	0x10624dd3
 80049c0:	e000e014 	.word	0xe000e014

080049c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049d4 <vPortEnableVFP+0x10>
 80049c8:	6801      	ldr	r1, [r0, #0]
 80049ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ce:	6001      	str	r1, [r0, #0]
 80049d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049d2:	bf00      	nop
 80049d4:	e000ed88 	.word	0xe000ed88

080049d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049de:	f3ef 8305 	mrs	r3, IPSR
 80049e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d914      	bls.n	8004a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <vPortValidateInterruptPriority+0x70>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049f4:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <vPortValidateInterruptPriority+0x74>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	7afa      	ldrb	r2, [r7, #11]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d20a      	bcs.n	8004a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <vPortValidateInterruptPriority+0x78>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <vPortValidateInterruptPriority+0x7c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d90a      	bls.n	8004a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	603b      	str	r3, [r7, #0]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <vPortValidateInterruptPriority+0x60>
	}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000e3f0 	.word	0xe000e3f0
 8004a4c:	20000e4c 	.word	0x20000e4c
 8004a50:	e000ed0c 	.word	0xe000ed0c
 8004a54:	20000e50 	.word	0x20000e50

08004a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a64:	f7fe fd98 	bl	8003598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <pvPortMalloc+0x180>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a70:	f000 f920 	bl	8004cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <pvPortMalloc+0x184>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 8093 	bne.w	8004ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01d      	beq.n	8004ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a88:	2208      	movs	r2, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d014      	beq.n	8004ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	617b      	str	r3, [r7, #20]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d06e      	beq.n	8004ba8 <pvPortMalloc+0x150>
 8004aca:	4b45      	ldr	r3, [pc, #276]	; (8004be0 <pvPortMalloc+0x188>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d869      	bhi.n	8004ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ad8:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ade:	e004      	b.n	8004aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d903      	bls.n	8004afc <pvPortMalloc+0xa4>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f1      	bne.n	8004ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004afc:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <pvPortMalloc+0x180>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d050      	beq.n	8004ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	2308      	movs	r3, #8
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d91f      	bls.n	8004b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <pvPortMalloc+0xf8>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	613b      	str	r3, [r7, #16]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b62:	69b8      	ldr	r0, [r7, #24]
 8004b64:	f000 f908 	bl	8004d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <pvPortMalloc+0x188>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <pvPortMalloc+0x188>)
 8004b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <pvPortMalloc+0x188>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <pvPortMalloc+0x190>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d203      	bcs.n	8004b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <pvPortMalloc+0x188>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <pvPortMalloc+0x190>)
 8004b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <pvPortMalloc+0x184>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <pvPortMalloc+0x194>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <pvPortMalloc+0x194>)
 8004ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ba8:	f7fe fd04 	bl	80035b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <pvPortMalloc+0x174>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60fb      	str	r3, [r7, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <pvPortMalloc+0x172>
	return pvReturn;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20004a5c 	.word	0x20004a5c
 8004bdc:	20004a70 	.word	0x20004a70
 8004be0:	20004a60 	.word	0x20004a60
 8004be4:	20004a54 	.word	0x20004a54
 8004be8:	20004a64 	.word	0x20004a64
 8004bec:	20004a68 	.word	0x20004a68

08004bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04d      	beq.n	8004c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c02:	2308      	movs	r3, #8
 8004c04:	425b      	negs	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <vPortFree+0xb8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <vPortFree+0x44>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	60fb      	str	r3, [r7, #12]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <vPortFree+0x62>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60bb      	str	r3, [r7, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <vPortFree+0xb8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11a      	bne.n	8004c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <vPortFree+0xb8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c78:	f7fe fc8e 	bl	8003598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <vPortFree+0xbc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <vPortFree+0xbc>)
 8004c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 f874 	bl	8004d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <vPortFree+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <vPortFree+0xc0>)
 8004c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c9a:	f7fe fc8b 	bl	80035b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20004a70 	.word	0x20004a70
 8004cac:	20004a60 	.word	0x20004a60
 8004cb0:	20004a6c 	.word	0x20004a6c

08004cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <prvHeapInit+0xac>)
 8004cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3307      	adds	r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <prvHeapInit+0xac>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <prvHeapInit+0xb0>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <prvHeapInit+0xb0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d00:	2208      	movs	r2, #8
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <prvHeapInit+0xb4>)
 8004d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <prvHeapInit+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvHeapInit+0xb4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <prvHeapInit+0xb4>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <prvHeapInit+0xb8>)
 8004d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <prvHeapInit+0xbc>)
 8004d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <prvHeapInit+0xc0>)
 8004d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000e54 	.word	0x20000e54
 8004d64:	20004a54 	.word	0x20004a54
 8004d68:	20004a5c 	.word	0x20004a5c
 8004d6c:	20004a64 	.word	0x20004a64
 8004d70:	20004a60 	.word	0x20004a60
 8004d74:	20004a70 	.word	0x20004a70

08004d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <prvInsertBlockIntoFreeList+0xac>)
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <prvInsertBlockIntoFreeList+0x14>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d8f7      	bhi.n	8004d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d108      	bne.n	8004dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d118      	bne.n	8004e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d00d      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e008      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e003      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d002      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20004a54 	.word	0x20004a54
 8004e28:	20004a5c 	.word	0x20004a5c

08004e2c <std>:
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	4604      	mov	r4, r0
 8004e32:	e9c0 3300 	strd	r3, r3, [r0]
 8004e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e3a:	6083      	str	r3, [r0, #8]
 8004e3c:	8181      	strh	r1, [r0, #12]
 8004e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e40:	81c2      	strh	r2, [r0, #14]
 8004e42:	6183      	str	r3, [r0, #24]
 8004e44:	4619      	mov	r1, r3
 8004e46:	2208      	movs	r2, #8
 8004e48:	305c      	adds	r0, #92	; 0x5c
 8004e4a:	f000 f9f7 	bl	800523c <memset>
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <std+0x58>)
 8004e50:	6263      	str	r3, [r4, #36]	; 0x24
 8004e52:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <std+0x5c>)
 8004e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <std+0x60>)
 8004e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <std+0x64>)
 8004e5c:	6323      	str	r3, [r4, #48]	; 0x30
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <std+0x68>)
 8004e60:	6224      	str	r4, [r4, #32]
 8004e62:	429c      	cmp	r4, r3
 8004e64:	d006      	beq.n	8004e74 <std+0x48>
 8004e66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e6a:	4294      	cmp	r4, r2
 8004e6c:	d002      	beq.n	8004e74 <std+0x48>
 8004e6e:	33d0      	adds	r3, #208	; 0xd0
 8004e70:	429c      	cmp	r4, r3
 8004e72:	d105      	bne.n	8004e80 <std+0x54>
 8004e74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7c:	f000 ba56 	b.w	800532c <__retarget_lock_init_recursive>
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	bf00      	nop
 8004e84:	0800508d 	.word	0x0800508d
 8004e88:	080050af 	.word	0x080050af
 8004e8c:	080050e7 	.word	0x080050e7
 8004e90:	0800510b 	.word	0x0800510b
 8004e94:	20004a74 	.word	0x20004a74

08004e98 <stdio_exit_handler>:
 8004e98:	4a02      	ldr	r2, [pc, #8]	; (8004ea4 <stdio_exit_handler+0xc>)
 8004e9a:	4903      	ldr	r1, [pc, #12]	; (8004ea8 <stdio_exit_handler+0x10>)
 8004e9c:	4803      	ldr	r0, [pc, #12]	; (8004eac <stdio_exit_handler+0x14>)
 8004e9e:	f000 b869 	b.w	8004f74 <_fwalk_sglue>
 8004ea2:	bf00      	nop
 8004ea4:	20000010 	.word	0x20000010
 8004ea8:	08005bf5 	.word	0x08005bf5
 8004eac:	2000001c 	.word	0x2000001c

08004eb0 <cleanup_stdio>:
 8004eb0:	6841      	ldr	r1, [r0, #4]
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <cleanup_stdio+0x34>)
 8004eb4:	4299      	cmp	r1, r3
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	4604      	mov	r4, r0
 8004eba:	d001      	beq.n	8004ec0 <cleanup_stdio+0x10>
 8004ebc:	f000 fe9a 	bl	8005bf4 <_fflush_r>
 8004ec0:	68a1      	ldr	r1, [r4, #8]
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <cleanup_stdio+0x38>)
 8004ec4:	4299      	cmp	r1, r3
 8004ec6:	d002      	beq.n	8004ece <cleanup_stdio+0x1e>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f000 fe93 	bl	8005bf4 <_fflush_r>
 8004ece:	68e1      	ldr	r1, [r4, #12]
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <cleanup_stdio+0x3c>)
 8004ed2:	4299      	cmp	r1, r3
 8004ed4:	d004      	beq.n	8004ee0 <cleanup_stdio+0x30>
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004edc:	f000 be8a 	b.w	8005bf4 <_fflush_r>
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20004a74 	.word	0x20004a74
 8004ee8:	20004adc 	.word	0x20004adc
 8004eec:	20004b44 	.word	0x20004b44

08004ef0 <global_stdio_init.part.0>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <global_stdio_init.part.0+0x30>)
 8004ef4:	4c0b      	ldr	r4, [pc, #44]	; (8004f24 <global_stdio_init.part.0+0x34>)
 8004ef6:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <global_stdio_init.part.0+0x38>)
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	4620      	mov	r0, r4
 8004efc:	2200      	movs	r2, #0
 8004efe:	2104      	movs	r1, #4
 8004f00:	f7ff ff94 	bl	8004e2c <std>
 8004f04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2109      	movs	r1, #9
 8004f0c:	f7ff ff8e 	bl	8004e2c <std>
 8004f10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f14:	2202      	movs	r2, #2
 8004f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1a:	2112      	movs	r1, #18
 8004f1c:	f7ff bf86 	b.w	8004e2c <std>
 8004f20:	20004bac 	.word	0x20004bac
 8004f24:	20004a74 	.word	0x20004a74
 8004f28:	08004e99 	.word	0x08004e99

08004f2c <__sfp_lock_acquire>:
 8004f2c:	4801      	ldr	r0, [pc, #4]	; (8004f34 <__sfp_lock_acquire+0x8>)
 8004f2e:	f000 b9fe 	b.w	800532e <__retarget_lock_acquire_recursive>
 8004f32:	bf00      	nop
 8004f34:	20004bb5 	.word	0x20004bb5

08004f38 <__sfp_lock_release>:
 8004f38:	4801      	ldr	r0, [pc, #4]	; (8004f40 <__sfp_lock_release+0x8>)
 8004f3a:	f000 b9f9 	b.w	8005330 <__retarget_lock_release_recursive>
 8004f3e:	bf00      	nop
 8004f40:	20004bb5 	.word	0x20004bb5

08004f44 <__sinit>:
 8004f44:	b510      	push	{r4, lr}
 8004f46:	4604      	mov	r4, r0
 8004f48:	f7ff fff0 	bl	8004f2c <__sfp_lock_acquire>
 8004f4c:	6a23      	ldr	r3, [r4, #32]
 8004f4e:	b11b      	cbz	r3, 8004f58 <__sinit+0x14>
 8004f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f54:	f7ff bff0 	b.w	8004f38 <__sfp_lock_release>
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <__sinit+0x28>)
 8004f5a:	6223      	str	r3, [r4, #32]
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <__sinit+0x2c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f5      	bne.n	8004f50 <__sinit+0xc>
 8004f64:	f7ff ffc4 	bl	8004ef0 <global_stdio_init.part.0>
 8004f68:	e7f2      	b.n	8004f50 <__sinit+0xc>
 8004f6a:	bf00      	nop
 8004f6c:	08004eb1 	.word	0x08004eb1
 8004f70:	20004bac 	.word	0x20004bac

08004f74 <_fwalk_sglue>:
 8004f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f78:	4607      	mov	r7, r0
 8004f7a:	4688      	mov	r8, r1
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	2600      	movs	r6, #0
 8004f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f84:	f1b9 0901 	subs.w	r9, r9, #1
 8004f88:	d505      	bpl.n	8004f96 <_fwalk_sglue+0x22>
 8004f8a:	6824      	ldr	r4, [r4, #0]
 8004f8c:	2c00      	cmp	r4, #0
 8004f8e:	d1f7      	bne.n	8004f80 <_fwalk_sglue+0xc>
 8004f90:	4630      	mov	r0, r6
 8004f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d907      	bls.n	8004fac <_fwalk_sglue+0x38>
 8004f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	d003      	beq.n	8004fac <_fwalk_sglue+0x38>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	47c0      	blx	r8
 8004faa:	4306      	orrs	r6, r0
 8004fac:	3568      	adds	r5, #104	; 0x68
 8004fae:	e7e9      	b.n	8004f84 <_fwalk_sglue+0x10>

08004fb0 <iprintf>:
 8004fb0:	b40f      	push	{r0, r1, r2, r3}
 8004fb2:	b507      	push	{r0, r1, r2, lr}
 8004fb4:	4906      	ldr	r1, [pc, #24]	; (8004fd0 <iprintf+0x20>)
 8004fb6:	ab04      	add	r3, sp, #16
 8004fb8:	6808      	ldr	r0, [r1, #0]
 8004fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fbe:	6881      	ldr	r1, [r0, #8]
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	f000 fae7 	bl	8005594 <_vfiprintf_r>
 8004fc6:	b003      	add	sp, #12
 8004fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fcc:	b004      	add	sp, #16
 8004fce:	4770      	bx	lr
 8004fd0:	20000068 	.word	0x20000068

08004fd4 <_puts_r>:
 8004fd4:	6a03      	ldr	r3, [r0, #32]
 8004fd6:	b570      	push	{r4, r5, r6, lr}
 8004fd8:	6884      	ldr	r4, [r0, #8]
 8004fda:	4605      	mov	r5, r0
 8004fdc:	460e      	mov	r6, r1
 8004fde:	b90b      	cbnz	r3, 8004fe4 <_puts_r+0x10>
 8004fe0:	f7ff ffb0 	bl	8004f44 <__sinit>
 8004fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe6:	07db      	lsls	r3, r3, #31
 8004fe8:	d405      	bmi.n	8004ff6 <_puts_r+0x22>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	0598      	lsls	r0, r3, #22
 8004fee:	d402      	bmi.n	8004ff6 <_puts_r+0x22>
 8004ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff2:	f000 f99c 	bl	800532e <__retarget_lock_acquire_recursive>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	0719      	lsls	r1, r3, #28
 8004ffa:	d513      	bpl.n	8005024 <_puts_r+0x50>
 8004ffc:	6923      	ldr	r3, [r4, #16]
 8004ffe:	b18b      	cbz	r3, 8005024 <_puts_r+0x50>
 8005000:	3e01      	subs	r6, #1
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005008:	3b01      	subs	r3, #1
 800500a:	60a3      	str	r3, [r4, #8]
 800500c:	b9e9      	cbnz	r1, 800504a <_puts_r+0x76>
 800500e:	2b00      	cmp	r3, #0
 8005010:	da2e      	bge.n	8005070 <_puts_r+0x9c>
 8005012:	4622      	mov	r2, r4
 8005014:	210a      	movs	r1, #10
 8005016:	4628      	mov	r0, r5
 8005018:	f000 f87b 	bl	8005112 <__swbuf_r>
 800501c:	3001      	adds	r0, #1
 800501e:	d007      	beq.n	8005030 <_puts_r+0x5c>
 8005020:	250a      	movs	r5, #10
 8005022:	e007      	b.n	8005034 <_puts_r+0x60>
 8005024:	4621      	mov	r1, r4
 8005026:	4628      	mov	r0, r5
 8005028:	f000 f8b0 	bl	800518c <__swsetup_r>
 800502c:	2800      	cmp	r0, #0
 800502e:	d0e7      	beq.n	8005000 <_puts_r+0x2c>
 8005030:	f04f 35ff 	mov.w	r5, #4294967295
 8005034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005036:	07da      	lsls	r2, r3, #31
 8005038:	d405      	bmi.n	8005046 <_puts_r+0x72>
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	059b      	lsls	r3, r3, #22
 800503e:	d402      	bmi.n	8005046 <_puts_r+0x72>
 8005040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005042:	f000 f975 	bl	8005330 <__retarget_lock_release_recursive>
 8005046:	4628      	mov	r0, r5
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	2b00      	cmp	r3, #0
 800504c:	da04      	bge.n	8005058 <_puts_r+0x84>
 800504e:	69a2      	ldr	r2, [r4, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	dc06      	bgt.n	8005062 <_puts_r+0x8e>
 8005054:	290a      	cmp	r1, #10
 8005056:	d004      	beq.n	8005062 <_puts_r+0x8e>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	7019      	strb	r1, [r3, #0]
 8005060:	e7cf      	b.n	8005002 <_puts_r+0x2e>
 8005062:	4622      	mov	r2, r4
 8005064:	4628      	mov	r0, r5
 8005066:	f000 f854 	bl	8005112 <__swbuf_r>
 800506a:	3001      	adds	r0, #1
 800506c:	d1c9      	bne.n	8005002 <_puts_r+0x2e>
 800506e:	e7df      	b.n	8005030 <_puts_r+0x5c>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	250a      	movs	r5, #10
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	6022      	str	r2, [r4, #0]
 8005078:	701d      	strb	r5, [r3, #0]
 800507a:	e7db      	b.n	8005034 <_puts_r+0x60>

0800507c <puts>:
 800507c:	4b02      	ldr	r3, [pc, #8]	; (8005088 <puts+0xc>)
 800507e:	4601      	mov	r1, r0
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	f7ff bfa7 	b.w	8004fd4 <_puts_r>
 8005086:	bf00      	nop
 8005088:	20000068 	.word	0x20000068

0800508c <__sread>:
 800508c:	b510      	push	{r4, lr}
 800508e:	460c      	mov	r4, r1
 8005090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005094:	f000 f8fc 	bl	8005290 <_read_r>
 8005098:	2800      	cmp	r0, #0
 800509a:	bfab      	itete	ge
 800509c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800509e:	89a3      	ldrhlt	r3, [r4, #12]
 80050a0:	181b      	addge	r3, r3, r0
 80050a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050a6:	bfac      	ite	ge
 80050a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80050aa:	81a3      	strhlt	r3, [r4, #12]
 80050ac:	bd10      	pop	{r4, pc}

080050ae <__swrite>:
 80050ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b2:	461f      	mov	r7, r3
 80050b4:	898b      	ldrh	r3, [r1, #12]
 80050b6:	05db      	lsls	r3, r3, #23
 80050b8:	4605      	mov	r5, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	4616      	mov	r6, r2
 80050be:	d505      	bpl.n	80050cc <__swrite+0x1e>
 80050c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c4:	2302      	movs	r3, #2
 80050c6:	2200      	movs	r2, #0
 80050c8:	f000 f8d0 	bl	800526c <_lseek_r>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d6:	81a3      	strh	r3, [r4, #12]
 80050d8:	4632      	mov	r2, r6
 80050da:	463b      	mov	r3, r7
 80050dc:	4628      	mov	r0, r5
 80050de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e2:	f000 b8e7 	b.w	80052b4 <_write_r>

080050e6 <__sseek>:
 80050e6:	b510      	push	{r4, lr}
 80050e8:	460c      	mov	r4, r1
 80050ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ee:	f000 f8bd 	bl	800526c <_lseek_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	bf15      	itete	ne
 80050f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80050fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005102:	81a3      	strheq	r3, [r4, #12]
 8005104:	bf18      	it	ne
 8005106:	81a3      	strhne	r3, [r4, #12]
 8005108:	bd10      	pop	{r4, pc}

0800510a <__sclose>:
 800510a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510e:	f000 b89d 	b.w	800524c <_close_r>

08005112 <__swbuf_r>:
 8005112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005114:	460e      	mov	r6, r1
 8005116:	4614      	mov	r4, r2
 8005118:	4605      	mov	r5, r0
 800511a:	b118      	cbz	r0, 8005124 <__swbuf_r+0x12>
 800511c:	6a03      	ldr	r3, [r0, #32]
 800511e:	b90b      	cbnz	r3, 8005124 <__swbuf_r+0x12>
 8005120:	f7ff ff10 	bl	8004f44 <__sinit>
 8005124:	69a3      	ldr	r3, [r4, #24]
 8005126:	60a3      	str	r3, [r4, #8]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	071a      	lsls	r2, r3, #28
 800512c:	d525      	bpl.n	800517a <__swbuf_r+0x68>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	b31b      	cbz	r3, 800517a <__swbuf_r+0x68>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	1a98      	subs	r0, r3, r2
 8005138:	6963      	ldr	r3, [r4, #20]
 800513a:	b2f6      	uxtb	r6, r6
 800513c:	4283      	cmp	r3, r0
 800513e:	4637      	mov	r7, r6
 8005140:	dc04      	bgt.n	800514c <__swbuf_r+0x3a>
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f000 fd55 	bl	8005bf4 <_fflush_r>
 800514a:	b9e0      	cbnz	r0, 8005186 <__swbuf_r+0x74>
 800514c:	68a3      	ldr	r3, [r4, #8]
 800514e:	3b01      	subs	r3, #1
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	6022      	str	r2, [r4, #0]
 8005158:	701e      	strb	r6, [r3, #0]
 800515a:	6962      	ldr	r2, [r4, #20]
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	429a      	cmp	r2, r3
 8005160:	d004      	beq.n	800516c <__swbuf_r+0x5a>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	07db      	lsls	r3, r3, #31
 8005166:	d506      	bpl.n	8005176 <__swbuf_r+0x64>
 8005168:	2e0a      	cmp	r6, #10
 800516a:	d104      	bne.n	8005176 <__swbuf_r+0x64>
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fd40 	bl	8005bf4 <_fflush_r>
 8005174:	b938      	cbnz	r0, 8005186 <__swbuf_r+0x74>
 8005176:	4638      	mov	r0, r7
 8005178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f000 f805 	bl	800518c <__swsetup_r>
 8005182:	2800      	cmp	r0, #0
 8005184:	d0d5      	beq.n	8005132 <__swbuf_r+0x20>
 8005186:	f04f 37ff 	mov.w	r7, #4294967295
 800518a:	e7f4      	b.n	8005176 <__swbuf_r+0x64>

0800518c <__swsetup_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <__swsetup_r+0xac>)
 8005190:	4605      	mov	r5, r0
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	460c      	mov	r4, r1
 8005196:	b118      	cbz	r0, 80051a0 <__swsetup_r+0x14>
 8005198:	6a03      	ldr	r3, [r0, #32]
 800519a:	b90b      	cbnz	r3, 80051a0 <__swsetup_r+0x14>
 800519c:	f7ff fed2 	bl	8004f44 <__sinit>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051a6:	0718      	lsls	r0, r3, #28
 80051a8:	d422      	bmi.n	80051f0 <__swsetup_r+0x64>
 80051aa:	06d9      	lsls	r1, r3, #27
 80051ac:	d407      	bmi.n	80051be <__swsetup_r+0x32>
 80051ae:	2309      	movs	r3, #9
 80051b0:	602b      	str	r3, [r5, #0]
 80051b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e034      	b.n	8005228 <__swsetup_r+0x9c>
 80051be:	0758      	lsls	r0, r3, #29
 80051c0:	d512      	bpl.n	80051e8 <__swsetup_r+0x5c>
 80051c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051c4:	b141      	cbz	r1, 80051d8 <__swsetup_r+0x4c>
 80051c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051ca:	4299      	cmp	r1, r3
 80051cc:	d002      	beq.n	80051d4 <__swsetup_r+0x48>
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 f8be 	bl	8005350 <_free_r>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6363      	str	r3, [r4, #52]	; 0x34
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	2300      	movs	r3, #0
 80051e2:	6063      	str	r3, [r4, #4]
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f043 0308 	orr.w	r3, r3, #8
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	b94b      	cbnz	r3, 8005208 <__swsetup_r+0x7c>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fe:	d003      	beq.n	8005208 <__swsetup_r+0x7c>
 8005200:	4621      	mov	r1, r4
 8005202:	4628      	mov	r0, r5
 8005204:	f000 fd44 	bl	8005c90 <__smakebuf_r>
 8005208:	89a0      	ldrh	r0, [r4, #12]
 800520a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800520e:	f010 0301 	ands.w	r3, r0, #1
 8005212:	d00a      	beq.n	800522a <__swsetup_r+0x9e>
 8005214:	2300      	movs	r3, #0
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	6963      	ldr	r3, [r4, #20]
 800521a:	425b      	negs	r3, r3
 800521c:	61a3      	str	r3, [r4, #24]
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	b943      	cbnz	r3, 8005234 <__swsetup_r+0xa8>
 8005222:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005226:	d1c4      	bne.n	80051b2 <__swsetup_r+0x26>
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	0781      	lsls	r1, r0, #30
 800522c:	bf58      	it	pl
 800522e:	6963      	ldrpl	r3, [r4, #20]
 8005230:	60a3      	str	r3, [r4, #8]
 8005232:	e7f4      	b.n	800521e <__swsetup_r+0x92>
 8005234:	2000      	movs	r0, #0
 8005236:	e7f7      	b.n	8005228 <__swsetup_r+0x9c>
 8005238:	20000068 	.word	0x20000068

0800523c <memset>:
 800523c:	4402      	add	r2, r0
 800523e:	4603      	mov	r3, r0
 8005240:	4293      	cmp	r3, r2
 8005242:	d100      	bne.n	8005246 <memset+0xa>
 8005244:	4770      	bx	lr
 8005246:	f803 1b01 	strb.w	r1, [r3], #1
 800524a:	e7f9      	b.n	8005240 <memset+0x4>

0800524c <_close_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	; (8005268 <_close_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fb fc5d 	bl	8000b16 <_close>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_close_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_close_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	20004bb0 	.word	0x20004bb0

0800526c <_lseek_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d07      	ldr	r5, [pc, #28]	; (800528c <_lseek_r+0x20>)
 8005270:	4604      	mov	r4, r0
 8005272:	4608      	mov	r0, r1
 8005274:	4611      	mov	r1, r2
 8005276:	2200      	movs	r2, #0
 8005278:	602a      	str	r2, [r5, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	f7fb fc72 	bl	8000b64 <_lseek>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d102      	bne.n	800528a <_lseek_r+0x1e>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	b103      	cbz	r3, 800528a <_lseek_r+0x1e>
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	20004bb0 	.word	0x20004bb0

08005290 <_read_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4d07      	ldr	r5, [pc, #28]	; (80052b0 <_read_r+0x20>)
 8005294:	4604      	mov	r4, r0
 8005296:	4608      	mov	r0, r1
 8005298:	4611      	mov	r1, r2
 800529a:	2200      	movs	r2, #0
 800529c:	602a      	str	r2, [r5, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	f7fb fc00 	bl	8000aa4 <_read>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_read_r+0x1e>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_read_r+0x1e>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20004bb0 	.word	0x20004bb0

080052b4 <_write_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d07      	ldr	r5, [pc, #28]	; (80052d4 <_write_r+0x20>)
 80052b8:	4604      	mov	r4, r0
 80052ba:	4608      	mov	r0, r1
 80052bc:	4611      	mov	r1, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	602a      	str	r2, [r5, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f7fb fc0b 	bl	8000ade <_write>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_write_r+0x1e>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_write_r+0x1e>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	20004bb0 	.word	0x20004bb0

080052d8 <__errno>:
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <__errno+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000068 	.word	0x20000068

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4d0d      	ldr	r5, [pc, #52]	; (800531c <__libc_init_array+0x38>)
 80052e8:	4c0d      	ldr	r4, [pc, #52]	; (8005320 <__libc_init_array+0x3c>)
 80052ea:	1b64      	subs	r4, r4, r5
 80052ec:	10a4      	asrs	r4, r4, #2
 80052ee:	2600      	movs	r6, #0
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	4d0b      	ldr	r5, [pc, #44]	; (8005324 <__libc_init_array+0x40>)
 80052f6:	4c0c      	ldr	r4, [pc, #48]	; (8005328 <__libc_init_array+0x44>)
 80052f8:	f000 fd38 	bl	8005d6c <_init>
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	2600      	movs	r6, #0
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	f855 3b04 	ldr.w	r3, [r5], #4
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	f855 3b04 	ldr.w	r3, [r5], #4
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	08005e54 	.word	0x08005e54
 8005320:	08005e54 	.word	0x08005e54
 8005324:	08005e54 	.word	0x08005e54
 8005328:	08005e58 	.word	0x08005e58

0800532c <__retarget_lock_init_recursive>:
 800532c:	4770      	bx	lr

0800532e <__retarget_lock_acquire_recursive>:
 800532e:	4770      	bx	lr

08005330 <__retarget_lock_release_recursive>:
 8005330:	4770      	bx	lr

08005332 <memcpy>:
 8005332:	440a      	add	r2, r1
 8005334:	4291      	cmp	r1, r2
 8005336:	f100 33ff 	add.w	r3, r0, #4294967295
 800533a:	d100      	bne.n	800533e <memcpy+0xc>
 800533c:	4770      	bx	lr
 800533e:	b510      	push	{r4, lr}
 8005340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005348:	4291      	cmp	r1, r2
 800534a:	d1f9      	bne.n	8005340 <memcpy+0xe>
 800534c:	bd10      	pop	{r4, pc}
	...

08005350 <_free_r>:
 8005350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005352:	2900      	cmp	r1, #0
 8005354:	d044      	beq.n	80053e0 <_free_r+0x90>
 8005356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800535a:	9001      	str	r0, [sp, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f1a1 0404 	sub.w	r4, r1, #4
 8005362:	bfb8      	it	lt
 8005364:	18e4      	addlt	r4, r4, r3
 8005366:	f000 f8df 	bl	8005528 <__malloc_lock>
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <_free_r+0x94>)
 800536c:	9801      	ldr	r0, [sp, #4]
 800536e:	6813      	ldr	r3, [r2, #0]
 8005370:	b933      	cbnz	r3, 8005380 <_free_r+0x30>
 8005372:	6063      	str	r3, [r4, #4]
 8005374:	6014      	str	r4, [r2, #0]
 8005376:	b003      	add	sp, #12
 8005378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800537c:	f000 b8da 	b.w	8005534 <__malloc_unlock>
 8005380:	42a3      	cmp	r3, r4
 8005382:	d908      	bls.n	8005396 <_free_r+0x46>
 8005384:	6825      	ldr	r5, [r4, #0]
 8005386:	1961      	adds	r1, r4, r5
 8005388:	428b      	cmp	r3, r1
 800538a:	bf01      	itttt	eq
 800538c:	6819      	ldreq	r1, [r3, #0]
 800538e:	685b      	ldreq	r3, [r3, #4]
 8005390:	1949      	addeq	r1, r1, r5
 8005392:	6021      	streq	r1, [r4, #0]
 8005394:	e7ed      	b.n	8005372 <_free_r+0x22>
 8005396:	461a      	mov	r2, r3
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b10b      	cbz	r3, 80053a0 <_free_r+0x50>
 800539c:	42a3      	cmp	r3, r4
 800539e:	d9fa      	bls.n	8005396 <_free_r+0x46>
 80053a0:	6811      	ldr	r1, [r2, #0]
 80053a2:	1855      	adds	r5, r2, r1
 80053a4:	42a5      	cmp	r5, r4
 80053a6:	d10b      	bne.n	80053c0 <_free_r+0x70>
 80053a8:	6824      	ldr	r4, [r4, #0]
 80053aa:	4421      	add	r1, r4
 80053ac:	1854      	adds	r4, r2, r1
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	6011      	str	r1, [r2, #0]
 80053b2:	d1e0      	bne.n	8005376 <_free_r+0x26>
 80053b4:	681c      	ldr	r4, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	6053      	str	r3, [r2, #4]
 80053ba:	440c      	add	r4, r1
 80053bc:	6014      	str	r4, [r2, #0]
 80053be:	e7da      	b.n	8005376 <_free_r+0x26>
 80053c0:	d902      	bls.n	80053c8 <_free_r+0x78>
 80053c2:	230c      	movs	r3, #12
 80053c4:	6003      	str	r3, [r0, #0]
 80053c6:	e7d6      	b.n	8005376 <_free_r+0x26>
 80053c8:	6825      	ldr	r5, [r4, #0]
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf04      	itt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	6063      	str	r3, [r4, #4]
 80053d6:	bf04      	itt	eq
 80053d8:	1949      	addeq	r1, r1, r5
 80053da:	6021      	streq	r1, [r4, #0]
 80053dc:	6054      	str	r4, [r2, #4]
 80053de:	e7ca      	b.n	8005376 <_free_r+0x26>
 80053e0:	b003      	add	sp, #12
 80053e2:	bd30      	pop	{r4, r5, pc}
 80053e4:	20004bb8 	.word	0x20004bb8

080053e8 <sbrk_aligned>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4e0e      	ldr	r6, [pc, #56]	; (8005424 <sbrk_aligned+0x3c>)
 80053ec:	460c      	mov	r4, r1
 80053ee:	6831      	ldr	r1, [r6, #0]
 80053f0:	4605      	mov	r5, r0
 80053f2:	b911      	cbnz	r1, 80053fa <sbrk_aligned+0x12>
 80053f4:	f000 fcaa 	bl	8005d4c <_sbrk_r>
 80053f8:	6030      	str	r0, [r6, #0]
 80053fa:	4621      	mov	r1, r4
 80053fc:	4628      	mov	r0, r5
 80053fe:	f000 fca5 	bl	8005d4c <_sbrk_r>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d00a      	beq.n	800541c <sbrk_aligned+0x34>
 8005406:	1cc4      	adds	r4, r0, #3
 8005408:	f024 0403 	bic.w	r4, r4, #3
 800540c:	42a0      	cmp	r0, r4
 800540e:	d007      	beq.n	8005420 <sbrk_aligned+0x38>
 8005410:	1a21      	subs	r1, r4, r0
 8005412:	4628      	mov	r0, r5
 8005414:	f000 fc9a 	bl	8005d4c <_sbrk_r>
 8005418:	3001      	adds	r0, #1
 800541a:	d101      	bne.n	8005420 <sbrk_aligned+0x38>
 800541c:	f04f 34ff 	mov.w	r4, #4294967295
 8005420:	4620      	mov	r0, r4
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	20004bbc 	.word	0x20004bbc

08005428 <_malloc_r>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	1ccd      	adds	r5, r1, #3
 800542e:	f025 0503 	bic.w	r5, r5, #3
 8005432:	3508      	adds	r5, #8
 8005434:	2d0c      	cmp	r5, #12
 8005436:	bf38      	it	cc
 8005438:	250c      	movcc	r5, #12
 800543a:	2d00      	cmp	r5, #0
 800543c:	4607      	mov	r7, r0
 800543e:	db01      	blt.n	8005444 <_malloc_r+0x1c>
 8005440:	42a9      	cmp	r1, r5
 8005442:	d905      	bls.n	8005450 <_malloc_r+0x28>
 8005444:	230c      	movs	r3, #12
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	2600      	movs	r6, #0
 800544a:	4630      	mov	r0, r6
 800544c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005524 <_malloc_r+0xfc>
 8005454:	f000 f868 	bl	8005528 <__malloc_lock>
 8005458:	f8d8 3000 	ldr.w	r3, [r8]
 800545c:	461c      	mov	r4, r3
 800545e:	bb5c      	cbnz	r4, 80054b8 <_malloc_r+0x90>
 8005460:	4629      	mov	r1, r5
 8005462:	4638      	mov	r0, r7
 8005464:	f7ff ffc0 	bl	80053e8 <sbrk_aligned>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	4604      	mov	r4, r0
 800546c:	d155      	bne.n	800551a <_malloc_r+0xf2>
 800546e:	f8d8 4000 	ldr.w	r4, [r8]
 8005472:	4626      	mov	r6, r4
 8005474:	2e00      	cmp	r6, #0
 8005476:	d145      	bne.n	8005504 <_malloc_r+0xdc>
 8005478:	2c00      	cmp	r4, #0
 800547a:	d048      	beq.n	800550e <_malloc_r+0xe6>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	4631      	mov	r1, r6
 8005480:	4638      	mov	r0, r7
 8005482:	eb04 0903 	add.w	r9, r4, r3
 8005486:	f000 fc61 	bl	8005d4c <_sbrk_r>
 800548a:	4581      	cmp	r9, r0
 800548c:	d13f      	bne.n	800550e <_malloc_r+0xe6>
 800548e:	6821      	ldr	r1, [r4, #0]
 8005490:	1a6d      	subs	r5, r5, r1
 8005492:	4629      	mov	r1, r5
 8005494:	4638      	mov	r0, r7
 8005496:	f7ff ffa7 	bl	80053e8 <sbrk_aligned>
 800549a:	3001      	adds	r0, #1
 800549c:	d037      	beq.n	800550e <_malloc_r+0xe6>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	442b      	add	r3, r5
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	f8d8 3000 	ldr.w	r3, [r8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d038      	beq.n	800551e <_malloc_r+0xf6>
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	42a2      	cmp	r2, r4
 80054b0:	d12b      	bne.n	800550a <_malloc_r+0xe2>
 80054b2:	2200      	movs	r2, #0
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	e00f      	b.n	80054d8 <_malloc_r+0xb0>
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	1b52      	subs	r2, r2, r5
 80054bc:	d41f      	bmi.n	80054fe <_malloc_r+0xd6>
 80054be:	2a0b      	cmp	r2, #11
 80054c0:	d917      	bls.n	80054f2 <_malloc_r+0xca>
 80054c2:	1961      	adds	r1, r4, r5
 80054c4:	42a3      	cmp	r3, r4
 80054c6:	6025      	str	r5, [r4, #0]
 80054c8:	bf18      	it	ne
 80054ca:	6059      	strne	r1, [r3, #4]
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	bf08      	it	eq
 80054d0:	f8c8 1000 	streq.w	r1, [r8]
 80054d4:	5162      	str	r2, [r4, r5]
 80054d6:	604b      	str	r3, [r1, #4]
 80054d8:	4638      	mov	r0, r7
 80054da:	f104 060b 	add.w	r6, r4, #11
 80054de:	f000 f829 	bl	8005534 <__malloc_unlock>
 80054e2:	f026 0607 	bic.w	r6, r6, #7
 80054e6:	1d23      	adds	r3, r4, #4
 80054e8:	1af2      	subs	r2, r6, r3
 80054ea:	d0ae      	beq.n	800544a <_malloc_r+0x22>
 80054ec:	1b9b      	subs	r3, r3, r6
 80054ee:	50a3      	str	r3, [r4, r2]
 80054f0:	e7ab      	b.n	800544a <_malloc_r+0x22>
 80054f2:	42a3      	cmp	r3, r4
 80054f4:	6862      	ldr	r2, [r4, #4]
 80054f6:	d1dd      	bne.n	80054b4 <_malloc_r+0x8c>
 80054f8:	f8c8 2000 	str.w	r2, [r8]
 80054fc:	e7ec      	b.n	80054d8 <_malloc_r+0xb0>
 80054fe:	4623      	mov	r3, r4
 8005500:	6864      	ldr	r4, [r4, #4]
 8005502:	e7ac      	b.n	800545e <_malloc_r+0x36>
 8005504:	4634      	mov	r4, r6
 8005506:	6876      	ldr	r6, [r6, #4]
 8005508:	e7b4      	b.n	8005474 <_malloc_r+0x4c>
 800550a:	4613      	mov	r3, r2
 800550c:	e7cc      	b.n	80054a8 <_malloc_r+0x80>
 800550e:	230c      	movs	r3, #12
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4638      	mov	r0, r7
 8005514:	f000 f80e 	bl	8005534 <__malloc_unlock>
 8005518:	e797      	b.n	800544a <_malloc_r+0x22>
 800551a:	6025      	str	r5, [r4, #0]
 800551c:	e7dc      	b.n	80054d8 <_malloc_r+0xb0>
 800551e:	605b      	str	r3, [r3, #4]
 8005520:	deff      	udf	#255	; 0xff
 8005522:	bf00      	nop
 8005524:	20004bb8 	.word	0x20004bb8

08005528 <__malloc_lock>:
 8005528:	4801      	ldr	r0, [pc, #4]	; (8005530 <__malloc_lock+0x8>)
 800552a:	f7ff bf00 	b.w	800532e <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	20004bb4 	.word	0x20004bb4

08005534 <__malloc_unlock>:
 8005534:	4801      	ldr	r0, [pc, #4]	; (800553c <__malloc_unlock+0x8>)
 8005536:	f7ff befb 	b.w	8005330 <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	20004bb4 	.word	0x20004bb4

08005540 <__sfputc_r>:
 8005540:	6893      	ldr	r3, [r2, #8]
 8005542:	3b01      	subs	r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	b410      	push	{r4}
 8005548:	6093      	str	r3, [r2, #8]
 800554a:	da08      	bge.n	800555e <__sfputc_r+0x1e>
 800554c:	6994      	ldr	r4, [r2, #24]
 800554e:	42a3      	cmp	r3, r4
 8005550:	db01      	blt.n	8005556 <__sfputc_r+0x16>
 8005552:	290a      	cmp	r1, #10
 8005554:	d103      	bne.n	800555e <__sfputc_r+0x1e>
 8005556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800555a:	f7ff bdda 	b.w	8005112 <__swbuf_r>
 800555e:	6813      	ldr	r3, [r2, #0]
 8005560:	1c58      	adds	r0, r3, #1
 8005562:	6010      	str	r0, [r2, #0]
 8005564:	7019      	strb	r1, [r3, #0]
 8005566:	4608      	mov	r0, r1
 8005568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556c:	4770      	bx	lr

0800556e <__sfputs_r>:
 800556e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005570:	4606      	mov	r6, r0
 8005572:	460f      	mov	r7, r1
 8005574:	4614      	mov	r4, r2
 8005576:	18d5      	adds	r5, r2, r3
 8005578:	42ac      	cmp	r4, r5
 800557a:	d101      	bne.n	8005580 <__sfputs_r+0x12>
 800557c:	2000      	movs	r0, #0
 800557e:	e007      	b.n	8005590 <__sfputs_r+0x22>
 8005580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005584:	463a      	mov	r2, r7
 8005586:	4630      	mov	r0, r6
 8005588:	f7ff ffda 	bl	8005540 <__sfputc_r>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d1f3      	bne.n	8005578 <__sfputs_r+0xa>
 8005590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005594 <_vfiprintf_r>:
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	460d      	mov	r5, r1
 800559a:	b09d      	sub	sp, #116	; 0x74
 800559c:	4614      	mov	r4, r2
 800559e:	4698      	mov	r8, r3
 80055a0:	4606      	mov	r6, r0
 80055a2:	b118      	cbz	r0, 80055ac <_vfiprintf_r+0x18>
 80055a4:	6a03      	ldr	r3, [r0, #32]
 80055a6:	b90b      	cbnz	r3, 80055ac <_vfiprintf_r+0x18>
 80055a8:	f7ff fccc 	bl	8004f44 <__sinit>
 80055ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055ae:	07d9      	lsls	r1, r3, #31
 80055b0:	d405      	bmi.n	80055be <_vfiprintf_r+0x2a>
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	059a      	lsls	r2, r3, #22
 80055b6:	d402      	bmi.n	80055be <_vfiprintf_r+0x2a>
 80055b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ba:	f7ff feb8 	bl	800532e <__retarget_lock_acquire_recursive>
 80055be:	89ab      	ldrh	r3, [r5, #12]
 80055c0:	071b      	lsls	r3, r3, #28
 80055c2:	d501      	bpl.n	80055c8 <_vfiprintf_r+0x34>
 80055c4:	692b      	ldr	r3, [r5, #16]
 80055c6:	b99b      	cbnz	r3, 80055f0 <_vfiprintf_r+0x5c>
 80055c8:	4629      	mov	r1, r5
 80055ca:	4630      	mov	r0, r6
 80055cc:	f7ff fdde 	bl	800518c <__swsetup_r>
 80055d0:	b170      	cbz	r0, 80055f0 <_vfiprintf_r+0x5c>
 80055d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055d4:	07dc      	lsls	r4, r3, #31
 80055d6:	d504      	bpl.n	80055e2 <_vfiprintf_r+0x4e>
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	b01d      	add	sp, #116	; 0x74
 80055de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	0598      	lsls	r0, r3, #22
 80055e6:	d4f7      	bmi.n	80055d8 <_vfiprintf_r+0x44>
 80055e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ea:	f7ff fea1 	bl	8005330 <__retarget_lock_release_recursive>
 80055ee:	e7f3      	b.n	80055d8 <_vfiprintf_r+0x44>
 80055f0:	2300      	movs	r3, #0
 80055f2:	9309      	str	r3, [sp, #36]	; 0x24
 80055f4:	2320      	movs	r3, #32
 80055f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80055fe:	2330      	movs	r3, #48	; 0x30
 8005600:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057b4 <_vfiprintf_r+0x220>
 8005604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005608:	f04f 0901 	mov.w	r9, #1
 800560c:	4623      	mov	r3, r4
 800560e:	469a      	mov	sl, r3
 8005610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005614:	b10a      	cbz	r2, 800561a <_vfiprintf_r+0x86>
 8005616:	2a25      	cmp	r2, #37	; 0x25
 8005618:	d1f9      	bne.n	800560e <_vfiprintf_r+0x7a>
 800561a:	ebba 0b04 	subs.w	fp, sl, r4
 800561e:	d00b      	beq.n	8005638 <_vfiprintf_r+0xa4>
 8005620:	465b      	mov	r3, fp
 8005622:	4622      	mov	r2, r4
 8005624:	4629      	mov	r1, r5
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ffa1 	bl	800556e <__sfputs_r>
 800562c:	3001      	adds	r0, #1
 800562e:	f000 80a9 	beq.w	8005784 <_vfiprintf_r+0x1f0>
 8005632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005634:	445a      	add	r2, fp
 8005636:	9209      	str	r2, [sp, #36]	; 0x24
 8005638:	f89a 3000 	ldrb.w	r3, [sl]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a1 	beq.w	8005784 <_vfiprintf_r+0x1f0>
 8005642:	2300      	movs	r3, #0
 8005644:	f04f 32ff 	mov.w	r2, #4294967295
 8005648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800564c:	f10a 0a01 	add.w	sl, sl, #1
 8005650:	9304      	str	r3, [sp, #16]
 8005652:	9307      	str	r3, [sp, #28]
 8005654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005658:	931a      	str	r3, [sp, #104]	; 0x68
 800565a:	4654      	mov	r4, sl
 800565c:	2205      	movs	r2, #5
 800565e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005662:	4854      	ldr	r0, [pc, #336]	; (80057b4 <_vfiprintf_r+0x220>)
 8005664:	f7fa fdbc 	bl	80001e0 <memchr>
 8005668:	9a04      	ldr	r2, [sp, #16]
 800566a:	b9d8      	cbnz	r0, 80056a4 <_vfiprintf_r+0x110>
 800566c:	06d1      	lsls	r1, r2, #27
 800566e:	bf44      	itt	mi
 8005670:	2320      	movmi	r3, #32
 8005672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005676:	0713      	lsls	r3, r2, #28
 8005678:	bf44      	itt	mi
 800567a:	232b      	movmi	r3, #43	; 0x2b
 800567c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005680:	f89a 3000 	ldrb.w	r3, [sl]
 8005684:	2b2a      	cmp	r3, #42	; 0x2a
 8005686:	d015      	beq.n	80056b4 <_vfiprintf_r+0x120>
 8005688:	9a07      	ldr	r2, [sp, #28]
 800568a:	4654      	mov	r4, sl
 800568c:	2000      	movs	r0, #0
 800568e:	f04f 0c0a 	mov.w	ip, #10
 8005692:	4621      	mov	r1, r4
 8005694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005698:	3b30      	subs	r3, #48	; 0x30
 800569a:	2b09      	cmp	r3, #9
 800569c:	d94d      	bls.n	800573a <_vfiprintf_r+0x1a6>
 800569e:	b1b0      	cbz	r0, 80056ce <_vfiprintf_r+0x13a>
 80056a0:	9207      	str	r2, [sp, #28]
 80056a2:	e014      	b.n	80056ce <_vfiprintf_r+0x13a>
 80056a4:	eba0 0308 	sub.w	r3, r0, r8
 80056a8:	fa09 f303 	lsl.w	r3, r9, r3
 80056ac:	4313      	orrs	r3, r2
 80056ae:	9304      	str	r3, [sp, #16]
 80056b0:	46a2      	mov	sl, r4
 80056b2:	e7d2      	b.n	800565a <_vfiprintf_r+0xc6>
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	1d19      	adds	r1, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	9103      	str	r1, [sp, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bfbb      	ittet	lt
 80056c0:	425b      	neglt	r3, r3
 80056c2:	f042 0202 	orrlt.w	r2, r2, #2
 80056c6:	9307      	strge	r3, [sp, #28]
 80056c8:	9307      	strlt	r3, [sp, #28]
 80056ca:	bfb8      	it	lt
 80056cc:	9204      	strlt	r2, [sp, #16]
 80056ce:	7823      	ldrb	r3, [r4, #0]
 80056d0:	2b2e      	cmp	r3, #46	; 0x2e
 80056d2:	d10c      	bne.n	80056ee <_vfiprintf_r+0x15a>
 80056d4:	7863      	ldrb	r3, [r4, #1]
 80056d6:	2b2a      	cmp	r3, #42	; 0x2a
 80056d8:	d134      	bne.n	8005744 <_vfiprintf_r+0x1b0>
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	1d1a      	adds	r2, r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	9203      	str	r2, [sp, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfb8      	it	lt
 80056e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80056ea:	3402      	adds	r4, #2
 80056ec:	9305      	str	r3, [sp, #20]
 80056ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057c4 <_vfiprintf_r+0x230>
 80056f2:	7821      	ldrb	r1, [r4, #0]
 80056f4:	2203      	movs	r2, #3
 80056f6:	4650      	mov	r0, sl
 80056f8:	f7fa fd72 	bl	80001e0 <memchr>
 80056fc:	b138      	cbz	r0, 800570e <_vfiprintf_r+0x17a>
 80056fe:	9b04      	ldr	r3, [sp, #16]
 8005700:	eba0 000a 	sub.w	r0, r0, sl
 8005704:	2240      	movs	r2, #64	; 0x40
 8005706:	4082      	lsls	r2, r0
 8005708:	4313      	orrs	r3, r2
 800570a:	3401      	adds	r4, #1
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005712:	4829      	ldr	r0, [pc, #164]	; (80057b8 <_vfiprintf_r+0x224>)
 8005714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005718:	2206      	movs	r2, #6
 800571a:	f7fa fd61 	bl	80001e0 <memchr>
 800571e:	2800      	cmp	r0, #0
 8005720:	d03f      	beq.n	80057a2 <_vfiprintf_r+0x20e>
 8005722:	4b26      	ldr	r3, [pc, #152]	; (80057bc <_vfiprintf_r+0x228>)
 8005724:	bb1b      	cbnz	r3, 800576e <_vfiprintf_r+0x1da>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	3307      	adds	r3, #7
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	3308      	adds	r3, #8
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005734:	443b      	add	r3, r7
 8005736:	9309      	str	r3, [sp, #36]	; 0x24
 8005738:	e768      	b.n	800560c <_vfiprintf_r+0x78>
 800573a:	fb0c 3202 	mla	r2, ip, r2, r3
 800573e:	460c      	mov	r4, r1
 8005740:	2001      	movs	r0, #1
 8005742:	e7a6      	b.n	8005692 <_vfiprintf_r+0xfe>
 8005744:	2300      	movs	r3, #0
 8005746:	3401      	adds	r4, #1
 8005748:	9305      	str	r3, [sp, #20]
 800574a:	4619      	mov	r1, r3
 800574c:	f04f 0c0a 	mov.w	ip, #10
 8005750:	4620      	mov	r0, r4
 8005752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005756:	3a30      	subs	r2, #48	; 0x30
 8005758:	2a09      	cmp	r2, #9
 800575a:	d903      	bls.n	8005764 <_vfiprintf_r+0x1d0>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0c6      	beq.n	80056ee <_vfiprintf_r+0x15a>
 8005760:	9105      	str	r1, [sp, #20]
 8005762:	e7c4      	b.n	80056ee <_vfiprintf_r+0x15a>
 8005764:	fb0c 2101 	mla	r1, ip, r1, r2
 8005768:	4604      	mov	r4, r0
 800576a:	2301      	movs	r3, #1
 800576c:	e7f0      	b.n	8005750 <_vfiprintf_r+0x1bc>
 800576e:	ab03      	add	r3, sp, #12
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	462a      	mov	r2, r5
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <_vfiprintf_r+0x22c>)
 8005776:	a904      	add	r1, sp, #16
 8005778:	4630      	mov	r0, r6
 800577a:	f3af 8000 	nop.w
 800577e:	4607      	mov	r7, r0
 8005780:	1c78      	adds	r0, r7, #1
 8005782:	d1d6      	bne.n	8005732 <_vfiprintf_r+0x19e>
 8005784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005786:	07d9      	lsls	r1, r3, #31
 8005788:	d405      	bmi.n	8005796 <_vfiprintf_r+0x202>
 800578a:	89ab      	ldrh	r3, [r5, #12]
 800578c:	059a      	lsls	r2, r3, #22
 800578e:	d402      	bmi.n	8005796 <_vfiprintf_r+0x202>
 8005790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005792:	f7ff fdcd 	bl	8005330 <__retarget_lock_release_recursive>
 8005796:	89ab      	ldrh	r3, [r5, #12]
 8005798:	065b      	lsls	r3, r3, #25
 800579a:	f53f af1d 	bmi.w	80055d8 <_vfiprintf_r+0x44>
 800579e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057a0:	e71c      	b.n	80055dc <_vfiprintf_r+0x48>
 80057a2:	ab03      	add	r3, sp, #12
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	462a      	mov	r2, r5
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <_vfiprintf_r+0x22c>)
 80057aa:	a904      	add	r1, sp, #16
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 f879 	bl	80058a4 <_printf_i>
 80057b2:	e7e4      	b.n	800577e <_vfiprintf_r+0x1ea>
 80057b4:	08005e18 	.word	0x08005e18
 80057b8:	08005e22 	.word	0x08005e22
 80057bc:	00000000 	.word	0x00000000
 80057c0:	0800556f 	.word	0x0800556f
 80057c4:	08005e1e 	.word	0x08005e1e

080057c8 <_printf_common>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	4616      	mov	r6, r2
 80057ce:	4699      	mov	r9, r3
 80057d0:	688a      	ldr	r2, [r1, #8]
 80057d2:	690b      	ldr	r3, [r1, #16]
 80057d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d8:	4293      	cmp	r3, r2
 80057da:	bfb8      	it	lt
 80057dc:	4613      	movlt	r3, r2
 80057de:	6033      	str	r3, [r6, #0]
 80057e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057e4:	4607      	mov	r7, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	b10a      	cbz	r2, 80057ee <_printf_common+0x26>
 80057ea:	3301      	adds	r3, #1
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	0699      	lsls	r1, r3, #26
 80057f2:	bf42      	ittt	mi
 80057f4:	6833      	ldrmi	r3, [r6, #0]
 80057f6:	3302      	addmi	r3, #2
 80057f8:	6033      	strmi	r3, [r6, #0]
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	f015 0506 	ands.w	r5, r5, #6
 8005800:	d106      	bne.n	8005810 <_printf_common+0x48>
 8005802:	f104 0a19 	add.w	sl, r4, #25
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	6832      	ldr	r2, [r6, #0]
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	42ab      	cmp	r3, r5
 800580e:	dc26      	bgt.n	800585e <_printf_common+0x96>
 8005810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005814:	1e13      	subs	r3, r2, #0
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	bf18      	it	ne
 800581a:	2301      	movne	r3, #1
 800581c:	0692      	lsls	r2, r2, #26
 800581e:	d42b      	bmi.n	8005878 <_printf_common+0xb0>
 8005820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005824:	4649      	mov	r1, r9
 8005826:	4638      	mov	r0, r7
 8005828:	47c0      	blx	r8
 800582a:	3001      	adds	r0, #1
 800582c:	d01e      	beq.n	800586c <_printf_common+0xa4>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	6922      	ldr	r2, [r4, #16]
 8005832:	f003 0306 	and.w	r3, r3, #6
 8005836:	2b04      	cmp	r3, #4
 8005838:	bf02      	ittt	eq
 800583a:	68e5      	ldreq	r5, [r4, #12]
 800583c:	6833      	ldreq	r3, [r6, #0]
 800583e:	1aed      	subeq	r5, r5, r3
 8005840:	68a3      	ldr	r3, [r4, #8]
 8005842:	bf0c      	ite	eq
 8005844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005848:	2500      	movne	r5, #0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfc4      	itt	gt
 800584e:	1a9b      	subgt	r3, r3, r2
 8005850:	18ed      	addgt	r5, r5, r3
 8005852:	2600      	movs	r6, #0
 8005854:	341a      	adds	r4, #26
 8005856:	42b5      	cmp	r5, r6
 8005858:	d11a      	bne.n	8005890 <_printf_common+0xc8>
 800585a:	2000      	movs	r0, #0
 800585c:	e008      	b.n	8005870 <_printf_common+0xa8>
 800585e:	2301      	movs	r3, #1
 8005860:	4652      	mov	r2, sl
 8005862:	4649      	mov	r1, r9
 8005864:	4638      	mov	r0, r7
 8005866:	47c0      	blx	r8
 8005868:	3001      	adds	r0, #1
 800586a:	d103      	bne.n	8005874 <_printf_common+0xac>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	3501      	adds	r5, #1
 8005876:	e7c6      	b.n	8005806 <_printf_common+0x3e>
 8005878:	18e1      	adds	r1, r4, r3
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	2030      	movs	r0, #48	; 0x30
 800587e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005882:	4422      	add	r2, r4
 8005884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800588c:	3302      	adds	r3, #2
 800588e:	e7c7      	b.n	8005820 <_printf_common+0x58>
 8005890:	2301      	movs	r3, #1
 8005892:	4622      	mov	r2, r4
 8005894:	4649      	mov	r1, r9
 8005896:	4638      	mov	r0, r7
 8005898:	47c0      	blx	r8
 800589a:	3001      	adds	r0, #1
 800589c:	d0e6      	beq.n	800586c <_printf_common+0xa4>
 800589e:	3601      	adds	r6, #1
 80058a0:	e7d9      	b.n	8005856 <_printf_common+0x8e>
	...

080058a4 <_printf_i>:
 80058a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	7e0f      	ldrb	r7, [r1, #24]
 80058aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058ac:	2f78      	cmp	r7, #120	; 0x78
 80058ae:	4691      	mov	r9, r2
 80058b0:	4680      	mov	r8, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	469a      	mov	sl, r3
 80058b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058ba:	d807      	bhi.n	80058cc <_printf_i+0x28>
 80058bc:	2f62      	cmp	r7, #98	; 0x62
 80058be:	d80a      	bhi.n	80058d6 <_printf_i+0x32>
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	f000 80d4 	beq.w	8005a6e <_printf_i+0x1ca>
 80058c6:	2f58      	cmp	r7, #88	; 0x58
 80058c8:	f000 80c0 	beq.w	8005a4c <_printf_i+0x1a8>
 80058cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058d4:	e03a      	b.n	800594c <_printf_i+0xa8>
 80058d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058da:	2b15      	cmp	r3, #21
 80058dc:	d8f6      	bhi.n	80058cc <_printf_i+0x28>
 80058de:	a101      	add	r1, pc, #4	; (adr r1, 80058e4 <_printf_i+0x40>)
 80058e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058e4:	0800593d 	.word	0x0800593d
 80058e8:	08005951 	.word	0x08005951
 80058ec:	080058cd 	.word	0x080058cd
 80058f0:	080058cd 	.word	0x080058cd
 80058f4:	080058cd 	.word	0x080058cd
 80058f8:	080058cd 	.word	0x080058cd
 80058fc:	08005951 	.word	0x08005951
 8005900:	080058cd 	.word	0x080058cd
 8005904:	080058cd 	.word	0x080058cd
 8005908:	080058cd 	.word	0x080058cd
 800590c:	080058cd 	.word	0x080058cd
 8005910:	08005a55 	.word	0x08005a55
 8005914:	0800597d 	.word	0x0800597d
 8005918:	08005a0f 	.word	0x08005a0f
 800591c:	080058cd 	.word	0x080058cd
 8005920:	080058cd 	.word	0x080058cd
 8005924:	08005a77 	.word	0x08005a77
 8005928:	080058cd 	.word	0x080058cd
 800592c:	0800597d 	.word	0x0800597d
 8005930:	080058cd 	.word	0x080058cd
 8005934:	080058cd 	.word	0x080058cd
 8005938:	08005a17 	.word	0x08005a17
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	602a      	str	r2, [r5, #0]
 8005944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800594c:	2301      	movs	r3, #1
 800594e:	e09f      	b.n	8005a90 <_printf_i+0x1ec>
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	0607      	lsls	r7, r0, #24
 8005956:	f103 0104 	add.w	r1, r3, #4
 800595a:	6029      	str	r1, [r5, #0]
 800595c:	d501      	bpl.n	8005962 <_printf_i+0xbe>
 800595e:	681e      	ldr	r6, [r3, #0]
 8005960:	e003      	b.n	800596a <_printf_i+0xc6>
 8005962:	0646      	lsls	r6, r0, #25
 8005964:	d5fb      	bpl.n	800595e <_printf_i+0xba>
 8005966:	f9b3 6000 	ldrsh.w	r6, [r3]
 800596a:	2e00      	cmp	r6, #0
 800596c:	da03      	bge.n	8005976 <_printf_i+0xd2>
 800596e:	232d      	movs	r3, #45	; 0x2d
 8005970:	4276      	negs	r6, r6
 8005972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005976:	485a      	ldr	r0, [pc, #360]	; (8005ae0 <_printf_i+0x23c>)
 8005978:	230a      	movs	r3, #10
 800597a:	e012      	b.n	80059a2 <_printf_i+0xfe>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	1d19      	adds	r1, r3, #4
 8005982:	6029      	str	r1, [r5, #0]
 8005984:	0605      	lsls	r5, r0, #24
 8005986:	d501      	bpl.n	800598c <_printf_i+0xe8>
 8005988:	681e      	ldr	r6, [r3, #0]
 800598a:	e002      	b.n	8005992 <_printf_i+0xee>
 800598c:	0641      	lsls	r1, r0, #25
 800598e:	d5fb      	bpl.n	8005988 <_printf_i+0xe4>
 8005990:	881e      	ldrh	r6, [r3, #0]
 8005992:	4853      	ldr	r0, [pc, #332]	; (8005ae0 <_printf_i+0x23c>)
 8005994:	2f6f      	cmp	r7, #111	; 0x6f
 8005996:	bf0c      	ite	eq
 8005998:	2308      	moveq	r3, #8
 800599a:	230a      	movne	r3, #10
 800599c:	2100      	movs	r1, #0
 800599e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059a2:	6865      	ldr	r5, [r4, #4]
 80059a4:	60a5      	str	r5, [r4, #8]
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	bfa2      	ittt	ge
 80059aa:	6821      	ldrge	r1, [r4, #0]
 80059ac:	f021 0104 	bicge.w	r1, r1, #4
 80059b0:	6021      	strge	r1, [r4, #0]
 80059b2:	b90e      	cbnz	r6, 80059b8 <_printf_i+0x114>
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	d04b      	beq.n	8005a50 <_printf_i+0x1ac>
 80059b8:	4615      	mov	r5, r2
 80059ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80059be:	fb03 6711 	mls	r7, r3, r1, r6
 80059c2:	5dc7      	ldrb	r7, [r0, r7]
 80059c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059c8:	4637      	mov	r7, r6
 80059ca:	42bb      	cmp	r3, r7
 80059cc:	460e      	mov	r6, r1
 80059ce:	d9f4      	bls.n	80059ba <_printf_i+0x116>
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d10b      	bne.n	80059ec <_printf_i+0x148>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	07de      	lsls	r6, r3, #31
 80059d8:	d508      	bpl.n	80059ec <_printf_i+0x148>
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	6861      	ldr	r1, [r4, #4]
 80059de:	4299      	cmp	r1, r3
 80059e0:	bfde      	ittt	le
 80059e2:	2330      	movle	r3, #48	; 0x30
 80059e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059ec:	1b52      	subs	r2, r2, r5
 80059ee:	6122      	str	r2, [r4, #16]
 80059f0:	f8cd a000 	str.w	sl, [sp]
 80059f4:	464b      	mov	r3, r9
 80059f6:	aa03      	add	r2, sp, #12
 80059f8:	4621      	mov	r1, r4
 80059fa:	4640      	mov	r0, r8
 80059fc:	f7ff fee4 	bl	80057c8 <_printf_common>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d14a      	bne.n	8005a9a <_printf_i+0x1f6>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	b004      	add	sp, #16
 8005a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	f043 0320 	orr.w	r3, r3, #32
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	4833      	ldr	r0, [pc, #204]	; (8005ae4 <_printf_i+0x240>)
 8005a18:	2778      	movs	r7, #120	; 0x78
 8005a1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	6829      	ldr	r1, [r5, #0]
 8005a22:	061f      	lsls	r7, r3, #24
 8005a24:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a28:	d402      	bmi.n	8005a30 <_printf_i+0x18c>
 8005a2a:	065f      	lsls	r7, r3, #25
 8005a2c:	bf48      	it	mi
 8005a2e:	b2b6      	uxthmi	r6, r6
 8005a30:	07df      	lsls	r7, r3, #31
 8005a32:	bf48      	it	mi
 8005a34:	f043 0320 	orrmi.w	r3, r3, #32
 8005a38:	6029      	str	r1, [r5, #0]
 8005a3a:	bf48      	it	mi
 8005a3c:	6023      	strmi	r3, [r4, #0]
 8005a3e:	b91e      	cbnz	r6, 8005a48 <_printf_i+0x1a4>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	f023 0320 	bic.w	r3, r3, #32
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	2310      	movs	r3, #16
 8005a4a:	e7a7      	b.n	800599c <_printf_i+0xf8>
 8005a4c:	4824      	ldr	r0, [pc, #144]	; (8005ae0 <_printf_i+0x23c>)
 8005a4e:	e7e4      	b.n	8005a1a <_printf_i+0x176>
 8005a50:	4615      	mov	r5, r2
 8005a52:	e7bd      	b.n	80059d0 <_printf_i+0x12c>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	6826      	ldr	r6, [r4, #0]
 8005a58:	6961      	ldr	r1, [r4, #20]
 8005a5a:	1d18      	adds	r0, r3, #4
 8005a5c:	6028      	str	r0, [r5, #0]
 8005a5e:	0635      	lsls	r5, r6, #24
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	d501      	bpl.n	8005a68 <_printf_i+0x1c4>
 8005a64:	6019      	str	r1, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <_printf_i+0x1ca>
 8005a68:	0670      	lsls	r0, r6, #25
 8005a6a:	d5fb      	bpl.n	8005a64 <_printf_i+0x1c0>
 8005a6c:	8019      	strh	r1, [r3, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	4615      	mov	r5, r2
 8005a74:	e7bc      	b.n	80059f0 <_printf_i+0x14c>
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	1d1a      	adds	r2, r3, #4
 8005a7a:	602a      	str	r2, [r5, #0]
 8005a7c:	681d      	ldr	r5, [r3, #0]
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	2100      	movs	r1, #0
 8005a82:	4628      	mov	r0, r5
 8005a84:	f7fa fbac 	bl	80001e0 <memchr>
 8005a88:	b108      	cbz	r0, 8005a8e <_printf_i+0x1ea>
 8005a8a:	1b40      	subs	r0, r0, r5
 8005a8c:	6060      	str	r0, [r4, #4]
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	2300      	movs	r3, #0
 8005a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a98:	e7aa      	b.n	80059f0 <_printf_i+0x14c>
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	462a      	mov	r2, r5
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	47d0      	blx	sl
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d0ad      	beq.n	8005a04 <_printf_i+0x160>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	079b      	lsls	r3, r3, #30
 8005aac:	d413      	bmi.n	8005ad6 <_printf_i+0x232>
 8005aae:	68e0      	ldr	r0, [r4, #12]
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	4298      	cmp	r0, r3
 8005ab4:	bfb8      	it	lt
 8005ab6:	4618      	movlt	r0, r3
 8005ab8:	e7a6      	b.n	8005a08 <_printf_i+0x164>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4632      	mov	r2, r6
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d09d      	beq.n	8005a04 <_printf_i+0x160>
 8005ac8:	3501      	adds	r5, #1
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	9903      	ldr	r1, [sp, #12]
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dcf2      	bgt.n	8005aba <_printf_i+0x216>
 8005ad4:	e7eb      	b.n	8005aae <_printf_i+0x20a>
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	f104 0619 	add.w	r6, r4, #25
 8005adc:	e7f5      	b.n	8005aca <_printf_i+0x226>
 8005ade:	bf00      	nop
 8005ae0:	08005e29 	.word	0x08005e29
 8005ae4:	08005e3a 	.word	0x08005e3a

08005ae8 <__sflush_r>:
 8005ae8:	898a      	ldrh	r2, [r1, #12]
 8005aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aee:	4605      	mov	r5, r0
 8005af0:	0710      	lsls	r0, r2, #28
 8005af2:	460c      	mov	r4, r1
 8005af4:	d458      	bmi.n	8005ba8 <__sflush_r+0xc0>
 8005af6:	684b      	ldr	r3, [r1, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	dc05      	bgt.n	8005b08 <__sflush_r+0x20>
 8005afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	dc02      	bgt.n	8005b08 <__sflush_r+0x20>
 8005b02:	2000      	movs	r0, #0
 8005b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b0a:	2e00      	cmp	r6, #0
 8005b0c:	d0f9      	beq.n	8005b02 <__sflush_r+0x1a>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b14:	682f      	ldr	r7, [r5, #0]
 8005b16:	6a21      	ldr	r1, [r4, #32]
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	d032      	beq.n	8005b82 <__sflush_r+0x9a>
 8005b1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	075a      	lsls	r2, r3, #29
 8005b22:	d505      	bpl.n	8005b30 <__sflush_r+0x48>
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	1ac0      	subs	r0, r0, r3
 8005b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b2a:	b10b      	cbz	r3, 8005b30 <__sflush_r+0x48>
 8005b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b2e:	1ac0      	subs	r0, r0, r3
 8005b30:	2300      	movs	r3, #0
 8005b32:	4602      	mov	r2, r0
 8005b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b36:	6a21      	ldr	r1, [r4, #32]
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b0      	blx	r6
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	d106      	bne.n	8005b50 <__sflush_r+0x68>
 8005b42:	6829      	ldr	r1, [r5, #0]
 8005b44:	291d      	cmp	r1, #29
 8005b46:	d82b      	bhi.n	8005ba0 <__sflush_r+0xb8>
 8005b48:	4a29      	ldr	r2, [pc, #164]	; (8005bf0 <__sflush_r+0x108>)
 8005b4a:	410a      	asrs	r2, r1
 8005b4c:	07d6      	lsls	r6, r2, #31
 8005b4e:	d427      	bmi.n	8005ba0 <__sflush_r+0xb8>
 8005b50:	2200      	movs	r2, #0
 8005b52:	6062      	str	r2, [r4, #4]
 8005b54:	04d9      	lsls	r1, r3, #19
 8005b56:	6922      	ldr	r2, [r4, #16]
 8005b58:	6022      	str	r2, [r4, #0]
 8005b5a:	d504      	bpl.n	8005b66 <__sflush_r+0x7e>
 8005b5c:	1c42      	adds	r2, r0, #1
 8005b5e:	d101      	bne.n	8005b64 <__sflush_r+0x7c>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b903      	cbnz	r3, 8005b66 <__sflush_r+0x7e>
 8005b64:	6560      	str	r0, [r4, #84]	; 0x54
 8005b66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b68:	602f      	str	r7, [r5, #0]
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	d0c9      	beq.n	8005b02 <__sflush_r+0x1a>
 8005b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b72:	4299      	cmp	r1, r3
 8005b74:	d002      	beq.n	8005b7c <__sflush_r+0x94>
 8005b76:	4628      	mov	r0, r5
 8005b78:	f7ff fbea 	bl	8005350 <_free_r>
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	6360      	str	r0, [r4, #52]	; 0x34
 8005b80:	e7c0      	b.n	8005b04 <__sflush_r+0x1c>
 8005b82:	2301      	movs	r3, #1
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b0      	blx	r6
 8005b88:	1c41      	adds	r1, r0, #1
 8005b8a:	d1c8      	bne.n	8005b1e <__sflush_r+0x36>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0c5      	beq.n	8005b1e <__sflush_r+0x36>
 8005b92:	2b1d      	cmp	r3, #29
 8005b94:	d001      	beq.n	8005b9a <__sflush_r+0xb2>
 8005b96:	2b16      	cmp	r3, #22
 8005b98:	d101      	bne.n	8005b9e <__sflush_r+0xb6>
 8005b9a:	602f      	str	r7, [r5, #0]
 8005b9c:	e7b1      	b.n	8005b02 <__sflush_r+0x1a>
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	e7ad      	b.n	8005b04 <__sflush_r+0x1c>
 8005ba8:	690f      	ldr	r7, [r1, #16]
 8005baa:	2f00      	cmp	r7, #0
 8005bac:	d0a9      	beq.n	8005b02 <__sflush_r+0x1a>
 8005bae:	0793      	lsls	r3, r2, #30
 8005bb0:	680e      	ldr	r6, [r1, #0]
 8005bb2:	bf08      	it	eq
 8005bb4:	694b      	ldreq	r3, [r1, #20]
 8005bb6:	600f      	str	r7, [r1, #0]
 8005bb8:	bf18      	it	ne
 8005bba:	2300      	movne	r3, #0
 8005bbc:	eba6 0807 	sub.w	r8, r6, r7
 8005bc0:	608b      	str	r3, [r1, #8]
 8005bc2:	f1b8 0f00 	cmp.w	r8, #0
 8005bc6:	dd9c      	ble.n	8005b02 <__sflush_r+0x1a>
 8005bc8:	6a21      	ldr	r1, [r4, #32]
 8005bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bcc:	4643      	mov	r3, r8
 8005bce:	463a      	mov	r2, r7
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b0      	blx	r6
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	dc06      	bgt.n	8005be6 <__sflush_r+0xfe>
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e78e      	b.n	8005b04 <__sflush_r+0x1c>
 8005be6:	4407      	add	r7, r0
 8005be8:	eba8 0800 	sub.w	r8, r8, r0
 8005bec:	e7e9      	b.n	8005bc2 <__sflush_r+0xda>
 8005bee:	bf00      	nop
 8005bf0:	dfbffffe 	.word	0xdfbffffe

08005bf4 <_fflush_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	690b      	ldr	r3, [r1, #16]
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	b913      	cbnz	r3, 8005c04 <_fflush_r+0x10>
 8005bfe:	2500      	movs	r5, #0
 8005c00:	4628      	mov	r0, r5
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	b118      	cbz	r0, 8005c0e <_fflush_r+0x1a>
 8005c06:	6a03      	ldr	r3, [r0, #32]
 8005c08:	b90b      	cbnz	r3, 8005c0e <_fflush_r+0x1a>
 8005c0a:	f7ff f99b 	bl	8004f44 <__sinit>
 8005c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f3      	beq.n	8005bfe <_fflush_r+0xa>
 8005c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c18:	07d0      	lsls	r0, r2, #31
 8005c1a:	d404      	bmi.n	8005c26 <_fflush_r+0x32>
 8005c1c:	0599      	lsls	r1, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_fflush_r+0x32>
 8005c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c22:	f7ff fb84 	bl	800532e <__retarget_lock_acquire_recursive>
 8005c26:	4628      	mov	r0, r5
 8005c28:	4621      	mov	r1, r4
 8005c2a:	f7ff ff5d 	bl	8005ae8 <__sflush_r>
 8005c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c30:	07da      	lsls	r2, r3, #31
 8005c32:	4605      	mov	r5, r0
 8005c34:	d4e4      	bmi.n	8005c00 <_fflush_r+0xc>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	059b      	lsls	r3, r3, #22
 8005c3a:	d4e1      	bmi.n	8005c00 <_fflush_r+0xc>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3e:	f7ff fb77 	bl	8005330 <__retarget_lock_release_recursive>
 8005c42:	e7dd      	b.n	8005c00 <_fflush_r+0xc>

08005c44 <__swhatbuf_r>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	460c      	mov	r4, r1
 8005c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	b096      	sub	sp, #88	; 0x58
 8005c50:	4615      	mov	r5, r2
 8005c52:	461e      	mov	r6, r3
 8005c54:	da0d      	bge.n	8005c72 <__swhatbuf_r+0x2e>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	bf0c      	ite	eq
 8005c62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c66:	2340      	movne	r3, #64	; 0x40
 8005c68:	2000      	movs	r0, #0
 8005c6a:	6031      	str	r1, [r6, #0]
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	b016      	add	sp, #88	; 0x58
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
 8005c72:	466a      	mov	r2, sp
 8005c74:	f000 f848 	bl	8005d08 <_fstat_r>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	dbec      	blt.n	8005c56 <__swhatbuf_r+0x12>
 8005c7c:	9901      	ldr	r1, [sp, #4]
 8005c7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c86:	4259      	negs	r1, r3
 8005c88:	4159      	adcs	r1, r3
 8005c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c8e:	e7eb      	b.n	8005c68 <__swhatbuf_r+0x24>

08005c90 <__smakebuf_r>:
 8005c90:	898b      	ldrh	r3, [r1, #12]
 8005c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c94:	079d      	lsls	r5, r3, #30
 8005c96:	4606      	mov	r6, r0
 8005c98:	460c      	mov	r4, r1
 8005c9a:	d507      	bpl.n	8005cac <__smakebuf_r+0x1c>
 8005c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	6123      	str	r3, [r4, #16]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	6163      	str	r3, [r4, #20]
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	ab01      	add	r3, sp, #4
 8005cae:	466a      	mov	r2, sp
 8005cb0:	f7ff ffc8 	bl	8005c44 <__swhatbuf_r>
 8005cb4:	9900      	ldr	r1, [sp, #0]
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7ff fbb5 	bl	8005428 <_malloc_r>
 8005cbe:	b948      	cbnz	r0, 8005cd4 <__smakebuf_r+0x44>
 8005cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc4:	059a      	lsls	r2, r3, #22
 8005cc6:	d4ef      	bmi.n	8005ca8 <__smakebuf_r+0x18>
 8005cc8:	f023 0303 	bic.w	r3, r3, #3
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	81a3      	strh	r3, [r4, #12]
 8005cd2:	e7e3      	b.n	8005c9c <__smakebuf_r+0xc>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	6020      	str	r0, [r4, #0]
 8005cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	6163      	str	r3, [r4, #20]
 8005ce2:	9b01      	ldr	r3, [sp, #4]
 8005ce4:	6120      	str	r0, [r4, #16]
 8005ce6:	b15b      	cbz	r3, 8005d00 <__smakebuf_r+0x70>
 8005ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f81d 	bl	8005d2c <_isatty_r>
 8005cf2:	b128      	cbz	r0, 8005d00 <__smakebuf_r+0x70>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	431d      	orrs	r5, r3
 8005d04:	81a5      	strh	r5, [r4, #12]
 8005d06:	e7cf      	b.n	8005ca8 <__smakebuf_r+0x18>

08005d08 <_fstat_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d07      	ldr	r5, [pc, #28]	; (8005d28 <_fstat_r+0x20>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	f7fa ff0a 	bl	8000b2e <_fstat>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d102      	bne.n	8005d24 <_fstat_r+0x1c>
 8005d1e:	682b      	ldr	r3, [r5, #0]
 8005d20:	b103      	cbz	r3, 8005d24 <_fstat_r+0x1c>
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
 8005d26:	bf00      	nop
 8005d28:	20004bb0 	.word	0x20004bb0

08005d2c <_isatty_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d06      	ldr	r5, [pc, #24]	; (8005d48 <_isatty_r+0x1c>)
 8005d30:	2300      	movs	r3, #0
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	602b      	str	r3, [r5, #0]
 8005d38:	f7fa ff09 	bl	8000b4e <_isatty>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_isatty_r+0x1a>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_isatty_r+0x1a>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20004bb0 	.word	0x20004bb0

08005d4c <_sbrk_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d06      	ldr	r5, [pc, #24]	; (8005d68 <_sbrk_r+0x1c>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fa ff12 	bl	8000b80 <_sbrk>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_sbrk_r+0x1a>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_sbrk_r+0x1a>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	20004bb0 	.word	0x20004bb0

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
