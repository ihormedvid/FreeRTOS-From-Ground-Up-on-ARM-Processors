
fr_29_EventGroupsWithMultipleSetters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d8  080062d8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e0  080062e0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080062e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  2000006c  08006354  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb8  08006354  00024bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174cf  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037dd  00000000  00000000  000375ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001064  00000000  00000000  0003c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ea1  00000000  00000000  0003d324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017763  00000000  00000000  000421c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a195  00000000  00000000  00059928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006048  00000000  00000000  000f3ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f9b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006168 	.word	0x08006168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006168 	.word	0x08006168

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:




int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8

  HAL_Init();
 8000582:	f000 fb85 	bl	8000c90 <HAL_Init>
  SystemClock_Config();
 8000586:	f000 f8c5 	bl	8000714 <SystemClock_Config>
  MX_GPIO_Init();
 800058a:	f000 f921 	bl	80007d0 <MX_GPIO_Init>

  USART2_UART_TX_Init();
 800058e:	f000 fb0d 	bl	8000bac <USART2_UART_TX_Init>

  printf("System is initializing...\n\r");
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <main+0x7c>)
 8000594:	f004 ff64 	bl	8005460 <iprintf>

  xEventGroup = xEventGroupCreate();
 8000598:	f002 f832 	bl	8002600 <xEventGroupCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a17      	ldr	r2, [pc, #92]	; (80005fc <main+0x80>)
 80005a0:	6013      	str	r3, [r2, #0]

  xTaskCreate(InputTask1, "Input Task 1", 100, NULL, 1, NULL);
 80005a2:	2300      	movs	r3, #0
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	4914      	ldr	r1, [pc, #80]	; (8000600 <main+0x84>)
 80005b0:	4814      	ldr	r0, [pc, #80]	; (8000604 <main+0x88>)
 80005b2:	f002 ffb8 	bl	8003526 <xTaskCreate>
  xTaskCreate(InputTask2, "Input Task 2", 100, NULL, 1, NULL);
 80005b6:	2300      	movs	r3, #0
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	; 0x64
 80005c2:	4911      	ldr	r1, [pc, #68]	; (8000608 <main+0x8c>)
 80005c4:	4811      	ldr	r0, [pc, #68]	; (800060c <main+0x90>)
 80005c6:	f002 ffae 	bl	8003526 <xTaskCreate>
  xTaskCreate(InputTask3, "Input Task 3", 100, NULL, 1, NULL);
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2264      	movs	r2, #100	; 0x64
 80005d6:	490e      	ldr	r1, [pc, #56]	; (8000610 <main+0x94>)
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0x98>)
 80005da:	f002 ffa4 	bl	8003526 <xTaskCreate>

  xTaskCreate(OutputTask, "Output Task", 100, NULL, 1, NULL);
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2264      	movs	r2, #100	; 0x64
 80005ea:	490b      	ldr	r1, [pc, #44]	; (8000618 <main+0x9c>)
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0xa0>)
 80005ee:	f002 ff9a 	bl	8003526 <xTaskCreate>

  vTaskStartScheduler();
 80005f2:	f003 f911 	bl	8003818 <vTaskStartScheduler>



  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x7a>
 80005f8:	08006180 	.word	0x08006180
 80005fc:	20000088 	.word	0x20000088
 8000600:	0800619c 	.word	0x0800619c
 8000604:	08000621 	.word	0x08000621
 8000608:	080061ac 	.word	0x080061ac
 800060c:	08000651 	.word	0x08000651
 8000610:	080061bc 	.word	0x080061bc
 8000614:	08000681 	.word	0x08000681
 8000618:	080061cc 	.word	0x080061cc
 800061c:	080006b1 	.word	0x080006b1

08000620 <InputTask1>:

  }

}

static void InputTask1(void *pvParameters) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(xDelay500ms);
 8000628:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f8bf 	bl	80037b0 <vTaskDelay>
		// Do something
		xEventGroupSetBits(xEventGroup, TASK1_BIT);
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <InputTask1+0x2c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f002 f8c9 	bl	80027d0 <xEventGroupSetBits>
		vTaskDelay(xDelay500ms);
 800063e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f8b4 	bl	80037b0 <vTaskDelay>
		vTaskDelay(xDelay500ms);
 8000648:	e7ee      	b.n	8000628 <InputTask1+0x8>
 800064a:	bf00      	nop
 800064c:	20000088 	.word	0x20000088

08000650 <InputTask2>:
	}
}

static void InputTask2(void *pvParameters) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(xDelay500ms);
 8000658:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800065c:	4618      	mov	r0, r3
 800065e:	f003 f8a7 	bl	80037b0 <vTaskDelay>
		// Do something
		xEventGroupSetBits(xEventGroup, TASK2_BIT);
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <InputTask2+0x2c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f8b1 	bl	80027d0 <xEventGroupSetBits>
		vTaskDelay(xDelay500ms);
 800066e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000672:	4618      	mov	r0, r3
 8000674:	f003 f89c 	bl	80037b0 <vTaskDelay>
		vTaskDelay(xDelay500ms);
 8000678:	e7ee      	b.n	8000658 <InputTask2+0x8>
 800067a:	bf00      	nop
 800067c:	20000088 	.word	0x20000088

08000680 <InputTask3>:
	}
}

static void InputTask3(void *pvParameters) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(xDelay500ms);
 8000688:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800068c:	4618      	mov	r0, r3
 800068e:	f003 f88f 	bl	80037b0 <vTaskDelay>
		// Do something
		xEventGroupSetBits(xEventGroup, TASK3_BIT);
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <InputTask3+0x2c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2104      	movs	r1, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f899 	bl	80027d0 <xEventGroupSetBits>
		vTaskDelay(xDelay500ms);
 800069e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 f884 	bl	80037b0 <vTaskDelay>
		vTaskDelay(xDelay500ms);
 80006a8:	e7ee      	b.n	8000688 <InputTask3+0x8>
 80006aa:	bf00      	nop
 80006ac:	20000088 	.word	0x20000088

080006b0 <OutputTask>:
	}
}

static void OutputTask(void *pvParameters) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	6078      	str	r0, [r7, #4]
	const EventBits_t xBitsToWaitFor = (TASK1_BIT | TASK2_BIT | TASK3_BIT);
 80006b8:	2307      	movs	r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]
	EventBits_t xEventGroupValue;

	while(1)
	{
		xEventGroupValue = xEventGroupWaitBits(xEventGroup,
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <OutputTask+0x54>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	2201      	movs	r2, #1
 80006ca:	68f9      	ldr	r1, [r7, #12]
 80006cc:	f001 ffb2 	bl	8002634 <xEventGroupWaitBits>
 80006d0:	60b8      	str	r0, [r7, #8]
				xBitsToWaitFor,
				pdTRUE,
				pdFALSE,
				portMAX_DELAY);

		if( (xEventGroupValue & TASK1_BIT) != 0)
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <OutputTask+0x32>
		{
			printf("Bit reading task: \t => Bit 0 was set in TASK 1 \n\r");
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <OutputTask+0x58>)
 80006de:	f004 febf 	bl	8005460 <iprintf>
		}

		if( (xEventGroupValue & TASK2_BIT) != 0)
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <OutputTask+0x42>
		{
			printf("Bit reading task: \t => Bit 1 was set in TASK 2  \n\r");
 80006ec:	4807      	ldr	r0, [pc, #28]	; (800070c <OutputTask+0x5c>)
 80006ee:	f004 feb7 	bl	8005460 <iprintf>
		}

		if( (xEventGroupValue & TASK3_BIT) != 0)
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0df      	beq.n	80006bc <OutputTask+0xc>
		{
			printf("Bit reading task: \t => Bit 2 was set in TASK 3 \n\r");
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <OutputTask+0x60>)
 80006fe:	f004 feaf 	bl	8005460 <iprintf>
		xEventGroupValue = xEventGroupWaitBits(xEventGroup,
 8000702:	e7db      	b.n	80006bc <OutputTask+0xc>
 8000704:	20000088 	.word	0x20000088
 8000708:	080061d8 	.word	0x080061d8
 800070c:	0800620c 	.word	0x0800620c
 8000710:	08006240 	.word	0x08006240

08000714 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fef1 	bl	800550a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xb4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xb4>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xb4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <SystemClock_Config+0xb8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <SystemClock_Config+0xb8>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <SystemClock_Config+0xb8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd2b 	bl	80011e0 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000790:	f000 f84a 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 ff8e 	bl	80016d0 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ba:	f000 f835 	bl	8000828 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_GPIO_Init+0x30>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <MX_GPIO_Init+0x30>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_GPIO_Init+0x30>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d101      	bne.n	800081a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000816:	f000 fa5d 	bl	8000cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010000 	.word	0x40010000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a11      	ldr	r2, [pc, #68]	; (8000888 <HAL_MspInit+0x54>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x54>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x54>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x54>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 fb03 	bl	8000e84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_UART_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e6:	230c      	movs	r3, #12
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0x8c>)
 8000902:	f000 fae9 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40004400 	.word	0x40004400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <HAL_InitTick+0xd0>)
 8000932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000934:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <HAL_InitTick+0xd0>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6453      	str	r3, [r2, #68]	; 0x44
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <HAL_InitTick+0xd0>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000948:	f107 020c 	add.w	r2, r7, #12
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f89c 	bl	8001a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000958:	f001 f886 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 800095c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000960:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <HAL_InitTick+0xd4>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9b      	lsrs	r3, r3, #18
 8000968:	3b01      	subs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_InitTick+0xd8>)
 800096e:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <HAL_InitTick+0xdc>)
 8000970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <HAL_InitTick+0xd8>)
 8000974:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000978:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <HAL_InitTick+0xd8>)
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_InitTick+0xd8>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_InitTick+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_InitTick+0xd8>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <HAL_InitTick+0xd8>)
 8000994:	f001 f8ae 	bl	8001af4 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d11b      	bne.n	80009de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009a6:	4813      	ldr	r0, [pc, #76]	; (80009f4 <HAL_InitTick+0xd8>)
 80009a8:	f001 f8fe 	bl	8001ba8 <HAL_TIM_Base_Start_IT>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d111      	bne.n	80009de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ba:	2019      	movs	r0, #25
 80009bc:	f000 fa7e 	bl	8000ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d808      	bhi.n	80009d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	2019      	movs	r0, #25
 80009cc:	f000 fa5a 	bl	8000e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_InitTick+0xe0>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e002      	b.n	80009de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	2000008c 	.word	0x2000008c
 80009f8:	40010000 	.word	0x40010000
 80009fc:	20000004 	.word	0x20000004

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a32:	f001 f91b 	bl	8001c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000008c 	.word	0x2000008c

08000a40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e00a      	b.n	8000a68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a52:	f3af 8000 	nop.w
 8000a56:	4601      	mov	r1, r0
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf0      	blt.n	8000a52 <_read+0x12>
  }

  return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	e009      	b.n	8000aa0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f8c5 	bl	8000c24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf1      	blt.n	8000a8c <_write+0x12>
  }
  return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_close>:

int _close(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	605a      	str	r2, [r3, #4]
  return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_isatty>:

int _isatty(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f004 fd2c 	bl	80055a8 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20020000 	.word	0x20020000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200000d4 	.word	0x200000d4
 8000b84:	20004bb8 	.word	0x20004bb8

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <USART2_UART_TX_Init>:

UART_HandleTypeDef huart2;


void USART2_UART_TX_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <USART2_UART_TX_Init+0x44>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
 8000be2:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART2_UART_TX_Init+0x40>)
 8000be4:	f001 fa06 	bl	8001ff4 <HAL_UART_Init>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000d8 	.word	0x200000d8
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <USART2_write>:
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK) {}
}

int USART2_write(int ch) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	while(!(USART2 -> SR & 0x0080)) {}
 8000bfc:	bf00      	nop
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <USART2_write+0x2c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f9      	beq.n	8000bfe <USART2_write+0xa>
	USART2-> DR = (ch & 0xFF);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <USART2_write+0x2c>)
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	6053      	str	r3, [r2, #4]

	return ch;
 8000c12:	687b      	ldr	r3, [r7, #4]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40004400 	.word	0x40004400

08000c24 <__io_putchar>:

	while(!(USART2->SR & 0x0020)) {} // wait until char arrives
	return USART2->DR;
}

int __io_putchar(int ch){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ffe1 	bl	8000bf4 <USART2_write>

	return ch;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c42:	490e      	ldr	r1, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c58:	4c0b      	ldr	r4, [pc, #44]	; (8000c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c66:	f7ff ff8f 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f004 fca3 	bl	80055b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fc85 	bl	800057c <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c80:	080062e8 	.word	0x080062e8
  ldr r2, =_sbss
 8000c84:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c88:	20004bb8 	.word	0x20004bb8

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f8d8 	bl	8000e6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f7ff fe2c 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fdb6 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	2000011c 	.word	0x2000011c

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000011c 	.word	0x2000011c

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff4c 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e96:	f7ff ff61 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000e9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f7ff ffb1 	bl	8000e08 <NVIC_EncodePriority>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff80 	bl	8000db4 <__NVIC_SetPriority>
}
 8000eb4:	bf00      	nop
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff54 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e159      	b.n	80011a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8148 	bne.w	80011a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a2 	beq.w	80011a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a56      	ldr	r2, [pc, #344]	; (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a52      	ldr	r2, [pc, #328]	; (80011c4 <HAL_GPIO_Init+0x2ec>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x202>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_GPIO_Init+0x2f4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x1fe>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a47      	ldr	r2, [pc, #284]	; (80011d0 <HAL_GPIO_Init+0x2f8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x1fa>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x1f6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <HAL_GPIO_Init+0x300>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x1f2>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4935      	ldr	r1, [pc, #212]	; (80011c4 <HAL_GPIO_Init+0x2ec>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b38      	ldr	r3, [pc, #224]	; (80011dc <HAL_GPIO_Init+0x304>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <HAL_GPIO_Init+0x304>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_GPIO_Init+0x304>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a24      	ldr	r2, [pc, #144]	; (80011dc <HAL_GPIO_Init+0x304>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <HAL_GPIO_Init+0x304>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001172:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_GPIO_Init+0x304>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f aea2 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e267      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d075      	beq.n	80012ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fe:	4b88      	ldr	r3, [pc, #544]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b04      	cmp	r3, #4
 8001208:	d00c      	beq.n	8001224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b85      	ldr	r3, [pc, #532]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d112      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001216:	4b82      	ldr	r3, [pc, #520]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001222:	d10b      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	4b7e      	ldr	r3, [pc, #504]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05b      	beq.n	80012e8 <HAL_RCC_OscConfig+0x108>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d157      	bne.n	80012e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e242      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d106      	bne.n	8001254 <HAL_RCC_OscConfig+0x74>
 8001246:	4b76      	ldr	r3, [pc, #472]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a75      	ldr	r2, [pc, #468]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x98>
 800125e:	4b70      	ldr	r3, [pc, #448]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6f      	ldr	r2, [pc, #444]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6c      	ldr	r2, [pc, #432]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001278:	4b69      	ldr	r3, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a68      	ldr	r2, [pc, #416]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b66      	ldr	r3, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a65      	ldr	r2, [pc, #404]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fd30 	bl	8000cfc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fd2c 	bl	8000cfc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e207      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xc0>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fd1c 	bl	8000cfc <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fd18 	bl	8000cfc <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1f3      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0xe8>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f6:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130e:	4b44      	ldr	r3, [pc, #272]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1c7      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e03a      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_RCC_OscConfig+0x244>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fcd1 	bl	8000cfc <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fccd 	bl	8000cfc <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1a8      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4925      	ldr	r1, [pc, #148]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x244>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fcb0 	bl	8000cfc <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fcac 	bl	8000cfc <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e187      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d036      	beq.n	8001438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_RCC_OscConfig+0x248>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fc90 	bl	8000cfc <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc8c 	bl	8000cfc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e167      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x240>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x200>
 80013fe:	e01b      	b.n	8001438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_OscConfig+0x248>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fc79 	bl	8000cfc <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	e00e      	b.n	800142c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fc75 	bl	8000cfc <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d907      	bls.n	800142c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e150      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
 8001420:	40023800 	.word	0x40023800
 8001424:	42470000 	.word	0x42470000
 8001428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ea      	bne.n	800140e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8097 	beq.w	8001574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a7c      	ldr	r2, [pc, #496]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fc35 	bl	8000cfc <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fc31 	bl	8000cfc <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e10c      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x474>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x2ea>
 80014bc:	4b64      	ldr	r3, [pc, #400]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a63      	ldr	r2, [pc, #396]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x30c>
 80014d2:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d6:	4a5e      	ldr	r2, [pc, #376]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
 80014de:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	4a5b      	ldr	r2, [pc, #364]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ec:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	4a57      	ldr	r2, [pc, #348]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
 80014f8:	4b55      	ldr	r3, [pc, #340]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a54      	ldr	r2, [pc, #336]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d015      	beq.n	8001538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fbf6 	bl	8000cfc <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fbf2 	bl	8000cfc <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0cb      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ee      	beq.n	8001514 <HAL_RCC_OscConfig+0x334>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff fbe0 	bl	8000cfc <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fbdc 	bl	8000cfc <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0b5      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ee      	bne.n	8001540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a1 	beq.w	80016c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d05c      	beq.n	8001644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d141      	bne.n	8001616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_RCC_OscConfig+0x478>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fbb0 	bl	8000cfc <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fbac 	bl	8000cfc <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e087      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	491b      	ldr	r1, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x478>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb85 	bl	8000cfc <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fb81 	bl	8000cfc <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e05c      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x416>
 8001614:	e054      	b.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_RCC_OscConfig+0x478>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fb6e 	bl	8000cfc <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fb6a 	bl	8000cfc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e045      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_RCC_OscConfig+0x470>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x444>
 8001642:	e03d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e038      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000
 8001658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x4ec>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d028      	beq.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d121      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d11a      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001694:	4293      	cmp	r3, r2
 8001696:	d111      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	3b01      	subs	r3, #1
 80016a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0cc      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d90c      	bls.n	800170c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b65      	ldr	r3, [pc, #404]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0b8      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001724:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a52      	ldr	r2, [pc, #328]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	494d      	ldr	r1, [pc, #308]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d044      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d119      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e07f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e067      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4934      	ldr	r1, [pc, #208]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff fa9c 	bl	8000cfc <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff fa98 	bl	8000cfc <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e04f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20c      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e032      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4916      	ldr	r1, [pc, #88]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	490e      	ldr	r1, [pc, #56]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001856:	f000 f821 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800185a:	4602      	mov	r2, r0
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	490a      	ldr	r1, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	5ccb      	ldrb	r3, [r1, r3]
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f850 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00
 800188c:	40023800 	.word	0x40023800
 8001890:	0800628c 	.word	0x0800628c
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a0:	b090      	sub	sp, #64	; 0x40
 80018a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d00d      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x40>
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	f200 80a1 	bhi.w	8001a08 <HAL_RCC_GetSysClockFreq+0x16c>
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ce:	e09b      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x184>)
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018d4:	e09b      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d6:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x188>)
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018da:	e098      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018dc:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e6:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d028      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	2200      	movs	r2, #0
 80018fa:	623b      	str	r3, [r7, #32]
 80018fc:	627a      	str	r2, [r7, #36]	; 0x24
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001904:	2100      	movs	r1, #0
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001908:	fb03 f201 	mul.w	r2, r3, r1
 800190c:	2300      	movs	r3, #0
 800190e:	fb00 f303 	mul.w	r3, r0, r3
 8001912:	4413      	add	r3, r2
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001916:	fba0 1202 	umull	r1, r2, r0, r2
 800191a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800191c:	460a      	mov	r2, r1
 800191e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001922:	4413      	add	r3, r2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001928:	2200      	movs	r2, #0
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	61fa      	str	r2, [r7, #28]
 800192e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001936:	f7fe fca3 	bl	8000280 <__aeabi_uldivmod>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4613      	mov	r3, r2
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001942:	e053      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	2200      	movs	r2, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	617a      	str	r2, [r7, #20]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001956:	f04f 0b00 	mov.w	fp, #0
 800195a:	4652      	mov	r2, sl
 800195c:	465b      	mov	r3, fp
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0159      	lsls	r1, r3, #5
 8001968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196c:	0150      	lsls	r0, r2, #5
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	ebb2 080a 	subs.w	r8, r2, sl
 8001976:	eb63 090b 	sbc.w	r9, r3, fp
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001986:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800198a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800198e:	ebb2 0408 	subs.w	r4, r2, r8
 8001992:	eb63 0509 	sbc.w	r5, r3, r9
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	00eb      	lsls	r3, r5, #3
 80019a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a4:	00e2      	lsls	r2, r4, #3
 80019a6:	4614      	mov	r4, r2
 80019a8:	461d      	mov	r5, r3
 80019aa:	eb14 030a 	adds.w	r3, r4, sl
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	eb45 030b 	adc.w	r3, r5, fp
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019c2:	4629      	mov	r1, r5
 80019c4:	028b      	lsls	r3, r1, #10
 80019c6:	4621      	mov	r1, r4
 80019c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019cc:	4621      	mov	r1, r4
 80019ce:	028a      	lsls	r2, r1, #10
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d6:	2200      	movs	r2, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	60fa      	str	r2, [r7, #12]
 80019dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019e0:	f7fe fc4e 	bl	8000280 <__aeabi_uldivmod>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4613      	mov	r3, r2
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	3301      	adds	r3, #1
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3740      	adds	r7, #64	; 0x40
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	017d7840 	.word	0x017d7840

08001a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0a9b      	lsrs	r3, r3, #10
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	0800629c 	.word	0x0800629c

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffdc 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0b5b      	lsrs	r3, r3, #13
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	0800629c 	.word	0x0800629c

08001a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_RCC_GetClockConfig+0x60>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0207 	and.w	r2, r3, #7
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e041      	b.n	8001b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f839 	bl	8001b92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f000 f9ca 	bl	8001ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d001      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e044      	b.n	8001c4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d018      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x6c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bea:	d013      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x6c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_TIM_Base_Start_IT+0xb4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00e      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x6c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x6c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x6c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d111      	bne.n	8001c38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d010      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c36:	e007      	b.n	8001c48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40000800 	.word	0x40000800
 8001c64:	40000c00 	.word	0x40000c00
 8001c68:	40014000 	.word	0x40014000

08001c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0202 	mvn.w	r2, #2
 8001c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8ee 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8e0 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8f1 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0204 	mvn.w	r2, #4
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8c4 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8b6 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8c7 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0208 	mvn.w	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f89a 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f88c 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f89d 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0210 	mvn.w	r2, #16
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f870 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f862 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f873 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0201 	mvn.w	r2, #1
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fd0a 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	2b80      	cmp	r3, #128	; 0x80
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8e2 	bl	8001fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f838 	bl	8001eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0220 	mvn.w	r2, #32
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8ac 	bl	8001fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a34      	ldr	r2, [pc, #208]	; (8001fb0 <TIM_Base_SetConfig+0xe4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00f      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a31      	ldr	r2, [pc, #196]	; (8001fb4 <TIM_Base_SetConfig+0xe8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a30      	ldr	r2, [pc, #192]	; (8001fb8 <TIM_Base_SetConfig+0xec>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <TIM_Base_SetConfig+0xf0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <TIM_Base_SetConfig+0xe4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01b      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d017      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <TIM_Base_SetConfig+0xe8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <TIM_Base_SetConfig+0xec>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00f      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <TIM_Base_SetConfig+0xf0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <TIM_Base_SetConfig+0xf4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <TIM_Base_SetConfig+0xf8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <TIM_Base_SetConfig+0xfc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d108      	bne.n	8001f68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <TIM_Base_SetConfig+0xe4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d103      	bne.n	8001f9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800

08001fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e03f      	b.n	8002086 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fc36 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f829 	bl	8002090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800204c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800205c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800206c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b0c0      	sub	sp, #256	; 0x100
 8002096:	af00      	add	r7, sp, #0
 8002098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	ea40 0301 	orr.w	r3, r0, r1
 80020b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020e8:	f021 010c 	bic.w	r1, r1, #12
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020f6:	430b      	orrs	r3, r1
 80020f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210a:	6999      	ldr	r1, [r3, #24]
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	ea40 0301 	orr.w	r3, r0, r1
 8002116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <UART_SetConfig+0x2cc>)
 8002120:	429a      	cmp	r2, r3
 8002122:	d005      	beq.n	8002130 <UART_SetConfig+0xa0>
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <UART_SetConfig+0x2d0>)
 800212c:	429a      	cmp	r2, r3
 800212e:	d104      	bne.n	800213a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002130:	f7ff fc9a 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8002134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002138:	e003      	b.n	8002142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800213a:	f7ff fc81 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 800213e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800214c:	f040 810c 	bne.w	8002368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002154:	2200      	movs	r2, #0
 8002156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800215a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800215e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002162:	4622      	mov	r2, r4
 8002164:	462b      	mov	r3, r5
 8002166:	1891      	adds	r1, r2, r2
 8002168:	65b9      	str	r1, [r7, #88]	; 0x58
 800216a:	415b      	adcs	r3, r3
 800216c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800216e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002172:	4621      	mov	r1, r4
 8002174:	eb12 0801 	adds.w	r8, r2, r1
 8002178:	4629      	mov	r1, r5
 800217a:	eb43 0901 	adc.w	r9, r3, r1
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800218e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002192:	4690      	mov	r8, r2
 8002194:	4699      	mov	r9, r3
 8002196:	4623      	mov	r3, r4
 8002198:	eb18 0303 	adds.w	r3, r8, r3
 800219c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021a0:	462b      	mov	r3, r5
 80021a2:	eb49 0303 	adc.w	r3, r9, r3
 80021a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021be:	460b      	mov	r3, r1
 80021c0:	18db      	adds	r3, r3, r3
 80021c2:	653b      	str	r3, [r7, #80]	; 0x50
 80021c4:	4613      	mov	r3, r2
 80021c6:	eb42 0303 	adc.w	r3, r2, r3
 80021ca:	657b      	str	r3, [r7, #84]	; 0x54
 80021cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021d4:	f7fe f854 	bl	8000280 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4b61      	ldr	r3, [pc, #388]	; (8002364 <UART_SetConfig+0x2d4>)
 80021de:	fba3 2302 	umull	r2, r3, r3, r2
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	011c      	lsls	r4, r3, #4
 80021e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021f8:	4642      	mov	r2, r8
 80021fa:	464b      	mov	r3, r9
 80021fc:	1891      	adds	r1, r2, r2
 80021fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002200:	415b      	adcs	r3, r3
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002208:	4641      	mov	r1, r8
 800220a:	eb12 0a01 	adds.w	sl, r2, r1
 800220e:	4649      	mov	r1, r9
 8002210:	eb43 0b01 	adc.w	fp, r3, r1
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002228:	4692      	mov	sl, r2
 800222a:	469b      	mov	fp, r3
 800222c:	4643      	mov	r3, r8
 800222e:	eb1a 0303 	adds.w	r3, sl, r3
 8002232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002236:	464b      	mov	r3, r9
 8002238:	eb4b 0303 	adc.w	r3, fp, r3
 800223c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800224c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002254:	460b      	mov	r3, r1
 8002256:	18db      	adds	r3, r3, r3
 8002258:	643b      	str	r3, [r7, #64]	; 0x40
 800225a:	4613      	mov	r3, r2
 800225c:	eb42 0303 	adc.w	r3, r2, r3
 8002260:	647b      	str	r3, [r7, #68]	; 0x44
 8002262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800226a:	f7fe f809 	bl	8000280 <__aeabi_uldivmod>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4611      	mov	r1, r2
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <UART_SetConfig+0x2d4>)
 8002276:	fba3 2301 	umull	r2, r3, r3, r1
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2264      	movs	r2, #100	; 0x64
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	1acb      	subs	r3, r1, r3
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <UART_SetConfig+0x2d4>)
 800228c:	fba3 2302 	umull	r2, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002298:	441c      	add	r4, r3
 800229a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022ac:	4642      	mov	r2, r8
 80022ae:	464b      	mov	r3, r9
 80022b0:	1891      	adds	r1, r2, r2
 80022b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80022b4:	415b      	adcs	r3, r3
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022bc:	4641      	mov	r1, r8
 80022be:	1851      	adds	r1, r2, r1
 80022c0:	6339      	str	r1, [r7, #48]	; 0x30
 80022c2:	4649      	mov	r1, r9
 80022c4:	414b      	adcs	r3, r1
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022d4:	4659      	mov	r1, fp
 80022d6:	00cb      	lsls	r3, r1, #3
 80022d8:	4651      	mov	r1, sl
 80022da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022de:	4651      	mov	r1, sl
 80022e0:	00ca      	lsls	r2, r1, #3
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	4642      	mov	r2, r8
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022f0:	464b      	mov	r3, r9
 80022f2:	460a      	mov	r2, r1
 80022f4:	eb42 0303 	adc.w	r3, r2, r3
 80022f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800230c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002310:	460b      	mov	r3, r1
 8002312:	18db      	adds	r3, r3, r3
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
 8002316:	4613      	mov	r3, r2
 8002318:	eb42 0303 	adc.w	r3, r2, r3
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800231e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002326:	f7fd ffab 	bl	8000280 <__aeabi_uldivmod>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <UART_SetConfig+0x2d4>)
 8002330:	fba3 1302 	umull	r1, r3, r3, r2
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	2164      	movs	r1, #100	; 0x64
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	3332      	adds	r3, #50	; 0x32
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <UART_SetConfig+0x2d4>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	f003 0207 	and.w	r2, r3, #7
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4422      	add	r2, r4
 8002356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002358:	e106      	b.n	8002568 <UART_SetConfig+0x4d8>
 800235a:	bf00      	nop
 800235c:	40011000 	.word	0x40011000
 8002360:	40011400 	.word	0x40011400
 8002364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800236c:	2200      	movs	r2, #0
 800236e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800237a:	4642      	mov	r2, r8
 800237c:	464b      	mov	r3, r9
 800237e:	1891      	adds	r1, r2, r2
 8002380:	6239      	str	r1, [r7, #32]
 8002382:	415b      	adcs	r3, r3
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800238a:	4641      	mov	r1, r8
 800238c:	1854      	adds	r4, r2, r1
 800238e:	4649      	mov	r1, r9
 8002390:	eb43 0501 	adc.w	r5, r3, r1
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	00eb      	lsls	r3, r5, #3
 800239e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a2:	00e2      	lsls	r2, r4, #3
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
 80023a8:	4643      	mov	r3, r8
 80023aa:	18e3      	adds	r3, r4, r3
 80023ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023b0:	464b      	mov	r3, r9
 80023b2:	eb45 0303 	adc.w	r3, r5, r3
 80023b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023d6:	4629      	mov	r1, r5
 80023d8:	008b      	lsls	r3, r1, #2
 80023da:	4621      	mov	r1, r4
 80023dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e0:	4621      	mov	r1, r4
 80023e2:	008a      	lsls	r2, r1, #2
 80023e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023e8:	f7fd ff4a 	bl	8000280 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4b60      	ldr	r3, [pc, #384]	; (8002574 <UART_SetConfig+0x4e4>)
 80023f2:	fba3 2302 	umull	r2, r3, r3, r2
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	011c      	lsls	r4, r3, #4
 80023fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023fe:	2200      	movs	r2, #0
 8002400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	1891      	adds	r1, r2, r2
 8002412:	61b9      	str	r1, [r7, #24]
 8002414:	415b      	adcs	r3, r3
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800241c:	4641      	mov	r1, r8
 800241e:	1851      	adds	r1, r2, r1
 8002420:	6139      	str	r1, [r7, #16]
 8002422:	4649      	mov	r1, r9
 8002424:	414b      	adcs	r3, r1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002434:	4659      	mov	r1, fp
 8002436:	00cb      	lsls	r3, r1, #3
 8002438:	4651      	mov	r1, sl
 800243a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800243e:	4651      	mov	r1, sl
 8002440:	00ca      	lsls	r2, r1, #3
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	4603      	mov	r3, r0
 8002448:	4642      	mov	r2, r8
 800244a:	189b      	adds	r3, r3, r2
 800244c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002450:	464b      	mov	r3, r9
 8002452:	460a      	mov	r2, r1
 8002454:	eb42 0303 	adc.w	r3, r2, r3
 8002458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	67bb      	str	r3, [r7, #120]	; 0x78
 8002466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002474:	4649      	mov	r1, r9
 8002476:	008b      	lsls	r3, r1, #2
 8002478:	4641      	mov	r1, r8
 800247a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800247e:	4641      	mov	r1, r8
 8002480:	008a      	lsls	r2, r1, #2
 8002482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002486:	f7fd fefb 	bl	8000280 <__aeabi_uldivmod>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4611      	mov	r1, r2
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <UART_SetConfig+0x4e4>)
 8002492:	fba3 2301 	umull	r2, r3, r3, r1
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2264      	movs	r2, #100	; 0x64
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	1acb      	subs	r3, r1, r3
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	3332      	adds	r3, #50	; 0x32
 80024a4:	4a33      	ldr	r2, [pc, #204]	; (8002574 <UART_SetConfig+0x4e4>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b0:	441c      	add	r4, r3
 80024b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b6:	2200      	movs	r2, #0
 80024b8:	673b      	str	r3, [r7, #112]	; 0x70
 80024ba:	677a      	str	r2, [r7, #116]	; 0x74
 80024bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024c0:	4642      	mov	r2, r8
 80024c2:	464b      	mov	r3, r9
 80024c4:	1891      	adds	r1, r2, r2
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	415b      	adcs	r3, r3
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d0:	4641      	mov	r1, r8
 80024d2:	1851      	adds	r1, r2, r1
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	4649      	mov	r1, r9
 80024d8:	414b      	adcs	r3, r1
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024e8:	4659      	mov	r1, fp
 80024ea:	00cb      	lsls	r3, r1, #3
 80024ec:	4651      	mov	r1, sl
 80024ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f2:	4651      	mov	r1, sl
 80024f4:	00ca      	lsls	r2, r1, #3
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	4642      	mov	r2, r8
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	66bb      	str	r3, [r7, #104]	; 0x68
 8002502:	464b      	mov	r3, r9
 8002504:	460a      	mov	r2, r1
 8002506:	eb42 0303 	adc.w	r3, r2, r3
 800250a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	663b      	str	r3, [r7, #96]	; 0x60
 8002516:	667a      	str	r2, [r7, #100]	; 0x64
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002524:	4649      	mov	r1, r9
 8002526:	008b      	lsls	r3, r1, #2
 8002528:	4641      	mov	r1, r8
 800252a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800252e:	4641      	mov	r1, r8
 8002530:	008a      	lsls	r2, r1, #2
 8002532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002536:	f7fd fea3 	bl	8000280 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <UART_SetConfig+0x4e4>)
 8002540:	fba3 1302 	umull	r1, r3, r3, r2
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	2164      	movs	r1, #100	; 0x64
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	3332      	adds	r3, #50	; 0x32
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <UART_SetConfig+0x4e4>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4422      	add	r2, r4
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800256e:	46bd      	mov	sp, r7
 8002570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002574:	51eb851f 	.word	0x51eb851f

08002578 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Handler+0x1c>)
 800257e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002580:	f001 fe30 	bl	80041e4 <xTaskGetSchedulerState>
 8002584:	4603      	mov	r3, r0
 8002586:	2b01      	cmp	r3, #1
 8002588:	d001      	beq.n	800258e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800258a:	f002 fc2d 	bl	8004de8 <xPortSysTickHandler>
  }
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80025a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <vApplicationGetIdleTaskMemory+0x30>)
 80025ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	601a      	str	r2, [r3, #0]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000120 	.word	0x20000120
 80025c8:	2000017c 	.word	0x2000017c

080025cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80025dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4a06      	ldr	r2, [pc, #24]	; (80025fc <vApplicationGetTimerTaskMemory+0x30>)
 80025e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ea:	601a      	str	r2, [r3, #0]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	2000037c 	.word	0x2000037c
 80025fc:	200003d8 	.word	0x200003d8

08002600 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002606:	2020      	movs	r0, #32
 8002608:	f002 fc7e 	bl	8004f08 <pvPortMalloc>
 800260c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f983 	bl	800292a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800262a:	687b      	ldr	r3, [r7, #4]
	}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b090      	sub	sp, #64	; 0x40
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <xEventGroupWaitBits+0x56>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	61fb      	str	r3, [r7, #28]
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	61bb      	str	r3, [r7, #24]
}
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026a6:	f001 fd9d 	bl	80041e4 <xTaskGetSchedulerState>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <xEventGroupWaitBits+0x82>
 80026b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <xEventGroupWaitBits+0x86>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <xEventGroupWaitBits+0x88>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	617b      	str	r3, [r7, #20]
}
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80026d6:	f001 f905 	bl	80038e4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026e6:	f000 f8fe 	bl	80028e6 <prvTestWaitCondition>
 80026ea:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00e      	beq.n	8002710 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d028      	beq.n	8002752 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	43db      	mvns	r3, r3
 8002708:	401a      	ands	r2, r3
 800270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e020      	b.n	8002752 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800271a:	2301      	movs	r3, #1
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
 800271e:	e018      	b.n	8002752 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	1d18      	adds	r0, r3, #4
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	4313      	orrs	r3, r2
 8002746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002748:	4619      	mov	r1, r3
 800274a:	f001 fac3 	bl	8003cd4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002752:	f001 f8d5 	bl	8003900 <xTaskResumeAll>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275a:	2b00      	cmp	r3, #0
 800275c:	d031      	beq.n	80027c2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <xEventGroupWaitBits+0x198>)
 8002766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002774:	f001 fdc2 	bl	80042fc <uxTaskResetEventItemValue>
 8002778:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800277a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11a      	bne.n	80027ba <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8002784:	f002 fa9e 	bl	8004cc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002794:	f000 f8a7 	bl	80028e6 <prvTestWaitCondition>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	401a      	ands	r2, r3
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80027b6:	f002 fab5 	bl	8004d24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80027c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3740      	adds	r7, #64	; 0x40
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08e      	sub	sp, #56	; 0x38
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80027da:	2300      	movs	r3, #0
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <xEventGroupSetBits+0x32>
	__asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	613b      	str	r3, [r7, #16]
}
 80027fe:	bf00      	nop
 8002800:	e7fe      	b.n	8002800 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <xEventGroupSetBits+0x52>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60fb      	str	r3, [r7, #12]
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	3304      	adds	r3, #4
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	3308      	adds	r3, #8
 800282c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800282e:	f001 f859 	bl	80038e4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	431a      	orrs	r2, r3
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002844:	e03c      	b.n	80028c0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800285c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002864:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d108      	bne.n	8002882 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800287c:	2301      	movs	r3, #1
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002880:	e008      	b.n	8002894 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	429a      	cmp	r2, r3
 800288e:	d101      	bne.n	8002894 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028b4:	4619      	mov	r1, r3
 80028b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028b8:	f001 fad8 	bl	8003e6c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80028c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1be      	bne.n	8002846 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	43db      	mvns	r3, r3
 80028d0:	401a      	ands	r2, r3
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80028d6:	f001 f813 	bl	8003900 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	681b      	ldr	r3, [r3, #0]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3738      	adds	r7, #56	; 0x38
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002906:	2301      	movs	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e007      	b.n	800291c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	429a      	cmp	r2, r3
 8002916:	d101      	bne.n	800291c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002918:	2301      	movs	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800291c:	697b      	ldr	r3, [r7, #20]
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f103 0208 	add.w	r2, r3, #8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f103 0208 	add.w	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f103 0208 	add.w	r2, r3, #8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d103      	bne.n	80029ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e00c      	b.n	8002a06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3308      	adds	r3, #8
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e002      	b.n	80029fa <vListInsert+0x2e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d2f6      	bcs.n	80029f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6852      	ldr	r2, [r2, #4]
 8002a5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d103      	bne.n	8002a72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1e5a      	subs	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <xQueueGenericReset+0x2a>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	60bb      	str	r3, [r7, #8]
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002abe:	f002 f901 	bl	8004cc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	441a      	add	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	3b01      	subs	r3, #1
 8002af0:	68f9      	ldr	r1, [r7, #12]
 8002af2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	441a      	add	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d114      	bne.n	8002b3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01a      	beq.n	8002b52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3310      	adds	r3, #16
 8002b20:	4618      	mov	r0, r3
 8002b22:	f001 f93f 	bl	8003da4 <xTaskRemoveFromEventList>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <xQueueGenericReset+0xcc>)
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	e009      	b.n	8002b52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3310      	adds	r3, #16
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fef1 	bl	800292a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3324      	adds	r3, #36	; 0x24
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff feec 	bl	800292a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b52:	f002 f8e7 	bl	8004d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <xQueueGenericCreateStatic+0x52>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <xQueueGenericCreateStatic+0x56>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <xQueueGenericCreateStatic+0x58>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	623b      	str	r3, [r7, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <xQueueGenericCreateStatic+0x7e>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <xQueueGenericCreateStatic+0x82>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueGenericCreateStatic+0x84>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	61fb      	str	r3, [r7, #28]
}
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c02:	2350      	movs	r3, #80	; 0x50
 8002c04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d00a      	beq.n	8002c22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	61bb      	str	r3, [r7, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f805 	bl	8002c54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3730      	adds	r7, #48	; 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d103      	bne.n	8002c70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e002      	b.n	8002c76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c82:	2101      	movs	r1, #1
 8002c84:	69b8      	ldr	r0, [r7, #24]
 8002c86:	f7ff ff05 	bl	8002a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08e      	sub	sp, #56	; 0x38
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002caa:	2300      	movs	r3, #0
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <xQueueGenericSend+0x32>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <xQueueGenericSend+0x40>
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueGenericSend+0x44>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <xQueueGenericSend+0x46>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <xQueueGenericSend+0x60>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d103      	bne.n	8002d0a <xQueueGenericSend+0x6e>
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <xQueueGenericSend+0x72>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericSend+0x74>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueGenericSend+0x8e>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	623b      	str	r3, [r7, #32]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d2a:	f001 fa5b 	bl	80041e4 <xTaskGetSchedulerState>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <xQueueGenericSend+0x9e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <xQueueGenericSend+0xa2>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <xQueueGenericSend+0xa4>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <xQueueGenericSend+0xbe>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	61fb      	str	r3, [r7, #28]
}
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d5a:	f001 ffb3 	bl	8004cc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <xQueueGenericSend+0xd4>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d129      	bne.n	8002dc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d76:	f000 fa0b 	bl	8003190 <prvCopyDataToQueue>
 8002d7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	3324      	adds	r3, #36	; 0x24
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f80b 	bl	8003da4 <xTaskRemoveFromEventList>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d94:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <xQueueGenericSend+0x1f8>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	e00a      	b.n	8002dbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <xQueueGenericSend+0x1f8>)
 8002dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dbc:	f001 ffb2 	bl	8004d24 <vPortExitCritical>
				return pdPASS;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e063      	b.n	8002e8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dca:	f001 ffab 	bl	8004d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e05c      	b.n	8002e8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 f8a7 	bl	8003f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002de6:	f001 ff9d 	bl	8004d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dea:	f000 fd7b 	bl	80038e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dee:	f001 ff69 	bl	8004cc4 <vPortEnterCritical>
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d103      	bne.n	8002e08 <xQueueGenericSend+0x16c>
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d103      	bne.n	8002e1e <xQueueGenericSend+0x182>
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e1e:	f001 ff81 	bl	8004d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e22:	1d3a      	adds	r2, r7, #4
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 f896 	bl	8003f5c <xTaskCheckForTimeOut>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d124      	bne.n	8002e80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e38:	f000 faa2 	bl	8003380 <prvIsQueueFull>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	3310      	adds	r3, #16
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 ff1e 	bl	8003c8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e52:	f000 fa2d 	bl	80032b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e56:	f000 fd53 	bl	8003900 <xTaskResumeAll>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f47f af7c 	bne.w	8002d5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <xQueueGenericSend+0x1f8>)
 8002e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	e772      	b.n	8002d5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e76:	f000 fa1b 	bl	80032b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e7a:	f000 fd41 	bl	8003900 <xTaskResumeAll>
 8002e7e:	e76c      	b.n	8002d5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e82:	f000 fa15 	bl	80032b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e86:	f000 fd3b 	bl	8003900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3738      	adds	r7, #56	; 0x38
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b090      	sub	sp, #64	; 0x40
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <xQueueGenericSendFromISR+0x3c>
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <xQueueGenericSendFromISR+0x40>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <xQueueGenericSendFromISR+0x42>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSendFromISR+0x6a>
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <xQueueGenericSendFromISR+0x6e>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <xQueueGenericSendFromISR+0x70>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	623b      	str	r3, [r7, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f22:	f001 ffb1 	bl	8004e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f26:	f3ef 8211 	mrs	r2, BASEPRI
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	61fa      	str	r2, [r7, #28]
 8002f3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <xQueueGenericSendFromISR+0xbc>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d12f      	bne.n	8002fb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f6a:	f000 f911 	bl	8003190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d112      	bne.n	8002f9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d016      	beq.n	8002fae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	3324      	adds	r3, #36	; 0x24
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 ff0d 	bl	8003da4 <xTaskRemoveFromEventList>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e007      	b.n	8002fae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	b25a      	sxtb	r2, r3
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002fb2:	e001      	b.n	8002fb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3740      	adds	r7, #64	; 0x40
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08c      	sub	sp, #48	; 0x30
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <xQueueReceive+0x30>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	623b      	str	r3, [r7, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d103      	bne.n	800300e <xQueueReceive+0x3e>
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <xQueueReceive+0x42>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueReceive+0x44>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <xQueueReceive+0x5e>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61fb      	str	r3, [r7, #28]
}
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800302e:	f001 f8d9 	bl	80041e4 <xTaskGetSchedulerState>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <xQueueReceive+0x6e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <xQueueReceive+0x72>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <xQueueReceive+0x74>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <xQueueReceive+0x8e>
	__asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	61bb      	str	r3, [r7, #24]
}
 800305a:	bf00      	nop
 800305c:	e7fe      	b.n	800305c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800305e:	f001 fe31 	bl	8004cc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01f      	beq.n	80030ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003072:	f000 f8f7 	bl	8003264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00f      	beq.n	80030a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	3310      	adds	r3, #16
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fe8a 	bl	8003da4 <xTaskRemoveFromEventList>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <xQueueReceive+0x1bc>)
 8003098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030a6:	f001 fe3d 	bl	8004d24 <vPortExitCritical>
				return pdPASS;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e069      	b.n	8003182 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d103      	bne.n	80030bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030b4:	f001 fe36 	bl	8004d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e062      	b.n	8003182 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 ff32 	bl	8003f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030cc:	2301      	movs	r3, #1
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d0:	f001 fe28 	bl	8004d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030d4:	f000 fc06 	bl	80038e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030d8:	f001 fdf4 	bl	8004cc4 <vPortEnterCritical>
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d103      	bne.n	80030f2 <xQueueReceive+0x122>
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d103      	bne.n	8003108 <xQueueReceive+0x138>
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003108:	f001 fe0c 	bl	8004d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800310c:	1d3a      	adds	r2, r7, #4
 800310e:	f107 0310 	add.w	r3, r7, #16
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 ff21 	bl	8003f5c <xTaskCheckForTimeOut>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d123      	bne.n	8003168 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003122:	f000 f917 	bl	8003354 <prvIsQueueEmpty>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fda9 	bl	8003c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800313a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313c:	f000 f8b8 	bl	80032b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003140:	f000 fbde 	bl	8003900 <xTaskResumeAll>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d189      	bne.n	800305e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <xQueueReceive+0x1bc>)
 800314c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	e780      	b.n	800305e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800315c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315e:	f000 f8a7 	bl	80032b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003162:	f000 fbcd 	bl	8003900 <xTaskResumeAll>
 8003166:	e77a      	b.n	800305e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316a:	f000 f8a1 	bl	80032b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800316e:	f000 fbc7 	bl	8003900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003174:	f000 f8ee 	bl	8003354 <prvIsQueueEmpty>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f43f af6f 	beq.w	800305e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003180:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003182:	4618      	mov	r0, r3
 8003184:	3730      	adds	r7, #48	; 0x30
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000ed04 	.word	0xe000ed04

08003190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d14d      	bne.n	8003252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 f830 	bl	8004220 <xTaskPriorityDisinherit>
 80031c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e043      	b.n	8003252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d119      	bne.n	8003204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6858      	ldr	r0, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	461a      	mov	r2, r3
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	f002 fa11 	bl	8005602 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	441a      	add	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d32b      	bcc.n	8003252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	e026      	b.n	8003252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68d8      	ldr	r0, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	461a      	mov	r2, r3
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	f002 f9f7 	bl	8005602 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	425b      	negs	r3, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	425b      	negs	r3, r3
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d105      	bne.n	8003252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	3b01      	subs	r3, #1
 8003250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800325a:	697b      	ldr	r3, [r7, #20]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d018      	beq.n	80032a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	441a      	add	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	d303      	bcc.n	8003298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68d9      	ldr	r1, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	461a      	mov	r2, r3
 80032a2:	6838      	ldr	r0, [r7, #0]
 80032a4:	f002 f9ad 	bl	8005602 <memcpy>
	}
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032b8:	f001 fd04 	bl	8004cc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032c4:	e011      	b.n	80032ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3324      	adds	r3, #36	; 0x24
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fd66 	bl	8003da4 <xTaskRemoveFromEventList>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032de:	f000 fe9f 	bl	8004020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	dce9      	bgt.n	80032c6 <prvUnlockQueue+0x16>
 80032f2:	e000      	b.n	80032f6 <prvUnlockQueue+0x46>
					break;
 80032f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	22ff      	movs	r2, #255	; 0xff
 80032fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032fe:	f001 fd11 	bl	8004d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003302:	f001 fcdf 	bl	8004cc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800330c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800330e:	e011      	b.n	8003334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3310      	adds	r3, #16
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fd41 	bl	8003da4 <xTaskRemoveFromEventList>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003328:	f000 fe7a 	bl	8004020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800332c:	7bbb      	ldrb	r3, [r7, #14]
 800332e:	3b01      	subs	r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003338:	2b00      	cmp	r3, #0
 800333a:	dce9      	bgt.n	8003310 <prvUnlockQueue+0x60>
 800333c:	e000      	b.n	8003340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800333e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	22ff      	movs	r2, #255	; 0xff
 8003344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003348:	f001 fcec 	bl	8004d24 <vPortExitCritical>
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800335c:	f001 fcb2 	bl	8004cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e001      	b.n	8003372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003372:	f001 fcd7 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003388:	f001 fc9c 	bl	8004cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	429a      	cmp	r2, r3
 8003396:	d102      	bne.n	800339e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e001      	b.n	80033a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033a2:	f001 fcbf 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e014      	b.n	80033ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033c0:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <vQueueAddToRegistry+0x50>)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <vQueueAddToRegistry+0x50>)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <vQueueAddToRegistry+0x50>)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033e2:	e006      	b.n	80033f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3301      	adds	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b07      	cmp	r3, #7
 80033ee:	d9e7      	bls.n	80033c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	200007d8 	.word	0x200007d8

08003404 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003414:	f001 fc56 	bl	8004cc4 <vPortEnterCritical>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800341e:	b25b      	sxtb	r3, r3
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d103      	bne.n	800342e <vQueueWaitForMessageRestricted+0x2a>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003434:	b25b      	sxtb	r3, r3
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d103      	bne.n	8003444 <vQueueWaitForMessageRestricted+0x40>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003444:	f001 fc6e 	bl	8004d24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc77 	bl	8003d4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800345e:	6978      	ldr	r0, [r7, #20]
 8003460:	f7ff ff26 	bl	80032b0 <prvUnlockQueue>
	}
 8003464:	bf00      	nop
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	; 0x38
 8003470:	af04      	add	r7, sp, #16
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	623b      	str	r3, [r7, #32]
}
 8003492:	bf00      	nop
 8003494:	e7fe      	b.n	8003494 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	61fb      	str	r3, [r7, #28]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034b2:	235c      	movs	r3, #92	; 0x5c
 80034b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b5c      	cmp	r3, #92	; 0x5c
 80034ba:	d00a      	beq.n	80034d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	61bb      	str	r3, [r7, #24]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01e      	beq.n	8003518 <xTaskCreateStatic+0xac>
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034f2:	2300      	movs	r3, #0
 80034f4:	9303      	str	r3, [sp, #12]
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	9302      	str	r3, [sp, #8]
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f850 	bl	80035b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003512:	f000 f8dd 	bl	80036d0 <prvAddNewTaskToReadyList>
 8003516:	e001      	b.n	800351c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800351c:	697b      	ldr	r3, [r7, #20]
	}
 800351e:	4618      	mov	r0, r3
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08c      	sub	sp, #48	; 0x30
 800352a:	af04      	add	r7, sp, #16
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fce4 	bl	8004f08 <pvPortMalloc>
 8003540:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003548:	205c      	movs	r0, #92	; 0x5c
 800354a:	f001 fcdd 	bl	8004f08 <pvPortMalloc>
 800354e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
 800355c:	e005      	b.n	800356a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f001 fd9e 	bl	80050a0 <vPortFree>
 8003564:	e001      	b.n	800356a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d017      	beq.n	80035a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	2300      	movs	r3, #0
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f80e 	bl	80035b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003594:	69f8      	ldr	r0, [r7, #28]
 8003596:	f000 f89b 	bl	80036d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800359a:	2301      	movs	r3, #1
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e002      	b.n	80035a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
 80035a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035a6:	69bb      	ldr	r3, [r7, #24]
	}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	461a      	mov	r2, r3
 80035c8:	21a5      	movs	r1, #165	; 0xa5
 80035ca:	f001 ff9e 	bl	800550a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035d8:	3b01      	subs	r3, #1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f023 0307 	bic.w	r3, r3, #7
 80035e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	617b      	str	r3, [r7, #20]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01f      	beq.n	800364e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	e012      	b.n	800363a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	7819      	ldrb	r1, [r3, #0]
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	3334      	adds	r3, #52	; 0x34
 8003624:	460a      	mov	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	3301      	adds	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2b0f      	cmp	r3, #15
 800363e:	d9e9      	bls.n	8003614 <prvInitialiseNewTask+0x64>
 8003640:	e000      	b.n	8003644 <prvInitialiseNewTask+0x94>
			{
				break;
 8003642:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800364c:	e003      	b.n	8003656 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	2b37      	cmp	r3, #55	; 0x37
 800365a:	d901      	bls.n	8003660 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800365c:	2337      	movs	r3, #55	; 0x37
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800366a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	2200      	movs	r2, #0
 8003670:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	3304      	adds	r3, #4
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f977 	bl	800296a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	3318      	adds	r3, #24
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f972 	bl	800296a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800369a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	2200      	movs	r2, #0
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	69b8      	ldr	r0, [r7, #24]
 80036b0:	f001 f9de 	bl	8004a70 <pxPortInitialiseStack>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036c6:	bf00      	nop
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036d8:	f001 faf4 	bl	8004cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <prvAddNewTaskToReadyList+0xc4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <prvAddNewTaskToReadyList+0xc4>)
 80036e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <prvAddNewTaskToReadyList+0xc8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036ee:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <prvAddNewTaskToReadyList+0xc8>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <prvAddNewTaskToReadyList+0xc4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d110      	bne.n	800371e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036fc:	f000 fcb4 	bl	8004068 <prvInitialiseTaskLists>
 8003700:	e00d      	b.n	800371e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <prvAddNewTaskToReadyList+0xcc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <prvAddNewTaskToReadyList+0xc8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	429a      	cmp	r2, r3
 8003716:	d802      	bhi.n	800371e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <prvAddNewTaskToReadyList+0xc8>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <prvAddNewTaskToReadyList+0xd0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <prvAddNewTaskToReadyList+0xd0>)
 8003726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <prvAddNewTaskToReadyList+0xd0>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <prvAddNewTaskToReadyList+0xd4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d903      	bls.n	8003744 <prvAddNewTaskToReadyList+0x74>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <prvAddNewTaskToReadyList+0xd4>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <prvAddNewTaskToReadyList+0xd8>)
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7ff f912 	bl	8002984 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003760:	f001 fae0 	bl	8004d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <prvAddNewTaskToReadyList+0xcc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <prvAddNewTaskToReadyList+0xc8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	429a      	cmp	r2, r3
 8003778:	d207      	bcs.n	800378a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <prvAddNewTaskToReadyList+0xdc>)
 800377c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000cec 	.word	0x20000cec
 8003798:	20000818 	.word	0x20000818
 800379c:	20000cf8 	.word	0x20000cf8
 80037a0:	20000d08 	.word	0x20000d08
 80037a4:	20000cf4 	.word	0x20000cf4
 80037a8:	2000081c 	.word	0x2000081c
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d017      	beq.n	80037f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <vTaskDelay+0x60>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <vTaskDelay+0x30>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	60bb      	str	r3, [r7, #8]
}
 80037dc:	bf00      	nop
 80037de:	e7fe      	b.n	80037de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037e0:	f000 f880 	bl	80038e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037e4:	2100      	movs	r1, #0
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fda0 	bl	800432c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037ec:	f000 f888 	bl	8003900 <xTaskResumeAll>
 80037f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <vTaskDelay+0x64>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000d14 	.word	0x20000d14
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003826:	463a      	mov	r2, r7
 8003828:	1d39      	adds	r1, r7, #4
 800382a:	f107 0308 	add.w	r3, r7, #8
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe feb2 	bl	8002598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	9202      	str	r2, [sp, #8]
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2300      	movs	r3, #0
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	460a      	mov	r2, r1
 8003846:	4921      	ldr	r1, [pc, #132]	; (80038cc <vTaskStartScheduler+0xb4>)
 8003848:	4821      	ldr	r0, [pc, #132]	; (80038d0 <vTaskStartScheduler+0xb8>)
 800384a:	f7ff fe0f 	bl	800346c <xTaskCreateStatic>
 800384e:	4603      	mov	r3, r0
 8003850:	4a20      	ldr	r2, [pc, #128]	; (80038d4 <vTaskStartScheduler+0xbc>)
 8003852:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <vTaskStartScheduler+0xbc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e001      	b.n	8003866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800386c:	f000 fdb2 	bl	80043d4 <xTimerCreateTimerTask>
 8003870:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d116      	bne.n	80038a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	613b      	str	r3, [r7, #16]
}
 800388a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <vTaskStartScheduler+0xc0>)
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <vTaskStartScheduler+0xc4>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <vTaskStartScheduler+0xc8>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038a0:	f001 f96e 	bl	8004b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038a4:	e00e      	b.n	80038c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d10a      	bne.n	80038c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	60fb      	str	r3, [r7, #12]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <vTaskStartScheduler+0xaa>
}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	08006274 	.word	0x08006274
 80038d0:	08004039 	.word	0x08004039
 80038d4:	20000d10 	.word	0x20000d10
 80038d8:	20000d0c 	.word	0x20000d0c
 80038dc:	20000cf8 	.word	0x20000cf8
 80038e0:	20000cf0 	.word	0x20000cf0

080038e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <vTaskSuspendAll+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	4a03      	ldr	r2, [pc, #12]	; (80038fc <vTaskSuspendAll+0x18>)
 80038f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	20000d14 	.word	0x20000d14

08003900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800390e:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <xTaskResumeAll+0x118>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <xTaskResumeAll+0x2c>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	603b      	str	r3, [r7, #0]
}
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800392c:	f001 f9ca 	bl	8004cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003930:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <xTaskResumeAll+0x118>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <xTaskResumeAll+0x118>)
 8003938:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <xTaskResumeAll+0x118>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d162      	bne.n	8003a08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003942:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <xTaskResumeAll+0x11c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d05e      	beq.n	8003a08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800394a:	e02f      	b.n	80039ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800394c:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <xTaskResumeAll+0x120>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3318      	adds	r3, #24
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff f870 	bl	8002a3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3304      	adds	r3, #4
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff f86b 	bl	8002a3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <xTaskResumeAll+0x124>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d903      	bls.n	800397c <xTaskResumeAll+0x7c>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <xTaskResumeAll+0x124>)
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <xTaskResumeAll+0x128>)
 800398a:	441a      	add	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f7fe fff6 	bl	8002984 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <xTaskResumeAll+0x12c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <xTaskResumeAll+0x130>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <xTaskResumeAll+0x120>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1cb      	bne.n	800394c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039ba:	f000 fbf3 	bl	80041a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <xTaskResumeAll+0x134>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039ca:	f000 f847 	bl	8003a5c <xTaskIncrementTick>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <xTaskResumeAll+0x130>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f1      	bne.n	80039ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <xTaskResumeAll+0x134>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <xTaskResumeAll+0x130>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <xTaskResumeAll+0x138>)
 80039fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a08:	f001 f98c 	bl	8004d24 <vPortExitCritical>

	return xAlreadyYielded;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000d14 	.word	0x20000d14
 8003a1c:	20000cec 	.word	0x20000cec
 8003a20:	20000cac 	.word	0x20000cac
 8003a24:	20000cf4 	.word	0x20000cf4
 8003a28:	2000081c 	.word	0x2000081c
 8003a2c:	20000818 	.word	0x20000818
 8003a30:	20000d00 	.word	0x20000d00
 8003a34:	20000cfc 	.word	0x20000cfc
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <xTaskGetTickCount+0x1c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a48:	687b      	ldr	r3, [r7, #4]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000cf0 	.word	0x20000cf0

08003a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a66:	4b4f      	ldr	r3, [pc, #316]	; (8003ba4 <xTaskIncrementTick+0x148>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 808f 	bne.w	8003b8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a70:	4b4d      	ldr	r3, [pc, #308]	; (8003ba8 <xTaskIncrementTick+0x14c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a78:	4a4b      	ldr	r2, [pc, #300]	; (8003ba8 <xTaskIncrementTick+0x14c>)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d120      	bne.n	8003ac6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a84:	4b49      	ldr	r3, [pc, #292]	; (8003bac <xTaskIncrementTick+0x150>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	603b      	str	r3, [r7, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	e7fe      	b.n	8003aa2 <xTaskIncrementTick+0x46>
 8003aa4:	4b41      	ldr	r3, [pc, #260]	; (8003bac <xTaskIncrementTick+0x150>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <xTaskIncrementTick+0x154>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3f      	ldr	r2, [pc, #252]	; (8003bac <xTaskIncrementTick+0x150>)
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4a3f      	ldr	r2, [pc, #252]	; (8003bb0 <xTaskIncrementTick+0x154>)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b3e      	ldr	r3, [pc, #248]	; (8003bb4 <xTaskIncrementTick+0x158>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a3d      	ldr	r2, [pc, #244]	; (8003bb4 <xTaskIncrementTick+0x158>)
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	f000 fb6f 	bl	80041a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ac6:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <xTaskIncrementTick+0x15c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d349      	bcc.n	8003b64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad0:	4b36      	ldr	r3, [pc, #216]	; (8003bac <xTaskIncrementTick+0x150>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ada:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <xTaskIncrementTick+0x15c>)
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	601a      	str	r2, [r3, #0]
					break;
 8003ae2:	e03f      	b.n	8003b64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae4:	4b31      	ldr	r3, [pc, #196]	; (8003bac <xTaskIncrementTick+0x150>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d203      	bcs.n	8003b04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <xTaskIncrementTick+0x15c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b02:	e02f      	b.n	8003b64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe ff98 	bl	8002a3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	3318      	adds	r3, #24
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe ff8f 	bl	8002a3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <xTaskIncrementTick+0x160>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d903      	bls.n	8003b34 <xTaskIncrementTick+0xd8>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <xTaskIncrementTick+0x160>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <xTaskIncrementTick+0x164>)
 8003b42:	441a      	add	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fe ff1a 	bl	8002984 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <xTaskIncrementTick+0x168>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3b8      	bcc.n	8003ad0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b62:	e7b5      	b.n	8003ad0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <xTaskIncrementTick+0x168>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	4915      	ldr	r1, [pc, #84]	; (8003bc0 <xTaskIncrementTick+0x164>)
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d901      	bls.n	8003b80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <xTaskIncrementTick+0x16c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e004      	b.n	8003b98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <xTaskIncrementTick+0x170>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <xTaskIncrementTick+0x170>)
 8003b96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b98:	697b      	ldr	r3, [r7, #20]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000d14 	.word	0x20000d14
 8003ba8:	20000cf0 	.word	0x20000cf0
 8003bac:	20000ca4 	.word	0x20000ca4
 8003bb0:	20000ca8 	.word	0x20000ca8
 8003bb4:	20000d04 	.word	0x20000d04
 8003bb8:	20000d0c 	.word	0x20000d0c
 8003bbc:	20000cf4 	.word	0x20000cf4
 8003bc0:	2000081c 	.word	0x2000081c
 8003bc4:	20000818 	.word	0x20000818
 8003bc8:	20000d00 	.word	0x20000d00
 8003bcc:	20000cfc 	.word	0x20000cfc

08003bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bd6:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <vTaskSwitchContext+0xa8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <vTaskSwitchContext+0xac>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003be4:	e041      	b.n	8003c6a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003be6:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <vTaskSwitchContext+0xac>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <vTaskSwitchContext+0xb0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e010      	b.n	8003c16 <vTaskSwitchContext+0x46>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <vTaskSwitchContext+0x40>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	607b      	str	r3, [r7, #4]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <vTaskSwitchContext+0x3e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	491b      	ldr	r1, [pc, #108]	; (8003c84 <vTaskSwitchContext+0xb4>)
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0e4      	beq.n	8003bf4 <vTaskSwitchContext+0x24>
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <vTaskSwitchContext+0xb4>)
 8003c36:	4413      	add	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d104      	bne.n	8003c5a <vTaskSwitchContext+0x8a>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <vTaskSwitchContext+0xb8>)
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <vTaskSwitchContext+0xb0>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000d14 	.word	0x20000d14
 8003c7c:	20000d00 	.word	0x20000d00
 8003c80:	20000cf4 	.word	0x20000cf4
 8003c84:	2000081c 	.word	0x2000081c
 8003c88:	20000818 	.word	0x20000818

08003c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <vTaskPlaceOnEventList+0x44>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe fe86 	bl	80029cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f000 fb32 	bl	800432c <prvAddCurrentTaskToDelayedList>
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000818 	.word	0x20000818

08003cd4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	617b      	str	r3, [r7, #20]
}
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	613b      	str	r3, [r7, #16]
}
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d24:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3318      	adds	r3, #24
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7fe fe28 	bl	8002984 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d34:	2101      	movs	r1, #1
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 faf8 	bl	800432c <prvAddCurrentTaskToDelayedList>
}
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000d14 	.word	0x20000d14
 8003d48:	20000818 	.word	0x20000818

08003d4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	617b      	str	r3, [r7, #20]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3318      	adds	r3, #24
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7fe fe01 	bl	8002984 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	f000 facb 	bl	800432c <prvAddCurrentTaskToDelayedList>
	}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000818 	.word	0x20000818

08003da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	60fb      	str	r3, [r7, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fe32 	bl	8002a3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dda:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <xTaskRemoveFromEventList+0xb0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d11d      	bne.n	8003e1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fe29 	bl	8002a3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <xTaskRemoveFromEventList+0xb4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d903      	bls.n	8003e00 <xTaskRemoveFromEventList+0x5c>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <xTaskRemoveFromEventList+0xb4>)
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <xTaskRemoveFromEventList+0xb8>)
 8003e0e:	441a      	add	r2, r3
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f7fe fdb4 	bl	8002984 <vListInsertEnd>
 8003e1c:	e005      	b.n	8003e2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3318      	adds	r3, #24
 8003e22:	4619      	mov	r1, r3
 8003e24:	480e      	ldr	r0, [pc, #56]	; (8003e60 <xTaskRemoveFromEventList+0xbc>)
 8003e26:	f7fe fdad 	bl	8002984 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <xTaskRemoveFromEventList+0xc0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d905      	bls.n	8003e44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <xTaskRemoveFromEventList+0xc4>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e001      	b.n	8003e48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e48:	697b      	ldr	r3, [r7, #20]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000d14 	.word	0x20000d14
 8003e58:	20000cf4 	.word	0x20000cf4
 8003e5c:	2000081c 	.word	0x2000081c
 8003e60:	20000cac 	.word	0x20000cac
 8003e64:	20000818 	.word	0x20000818
 8003e68:	20000d00 	.word	0x20000d00

08003e6c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003e76:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	613b      	str	r3, [r7, #16]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	60fb      	str	r3, [r7, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fe fdbc 	bl	8002a3e <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fdb7 	bl	8002a3e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d903      	bls.n	8003ee4 <vTaskRemoveFromUnorderedEventList+0x78>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4a0f      	ldr	r2, [pc, #60]	; (8003f20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003ef2:	441a      	add	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe fd42 	bl	8002984 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d902      	bls.n	8003f14 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
	}
}
 8003f14:	bf00      	nop
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000d14 	.word	0x20000d14
 8003f20:	20000cf4 	.word	0x20000cf4
 8003f24:	2000081c 	.word	0x2000081c
 8003f28:	20000818 	.word	0x20000818
 8003f2c:	20000d00 	.word	0x20000d00

08003f30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <vTaskInternalSetTimeOutState+0x24>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <vTaskInternalSetTimeOutState+0x28>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	605a      	str	r2, [r3, #4]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000d04 	.word	0x20000d04
 8003f58:	20000cf0 	.word	0x20000cf0

08003f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	613b      	str	r3, [r7, #16]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60fb      	str	r3, [r7, #12]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f9e:	f000 fe91 	bl	8004cc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <xTaskCheckForTimeOut+0xbc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d102      	bne.n	8003fc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	e023      	b.n	800400a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <xTaskCheckForTimeOut+0xc0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d007      	beq.n	8003fde <xTaskCheckForTimeOut+0x82>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	e015      	b.n	800400a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d20b      	bcs.n	8004000 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad2      	subs	r2, r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff9b 	bl	8003f30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e004      	b.n	800400a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004006:	2301      	movs	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800400a:	f000 fe8b 	bl	8004d24 <vPortExitCritical>

	return xReturn;
 800400e:	69fb      	ldr	r3, [r7, #28]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000cf0 	.word	0x20000cf0
 800401c:	20000d04 	.word	0x20000d04

08004020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <vTaskMissedYield+0x14>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	20000d00 	.word	0x20000d00

08004038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004040:	f000 f852 	bl	80040e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <prvIdleTask+0x28>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d9f9      	bls.n	8004040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <prvIdleTask+0x2c>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800405c:	e7f0      	b.n	8004040 <prvIdleTask+0x8>
 800405e:	bf00      	nop
 8004060:	2000081c 	.word	0x2000081c
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800406e:	2300      	movs	r3, #0
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	e00c      	b.n	800408e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <prvInitialiseTaskLists+0x60>)
 8004080:	4413      	add	r3, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fc51 	bl	800292a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3301      	adds	r3, #1
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b37      	cmp	r3, #55	; 0x37
 8004092:	d9ef      	bls.n	8004074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004094:	480d      	ldr	r0, [pc, #52]	; (80040cc <prvInitialiseTaskLists+0x64>)
 8004096:	f7fe fc48 	bl	800292a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800409a:	480d      	ldr	r0, [pc, #52]	; (80040d0 <prvInitialiseTaskLists+0x68>)
 800409c:	f7fe fc45 	bl	800292a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040a0:	480c      	ldr	r0, [pc, #48]	; (80040d4 <prvInitialiseTaskLists+0x6c>)
 80040a2:	f7fe fc42 	bl	800292a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040a6:	480c      	ldr	r0, [pc, #48]	; (80040d8 <prvInitialiseTaskLists+0x70>)
 80040a8:	f7fe fc3f 	bl	800292a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040ac:	480b      	ldr	r0, [pc, #44]	; (80040dc <prvInitialiseTaskLists+0x74>)
 80040ae:	f7fe fc3c 	bl	800292a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <prvInitialiseTaskLists+0x78>)
 80040b4:	4a05      	ldr	r2, [pc, #20]	; (80040cc <prvInitialiseTaskLists+0x64>)
 80040b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <prvInitialiseTaskLists+0x7c>)
 80040ba:	4a05      	ldr	r2, [pc, #20]	; (80040d0 <prvInitialiseTaskLists+0x68>)
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2000081c 	.word	0x2000081c
 80040cc:	20000c7c 	.word	0x20000c7c
 80040d0:	20000c90 	.word	0x20000c90
 80040d4:	20000cac 	.word	0x20000cac
 80040d8:	20000cc0 	.word	0x20000cc0
 80040dc:	20000cd8 	.word	0x20000cd8
 80040e0:	20000ca4 	.word	0x20000ca4
 80040e4:	20000ca8 	.word	0x20000ca8

080040e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040ee:	e019      	b.n	8004124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040f0:	f000 fde8 	bl	8004cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <prvCheckTasksWaitingTermination+0x50>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fc9c 	bl	8002a3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004106:	4b0d      	ldr	r3, [pc, #52]	; (800413c <prvCheckTasksWaitingTermination+0x54>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3b01      	subs	r3, #1
 800410c:	4a0b      	ldr	r2, [pc, #44]	; (800413c <prvCheckTasksWaitingTermination+0x54>)
 800410e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <prvCheckTasksWaitingTermination+0x58>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3b01      	subs	r3, #1
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <prvCheckTasksWaitingTermination+0x58>)
 8004118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800411a:	f000 fe03 	bl	8004d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f810 	bl	8004144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <prvCheckTasksWaitingTermination+0x58>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e1      	bne.n	80040f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000cc0 	.word	0x20000cc0
 800413c:	20000cec 	.word	0x20000cec
 8004140:	20000cd4 	.word	0x20000cd4

08004144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	4618      	mov	r0, r3
 800415c:	f000 ffa0 	bl	80050a0 <vPortFree>
				vPortFree( pxTCB );
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 ff9d 	bl	80050a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004166:	e018      	b.n	800419a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800416e:	2b01      	cmp	r3, #1
 8004170:	d103      	bne.n	800417a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 ff94 	bl	80050a0 <vPortFree>
	}
 8004178:	e00f      	b.n	800419a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004180:	2b02      	cmp	r3, #2
 8004182:	d00a      	beq.n	800419a <prvDeleteTCB+0x56>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	60fb      	str	r3, [r7, #12]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <prvDeleteTCB+0x54>
	}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <prvResetNextTaskUnblockTime+0x38>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <prvResetNextTaskUnblockTime+0x3c>)
 80041b6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041bc:	e008      	b.n	80041d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041be:	4b07      	ldr	r3, [pc, #28]	; (80041dc <prvResetNextTaskUnblockTime+0x38>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <prvResetNextTaskUnblockTime+0x3c>)
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	20000ca4 	.word	0x20000ca4
 80041e0:	20000d0c 	.word	0x20000d0c

080041e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <xTaskGetSchedulerState+0x34>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041f2:	2301      	movs	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	e008      	b.n	800420a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <xTaskGetSchedulerState+0x38>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004200:	2302      	movs	r3, #2
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	e001      	b.n	800420a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800420a:	687b      	ldr	r3, [r7, #4]
	}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	20000cf8 	.word	0x20000cf8
 800421c:	20000d14 	.word	0x20000d14

08004220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d056      	beq.n	80042e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004236:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <xTaskPriorityDisinherit+0xd0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d00a      	beq.n	8004256 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	60bb      	str	r3, [r7, #8]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	429a      	cmp	r2, r3
 8004288:	d02c      	beq.n	80042e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428e:	2b00      	cmp	r3, #0
 8004290:	d128      	bne.n	80042e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3304      	adds	r3, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fbd1 	bl	8002a3e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <xTaskPriorityDisinherit+0xd4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d903      	bls.n	80042c4 <xTaskPriorityDisinherit+0xa4>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4a0c      	ldr	r2, [pc, #48]	; (80042f4 <xTaskPriorityDisinherit+0xd4>)
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <xTaskPriorityDisinherit+0xd8>)
 80042d2:	441a      	add	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7fe fb52 	bl	8002984 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042e4:	697b      	ldr	r3, [r7, #20]
	}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000818 	.word	0x20000818
 80042f4:	20000cf4 	.word	0x20000cf4
 80042f8:	2000081c 	.word	0x2000081c

080042fc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <uxTaskResetEventItemValue+0x2c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <uxTaskResetEventItemValue+0x2c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <uxTaskResetEventItemValue+0x2c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004318:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800431a:	687b      	ldr	r3, [r7, #4]
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	20000818 	.word	0x20000818

0800432c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <prvAddCurrentTaskToDelayedList+0x90>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800433c:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fb7b 	bl	8002a3e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d10a      	bne.n	8004366 <prvAddCurrentTaskToDelayedList+0x3a>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4819      	ldr	r0, [pc, #100]	; (80043c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004360:	f7fe fb10 	bl	8002984 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004364:	e026      	b.n	80043b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	429a      	cmp	r2, r3
 800437c:	d209      	bcs.n	8004392 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7fe fb1e 	bl	80029cc <vListInsert>
}
 8004390:	e010      	b.n	80043b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f7fe fb14 	bl	80029cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d202      	bcs.n	80043b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043ae:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000cf0 	.word	0x20000cf0
 80043c0:	20000818 	.word	0x20000818
 80043c4:	20000cd8 	.word	0x20000cd8
 80043c8:	20000ca8 	.word	0x20000ca8
 80043cc:	20000ca4 	.word	0x20000ca4
 80043d0:	20000d0c 	.word	0x20000d0c

080043d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043de:	f000 fb07 	bl	80049f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <xTimerCreateTimerTask+0x80>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d021      	beq.n	800442e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043f2:	1d3a      	adds	r2, r7, #4
 80043f4:	f107 0108 	add.w	r1, r7, #8
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe f8e5 	bl	80025cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	9202      	str	r2, [sp, #8]
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	2302      	movs	r3, #2
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2300      	movs	r3, #0
 8004412:	460a      	mov	r2, r1
 8004414:	4910      	ldr	r1, [pc, #64]	; (8004458 <xTimerCreateTimerTask+0x84>)
 8004416:	4811      	ldr	r0, [pc, #68]	; (800445c <xTimerCreateTimerTask+0x88>)
 8004418:	f7ff f828 	bl	800346c <xTaskCreateStatic>
 800441c:	4603      	mov	r3, r0
 800441e:	4a10      	ldr	r2, [pc, #64]	; (8004460 <xTimerCreateTimerTask+0x8c>)
 8004420:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <xTimerCreateTimerTask+0x8c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	613b      	str	r3, [r7, #16]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800444a:	697b      	ldr	r3, [r7, #20]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000d48 	.word	0x20000d48
 8004458:	0800627c 	.word	0x0800627c
 800445c:	08004599 	.word	0x08004599
 8004460:	20000d4c 	.word	0x20000d4c

08004464 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <xTimerGenericCommand+0x2e>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	623b      	str	r3, [r7, #32]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004492:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <xTimerGenericCommand+0x98>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02a      	beq.n	80044f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	dc18      	bgt.n	80044de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044ac:	f7ff fe9a 	bl	80041e4 <xTaskGetSchedulerState>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d109      	bne.n	80044ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <xTimerGenericCommand+0x98>)
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	f107 0110 	add.w	r1, r7, #16
 80044be:	2300      	movs	r3, #0
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	f7fe fbeb 	bl	8002c9c <xQueueGenericSend>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24
 80044c8:	e012      	b.n	80044f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <xTimerGenericCommand+0x98>)
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f107 0110 	add.w	r1, r7, #16
 80044d2:	2300      	movs	r3, #0
 80044d4:	2200      	movs	r2, #0
 80044d6:	f7fe fbe1 	bl	8002c9c <xQueueGenericSend>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24
 80044dc:	e008      	b.n	80044f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <xTimerGenericCommand+0x98>)
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	f107 0110 	add.w	r1, r7, #16
 80044e6:	2300      	movs	r3, #0
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	f7fe fcd5 	bl	8002e98 <xQueueGenericSendFromISR>
 80044ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3728      	adds	r7, #40	; 0x28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000d48 	.word	0x20000d48

08004500 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450a:	4b22      	ldr	r3, [pc, #136]	; (8004594 <prvProcessExpiredTimer+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3304      	adds	r3, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe fa90 	bl	8002a3e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d022      	beq.n	8004572 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	18d1      	adds	r1, r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6978      	ldr	r0, [r7, #20]
 800453a:	f000 f8d1 	bl	80046e0 <prvInsertTimerInActiveList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01f      	beq.n	8004584 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2300      	movs	r3, #0
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	2100      	movs	r1, #0
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f7ff ff88 	bl	8004464 <xTimerGenericCommand>
 8004554:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d113      	bne.n	8004584 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	60fb      	str	r3, [r7, #12]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	b2da      	uxtb	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	6978      	ldr	r0, [r7, #20]
 800458a:	4798      	blx	r3
}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000d40 	.word	0x20000d40

08004598 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045a0:	f107 0308 	add.w	r3, r7, #8
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f857 	bl	8004658 <prvGetNextExpireTime>
 80045aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4619      	mov	r1, r3
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f803 	bl	80045bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045b6:	f000 f8d5 	bl	8004764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ba:	e7f1      	b.n	80045a0 <prvTimerTask+0x8>

080045bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045c6:	f7ff f98d 	bl	80038e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f866 	bl	80046a0 <prvSampleTimeNow>
 80045d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d130      	bne.n	800463e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <prvProcessTimerOrBlockTask+0x3c>
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d806      	bhi.n	80045f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045ea:	f7ff f989 	bl	8003900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff85 	bl	8004500 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045f6:	e024      	b.n	8004642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <prvProcessTimerOrBlockTask+0x90>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <prvProcessTimerOrBlockTask+0x50>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <prvProcessTimerOrBlockTask+0x52>
 800460c:	2300      	movs	r3, #0
 800460e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <prvProcessTimerOrBlockTask+0x94>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	4619      	mov	r1, r3
 800461e:	f7fe fef1 	bl	8003404 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004622:	f7ff f96d 	bl	8003900 <xTaskResumeAll>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <prvProcessTimerOrBlockTask+0x98>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
}
 800463c:	e001      	b.n	8004642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800463e:	f7ff f95f 	bl	8003900 <xTaskResumeAll>
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000d44 	.word	0x20000d44
 8004650:	20000d48 	.word	0x20000d48
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <prvGetNextExpireTime+0x44>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <prvGetNextExpireTime+0x16>
 800466a:	2201      	movs	r2, #1
 800466c:	e000      	b.n	8004670 <prvGetNextExpireTime+0x18>
 800466e:	2200      	movs	r2, #0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <prvGetNextExpireTime+0x44>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e001      	b.n	800468c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000d40 	.word	0x20000d40

080046a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046a8:	f7ff f9c8 	bl	8003a3c <xTaskGetTickCount>
 80046ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <prvSampleTimeNow+0x3c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d205      	bcs.n	80046c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046b8:	f000 f936 	bl	8004928 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e002      	b.n	80046ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046ca:	4a04      	ldr	r2, [pc, #16]	; (80046dc <prvSampleTimeNow+0x3c>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000d50 	.word	0x20000d50

080046e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d812      	bhi.n	800472c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e01b      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <prvInsertTimerInActiveList+0x7c>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fe f951 	bl	80029cc <vListInsert>
 800472a:	e012      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d206      	bcs.n	8004742 <prvInsertTimerInActiveList+0x62>
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e007      	b.n	8004752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <prvInsertTimerInActiveList+0x80>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7fe f93d 	bl	80029cc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004752:	697b      	ldr	r3, [r7, #20]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000d44 	.word	0x20000d44
 8004760:	20000d40 	.word	0x20000d40

08004764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	; 0x38
 8004768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800476a:	e0ca      	b.n	8004902 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	da18      	bge.n	80047a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	3304      	adds	r3, #4
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	61fb      	str	r3, [r7, #28]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479a:	6850      	ldr	r0, [r2, #4]
 800479c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	4611      	mov	r1, r2
 80047a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f2c0 80ab 	blt.w	8004902 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe f93e 	bl	8002a3e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047c2:	463b      	mov	r3, r7
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff6b 	bl	80046a0 <prvSampleTimeNow>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	f200 8096 	bhi.w	8004900 <prvProcessReceivedCommands+0x19c>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <prvProcessReceivedCommands+0x78>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004805 	.word	0x08004805
 80047e0:	08004805 	.word	0x08004805
 80047e4:	08004805 	.word	0x08004805
 80047e8:	08004879 	.word	0x08004879
 80047ec:	0800488d 	.word	0x0800488d
 80047f0:	080048d7 	.word	0x080048d7
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004805 	.word	0x08004805
 80047fc:	08004879 	.word	0x08004879
 8004800:	0800488d 	.word	0x0800488d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	b2da      	uxtb	r2, r3
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	18d1      	adds	r1, r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004824:	f7ff ff5c 	bl	80046e0 <prvInsertTimerInActiveList>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d069      	beq.n	8004902 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004834:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05e      	beq.n	8004902 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	441a      	add	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	2100      	movs	r1, #0
 8004854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004856:	f7ff fe05 	bl	8004464 <xTimerGenericCommand>
 800485a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d14f      	bne.n	8004902 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61bb      	str	r3, [r7, #24]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800488a:	e03a      	b.n	8004902 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	617b      	str	r3, [r7, #20]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	18d1      	adds	r1, r2, r3
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d0:	f7ff ff06 	bl	80046e0 <prvInsertTimerInActiveList>
					break;
 80048d4:	e015      	b.n	8004902 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80048e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e6:	f000 fbdb 	bl	80050a0 <vPortFree>
 80048ea:	e00a      	b.n	8004902 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048fe:	e000      	b.n	8004902 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004900:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <prvProcessReceivedCommands+0x1c0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1d39      	adds	r1, r7, #4
 8004908:	2200      	movs	r2, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fb60 	bl	8002fd0 <xQueueReceive>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	f47f af2a 	bne.w	800476c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3730      	adds	r7, #48	; 0x30
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000d48 	.word	0x20000d48

08004928 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800492e:	e048      	b.n	80049c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493a:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3304      	adds	r3, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe f878 	bl	8002a3e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02e      	beq.n	80049c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d90e      	bls.n	8004994 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe f81d 	bl	80029cc <vListInsert>
 8004992:	e016      	b.n	80049c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004994:	2300      	movs	r3, #0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	2100      	movs	r1, #0
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff fd60 	bl	8004464 <xTimerGenericCommand>
 80049a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	603b      	str	r3, [r7, #0]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1b1      	bne.n	8004930 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <prvSwitchTimerLists+0xc4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <prvSwitchTimerLists+0xc0>)
 80049d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049da:	4a04      	ldr	r2, [pc, #16]	; (80049ec <prvSwitchTimerLists+0xc4>)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	6013      	str	r3, [r2, #0]
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000d40 	.word	0x20000d40
 80049ec:	20000d44 	.word	0x20000d44

080049f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049f6:	f000 f965 	bl	8004cc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d120      	bne.n	8004a44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a02:	4814      	ldr	r0, [pc, #80]	; (8004a54 <prvCheckForValidListAndQueue+0x64>)
 8004a04:	f7fd ff91 	bl	800292a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a08:	4813      	ldr	r0, [pc, #76]	; (8004a58 <prvCheckForValidListAndQueue+0x68>)
 8004a0a:	f7fd ff8e 	bl	800292a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <prvCheckForValidListAndQueue+0x6c>)
 8004a10:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <prvCheckForValidListAndQueue+0x64>)
 8004a12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <prvCheckForValidListAndQueue+0x70>)
 8004a16:	4a10      	ldr	r2, [pc, #64]	; (8004a58 <prvCheckForValidListAndQueue+0x68>)
 8004a18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <prvCheckForValidListAndQueue+0x74>)
 8004a20:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <prvCheckForValidListAndQueue+0x78>)
 8004a22:	2110      	movs	r1, #16
 8004a24:	200a      	movs	r0, #10
 8004a26:	f7fe f89d 	bl	8002b64 <xQueueGenericCreateStatic>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 8004a2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <prvCheckForValidListAndQueue+0x60>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	490b      	ldr	r1, [pc, #44]	; (8004a6c <prvCheckForValidListAndQueue+0x7c>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fcb6 	bl	80033b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a44:	f000 f96e 	bl	8004d24 <vPortExitCritical>
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000d48 	.word	0x20000d48
 8004a54:	20000d18 	.word	0x20000d18
 8004a58:	20000d2c 	.word	0x20000d2c
 8004a5c:	20000d40 	.word	0x20000d40
 8004a60:	20000d44 	.word	0x20000d44
 8004a64:	20000df4 	.word	0x20000df4
 8004a68:	20000d54 	.word	0x20000d54
 8004a6c:	08006284 	.word	0x08006284

08004a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b04      	subs	r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004aa0:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <pxPortInitialiseStack+0x64>)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3b14      	subs	r3, #20
 8004aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f06f 0202 	mvn.w	r2, #2
 8004abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b20      	subs	r3, #32
 8004ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	08004ad9 	.word	0x08004ad9

08004ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <prvTaskExitError+0x54>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d00a      	beq.n	8004b02 <prvTaskExitError+0x2a>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60fb      	str	r3, [r7, #12]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <prvTaskExitError+0x28>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60bb      	str	r3, [r7, #8]
}
 8004b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b16:	bf00      	nop
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0fc      	beq.n	8004b18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <pxCurrentTCBConst2>)
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	6808      	ldr	r0, [r1, #0]
 8004b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	f380 8809 	msr	PSP, r0
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f380 8811 	msr	BASEPRI, r0
 8004b4a:	4770      	bx	lr
 8004b4c:	f3af 8000 	nop.w

08004b50 <pxCurrentTCBConst2>:
 8004b50:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop

08004b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b58:	4808      	ldr	r0, [pc, #32]	; (8004b7c <prvPortStartFirstTask+0x24>)
 8004b5a:	6800      	ldr	r0, [r0, #0]
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f380 8808 	msr	MSP, r0
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f380 8814 	msr	CONTROL, r0
 8004b6a:	b662      	cpsie	i
 8004b6c:	b661      	cpsie	f
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	df00      	svc	0
 8004b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b7a:	bf00      	nop
 8004b7c:	e000ed08 	.word	0xe000ed08

08004b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b86:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <xPortStartScheduler+0x120>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a46      	ldr	r2, [pc, #280]	; (8004ca4 <xPortStartScheduler+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10a      	bne.n	8004ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	613b      	str	r3, [r7, #16]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <xPortStartScheduler+0x120>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3f      	ldr	r2, [pc, #252]	; (8004ca8 <xPortStartScheduler+0x128>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10a      	bne.n	8004bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <xPortStartScheduler+0x12c>)
 8004bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	22ff      	movs	r2, #255	; 0xff
 8004bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <xPortStartScheduler+0x130>)
 8004bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bf4:	e009      	b.n	8004c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a2d      	ldr	r2, [pc, #180]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d0ef      	beq.n	8004bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1c3 0307 	rsb	r3, r3, #7
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00a      	beq.n	8004c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60bb      	str	r3, [r7, #8]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c38:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <xPortStartScheduler+0x134>)
 8004c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <xPortStartScheduler+0x138>)
 8004c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c6e:	f000 f8dd 	bl	8004e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c72:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <xPortStartScheduler+0x13c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c78:	f000 f8fc 	bl	8004e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0f      	ldr	r2, [pc, #60]	; (8004cc0 <xPortStartScheduler+0x140>)
 8004c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c88:	f7ff ff66 	bl	8004b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c8c:	f7fe ffa0 	bl	8003bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8004c90:	f7ff ff22 	bl	8004ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000ed00 	.word	0xe000ed00
 8004ca4:	410fc271 	.word	0x410fc271
 8004ca8:	410fc270 	.word	0x410fc270
 8004cac:	e000e400 	.word	0xe000e400
 8004cb0:	20000e44 	.word	0x20000e44
 8004cb4:	20000e48 	.word	0x20000e48
 8004cb8:	e000ed20 	.word	0xe000ed20
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	e000ef34 	.word	0xe000ef34

08004cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	607b      	str	r3, [r7, #4]
}
 8004cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <vPortEnterCritical+0x58>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <vPortEnterCritical+0x58>)
 8004ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <vPortEnterCritical+0x58>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10f      	bne.n	8004d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortEnterCritical+0x5c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	603b      	str	r3, [r7, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <vPortEnterCritical+0x4a>
	}
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	2000000c 	.word	0x2000000c
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <vPortExitCritical+0x50>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <vPortExitCritical+0x24>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	607b      	str	r3, [r7, #4]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <vPortExitCritical+0x50>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <vPortExitCritical+0x50>)
 8004d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <vPortExitCritical+0x50>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <vPortExitCritical+0x42>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f383 8811 	msr	BASEPRI, r3
}
 8004d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
	...

08004d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d80:	f3ef 8009 	mrs	r0, PSP
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <pxCurrentTCBConst>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	f01e 0f10 	tst.w	lr, #16
 8004d90:	bf08      	it	eq
 8004d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	6010      	str	r0, [r2, #0]
 8004d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004da4:	f380 8811 	msr	BASEPRI, r0
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f7fe ff0e 	bl	8003bd0 <vTaskSwitchContext>
 8004db4:	f04f 0000 	mov.w	r0, #0
 8004db8:	f380 8811 	msr	BASEPRI, r0
 8004dbc:	bc09      	pop	{r0, r3}
 8004dbe:	6819      	ldr	r1, [r3, #0]
 8004dc0:	6808      	ldr	r0, [r1, #0]
 8004dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc6:	f01e 0f10 	tst.w	lr, #16
 8004dca:	bf08      	it	eq
 8004dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004dd0:	f380 8809 	msr	PSP, r0
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w

08004de0 <pxCurrentTCBConst>:
 8004de0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e02:	f7fe fe2b 	bl	8003a5c <xTaskIncrementTick>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <xPortSysTickHandler+0x40>)
 8004e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
}
 8004e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <vPortSetupTimerInterrupt+0x38>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <vPortSetupTimerInterrupt+0x3c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <vPortSetupTimerInterrupt+0x40>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <vPortSetupTimerInterrupt+0x44>)
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e010 	.word	0xe000e010
 8004e64:	e000e018 	.word	0xe000e018
 8004e68:	20000000 	.word	0x20000000
 8004e6c:	10624dd3 	.word	0x10624dd3
 8004e70:	e000e014 	.word	0xe000e014

08004e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e84 <vPortEnableVFP+0x10>
 8004e78:	6801      	ldr	r1, [r0, #0]
 8004e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e7e:	6001      	str	r1, [r0, #0]
 8004e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e82:	bf00      	nop
 8004e84:	e000ed88 	.word	0xe000ed88

08004e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e8e:	f3ef 8305 	mrs	r3, IPSR
 8004e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	d914      	bls.n	8004ec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <vPortValidateInterruptPriority+0x70>)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ea4:	4b15      	ldr	r3, [pc, #84]	; (8004efc <vPortValidateInterruptPriority+0x74>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	7afa      	ldrb	r2, [r7, #11]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d20a      	bcs.n	8004ec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <vPortValidateInterruptPriority+0x78>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <vPortValidateInterruptPriority+0x7c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d90a      	bls.n	8004eea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	603b      	str	r3, [r7, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <vPortValidateInterruptPriority+0x60>
	}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	e000e3f0 	.word	0xe000e3f0
 8004efc:	20000e44 	.word	0x20000e44
 8004f00:	e000ed0c 	.word	0xe000ed0c
 8004f04:	20000e48 	.word	0x20000e48

08004f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f14:	f7fe fce6 	bl	80038e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f18:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <pvPortMalloc+0x180>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f20:	f000 f920 	bl	8005164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <pvPortMalloc+0x184>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 8093 	bne.w	8005058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01d      	beq.n	8004f74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f38:	2208      	movs	r2, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f023 0307 	bic.w	r3, r3, #7
 8004f50:	3308      	adds	r3, #8
 8004f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <pvPortMalloc+0x6c>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	617b      	str	r3, [r7, #20]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d06e      	beq.n	8005058 <pvPortMalloc+0x150>
 8004f7a:	4b45      	ldr	r3, [pc, #276]	; (8005090 <pvPortMalloc+0x188>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d869      	bhi.n	8005058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f84:	4b43      	ldr	r3, [pc, #268]	; (8005094 <pvPortMalloc+0x18c>)
 8004f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f88:	4b42      	ldr	r3, [pc, #264]	; (8005094 <pvPortMalloc+0x18c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f8e:	e004      	b.n	8004f9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d903      	bls.n	8004fac <pvPortMalloc+0xa4>
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f1      	bne.n	8004f90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fac:	4b36      	ldr	r3, [pc, #216]	; (8005088 <pvPortMalloc+0x180>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d050      	beq.n	8005058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2208      	movs	r2, #8
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d91f      	bls.n	8005018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <pvPortMalloc+0xf8>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	613b      	str	r3, [r7, #16]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005012:	69b8      	ldr	r0, [r7, #24]
 8005014:	f000 f908 	bl	8005228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <pvPortMalloc+0x188>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <pvPortMalloc+0x188>)
 8005024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <pvPortMalloc+0x188>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <pvPortMalloc+0x190>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d203      	bcs.n	800503a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <pvPortMalloc+0x188>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <pvPortMalloc+0x190>)
 8005038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <pvPortMalloc+0x184>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	431a      	orrs	r2, r3
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <pvPortMalloc+0x194>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <pvPortMalloc+0x194>)
 8005056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005058:	f7fe fc52 	bl	8003900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <pvPortMalloc+0x174>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60fb      	str	r3, [r7, #12]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <pvPortMalloc+0x172>
	return pvReturn;
 800507c:	69fb      	ldr	r3, [r7, #28]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3728      	adds	r7, #40	; 0x28
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20004a54 	.word	0x20004a54
 800508c:	20004a68 	.word	0x20004a68
 8005090:	20004a58 	.word	0x20004a58
 8005094:	20004a4c 	.word	0x20004a4c
 8005098:	20004a5c 	.word	0x20004a5c
 800509c:	20004a60 	.word	0x20004a60

080050a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04d      	beq.n	800514e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050b2:	2308      	movs	r3, #8
 80050b4:	425b      	negs	r3, r3
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b24      	ldr	r3, [pc, #144]	; (8005158 <vPortFree+0xb8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <vPortFree+0x44>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <vPortFree+0x62>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	60bb      	str	r3, [r7, #8]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <vPortFree+0xb8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01e      	beq.n	800514e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d11a      	bne.n	800514e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <vPortFree+0xb8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	43db      	mvns	r3, r3
 8005122:	401a      	ands	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005128:	f7fe fbdc 	bl	80038e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <vPortFree+0xbc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4413      	add	r3, r2
 8005136:	4a09      	ldr	r2, [pc, #36]	; (800515c <vPortFree+0xbc>)
 8005138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513a:	6938      	ldr	r0, [r7, #16]
 800513c:	f000 f874 	bl	8005228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vPortFree+0xc0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <vPortFree+0xc0>)
 8005148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800514a:	f7fe fbd9 	bl	8003900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20004a68 	.word	0x20004a68
 800515c:	20004a58 	.word	0x20004a58
 8005160:	20004a64 	.word	0x20004a64

08005164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800516a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800516e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <prvHeapInit+0xac>)
 8005172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3307      	adds	r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <prvHeapInit+0xac>)
 8005194:	4413      	add	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <prvHeapInit+0xb0>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <prvHeapInit+0xb0>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051b0:	2208      	movs	r2, #8
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <prvHeapInit+0xb4>)
 80051c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <prvHeapInit+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ce:	4b12      	ldr	r3, [pc, #72]	; (8005218 <prvHeapInit+0xb4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvHeapInit+0xb4>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4a0a      	ldr	r2, [pc, #40]	; (800521c <prvHeapInit+0xb8>)
 80051f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <prvHeapInit+0xbc>)
 80051fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <prvHeapInit+0xc0>)
 80051fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000e4c 	.word	0x20000e4c
 8005214:	20004a4c 	.word	0x20004a4c
 8005218:	20004a54 	.word	0x20004a54
 800521c:	20004a5c 	.word	0x20004a5c
 8005220:	20004a58 	.word	0x20004a58
 8005224:	20004a68 	.word	0x20004a68

08005228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005230:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <prvInsertBlockIntoFreeList+0xac>)
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e002      	b.n	800523c <prvInsertBlockIntoFreeList+0x14>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d8f7      	bhi.n	8005236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d108      	bne.n	800526a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d118      	bne.n	80052b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d00d      	beq.n	80052a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e008      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e003      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d002      	beq.n	80052c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20004a4c 	.word	0x20004a4c
 80052d8:	20004a54 	.word	0x20004a54

080052dc <std>:
 80052dc:	2300      	movs	r3, #0
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	e9c0 3300 	strd	r3, r3, [r0]
 80052e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ea:	6083      	str	r3, [r0, #8]
 80052ec:	8181      	strh	r1, [r0, #12]
 80052ee:	6643      	str	r3, [r0, #100]	; 0x64
 80052f0:	81c2      	strh	r2, [r0, #14]
 80052f2:	6183      	str	r3, [r0, #24]
 80052f4:	4619      	mov	r1, r3
 80052f6:	2208      	movs	r2, #8
 80052f8:	305c      	adds	r0, #92	; 0x5c
 80052fa:	f000 f906 	bl	800550a <memset>
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <std+0x58>)
 8005300:	6263      	str	r3, [r4, #36]	; 0x24
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <std+0x5c>)
 8005304:	62a3      	str	r3, [r4, #40]	; 0x28
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <std+0x60>)
 8005308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <std+0x64>)
 800530c:	6323      	str	r3, [r4, #48]	; 0x30
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <std+0x68>)
 8005310:	6224      	str	r4, [r4, #32]
 8005312:	429c      	cmp	r4, r3
 8005314:	d006      	beq.n	8005324 <std+0x48>
 8005316:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800531a:	4294      	cmp	r4, r2
 800531c:	d002      	beq.n	8005324 <std+0x48>
 800531e:	33d0      	adds	r3, #208	; 0xd0
 8005320:	429c      	cmp	r4, r3
 8005322:	d105      	bne.n	8005330 <std+0x54>
 8005324:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532c:	f000 b966 	b.w	80055fc <__retarget_lock_init_recursive>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	08005485 	.word	0x08005485
 8005338:	080054a7 	.word	0x080054a7
 800533c:	080054df 	.word	0x080054df
 8005340:	08005503 	.word	0x08005503
 8005344:	20004a6c 	.word	0x20004a6c

08005348 <stdio_exit_handler>:
 8005348:	4a02      	ldr	r2, [pc, #8]	; (8005354 <stdio_exit_handler+0xc>)
 800534a:	4903      	ldr	r1, [pc, #12]	; (8005358 <stdio_exit_handler+0x10>)
 800534c:	4803      	ldr	r0, [pc, #12]	; (800535c <stdio_exit_handler+0x14>)
 800534e:	f000 b869 	b.w	8005424 <_fwalk_sglue>
 8005352:	bf00      	nop
 8005354:	20000010 	.word	0x20000010
 8005358:	08005ec5 	.word	0x08005ec5
 800535c:	2000001c 	.word	0x2000001c

08005360 <cleanup_stdio>:
 8005360:	6841      	ldr	r1, [r0, #4]
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <cleanup_stdio+0x34>)
 8005364:	4299      	cmp	r1, r3
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	d001      	beq.n	8005370 <cleanup_stdio+0x10>
 800536c:	f000 fdaa 	bl	8005ec4 <_fflush_r>
 8005370:	68a1      	ldr	r1, [r4, #8]
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <cleanup_stdio+0x38>)
 8005374:	4299      	cmp	r1, r3
 8005376:	d002      	beq.n	800537e <cleanup_stdio+0x1e>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fda3 	bl	8005ec4 <_fflush_r>
 800537e:	68e1      	ldr	r1, [r4, #12]
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <cleanup_stdio+0x3c>)
 8005382:	4299      	cmp	r1, r3
 8005384:	d004      	beq.n	8005390 <cleanup_stdio+0x30>
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f000 bd9a 	b.w	8005ec4 <_fflush_r>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	bf00      	nop
 8005394:	20004a6c 	.word	0x20004a6c
 8005398:	20004ad4 	.word	0x20004ad4
 800539c:	20004b3c 	.word	0x20004b3c

080053a0 <global_stdio_init.part.0>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <global_stdio_init.part.0+0x30>)
 80053a4:	4c0b      	ldr	r4, [pc, #44]	; (80053d4 <global_stdio_init.part.0+0x34>)
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <global_stdio_init.part.0+0x38>)
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	2200      	movs	r2, #0
 80053ae:	2104      	movs	r1, #4
 80053b0:	f7ff ff94 	bl	80052dc <std>
 80053b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053b8:	2201      	movs	r2, #1
 80053ba:	2109      	movs	r1, #9
 80053bc:	f7ff ff8e 	bl	80052dc <std>
 80053c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053c4:	2202      	movs	r2, #2
 80053c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ca:	2112      	movs	r1, #18
 80053cc:	f7ff bf86 	b.w	80052dc <std>
 80053d0:	20004ba4 	.word	0x20004ba4
 80053d4:	20004a6c 	.word	0x20004a6c
 80053d8:	08005349 	.word	0x08005349

080053dc <__sfp_lock_acquire>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__sfp_lock_acquire+0x8>)
 80053de:	f000 b90e 	b.w	80055fe <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	20004bad 	.word	0x20004bad

080053e8 <__sfp_lock_release>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__sfp_lock_release+0x8>)
 80053ea:	f000 b909 	b.w	8005600 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	20004bad 	.word	0x20004bad

080053f4 <__sinit>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4604      	mov	r4, r0
 80053f8:	f7ff fff0 	bl	80053dc <__sfp_lock_acquire>
 80053fc:	6a23      	ldr	r3, [r4, #32]
 80053fe:	b11b      	cbz	r3, 8005408 <__sinit+0x14>
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f7ff bff0 	b.w	80053e8 <__sfp_lock_release>
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <__sinit+0x28>)
 800540a:	6223      	str	r3, [r4, #32]
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <__sinit+0x2c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f5      	bne.n	8005400 <__sinit+0xc>
 8005414:	f7ff ffc4 	bl	80053a0 <global_stdio_init.part.0>
 8005418:	e7f2      	b.n	8005400 <__sinit+0xc>
 800541a:	bf00      	nop
 800541c:	08005361 	.word	0x08005361
 8005420:	20004ba4 	.word	0x20004ba4

08005424 <_fwalk_sglue>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	4607      	mov	r7, r0
 800542a:	4688      	mov	r8, r1
 800542c:	4614      	mov	r4, r2
 800542e:	2600      	movs	r6, #0
 8005430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005434:	f1b9 0901 	subs.w	r9, r9, #1
 8005438:	d505      	bpl.n	8005446 <_fwalk_sglue+0x22>
 800543a:	6824      	ldr	r4, [r4, #0]
 800543c:	2c00      	cmp	r4, #0
 800543e:	d1f7      	bne.n	8005430 <_fwalk_sglue+0xc>
 8005440:	4630      	mov	r0, r6
 8005442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d907      	bls.n	800545c <_fwalk_sglue+0x38>
 800544c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005450:	3301      	adds	r3, #1
 8005452:	d003      	beq.n	800545c <_fwalk_sglue+0x38>
 8005454:	4629      	mov	r1, r5
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	4306      	orrs	r6, r0
 800545c:	3568      	adds	r5, #104	; 0x68
 800545e:	e7e9      	b.n	8005434 <_fwalk_sglue+0x10>

08005460 <iprintf>:
 8005460:	b40f      	push	{r0, r1, r2, r3}
 8005462:	b507      	push	{r0, r1, r2, lr}
 8005464:	4906      	ldr	r1, [pc, #24]	; (8005480 <iprintf+0x20>)
 8005466:	ab04      	add	r3, sp, #16
 8005468:	6808      	ldr	r0, [r1, #0]
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	6881      	ldr	r1, [r0, #8]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	f000 f9f7 	bl	8005864 <_vfiprintf_r>
 8005476:	b003      	add	sp, #12
 8005478:	f85d eb04 	ldr.w	lr, [sp], #4
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	20000068 	.word	0x20000068

08005484 <__sread>:
 8005484:	b510      	push	{r4, lr}
 8005486:	460c      	mov	r4, r1
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	f000 f868 	bl	8005560 <_read_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	bfab      	itete	ge
 8005494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005496:	89a3      	ldrhlt	r3, [r4, #12]
 8005498:	181b      	addge	r3, r3, r0
 800549a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800549e:	bfac      	ite	ge
 80054a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054a2:	81a3      	strhlt	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__swrite>:
 80054a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	461f      	mov	r7, r3
 80054ac:	898b      	ldrh	r3, [r1, #12]
 80054ae:	05db      	lsls	r3, r3, #23
 80054b0:	4605      	mov	r5, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4616      	mov	r6, r2
 80054b6:	d505      	bpl.n	80054c4 <__swrite+0x1e>
 80054b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054bc:	2302      	movs	r3, #2
 80054be:	2200      	movs	r2, #0
 80054c0:	f000 f83c 	bl	800553c <_lseek_r>
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	4632      	mov	r2, r6
 80054d2:	463b      	mov	r3, r7
 80054d4:	4628      	mov	r0, r5
 80054d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	f000 b853 	b.w	8005584 <_write_r>

080054de <__sseek>:
 80054de:	b510      	push	{r4, lr}
 80054e0:	460c      	mov	r4, r1
 80054e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e6:	f000 f829 	bl	800553c <_lseek_r>
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	bf15      	itete	ne
 80054f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054fa:	81a3      	strheq	r3, [r4, #12]
 80054fc:	bf18      	it	ne
 80054fe:	81a3      	strhne	r3, [r4, #12]
 8005500:	bd10      	pop	{r4, pc}

08005502 <__sclose>:
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 b809 	b.w	800551c <_close_r>

0800550a <memset>:
 800550a:	4402      	add	r2, r0
 800550c:	4603      	mov	r3, r0
 800550e:	4293      	cmp	r3, r2
 8005510:	d100      	bne.n	8005514 <memset+0xa>
 8005512:	4770      	bx	lr
 8005514:	f803 1b01 	strb.w	r1, [r3], #1
 8005518:	e7f9      	b.n	800550e <memset+0x4>
	...

0800551c <_close_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d06      	ldr	r5, [pc, #24]	; (8005538 <_close_r+0x1c>)
 8005520:	2300      	movs	r3, #0
 8005522:	4604      	mov	r4, r0
 8005524:	4608      	mov	r0, r1
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	f7fb fac3 	bl	8000ab2 <_close>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_close_r+0x1a>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_close_r+0x1a>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	20004ba8 	.word	0x20004ba8

0800553c <_lseek_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d07      	ldr	r5, [pc, #28]	; (800555c <_lseek_r+0x20>)
 8005540:	4604      	mov	r4, r0
 8005542:	4608      	mov	r0, r1
 8005544:	4611      	mov	r1, r2
 8005546:	2200      	movs	r2, #0
 8005548:	602a      	str	r2, [r5, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	f7fb fad8 	bl	8000b00 <_lseek>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d102      	bne.n	800555a <_lseek_r+0x1e>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	b103      	cbz	r3, 800555a <_lseek_r+0x1e>
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	20004ba8 	.word	0x20004ba8

08005560 <_read_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d07      	ldr	r5, [pc, #28]	; (8005580 <_read_r+0x20>)
 8005564:	4604      	mov	r4, r0
 8005566:	4608      	mov	r0, r1
 8005568:	4611      	mov	r1, r2
 800556a:	2200      	movs	r2, #0
 800556c:	602a      	str	r2, [r5, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f7fb fa66 	bl	8000a40 <_read>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_read_r+0x1e>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_read_r+0x1e>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	20004ba8 	.word	0x20004ba8

08005584 <_write_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d07      	ldr	r5, [pc, #28]	; (80055a4 <_write_r+0x20>)
 8005588:	4604      	mov	r4, r0
 800558a:	4608      	mov	r0, r1
 800558c:	4611      	mov	r1, r2
 800558e:	2200      	movs	r2, #0
 8005590:	602a      	str	r2, [r5, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	f7fb fa71 	bl	8000a7a <_write>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_write_r+0x1e>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_write_r+0x1e>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	20004ba8 	.word	0x20004ba8

080055a8 <__errno>:
 80055a8:	4b01      	ldr	r3, [pc, #4]	; (80055b0 <__errno+0x8>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000068 	.word	0x20000068

080055b4 <__libc_init_array>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	4d0d      	ldr	r5, [pc, #52]	; (80055ec <__libc_init_array+0x38>)
 80055b8:	4c0d      	ldr	r4, [pc, #52]	; (80055f0 <__libc_init_array+0x3c>)
 80055ba:	1b64      	subs	r4, r4, r5
 80055bc:	10a4      	asrs	r4, r4, #2
 80055be:	2600      	movs	r6, #0
 80055c0:	42a6      	cmp	r6, r4
 80055c2:	d109      	bne.n	80055d8 <__libc_init_array+0x24>
 80055c4:	4d0b      	ldr	r5, [pc, #44]	; (80055f4 <__libc_init_array+0x40>)
 80055c6:	4c0c      	ldr	r4, [pc, #48]	; (80055f8 <__libc_init_array+0x44>)
 80055c8:	f000 fdce 	bl	8006168 <_init>
 80055cc:	1b64      	subs	r4, r4, r5
 80055ce:	10a4      	asrs	r4, r4, #2
 80055d0:	2600      	movs	r6, #0
 80055d2:	42a6      	cmp	r6, r4
 80055d4:	d105      	bne.n	80055e2 <__libc_init_array+0x2e>
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055dc:	4798      	blx	r3
 80055de:	3601      	adds	r6, #1
 80055e0:	e7ee      	b.n	80055c0 <__libc_init_array+0xc>
 80055e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e6:	4798      	blx	r3
 80055e8:	3601      	adds	r6, #1
 80055ea:	e7f2      	b.n	80055d2 <__libc_init_array+0x1e>
 80055ec:	080062e0 	.word	0x080062e0
 80055f0:	080062e0 	.word	0x080062e0
 80055f4:	080062e0 	.word	0x080062e0
 80055f8:	080062e4 	.word	0x080062e4

080055fc <__retarget_lock_init_recursive>:
 80055fc:	4770      	bx	lr

080055fe <__retarget_lock_acquire_recursive>:
 80055fe:	4770      	bx	lr

08005600 <__retarget_lock_release_recursive>:
 8005600:	4770      	bx	lr

08005602 <memcpy>:
 8005602:	440a      	add	r2, r1
 8005604:	4291      	cmp	r1, r2
 8005606:	f100 33ff 	add.w	r3, r0, #4294967295
 800560a:	d100      	bne.n	800560e <memcpy+0xc>
 800560c:	4770      	bx	lr
 800560e:	b510      	push	{r4, lr}
 8005610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005618:	4291      	cmp	r1, r2
 800561a:	d1f9      	bne.n	8005610 <memcpy+0xe>
 800561c:	bd10      	pop	{r4, pc}
	...

08005620 <_free_r>:
 8005620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005622:	2900      	cmp	r1, #0
 8005624:	d044      	beq.n	80056b0 <_free_r+0x90>
 8005626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562a:	9001      	str	r0, [sp, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f1a1 0404 	sub.w	r4, r1, #4
 8005632:	bfb8      	it	lt
 8005634:	18e4      	addlt	r4, r4, r3
 8005636:	f000 f8df 	bl	80057f8 <__malloc_lock>
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <_free_r+0x94>)
 800563c:	9801      	ldr	r0, [sp, #4]
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	b933      	cbnz	r3, 8005650 <_free_r+0x30>
 8005642:	6063      	str	r3, [r4, #4]
 8005644:	6014      	str	r4, [r2, #0]
 8005646:	b003      	add	sp, #12
 8005648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800564c:	f000 b8da 	b.w	8005804 <__malloc_unlock>
 8005650:	42a3      	cmp	r3, r4
 8005652:	d908      	bls.n	8005666 <_free_r+0x46>
 8005654:	6825      	ldr	r5, [r4, #0]
 8005656:	1961      	adds	r1, r4, r5
 8005658:	428b      	cmp	r3, r1
 800565a:	bf01      	itttt	eq
 800565c:	6819      	ldreq	r1, [r3, #0]
 800565e:	685b      	ldreq	r3, [r3, #4]
 8005660:	1949      	addeq	r1, r1, r5
 8005662:	6021      	streq	r1, [r4, #0]
 8005664:	e7ed      	b.n	8005642 <_free_r+0x22>
 8005666:	461a      	mov	r2, r3
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	b10b      	cbz	r3, 8005670 <_free_r+0x50>
 800566c:	42a3      	cmp	r3, r4
 800566e:	d9fa      	bls.n	8005666 <_free_r+0x46>
 8005670:	6811      	ldr	r1, [r2, #0]
 8005672:	1855      	adds	r5, r2, r1
 8005674:	42a5      	cmp	r5, r4
 8005676:	d10b      	bne.n	8005690 <_free_r+0x70>
 8005678:	6824      	ldr	r4, [r4, #0]
 800567a:	4421      	add	r1, r4
 800567c:	1854      	adds	r4, r2, r1
 800567e:	42a3      	cmp	r3, r4
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	d1e0      	bne.n	8005646 <_free_r+0x26>
 8005684:	681c      	ldr	r4, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	6053      	str	r3, [r2, #4]
 800568a:	440c      	add	r4, r1
 800568c:	6014      	str	r4, [r2, #0]
 800568e:	e7da      	b.n	8005646 <_free_r+0x26>
 8005690:	d902      	bls.n	8005698 <_free_r+0x78>
 8005692:	230c      	movs	r3, #12
 8005694:	6003      	str	r3, [r0, #0]
 8005696:	e7d6      	b.n	8005646 <_free_r+0x26>
 8005698:	6825      	ldr	r5, [r4, #0]
 800569a:	1961      	adds	r1, r4, r5
 800569c:	428b      	cmp	r3, r1
 800569e:	bf04      	itt	eq
 80056a0:	6819      	ldreq	r1, [r3, #0]
 80056a2:	685b      	ldreq	r3, [r3, #4]
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	bf04      	itt	eq
 80056a8:	1949      	addeq	r1, r1, r5
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	6054      	str	r4, [r2, #4]
 80056ae:	e7ca      	b.n	8005646 <_free_r+0x26>
 80056b0:	b003      	add	sp, #12
 80056b2:	bd30      	pop	{r4, r5, pc}
 80056b4:	20004bb0 	.word	0x20004bb0

080056b8 <sbrk_aligned>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0e      	ldr	r6, [pc, #56]	; (80056f4 <sbrk_aligned+0x3c>)
 80056bc:	460c      	mov	r4, r1
 80056be:	6831      	ldr	r1, [r6, #0]
 80056c0:	4605      	mov	r5, r0
 80056c2:	b911      	cbnz	r1, 80056ca <sbrk_aligned+0x12>
 80056c4:	f000 fcbc 	bl	8006040 <_sbrk_r>
 80056c8:	6030      	str	r0, [r6, #0]
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 fcb7 	bl	8006040 <_sbrk_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d00a      	beq.n	80056ec <sbrk_aligned+0x34>
 80056d6:	1cc4      	adds	r4, r0, #3
 80056d8:	f024 0403 	bic.w	r4, r4, #3
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d007      	beq.n	80056f0 <sbrk_aligned+0x38>
 80056e0:	1a21      	subs	r1, r4, r0
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 fcac 	bl	8006040 <_sbrk_r>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d101      	bne.n	80056f0 <sbrk_aligned+0x38>
 80056ec:	f04f 34ff 	mov.w	r4, #4294967295
 80056f0:	4620      	mov	r0, r4
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	20004bb4 	.word	0x20004bb4

080056f8 <_malloc_r>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	1ccd      	adds	r5, r1, #3
 80056fe:	f025 0503 	bic.w	r5, r5, #3
 8005702:	3508      	adds	r5, #8
 8005704:	2d0c      	cmp	r5, #12
 8005706:	bf38      	it	cc
 8005708:	250c      	movcc	r5, #12
 800570a:	2d00      	cmp	r5, #0
 800570c:	4607      	mov	r7, r0
 800570e:	db01      	blt.n	8005714 <_malloc_r+0x1c>
 8005710:	42a9      	cmp	r1, r5
 8005712:	d905      	bls.n	8005720 <_malloc_r+0x28>
 8005714:	230c      	movs	r3, #12
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	2600      	movs	r6, #0
 800571a:	4630      	mov	r0, r6
 800571c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005720:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057f4 <_malloc_r+0xfc>
 8005724:	f000 f868 	bl	80057f8 <__malloc_lock>
 8005728:	f8d8 3000 	ldr.w	r3, [r8]
 800572c:	461c      	mov	r4, r3
 800572e:	bb5c      	cbnz	r4, 8005788 <_malloc_r+0x90>
 8005730:	4629      	mov	r1, r5
 8005732:	4638      	mov	r0, r7
 8005734:	f7ff ffc0 	bl	80056b8 <sbrk_aligned>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	4604      	mov	r4, r0
 800573c:	d155      	bne.n	80057ea <_malloc_r+0xf2>
 800573e:	f8d8 4000 	ldr.w	r4, [r8]
 8005742:	4626      	mov	r6, r4
 8005744:	2e00      	cmp	r6, #0
 8005746:	d145      	bne.n	80057d4 <_malloc_r+0xdc>
 8005748:	2c00      	cmp	r4, #0
 800574a:	d048      	beq.n	80057de <_malloc_r+0xe6>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	4631      	mov	r1, r6
 8005750:	4638      	mov	r0, r7
 8005752:	eb04 0903 	add.w	r9, r4, r3
 8005756:	f000 fc73 	bl	8006040 <_sbrk_r>
 800575a:	4581      	cmp	r9, r0
 800575c:	d13f      	bne.n	80057de <_malloc_r+0xe6>
 800575e:	6821      	ldr	r1, [r4, #0]
 8005760:	1a6d      	subs	r5, r5, r1
 8005762:	4629      	mov	r1, r5
 8005764:	4638      	mov	r0, r7
 8005766:	f7ff ffa7 	bl	80056b8 <sbrk_aligned>
 800576a:	3001      	adds	r0, #1
 800576c:	d037      	beq.n	80057de <_malloc_r+0xe6>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	442b      	add	r3, r5
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	f8d8 3000 	ldr.w	r3, [r8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d038      	beq.n	80057ee <_malloc_r+0xf6>
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	42a2      	cmp	r2, r4
 8005780:	d12b      	bne.n	80057da <_malloc_r+0xe2>
 8005782:	2200      	movs	r2, #0
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	e00f      	b.n	80057a8 <_malloc_r+0xb0>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	1b52      	subs	r2, r2, r5
 800578c:	d41f      	bmi.n	80057ce <_malloc_r+0xd6>
 800578e:	2a0b      	cmp	r2, #11
 8005790:	d917      	bls.n	80057c2 <_malloc_r+0xca>
 8005792:	1961      	adds	r1, r4, r5
 8005794:	42a3      	cmp	r3, r4
 8005796:	6025      	str	r5, [r4, #0]
 8005798:	bf18      	it	ne
 800579a:	6059      	strne	r1, [r3, #4]
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	bf08      	it	eq
 80057a0:	f8c8 1000 	streq.w	r1, [r8]
 80057a4:	5162      	str	r2, [r4, r5]
 80057a6:	604b      	str	r3, [r1, #4]
 80057a8:	4638      	mov	r0, r7
 80057aa:	f104 060b 	add.w	r6, r4, #11
 80057ae:	f000 f829 	bl	8005804 <__malloc_unlock>
 80057b2:	f026 0607 	bic.w	r6, r6, #7
 80057b6:	1d23      	adds	r3, r4, #4
 80057b8:	1af2      	subs	r2, r6, r3
 80057ba:	d0ae      	beq.n	800571a <_malloc_r+0x22>
 80057bc:	1b9b      	subs	r3, r3, r6
 80057be:	50a3      	str	r3, [r4, r2]
 80057c0:	e7ab      	b.n	800571a <_malloc_r+0x22>
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	6862      	ldr	r2, [r4, #4]
 80057c6:	d1dd      	bne.n	8005784 <_malloc_r+0x8c>
 80057c8:	f8c8 2000 	str.w	r2, [r8]
 80057cc:	e7ec      	b.n	80057a8 <_malloc_r+0xb0>
 80057ce:	4623      	mov	r3, r4
 80057d0:	6864      	ldr	r4, [r4, #4]
 80057d2:	e7ac      	b.n	800572e <_malloc_r+0x36>
 80057d4:	4634      	mov	r4, r6
 80057d6:	6876      	ldr	r6, [r6, #4]
 80057d8:	e7b4      	b.n	8005744 <_malloc_r+0x4c>
 80057da:	4613      	mov	r3, r2
 80057dc:	e7cc      	b.n	8005778 <_malloc_r+0x80>
 80057de:	230c      	movs	r3, #12
 80057e0:	603b      	str	r3, [r7, #0]
 80057e2:	4638      	mov	r0, r7
 80057e4:	f000 f80e 	bl	8005804 <__malloc_unlock>
 80057e8:	e797      	b.n	800571a <_malloc_r+0x22>
 80057ea:	6025      	str	r5, [r4, #0]
 80057ec:	e7dc      	b.n	80057a8 <_malloc_r+0xb0>
 80057ee:	605b      	str	r3, [r3, #4]
 80057f0:	deff      	udf	#255	; 0xff
 80057f2:	bf00      	nop
 80057f4:	20004bb0 	.word	0x20004bb0

080057f8 <__malloc_lock>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__malloc_lock+0x8>)
 80057fa:	f7ff bf00 	b.w	80055fe <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	20004bac 	.word	0x20004bac

08005804 <__malloc_unlock>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__malloc_unlock+0x8>)
 8005806:	f7ff befb 	b.w	8005600 <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	20004bac 	.word	0x20004bac

08005810 <__sfputc_r>:
 8005810:	6893      	ldr	r3, [r2, #8]
 8005812:	3b01      	subs	r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	b410      	push	{r4}
 8005818:	6093      	str	r3, [r2, #8]
 800581a:	da08      	bge.n	800582e <__sfputc_r+0x1e>
 800581c:	6994      	ldr	r4, [r2, #24]
 800581e:	42a3      	cmp	r3, r4
 8005820:	db01      	blt.n	8005826 <__sfputc_r+0x16>
 8005822:	290a      	cmp	r1, #10
 8005824:	d103      	bne.n	800582e <__sfputc_r+0x1e>
 8005826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800582a:	f000 bb73 	b.w	8005f14 <__swbuf_r>
 800582e:	6813      	ldr	r3, [r2, #0]
 8005830:	1c58      	adds	r0, r3, #1
 8005832:	6010      	str	r0, [r2, #0]
 8005834:	7019      	strb	r1, [r3, #0]
 8005836:	4608      	mov	r0, r1
 8005838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800583c:	4770      	bx	lr

0800583e <__sfputs_r>:
 800583e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005840:	4606      	mov	r6, r0
 8005842:	460f      	mov	r7, r1
 8005844:	4614      	mov	r4, r2
 8005846:	18d5      	adds	r5, r2, r3
 8005848:	42ac      	cmp	r4, r5
 800584a:	d101      	bne.n	8005850 <__sfputs_r+0x12>
 800584c:	2000      	movs	r0, #0
 800584e:	e007      	b.n	8005860 <__sfputs_r+0x22>
 8005850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005854:	463a      	mov	r2, r7
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff ffda 	bl	8005810 <__sfputc_r>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d1f3      	bne.n	8005848 <__sfputs_r+0xa>
 8005860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005864 <_vfiprintf_r>:
 8005864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	460d      	mov	r5, r1
 800586a:	b09d      	sub	sp, #116	; 0x74
 800586c:	4614      	mov	r4, r2
 800586e:	4698      	mov	r8, r3
 8005870:	4606      	mov	r6, r0
 8005872:	b118      	cbz	r0, 800587c <_vfiprintf_r+0x18>
 8005874:	6a03      	ldr	r3, [r0, #32]
 8005876:	b90b      	cbnz	r3, 800587c <_vfiprintf_r+0x18>
 8005878:	f7ff fdbc 	bl	80053f4 <__sinit>
 800587c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800587e:	07d9      	lsls	r1, r3, #31
 8005880:	d405      	bmi.n	800588e <_vfiprintf_r+0x2a>
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	059a      	lsls	r2, r3, #22
 8005886:	d402      	bmi.n	800588e <_vfiprintf_r+0x2a>
 8005888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800588a:	f7ff feb8 	bl	80055fe <__retarget_lock_acquire_recursive>
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	071b      	lsls	r3, r3, #28
 8005892:	d501      	bpl.n	8005898 <_vfiprintf_r+0x34>
 8005894:	692b      	ldr	r3, [r5, #16]
 8005896:	b99b      	cbnz	r3, 80058c0 <_vfiprintf_r+0x5c>
 8005898:	4629      	mov	r1, r5
 800589a:	4630      	mov	r0, r6
 800589c:	f000 fb78 	bl	8005f90 <__swsetup_r>
 80058a0:	b170      	cbz	r0, 80058c0 <_vfiprintf_r+0x5c>
 80058a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a4:	07dc      	lsls	r4, r3, #31
 80058a6:	d504      	bpl.n	80058b2 <_vfiprintf_r+0x4e>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	b01d      	add	sp, #116	; 0x74
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	89ab      	ldrh	r3, [r5, #12]
 80058b4:	0598      	lsls	r0, r3, #22
 80058b6:	d4f7      	bmi.n	80058a8 <_vfiprintf_r+0x44>
 80058b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ba:	f7ff fea1 	bl	8005600 <__retarget_lock_release_recursive>
 80058be:	e7f3      	b.n	80058a8 <_vfiprintf_r+0x44>
 80058c0:	2300      	movs	r3, #0
 80058c2:	9309      	str	r3, [sp, #36]	; 0x24
 80058c4:	2320      	movs	r3, #32
 80058c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ce:	2330      	movs	r3, #48	; 0x30
 80058d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a84 <_vfiprintf_r+0x220>
 80058d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058d8:	f04f 0901 	mov.w	r9, #1
 80058dc:	4623      	mov	r3, r4
 80058de:	469a      	mov	sl, r3
 80058e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e4:	b10a      	cbz	r2, 80058ea <_vfiprintf_r+0x86>
 80058e6:	2a25      	cmp	r2, #37	; 0x25
 80058e8:	d1f9      	bne.n	80058de <_vfiprintf_r+0x7a>
 80058ea:	ebba 0b04 	subs.w	fp, sl, r4
 80058ee:	d00b      	beq.n	8005908 <_vfiprintf_r+0xa4>
 80058f0:	465b      	mov	r3, fp
 80058f2:	4622      	mov	r2, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7ff ffa1 	bl	800583e <__sfputs_r>
 80058fc:	3001      	adds	r0, #1
 80058fe:	f000 80a9 	beq.w	8005a54 <_vfiprintf_r+0x1f0>
 8005902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005904:	445a      	add	r2, fp
 8005906:	9209      	str	r2, [sp, #36]	; 0x24
 8005908:	f89a 3000 	ldrb.w	r3, [sl]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80a1 	beq.w	8005a54 <_vfiprintf_r+0x1f0>
 8005912:	2300      	movs	r3, #0
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591c:	f10a 0a01 	add.w	sl, sl, #1
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	9307      	str	r3, [sp, #28]
 8005924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005928:	931a      	str	r3, [sp, #104]	; 0x68
 800592a:	4654      	mov	r4, sl
 800592c:	2205      	movs	r2, #5
 800592e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005932:	4854      	ldr	r0, [pc, #336]	; (8005a84 <_vfiprintf_r+0x220>)
 8005934:	f7fa fc54 	bl	80001e0 <memchr>
 8005938:	9a04      	ldr	r2, [sp, #16]
 800593a:	b9d8      	cbnz	r0, 8005974 <_vfiprintf_r+0x110>
 800593c:	06d1      	lsls	r1, r2, #27
 800593e:	bf44      	itt	mi
 8005940:	2320      	movmi	r3, #32
 8005942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005946:	0713      	lsls	r3, r2, #28
 8005948:	bf44      	itt	mi
 800594a:	232b      	movmi	r3, #43	; 0x2b
 800594c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005950:	f89a 3000 	ldrb.w	r3, [sl]
 8005954:	2b2a      	cmp	r3, #42	; 0x2a
 8005956:	d015      	beq.n	8005984 <_vfiprintf_r+0x120>
 8005958:	9a07      	ldr	r2, [sp, #28]
 800595a:	4654      	mov	r4, sl
 800595c:	2000      	movs	r0, #0
 800595e:	f04f 0c0a 	mov.w	ip, #10
 8005962:	4621      	mov	r1, r4
 8005964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005968:	3b30      	subs	r3, #48	; 0x30
 800596a:	2b09      	cmp	r3, #9
 800596c:	d94d      	bls.n	8005a0a <_vfiprintf_r+0x1a6>
 800596e:	b1b0      	cbz	r0, 800599e <_vfiprintf_r+0x13a>
 8005970:	9207      	str	r2, [sp, #28]
 8005972:	e014      	b.n	800599e <_vfiprintf_r+0x13a>
 8005974:	eba0 0308 	sub.w	r3, r0, r8
 8005978:	fa09 f303 	lsl.w	r3, r9, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	46a2      	mov	sl, r4
 8005982:	e7d2      	b.n	800592a <_vfiprintf_r+0xc6>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	1d19      	adds	r1, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	9103      	str	r1, [sp, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	bfbb      	ittet	lt
 8005990:	425b      	neglt	r3, r3
 8005992:	f042 0202 	orrlt.w	r2, r2, #2
 8005996:	9307      	strge	r3, [sp, #28]
 8005998:	9307      	strlt	r3, [sp, #28]
 800599a:	bfb8      	it	lt
 800599c:	9204      	strlt	r2, [sp, #16]
 800599e:	7823      	ldrb	r3, [r4, #0]
 80059a0:	2b2e      	cmp	r3, #46	; 0x2e
 80059a2:	d10c      	bne.n	80059be <_vfiprintf_r+0x15a>
 80059a4:	7863      	ldrb	r3, [r4, #1]
 80059a6:	2b2a      	cmp	r3, #42	; 0x2a
 80059a8:	d134      	bne.n	8005a14 <_vfiprintf_r+0x1b0>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	1d1a      	adds	r2, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9203      	str	r2, [sp, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfb8      	it	lt
 80059b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80059ba:	3402      	adds	r4, #2
 80059bc:	9305      	str	r3, [sp, #20]
 80059be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a94 <_vfiprintf_r+0x230>
 80059c2:	7821      	ldrb	r1, [r4, #0]
 80059c4:	2203      	movs	r2, #3
 80059c6:	4650      	mov	r0, sl
 80059c8:	f7fa fc0a 	bl	80001e0 <memchr>
 80059cc:	b138      	cbz	r0, 80059de <_vfiprintf_r+0x17a>
 80059ce:	9b04      	ldr	r3, [sp, #16]
 80059d0:	eba0 000a 	sub.w	r0, r0, sl
 80059d4:	2240      	movs	r2, #64	; 0x40
 80059d6:	4082      	lsls	r2, r0
 80059d8:	4313      	orrs	r3, r2
 80059da:	3401      	adds	r4, #1
 80059dc:	9304      	str	r3, [sp, #16]
 80059de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e2:	4829      	ldr	r0, [pc, #164]	; (8005a88 <_vfiprintf_r+0x224>)
 80059e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e8:	2206      	movs	r2, #6
 80059ea:	f7fa fbf9 	bl	80001e0 <memchr>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d03f      	beq.n	8005a72 <_vfiprintf_r+0x20e>
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <_vfiprintf_r+0x228>)
 80059f4:	bb1b      	cbnz	r3, 8005a3e <_vfiprintf_r+0x1da>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	3307      	adds	r3, #7
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	3308      	adds	r3, #8
 8005a00:	9303      	str	r3, [sp, #12]
 8005a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a04:	443b      	add	r3, r7
 8005a06:	9309      	str	r3, [sp, #36]	; 0x24
 8005a08:	e768      	b.n	80058dc <_vfiprintf_r+0x78>
 8005a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0e:	460c      	mov	r4, r1
 8005a10:	2001      	movs	r0, #1
 8005a12:	e7a6      	b.n	8005962 <_vfiprintf_r+0xfe>
 8005a14:	2300      	movs	r3, #0
 8005a16:	3401      	adds	r4, #1
 8005a18:	9305      	str	r3, [sp, #20]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f04f 0c0a 	mov.w	ip, #10
 8005a20:	4620      	mov	r0, r4
 8005a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a26:	3a30      	subs	r2, #48	; 0x30
 8005a28:	2a09      	cmp	r2, #9
 8005a2a:	d903      	bls.n	8005a34 <_vfiprintf_r+0x1d0>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0c6      	beq.n	80059be <_vfiprintf_r+0x15a>
 8005a30:	9105      	str	r1, [sp, #20]
 8005a32:	e7c4      	b.n	80059be <_vfiprintf_r+0x15a>
 8005a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a38:	4604      	mov	r4, r0
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e7f0      	b.n	8005a20 <_vfiprintf_r+0x1bc>
 8005a3e:	ab03      	add	r3, sp, #12
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	462a      	mov	r2, r5
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <_vfiprintf_r+0x22c>)
 8005a46:	a904      	add	r1, sp, #16
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f3af 8000 	nop.w
 8005a4e:	4607      	mov	r7, r0
 8005a50:	1c78      	adds	r0, r7, #1
 8005a52:	d1d6      	bne.n	8005a02 <_vfiprintf_r+0x19e>
 8005a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a56:	07d9      	lsls	r1, r3, #31
 8005a58:	d405      	bmi.n	8005a66 <_vfiprintf_r+0x202>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	059a      	lsls	r2, r3, #22
 8005a5e:	d402      	bmi.n	8005a66 <_vfiprintf_r+0x202>
 8005a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a62:	f7ff fdcd 	bl	8005600 <__retarget_lock_release_recursive>
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	065b      	lsls	r3, r3, #25
 8005a6a:	f53f af1d 	bmi.w	80058a8 <_vfiprintf_r+0x44>
 8005a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a70:	e71c      	b.n	80058ac <_vfiprintf_r+0x48>
 8005a72:	ab03      	add	r3, sp, #12
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	462a      	mov	r2, r5
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <_vfiprintf_r+0x22c>)
 8005a7a:	a904      	add	r1, sp, #16
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f000 f879 	bl	8005b74 <_printf_i>
 8005a82:	e7e4      	b.n	8005a4e <_vfiprintf_r+0x1ea>
 8005a84:	080062a4 	.word	0x080062a4
 8005a88:	080062ae 	.word	0x080062ae
 8005a8c:	00000000 	.word	0x00000000
 8005a90:	0800583f 	.word	0x0800583f
 8005a94:	080062aa 	.word	0x080062aa

08005a98 <_printf_common>:
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	4699      	mov	r9, r3
 8005aa0:	688a      	ldr	r2, [r1, #8]
 8005aa2:	690b      	ldr	r3, [r1, #16]
 8005aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	bfb8      	it	lt
 8005aac:	4613      	movlt	r3, r2
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	b10a      	cbz	r2, 8005abe <_printf_common+0x26>
 8005aba:	3301      	adds	r3, #1
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	0699      	lsls	r1, r3, #26
 8005ac2:	bf42      	ittt	mi
 8005ac4:	6833      	ldrmi	r3, [r6, #0]
 8005ac6:	3302      	addmi	r3, #2
 8005ac8:	6033      	strmi	r3, [r6, #0]
 8005aca:	6825      	ldr	r5, [r4, #0]
 8005acc:	f015 0506 	ands.w	r5, r5, #6
 8005ad0:	d106      	bne.n	8005ae0 <_printf_common+0x48>
 8005ad2:	f104 0a19 	add.w	sl, r4, #25
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	6832      	ldr	r2, [r6, #0]
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	dc26      	bgt.n	8005b2e <_printf_common+0x96>
 8005ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae4:	1e13      	subs	r3, r2, #0
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	bf18      	it	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	0692      	lsls	r2, r2, #26
 8005aee:	d42b      	bmi.n	8005b48 <_printf_common+0xb0>
 8005af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af4:	4649      	mov	r1, r9
 8005af6:	4638      	mov	r0, r7
 8005af8:	47c0      	blx	r8
 8005afa:	3001      	adds	r0, #1
 8005afc:	d01e      	beq.n	8005b3c <_printf_common+0xa4>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	bf02      	ittt	eq
 8005b0a:	68e5      	ldreq	r5, [r4, #12]
 8005b0c:	6833      	ldreq	r3, [r6, #0]
 8005b0e:	1aed      	subeq	r5, r5, r3
 8005b10:	68a3      	ldr	r3, [r4, #8]
 8005b12:	bf0c      	ite	eq
 8005b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b18:	2500      	movne	r5, #0
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	bfc4      	itt	gt
 8005b1e:	1a9b      	subgt	r3, r3, r2
 8005b20:	18ed      	addgt	r5, r5, r3
 8005b22:	2600      	movs	r6, #0
 8005b24:	341a      	adds	r4, #26
 8005b26:	42b5      	cmp	r5, r6
 8005b28:	d11a      	bne.n	8005b60 <_printf_common+0xc8>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	e008      	b.n	8005b40 <_printf_common+0xa8>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4652      	mov	r2, sl
 8005b32:	4649      	mov	r1, r9
 8005b34:	4638      	mov	r0, r7
 8005b36:	47c0      	blx	r8
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d103      	bne.n	8005b44 <_printf_common+0xac>
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b44:	3501      	adds	r5, #1
 8005b46:	e7c6      	b.n	8005ad6 <_printf_common+0x3e>
 8005b48:	18e1      	adds	r1, r4, r3
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	2030      	movs	r0, #48	; 0x30
 8005b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b52:	4422      	add	r2, r4
 8005b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	e7c7      	b.n	8005af0 <_printf_common+0x58>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4622      	mov	r2, r4
 8005b64:	4649      	mov	r1, r9
 8005b66:	4638      	mov	r0, r7
 8005b68:	47c0      	blx	r8
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d0e6      	beq.n	8005b3c <_printf_common+0xa4>
 8005b6e:	3601      	adds	r6, #1
 8005b70:	e7d9      	b.n	8005b26 <_printf_common+0x8e>
	...

08005b74 <_printf_i>:
 8005b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	7e0f      	ldrb	r7, [r1, #24]
 8005b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b7c:	2f78      	cmp	r7, #120	; 0x78
 8005b7e:	4691      	mov	r9, r2
 8005b80:	4680      	mov	r8, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	469a      	mov	sl, r3
 8005b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b8a:	d807      	bhi.n	8005b9c <_printf_i+0x28>
 8005b8c:	2f62      	cmp	r7, #98	; 0x62
 8005b8e:	d80a      	bhi.n	8005ba6 <_printf_i+0x32>
 8005b90:	2f00      	cmp	r7, #0
 8005b92:	f000 80d4 	beq.w	8005d3e <_printf_i+0x1ca>
 8005b96:	2f58      	cmp	r7, #88	; 0x58
 8005b98:	f000 80c0 	beq.w	8005d1c <_printf_i+0x1a8>
 8005b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba4:	e03a      	b.n	8005c1c <_printf_i+0xa8>
 8005ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005baa:	2b15      	cmp	r3, #21
 8005bac:	d8f6      	bhi.n	8005b9c <_printf_i+0x28>
 8005bae:	a101      	add	r1, pc, #4	; (adr r1, 8005bb4 <_printf_i+0x40>)
 8005bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c21 	.word	0x08005c21
 8005bbc:	08005b9d 	.word	0x08005b9d
 8005bc0:	08005b9d 	.word	0x08005b9d
 8005bc4:	08005b9d 	.word	0x08005b9d
 8005bc8:	08005b9d 	.word	0x08005b9d
 8005bcc:	08005c21 	.word	0x08005c21
 8005bd0:	08005b9d 	.word	0x08005b9d
 8005bd4:	08005b9d 	.word	0x08005b9d
 8005bd8:	08005b9d 	.word	0x08005b9d
 8005bdc:	08005b9d 	.word	0x08005b9d
 8005be0:	08005d25 	.word	0x08005d25
 8005be4:	08005c4d 	.word	0x08005c4d
 8005be8:	08005cdf 	.word	0x08005cdf
 8005bec:	08005b9d 	.word	0x08005b9d
 8005bf0:	08005b9d 	.word	0x08005b9d
 8005bf4:	08005d47 	.word	0x08005d47
 8005bf8:	08005b9d 	.word	0x08005b9d
 8005bfc:	08005c4d 	.word	0x08005c4d
 8005c00:	08005b9d 	.word	0x08005b9d
 8005c04:	08005b9d 	.word	0x08005b9d
 8005c08:	08005ce7 	.word	0x08005ce7
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	602a      	str	r2, [r5, #0]
 8005c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e09f      	b.n	8005d60 <_printf_i+0x1ec>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	682b      	ldr	r3, [r5, #0]
 8005c24:	0607      	lsls	r7, r0, #24
 8005c26:	f103 0104 	add.w	r1, r3, #4
 8005c2a:	6029      	str	r1, [r5, #0]
 8005c2c:	d501      	bpl.n	8005c32 <_printf_i+0xbe>
 8005c2e:	681e      	ldr	r6, [r3, #0]
 8005c30:	e003      	b.n	8005c3a <_printf_i+0xc6>
 8005c32:	0646      	lsls	r6, r0, #25
 8005c34:	d5fb      	bpl.n	8005c2e <_printf_i+0xba>
 8005c36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	da03      	bge.n	8005c46 <_printf_i+0xd2>
 8005c3e:	232d      	movs	r3, #45	; 0x2d
 8005c40:	4276      	negs	r6, r6
 8005c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c46:	485a      	ldr	r0, [pc, #360]	; (8005db0 <_printf_i+0x23c>)
 8005c48:	230a      	movs	r3, #10
 8005c4a:	e012      	b.n	8005c72 <_printf_i+0xfe>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	1d19      	adds	r1, r3, #4
 8005c52:	6029      	str	r1, [r5, #0]
 8005c54:	0605      	lsls	r5, r0, #24
 8005c56:	d501      	bpl.n	8005c5c <_printf_i+0xe8>
 8005c58:	681e      	ldr	r6, [r3, #0]
 8005c5a:	e002      	b.n	8005c62 <_printf_i+0xee>
 8005c5c:	0641      	lsls	r1, r0, #25
 8005c5e:	d5fb      	bpl.n	8005c58 <_printf_i+0xe4>
 8005c60:	881e      	ldrh	r6, [r3, #0]
 8005c62:	4853      	ldr	r0, [pc, #332]	; (8005db0 <_printf_i+0x23c>)
 8005c64:	2f6f      	cmp	r7, #111	; 0x6f
 8005c66:	bf0c      	ite	eq
 8005c68:	2308      	moveq	r3, #8
 8005c6a:	230a      	movne	r3, #10
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c72:	6865      	ldr	r5, [r4, #4]
 8005c74:	60a5      	str	r5, [r4, #8]
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	bfa2      	ittt	ge
 8005c7a:	6821      	ldrge	r1, [r4, #0]
 8005c7c:	f021 0104 	bicge.w	r1, r1, #4
 8005c80:	6021      	strge	r1, [r4, #0]
 8005c82:	b90e      	cbnz	r6, 8005c88 <_printf_i+0x114>
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d04b      	beq.n	8005d20 <_printf_i+0x1ac>
 8005c88:	4615      	mov	r5, r2
 8005c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c92:	5dc7      	ldrb	r7, [r0, r7]
 8005c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c98:	4637      	mov	r7, r6
 8005c9a:	42bb      	cmp	r3, r7
 8005c9c:	460e      	mov	r6, r1
 8005c9e:	d9f4      	bls.n	8005c8a <_printf_i+0x116>
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d10b      	bne.n	8005cbc <_printf_i+0x148>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	07de      	lsls	r6, r3, #31
 8005ca8:	d508      	bpl.n	8005cbc <_printf_i+0x148>
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	6861      	ldr	r1, [r4, #4]
 8005cae:	4299      	cmp	r1, r3
 8005cb0:	bfde      	ittt	le
 8005cb2:	2330      	movle	r3, #48	; 0x30
 8005cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cbc:	1b52      	subs	r2, r2, r5
 8005cbe:	6122      	str	r2, [r4, #16]
 8005cc0:	f8cd a000 	str.w	sl, [sp]
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	aa03      	add	r2, sp, #12
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f7ff fee4 	bl	8005a98 <_printf_common>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d14a      	bne.n	8005d6a <_printf_i+0x1f6>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	b004      	add	sp, #16
 8005cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	f043 0320 	orr.w	r3, r3, #32
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	4833      	ldr	r0, [pc, #204]	; (8005db4 <_printf_i+0x240>)
 8005ce8:	2778      	movs	r7, #120	; 0x78
 8005cea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	6829      	ldr	r1, [r5, #0]
 8005cf2:	061f      	lsls	r7, r3, #24
 8005cf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cf8:	d402      	bmi.n	8005d00 <_printf_i+0x18c>
 8005cfa:	065f      	lsls	r7, r3, #25
 8005cfc:	bf48      	it	mi
 8005cfe:	b2b6      	uxthmi	r6, r6
 8005d00:	07df      	lsls	r7, r3, #31
 8005d02:	bf48      	it	mi
 8005d04:	f043 0320 	orrmi.w	r3, r3, #32
 8005d08:	6029      	str	r1, [r5, #0]
 8005d0a:	bf48      	it	mi
 8005d0c:	6023      	strmi	r3, [r4, #0]
 8005d0e:	b91e      	cbnz	r6, 8005d18 <_printf_i+0x1a4>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	f023 0320 	bic.w	r3, r3, #32
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	2310      	movs	r3, #16
 8005d1a:	e7a7      	b.n	8005c6c <_printf_i+0xf8>
 8005d1c:	4824      	ldr	r0, [pc, #144]	; (8005db0 <_printf_i+0x23c>)
 8005d1e:	e7e4      	b.n	8005cea <_printf_i+0x176>
 8005d20:	4615      	mov	r5, r2
 8005d22:	e7bd      	b.n	8005ca0 <_printf_i+0x12c>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	6826      	ldr	r6, [r4, #0]
 8005d28:	6961      	ldr	r1, [r4, #20]
 8005d2a:	1d18      	adds	r0, r3, #4
 8005d2c:	6028      	str	r0, [r5, #0]
 8005d2e:	0635      	lsls	r5, r6, #24
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	d501      	bpl.n	8005d38 <_printf_i+0x1c4>
 8005d34:	6019      	str	r1, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <_printf_i+0x1ca>
 8005d38:	0670      	lsls	r0, r6, #25
 8005d3a:	d5fb      	bpl.n	8005d34 <_printf_i+0x1c0>
 8005d3c:	8019      	strh	r1, [r3, #0]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	4615      	mov	r5, r2
 8005d44:	e7bc      	b.n	8005cc0 <_printf_i+0x14c>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	1d1a      	adds	r2, r3, #4
 8005d4a:	602a      	str	r2, [r5, #0]
 8005d4c:	681d      	ldr	r5, [r3, #0]
 8005d4e:	6862      	ldr	r2, [r4, #4]
 8005d50:	2100      	movs	r1, #0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f7fa fa44 	bl	80001e0 <memchr>
 8005d58:	b108      	cbz	r0, 8005d5e <_printf_i+0x1ea>
 8005d5a:	1b40      	subs	r0, r0, r5
 8005d5c:	6060      	str	r0, [r4, #4]
 8005d5e:	6863      	ldr	r3, [r4, #4]
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	2300      	movs	r3, #0
 8005d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d68:	e7aa      	b.n	8005cc0 <_printf_i+0x14c>
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	462a      	mov	r2, r5
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4640      	mov	r0, r8
 8005d72:	47d0      	blx	sl
 8005d74:	3001      	adds	r0, #1
 8005d76:	d0ad      	beq.n	8005cd4 <_printf_i+0x160>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	079b      	lsls	r3, r3, #30
 8005d7c:	d413      	bmi.n	8005da6 <_printf_i+0x232>
 8005d7e:	68e0      	ldr	r0, [r4, #12]
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	4298      	cmp	r0, r3
 8005d84:	bfb8      	it	lt
 8005d86:	4618      	movlt	r0, r3
 8005d88:	e7a6      	b.n	8005cd8 <_printf_i+0x164>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	47d0      	blx	sl
 8005d94:	3001      	adds	r0, #1
 8005d96:	d09d      	beq.n	8005cd4 <_printf_i+0x160>
 8005d98:	3501      	adds	r5, #1
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	9903      	ldr	r1, [sp, #12]
 8005d9e:	1a5b      	subs	r3, r3, r1
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	dcf2      	bgt.n	8005d8a <_printf_i+0x216>
 8005da4:	e7eb      	b.n	8005d7e <_printf_i+0x20a>
 8005da6:	2500      	movs	r5, #0
 8005da8:	f104 0619 	add.w	r6, r4, #25
 8005dac:	e7f5      	b.n	8005d9a <_printf_i+0x226>
 8005dae:	bf00      	nop
 8005db0:	080062b5 	.word	0x080062b5
 8005db4:	080062c6 	.word	0x080062c6

08005db8 <__sflush_r>:
 8005db8:	898a      	ldrh	r2, [r1, #12]
 8005dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	0710      	lsls	r0, r2, #28
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	d458      	bmi.n	8005e78 <__sflush_r+0xc0>
 8005dc6:	684b      	ldr	r3, [r1, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dc05      	bgt.n	8005dd8 <__sflush_r+0x20>
 8005dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	dc02      	bgt.n	8005dd8 <__sflush_r+0x20>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dda:	2e00      	cmp	r6, #0
 8005ddc:	d0f9      	beq.n	8005dd2 <__sflush_r+0x1a>
 8005dde:	2300      	movs	r3, #0
 8005de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005de4:	682f      	ldr	r7, [r5, #0]
 8005de6:	6a21      	ldr	r1, [r4, #32]
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	d032      	beq.n	8005e52 <__sflush_r+0x9a>
 8005dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	075a      	lsls	r2, r3, #29
 8005df2:	d505      	bpl.n	8005e00 <__sflush_r+0x48>
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	1ac0      	subs	r0, r0, r3
 8005df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dfa:	b10b      	cbz	r3, 8005e00 <__sflush_r+0x48>
 8005dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dfe:	1ac0      	subs	r0, r0, r3
 8005e00:	2300      	movs	r3, #0
 8005e02:	4602      	mov	r2, r0
 8005e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e06:	6a21      	ldr	r1, [r4, #32]
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b0      	blx	r6
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	d106      	bne.n	8005e20 <__sflush_r+0x68>
 8005e12:	6829      	ldr	r1, [r5, #0]
 8005e14:	291d      	cmp	r1, #29
 8005e16:	d82b      	bhi.n	8005e70 <__sflush_r+0xb8>
 8005e18:	4a29      	ldr	r2, [pc, #164]	; (8005ec0 <__sflush_r+0x108>)
 8005e1a:	410a      	asrs	r2, r1
 8005e1c:	07d6      	lsls	r6, r2, #31
 8005e1e:	d427      	bmi.n	8005e70 <__sflush_r+0xb8>
 8005e20:	2200      	movs	r2, #0
 8005e22:	6062      	str	r2, [r4, #4]
 8005e24:	04d9      	lsls	r1, r3, #19
 8005e26:	6922      	ldr	r2, [r4, #16]
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	d504      	bpl.n	8005e36 <__sflush_r+0x7e>
 8005e2c:	1c42      	adds	r2, r0, #1
 8005e2e:	d101      	bne.n	8005e34 <__sflush_r+0x7c>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	b903      	cbnz	r3, 8005e36 <__sflush_r+0x7e>
 8005e34:	6560      	str	r0, [r4, #84]	; 0x54
 8005e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e38:	602f      	str	r7, [r5, #0]
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	d0c9      	beq.n	8005dd2 <__sflush_r+0x1a>
 8005e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e42:	4299      	cmp	r1, r3
 8005e44:	d002      	beq.n	8005e4c <__sflush_r+0x94>
 8005e46:	4628      	mov	r0, r5
 8005e48:	f7ff fbea 	bl	8005620 <_free_r>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8005e50:	e7c0      	b.n	8005dd4 <__sflush_r+0x1c>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b0      	blx	r6
 8005e58:	1c41      	adds	r1, r0, #1
 8005e5a:	d1c8      	bne.n	8005dee <__sflush_r+0x36>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0c5      	beq.n	8005dee <__sflush_r+0x36>
 8005e62:	2b1d      	cmp	r3, #29
 8005e64:	d001      	beq.n	8005e6a <__sflush_r+0xb2>
 8005e66:	2b16      	cmp	r3, #22
 8005e68:	d101      	bne.n	8005e6e <__sflush_r+0xb6>
 8005e6a:	602f      	str	r7, [r5, #0]
 8005e6c:	e7b1      	b.n	8005dd2 <__sflush_r+0x1a>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	e7ad      	b.n	8005dd4 <__sflush_r+0x1c>
 8005e78:	690f      	ldr	r7, [r1, #16]
 8005e7a:	2f00      	cmp	r7, #0
 8005e7c:	d0a9      	beq.n	8005dd2 <__sflush_r+0x1a>
 8005e7e:	0793      	lsls	r3, r2, #30
 8005e80:	680e      	ldr	r6, [r1, #0]
 8005e82:	bf08      	it	eq
 8005e84:	694b      	ldreq	r3, [r1, #20]
 8005e86:	600f      	str	r7, [r1, #0]
 8005e88:	bf18      	it	ne
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	eba6 0807 	sub.w	r8, r6, r7
 8005e90:	608b      	str	r3, [r1, #8]
 8005e92:	f1b8 0f00 	cmp.w	r8, #0
 8005e96:	dd9c      	ble.n	8005dd2 <__sflush_r+0x1a>
 8005e98:	6a21      	ldr	r1, [r4, #32]
 8005e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e9c:	4643      	mov	r3, r8
 8005e9e:	463a      	mov	r2, r7
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b0      	blx	r6
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	dc06      	bgt.n	8005eb6 <__sflush_r+0xfe>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eae:	81a3      	strh	r3, [r4, #12]
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	e78e      	b.n	8005dd4 <__sflush_r+0x1c>
 8005eb6:	4407      	add	r7, r0
 8005eb8:	eba8 0800 	sub.w	r8, r8, r0
 8005ebc:	e7e9      	b.n	8005e92 <__sflush_r+0xda>
 8005ebe:	bf00      	nop
 8005ec0:	dfbffffe 	.word	0xdfbffffe

08005ec4 <_fflush_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	690b      	ldr	r3, [r1, #16]
 8005ec8:	4605      	mov	r5, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	b913      	cbnz	r3, 8005ed4 <_fflush_r+0x10>
 8005ece:	2500      	movs	r5, #0
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	b118      	cbz	r0, 8005ede <_fflush_r+0x1a>
 8005ed6:	6a03      	ldr	r3, [r0, #32]
 8005ed8:	b90b      	cbnz	r3, 8005ede <_fflush_r+0x1a>
 8005eda:	f7ff fa8b 	bl	80053f4 <__sinit>
 8005ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f3      	beq.n	8005ece <_fflush_r+0xa>
 8005ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ee8:	07d0      	lsls	r0, r2, #31
 8005eea:	d404      	bmi.n	8005ef6 <_fflush_r+0x32>
 8005eec:	0599      	lsls	r1, r3, #22
 8005eee:	d402      	bmi.n	8005ef6 <_fflush_r+0x32>
 8005ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ef2:	f7ff fb84 	bl	80055fe <__retarget_lock_acquire_recursive>
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	4621      	mov	r1, r4
 8005efa:	f7ff ff5d 	bl	8005db8 <__sflush_r>
 8005efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f00:	07da      	lsls	r2, r3, #31
 8005f02:	4605      	mov	r5, r0
 8005f04:	d4e4      	bmi.n	8005ed0 <_fflush_r+0xc>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	059b      	lsls	r3, r3, #22
 8005f0a:	d4e1      	bmi.n	8005ed0 <_fflush_r+0xc>
 8005f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f0e:	f7ff fb77 	bl	8005600 <__retarget_lock_release_recursive>
 8005f12:	e7dd      	b.n	8005ed0 <_fflush_r+0xc>

08005f14 <__swbuf_r>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	460e      	mov	r6, r1
 8005f18:	4614      	mov	r4, r2
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	b118      	cbz	r0, 8005f26 <__swbuf_r+0x12>
 8005f1e:	6a03      	ldr	r3, [r0, #32]
 8005f20:	b90b      	cbnz	r3, 8005f26 <__swbuf_r+0x12>
 8005f22:	f7ff fa67 	bl	80053f4 <__sinit>
 8005f26:	69a3      	ldr	r3, [r4, #24]
 8005f28:	60a3      	str	r3, [r4, #8]
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	071a      	lsls	r2, r3, #28
 8005f2e:	d525      	bpl.n	8005f7c <__swbuf_r+0x68>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	b31b      	cbz	r3, 8005f7c <__swbuf_r+0x68>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	6922      	ldr	r2, [r4, #16]
 8005f38:	1a98      	subs	r0, r3, r2
 8005f3a:	6963      	ldr	r3, [r4, #20]
 8005f3c:	b2f6      	uxtb	r6, r6
 8005f3e:	4283      	cmp	r3, r0
 8005f40:	4637      	mov	r7, r6
 8005f42:	dc04      	bgt.n	8005f4e <__swbuf_r+0x3a>
 8005f44:	4621      	mov	r1, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7ff ffbc 	bl	8005ec4 <_fflush_r>
 8005f4c:	b9e0      	cbnz	r0, 8005f88 <__swbuf_r+0x74>
 8005f4e:	68a3      	ldr	r3, [r4, #8]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	60a3      	str	r3, [r4, #8]
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	6022      	str	r2, [r4, #0]
 8005f5a:	701e      	strb	r6, [r3, #0]
 8005f5c:	6962      	ldr	r2, [r4, #20]
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d004      	beq.n	8005f6e <__swbuf_r+0x5a>
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	07db      	lsls	r3, r3, #31
 8005f68:	d506      	bpl.n	8005f78 <__swbuf_r+0x64>
 8005f6a:	2e0a      	cmp	r6, #10
 8005f6c:	d104      	bne.n	8005f78 <__swbuf_r+0x64>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f7ff ffa7 	bl	8005ec4 <_fflush_r>
 8005f76:	b938      	cbnz	r0, 8005f88 <__swbuf_r+0x74>
 8005f78:	4638      	mov	r0, r7
 8005f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 f806 	bl	8005f90 <__swsetup_r>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d0d5      	beq.n	8005f34 <__swbuf_r+0x20>
 8005f88:	f04f 37ff 	mov.w	r7, #4294967295
 8005f8c:	e7f4      	b.n	8005f78 <__swbuf_r+0x64>
	...

08005f90 <__swsetup_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4b2a      	ldr	r3, [pc, #168]	; (800603c <__swsetup_r+0xac>)
 8005f94:	4605      	mov	r5, r0
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	460c      	mov	r4, r1
 8005f9a:	b118      	cbz	r0, 8005fa4 <__swsetup_r+0x14>
 8005f9c:	6a03      	ldr	r3, [r0, #32]
 8005f9e:	b90b      	cbnz	r3, 8005fa4 <__swsetup_r+0x14>
 8005fa0:	f7ff fa28 	bl	80053f4 <__sinit>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005faa:	0718      	lsls	r0, r3, #28
 8005fac:	d422      	bmi.n	8005ff4 <__swsetup_r+0x64>
 8005fae:	06d9      	lsls	r1, r3, #27
 8005fb0:	d407      	bmi.n	8005fc2 <__swsetup_r+0x32>
 8005fb2:	2309      	movs	r3, #9
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e034      	b.n	800602c <__swsetup_r+0x9c>
 8005fc2:	0758      	lsls	r0, r3, #29
 8005fc4:	d512      	bpl.n	8005fec <__swsetup_r+0x5c>
 8005fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc8:	b141      	cbz	r1, 8005fdc <__swsetup_r+0x4c>
 8005fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d002      	beq.n	8005fd8 <__swsetup_r+0x48>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7ff fb24 	bl	8005620 <_free_r>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6363      	str	r3, [r4, #52]	; 0x34
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f043 0308 	orr.w	r3, r3, #8
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	b94b      	cbnz	r3, 800600c <__swsetup_r+0x7c>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006002:	d003      	beq.n	800600c <__swsetup_r+0x7c>
 8006004:	4621      	mov	r1, r4
 8006006:	4628      	mov	r0, r5
 8006008:	f000 f850 	bl	80060ac <__smakebuf_r>
 800600c:	89a0      	ldrh	r0, [r4, #12]
 800600e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006012:	f010 0301 	ands.w	r3, r0, #1
 8006016:	d00a      	beq.n	800602e <__swsetup_r+0x9e>
 8006018:	2300      	movs	r3, #0
 800601a:	60a3      	str	r3, [r4, #8]
 800601c:	6963      	ldr	r3, [r4, #20]
 800601e:	425b      	negs	r3, r3
 8006020:	61a3      	str	r3, [r4, #24]
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	b943      	cbnz	r3, 8006038 <__swsetup_r+0xa8>
 8006026:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800602a:	d1c4      	bne.n	8005fb6 <__swsetup_r+0x26>
 800602c:	bd38      	pop	{r3, r4, r5, pc}
 800602e:	0781      	lsls	r1, r0, #30
 8006030:	bf58      	it	pl
 8006032:	6963      	ldrpl	r3, [r4, #20]
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	e7f4      	b.n	8006022 <__swsetup_r+0x92>
 8006038:	2000      	movs	r0, #0
 800603a:	e7f7      	b.n	800602c <__swsetup_r+0x9c>
 800603c:	20000068 	.word	0x20000068

08006040 <_sbrk_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d06      	ldr	r5, [pc, #24]	; (800605c <_sbrk_r+0x1c>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fa fd66 	bl	8000b1c <_sbrk>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_sbrk_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_sbrk_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	20004ba8 	.word	0x20004ba8

08006060 <__swhatbuf_r>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	460c      	mov	r4, r1
 8006064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006068:	2900      	cmp	r1, #0
 800606a:	b096      	sub	sp, #88	; 0x58
 800606c:	4615      	mov	r5, r2
 800606e:	461e      	mov	r6, r3
 8006070:	da0d      	bge.n	800608e <__swhatbuf_r+0x2e>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	bf0c      	ite	eq
 800607e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006082:	2340      	movne	r3, #64	; 0x40
 8006084:	2000      	movs	r0, #0
 8006086:	6031      	str	r1, [r6, #0]
 8006088:	602b      	str	r3, [r5, #0]
 800608a:	b016      	add	sp, #88	; 0x58
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	466a      	mov	r2, sp
 8006090:	f000 f848 	bl	8006124 <_fstat_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	dbec      	blt.n	8006072 <__swhatbuf_r+0x12>
 8006098:	9901      	ldr	r1, [sp, #4]
 800609a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800609e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80060a2:	4259      	negs	r1, r3
 80060a4:	4159      	adcs	r1, r3
 80060a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060aa:	e7eb      	b.n	8006084 <__swhatbuf_r+0x24>

080060ac <__smakebuf_r>:
 80060ac:	898b      	ldrh	r3, [r1, #12]
 80060ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060b0:	079d      	lsls	r5, r3, #30
 80060b2:	4606      	mov	r6, r0
 80060b4:	460c      	mov	r4, r1
 80060b6:	d507      	bpl.n	80060c8 <__smakebuf_r+0x1c>
 80060b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	2301      	movs	r3, #1
 80060c2:	6163      	str	r3, [r4, #20]
 80060c4:	b002      	add	sp, #8
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	ab01      	add	r3, sp, #4
 80060ca:	466a      	mov	r2, sp
 80060cc:	f7ff ffc8 	bl	8006060 <__swhatbuf_r>
 80060d0:	9900      	ldr	r1, [sp, #0]
 80060d2:	4605      	mov	r5, r0
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff fb0f 	bl	80056f8 <_malloc_r>
 80060da:	b948      	cbnz	r0, 80060f0 <__smakebuf_r+0x44>
 80060dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e0:	059a      	lsls	r2, r3, #22
 80060e2:	d4ef      	bmi.n	80060c4 <__smakebuf_r+0x18>
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	f043 0302 	orr.w	r3, r3, #2
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	e7e3      	b.n	80060b8 <__smakebuf_r+0xc>
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	6163      	str	r3, [r4, #20]
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	6120      	str	r0, [r4, #16]
 8006102:	b15b      	cbz	r3, 800611c <__smakebuf_r+0x70>
 8006104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f81d 	bl	8006148 <_isatty_r>
 800610e:	b128      	cbz	r0, 800611c <__smakebuf_r+0x70>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	431d      	orrs	r5, r3
 8006120:	81a5      	strh	r5, [r4, #12]
 8006122:	e7cf      	b.n	80060c4 <__smakebuf_r+0x18>

08006124 <_fstat_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4d07      	ldr	r5, [pc, #28]	; (8006144 <_fstat_r+0x20>)
 8006128:	2300      	movs	r3, #0
 800612a:	4604      	mov	r4, r0
 800612c:	4608      	mov	r0, r1
 800612e:	4611      	mov	r1, r2
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	f7fa fcca 	bl	8000aca <_fstat>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d102      	bne.n	8006140 <_fstat_r+0x1c>
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	b103      	cbz	r3, 8006140 <_fstat_r+0x1c>
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	bf00      	nop
 8006144:	20004ba8 	.word	0x20004ba8

08006148 <_isatty_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d06      	ldr	r5, [pc, #24]	; (8006164 <_isatty_r+0x1c>)
 800614c:	2300      	movs	r3, #0
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
 8006152:	602b      	str	r3, [r5, #0]
 8006154:	f7fa fcc9 	bl	8000aea <_isatty>
 8006158:	1c43      	adds	r3, r0, #1
 800615a:	d102      	bne.n	8006162 <_isatty_r+0x1a>
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	b103      	cbz	r3, 8006162 <_isatty_r+0x1a>
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	bd38      	pop	{r3, r4, r5, pc}
 8006164:	20004ba8 	.word	0x20004ba8

08006168 <_init>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr

08006174 <_fini>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr
